
ECG_SDCard_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025b68  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004f0c  08025d68  08025d68  00035d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  0802ac74  0802ac74  0003ac74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802ac8c  0802ac8c  0113993c  2**0
                  CONTENTS
  5 .ARM          00000008  0802ac8c  0802ac8c  0003ac8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0802ac94  0802ac94  0113993c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000018  0802ac94  0802ac94  0003ac94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0802acac  0802acac  0003acac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000138  20000000  0802acb4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00021164  20000138  0802adec  00040138  2**2
                  ALLOC
 11 ._user_heap_stack 00002004  2002129c  0802adec  0004129c  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0113993c  2**0
                  CONTENTS, READONLY
 13 ExtFlashSection 010e79d0  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 FontFlashSection 00001ed0  910e79d0  910e79d0  011379d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 TextFlashSection 0000009c  910e98a0  910e98a0  011398a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_line   0006452b  00000000  00000000  0113996a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_info   000fb094  00000000  00000000  0119de95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 000199e8  00000000  00000000  01298f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003690  00000000  00000000  012b2918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00159f8b  00000000  00000000  012b5fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00006df0  00000000  00000000  0140ff38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  00040f7d  00000000  00000000  01416d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  01457ca5  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000a19c  00000000  00000000  01457d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    0003aeb9  00000000  00000000  01461f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000138 	.word	0x20000138
 800021c:	00000000 	.word	0x00000000
 8000220:	08025d50 	.word	0x08025d50

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000013c 	.word	0x2000013c
 800023c:	08025d50 	.word	0x08025d50

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800061c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005ea:	e003      	b.n	80005f4 <LoopCopyDataInit>

080005ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005f2:	3104      	adds	r1, #4

080005f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005f4:	480b      	ldr	r0, [pc, #44]	; (8000624 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005fc:	d3f6      	bcc.n	80005ec <CopyDataInit>
  ldr  r2, =_sbss
 80005fe:	4a0b      	ldr	r2, [pc, #44]	; (800062c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000600:	e002      	b.n	8000608 <LoopFillZerobss>

08000602 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000602:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000604:	f842 3b04 	str.w	r3, [r2], #4

08000608 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800060a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800060c:	d3f9      	bcc.n	8000602 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800060e:	f005 f8fd 	bl	800580c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000612:	f024 fb35 	bl	8024c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000616:	f001 fba3 	bl	8001d60 <main>
  bx  lr    
 800061a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800061c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000620:	0802acb4 	.word	0x0802acb4
  ldr  r0, =_sdata
 8000624:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000628:	20000138 	.word	0x20000138
  ldr  r2, =_sbss
 800062c:	20000138 	.word	0x20000138
  ldr  r3, = _ebss
 8000630:	2002129c 	.word	0x2002129c

08000634 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000634:	e7fe      	b.n	8000634 <ADC_IRQHandler>
	...

08000638 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8000638:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800063a:	4903      	ldr	r1, [pc, #12]	; (8000648 <MX_FATFS_Init+0x10>)
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <MX_FATFS_Init+0x14>)
 800063e:	f00a fc85 	bl	800af4c <FATFS_LinkDriver>
 8000642:	4b03      	ldr	r3, [pc, #12]	; (8000650 <MX_FATFS_Init+0x18>)
 8000644:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8000646:	bd08      	pop	{r3, pc}
 8000648:	200005b8 	.word	0x200005b8
 800064c:	08025da8 	.word	0x08025da8
 8000650:	200005bc 	.word	0x200005bc

08000654 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8000654:	2000      	movs	r0, #0
 8000656:	4770      	bx	lr

08000658 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8000658:	b508      	push	{r3, lr}
 800065a:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800065c:	460a      	mov	r2, r1
 800065e:	4601      	mov	r1, r0
 8000660:	4803      	ldr	r0, [pc, #12]	; (8000670 <BSP_SD_ReadBlocks_DMA+0x18>)
 8000662:	f008 f8a3 	bl	80087ac <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8000666:	3800      	subs	r0, #0
 8000668:	bf18      	it	ne
 800066a:	2001      	movne	r0, #1
 800066c:	bd08      	pop	{r3, pc}
 800066e:	bf00      	nop
 8000670:	20005840 	.word	0x20005840

08000674 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8000674:	b508      	push	{r3, lr}
 8000676:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8000678:	460a      	mov	r2, r1
 800067a:	4601      	mov	r1, r0
 800067c:	4803      	ldr	r0, [pc, #12]	; (800068c <BSP_SD_WriteBlocks_DMA+0x18>)
 800067e:	f008 f925 	bl	80088cc <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8000682:	3800      	subs	r0, #0
 8000684:	bf18      	it	ne
 8000686:	2001      	movne	r0, #1
 8000688:	bd08      	pop	{r3, pc}
 800068a:	bf00      	nop
 800068c:	20005840 	.word	0x20005840

08000690 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8000690:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8000692:	4803      	ldr	r0, [pc, #12]	; (80006a0 <BSP_SD_GetCardState+0x10>)
 8000694:	f008 fc3a 	bl	8008f0c <HAL_SD_GetCardState>
}
 8000698:	3804      	subs	r0, #4
 800069a:	bf18      	it	ne
 800069c:	2001      	movne	r0, #1
 800069e:	bd08      	pop	{r3, pc}
 80006a0:	20005840 	.word	0x20005840

080006a4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80006a4:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 80006a6:	4801      	ldr	r0, [pc, #4]	; (80006ac <BSP_SD_GetCardInfo+0x8>)
 80006a8:	f008 bb93 	b.w	8008dd2 <HAL_SD_GetCardInfo>
 80006ac:	20005840 	.word	0x20005840

080006b0 <BSP_SD_AbortCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{

}
 80006b0:	4770      	bx	lr

080006b2 <HAL_SD_AbortCallback>:
{
 80006b2:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 80006b4:	f7ff fffc 	bl	80006b0 <BSP_SD_AbortCallback>
}
 80006b8:	bd08      	pop	{r3, pc}

080006ba <HAL_SD_TxCpltCallback>:
{
 80006ba:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 80006bc:	f000 f918 	bl	80008f0 <BSP_SD_WriteCpltCallback>
}
 80006c0:	bd08      	pop	{r3, pc}

080006c2 <HAL_SD_RxCpltCallback>:
{
 80006c2:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 80006c4:	f000 f926 	bl	8000914 <BSP_SD_ReadCpltCallback>
}
 80006c8:	bd08      	pop	{r3, pc}

080006ca <BSP_SD_IsDetected>:
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 80006ca:	2301      	movs	r3, #1
{
 80006cc:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 80006ce:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80006d2:	f000 f81f 	bl	8000714 <BSP_PlatformIsDetected>
 80006d6:	b908      	cbnz	r0, 80006dc <BSP_SD_IsDetected+0x12>
  {
    status = SD_NOT_PRESENT;
 80006d8:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 80006dc:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80006e0:	b003      	add	sp, #12
 80006e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080006e8 <BSP_SD_Init>:
{
 80006e8:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80006ea:	f7ff ffee 	bl	80006ca <BSP_SD_IsDetected>
 80006ee:	2801      	cmp	r0, #1
 80006f0:	d10c      	bne.n	800070c <BSP_SD_Init+0x24>
  sd_state = HAL_SD_Init(&hsd2);
 80006f2:	4807      	ldr	r0, [pc, #28]	; (8000710 <BSP_SD_Init+0x28>)
 80006f4:	f008 fb52 	bl	8008d9c <HAL_SD_Init>
  if (sd_state == MSD_OK)
 80006f8:	b938      	cbnz	r0, 800070a <BSP_SD_Init+0x22>
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80006fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006fe:	4804      	ldr	r0, [pc, #16]	; (8000710 <BSP_SD_Init+0x28>)
 8000700:	f008 fb7a 	bl	8008df8 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 8000704:	3800      	subs	r0, #0
 8000706:	bf18      	it	ne
 8000708:	2001      	movne	r0, #1
}
 800070a:	bd08      	pop	{r3, pc}
    return MSD_ERROR_SD_NOT_PRESENT;
 800070c:	2002      	movs	r0, #2
 800070e:	e7fc      	b.n	800070a <BSP_SD_Init+0x22>
 8000710:	20005840 	.word	0x20005840

08000714 <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8000714:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000718:	4803      	ldr	r0, [pc, #12]	; (8000728 <BSP_PlatformIsDetected+0x14>)
uint8_t	BSP_PlatformIsDetected(void) {
 800071a:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800071c:	f006 f9ea 	bl	8006af4 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 8000720:	fab0 f080 	clz	r0, r0
 8000724:	0940      	lsrs	r0, r0, #5
 8000726:	bd08      	pop	{r3, pc}
 8000728:	40022000 	.word	0x40022000

0800072c <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800072c:	4b13      	ldr	r3, [pc, #76]	; (800077c <SD_ioctl+0x50>)
{
 800072e:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000730:	781c      	ldrb	r4, [r3, #0]
{
 8000732:	b089      	sub	sp, #36	; 0x24
 8000734:	4615      	mov	r5, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000736:	f014 0401 	ands.w	r4, r4, #1
 800073a:	d11b      	bne.n	8000774 <SD_ioctl+0x48>

  switch (cmd)
 800073c:	2903      	cmp	r1, #3
 800073e:	d803      	bhi.n	8000748 <SD_ioctl+0x1c>
 8000740:	e8df f001 	tbb	[pc, r1]
 8000744:	120c061a 	.word	0x120c061a
 8000748:	2404      	movs	r4, #4
  default:
    res = RES_PARERR;
  }

  return res;
}
 800074a:	4620      	mov	r0, r4
 800074c:	b009      	add	sp, #36	; 0x24
 800074e:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8000750:	4668      	mov	r0, sp
 8000752:	f7ff ffa7 	bl	80006a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8000756:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8000758:	602b      	str	r3, [r5, #0]
    break;
 800075a:	e7f6      	b.n	800074a <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 800075c:	4668      	mov	r0, sp
 800075e:	f7ff ffa1 	bl	80006a4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8000762:	9b07      	ldr	r3, [sp, #28]
 8000764:	802b      	strh	r3, [r5, #0]
    break;
 8000766:	e7f0      	b.n	800074a <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8000768:	4668      	mov	r0, sp
 800076a:	f7ff ff9b 	bl	80006a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800076e:	9b07      	ldr	r3, [sp, #28]
 8000770:	0a5b      	lsrs	r3, r3, #9
 8000772:	e7f1      	b.n	8000758 <SD_ioctl+0x2c>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000774:	2403      	movs	r4, #3
 8000776:	e7e8      	b.n	800074a <SD_ioctl+0x1e>
    res = RES_OK;
 8000778:	460c      	mov	r4, r1
 800077a:	e7e6      	b.n	800074a <SD_ioctl+0x1e>
 800077c:	20000004 	.word	0x20000004

08000780 <SD_status>:
{
 8000780:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8000782:	2301      	movs	r3, #1
 8000784:	4c05      	ldr	r4, [pc, #20]	; (800079c <SD_status+0x1c>)
 8000786:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8000788:	f7ff ff82 	bl	8000690 <BSP_SD_GetCardState>
 800078c:	b918      	cbnz	r0, 8000796 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 800078e:	7823      	ldrb	r3, [r4, #0]
 8000790:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8000794:	7023      	strb	r3, [r4, #0]
  return Stat;
 8000796:	7820      	ldrb	r0, [r4, #0]
}
 8000798:	bd10      	pop	{r4, pc}
 800079a:	bf00      	nop
 800079c:	20000004 	.word	0x20000004

080007a0 <SD_CheckStatusWithTimeout.constprop.0>:
static int SD_CheckStatusWithTimeout(uint32_t timeout)
 80007a0:	b538      	push	{r3, r4, r5, lr}
  timer = osKernelGetTickCount();
 80007a2:	f00a fc3d 	bl	800b020 <osKernelGetTickCount>
  while( osKernelGetTickCount() - timer < timeout)
 80007a6:	f247 552f 	movw	r5, #29999	; 0x752f
  timer = osKernelGetTickCount();
 80007aa:	4604      	mov	r4, r0
  while( osKernelGetTickCount() - timer < timeout)
 80007ac:	f00a fc38 	bl	800b020 <osKernelGetTickCount>
 80007b0:	1b03      	subs	r3, r0, r4
 80007b2:	42ab      	cmp	r3, r5
 80007b4:	d902      	bls.n	80007bc <SD_CheckStatusWithTimeout.constprop.0+0x1c>
  return -1;
 80007b6:	f04f 30ff 	mov.w	r0, #4294967295
 80007ba:	e003      	b.n	80007c4 <SD_CheckStatusWithTimeout.constprop.0+0x24>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80007bc:	f7ff ff68 	bl	8000690 <BSP_SD_GetCardState>
 80007c0:	2800      	cmp	r0, #0
 80007c2:	d1f3      	bne.n	80007ac <SD_CheckStatusWithTimeout.constprop.0+0xc>
}
 80007c4:	bd38      	pop	{r3, r4, r5, pc}
	...

080007c8 <SD_write>:
{
 80007c8:	b530      	push	{r4, r5, lr}
 80007ca:	b085      	sub	sp, #20
 80007cc:	460c      	mov	r4, r1
 80007ce:	9201      	str	r2, [sp, #4]
 80007d0:	9300      	str	r3, [sp, #0]
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80007d2:	f7ff ffe5 	bl	80007a0 <SD_CheckStatusWithTimeout.constprop.0>
 80007d6:	2800      	cmp	r0, #0
 80007d8:	e9dd 2100 	ldrd	r2, r1, [sp]
 80007dc:	da02      	bge.n	80007e4 <SD_write+0x1c>
  DRESULT res = RES_ERROR;
 80007de:	2001      	movs	r0, #1
}
 80007e0:	b005      	add	sp, #20
 80007e2:	bd30      	pop	{r4, r5, pc}
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80007e4:	4620      	mov	r0, r4
 80007e6:	f7ff ff45 	bl	8000674 <BSP_SD_WriteBlocks_DMA>
 80007ea:	4602      	mov	r2, r0
 80007ec:	2800      	cmp	r0, #0
 80007ee:	d1f6      	bne.n	80007de <SD_write+0x16>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80007f0:	480e      	ldr	r0, [pc, #56]	; (800082c <SD_write+0x64>)
 80007f2:	f247 5330 	movw	r3, #30000	; 0x7530
 80007f6:	f10d 010e 	add.w	r1, sp, #14
 80007fa:	6800      	ldr	r0, [r0, #0]
 80007fc:	f00a fe04 	bl	800b408 <osMessageQueueGet>
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8000800:	2800      	cmp	r0, #0
 8000802:	d1ec      	bne.n	80007de <SD_write+0x16>
 8000804:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8000808:	2b02      	cmp	r3, #2
 800080a:	d1e8      	bne.n	80007de <SD_write+0x16>
        timer = osKernelGetTickCount();
 800080c:	f00a fc08 	bl	800b020 <osKernelGetTickCount>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8000810:	f247 552f 	movw	r5, #29999	; 0x752f
        timer = osKernelGetTickCount();
 8000814:	4604      	mov	r4, r0
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8000816:	f00a fc03 	bl	800b020 <osKernelGetTickCount>
 800081a:	1b03      	subs	r3, r0, r4
 800081c:	42ab      	cmp	r3, r5
 800081e:	d8de      	bhi.n	80007de <SD_write+0x16>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8000820:	f7ff ff36 	bl	8000690 <BSP_SD_GetCardState>
 8000824:	2800      	cmp	r0, #0
 8000826:	d1f6      	bne.n	8000816 <SD_write+0x4e>
 8000828:	e7da      	b.n	80007e0 <SD_write+0x18>
 800082a:	bf00      	nop
 800082c:	200005c0 	.word	0x200005c0

08000830 <SD_read>:
{
 8000830:	b530      	push	{r4, r5, lr}
 8000832:	b085      	sub	sp, #20
 8000834:	460c      	mov	r4, r1
 8000836:	9201      	str	r2, [sp, #4]
 8000838:	9300      	str	r3, [sp, #0]
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800083a:	f7ff ffb1 	bl	80007a0 <SD_CheckStatusWithTimeout.constprop.0>
 800083e:	2800      	cmp	r0, #0
 8000840:	e9dd 2100 	ldrd	r2, r1, [sp]
 8000844:	da02      	bge.n	800084c <SD_read+0x1c>
  DRESULT res = RES_ERROR;
 8000846:	2001      	movs	r0, #1
}
 8000848:	b005      	add	sp, #20
 800084a:	bd30      	pop	{r4, r5, pc}
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800084c:	4620      	mov	r0, r4
 800084e:	f7ff ff03 	bl	8000658 <BSP_SD_ReadBlocks_DMA>
    if (ret == MSD_OK) {
 8000852:	4602      	mov	r2, r0
 8000854:	2800      	cmp	r0, #0
 8000856:	d1f6      	bne.n	8000846 <SD_read+0x16>
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8000858:	480e      	ldr	r0, [pc, #56]	; (8000894 <SD_read+0x64>)
 800085a:	f247 5330 	movw	r3, #30000	; 0x7530
 800085e:	f10d 010e 	add.w	r1, sp, #14
 8000862:	6800      	ldr	r0, [r0, #0]
 8000864:	f00a fdd0 	bl	800b408 <osMessageQueueGet>
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8000868:	2800      	cmp	r0, #0
 800086a:	d1ec      	bne.n	8000846 <SD_read+0x16>
 800086c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d1e8      	bne.n	8000846 <SD_read+0x16>
            timer = osKernelGetTickCount();
 8000874:	f00a fbd4 	bl	800b020 <osKernelGetTickCount>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8000878:	f247 552f 	movw	r5, #29999	; 0x752f
            timer = osKernelGetTickCount();
 800087c:	4604      	mov	r4, r0
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800087e:	f00a fbcf 	bl	800b020 <osKernelGetTickCount>
 8000882:	1b03      	subs	r3, r0, r4
 8000884:	42ab      	cmp	r3, r5
 8000886:	d8de      	bhi.n	8000846 <SD_read+0x16>
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8000888:	f7ff ff02 	bl	8000690 <BSP_SD_GetCardState>
 800088c:	2800      	cmp	r0, #0
 800088e:	d1f6      	bne.n	800087e <SD_read+0x4e>
 8000890:	e7da      	b.n	8000848 <SD_read+0x18>
 8000892:	bf00      	nop
 8000894:	200005c0 	.word	0x200005c0

08000898 <SD_initialize>:
{
 8000898:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 800089a:	4c13      	ldr	r4, [pc, #76]	; (80008e8 <SD_initialize+0x50>)
 800089c:	2501      	movs	r5, #1
 800089e:	7025      	strb	r5, [r4, #0]
  if(osKernelGetState() == osKernelRunning)
 80008a0:	f00a fb8e 	bl	800afc0 <osKernelGetState>
 80008a4:	2802      	cmp	r0, #2
 80008a6:	d11d      	bne.n	80008e4 <SD_initialize+0x4c>
    if(BSP_SD_Init() == MSD_OK)
 80008a8:	f7ff ff1e 	bl	80006e8 <BSP_SD_Init>
 80008ac:	b950      	cbnz	r0, 80008c4 <SD_initialize+0x2c>
  Stat = STA_NOINIT;
 80008ae:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80008b0:	f7ff feee 	bl	8000690 <BSP_SD_GetCardState>
 80008b4:	b918      	cbnz	r0, 80008be <SD_initialize+0x26>
    Stat &= ~STA_NOINIT;
 80008b6:	7823      	ldrb	r3, [r4, #0]
 80008b8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80008bc:	7023      	strb	r3, [r4, #0]
  return Stat;
 80008be:	7823      	ldrb	r3, [r4, #0]
 80008c0:	b2db      	uxtb	r3, r3
      Stat = SD_CheckStatus(lun);
 80008c2:	7023      	strb	r3, [r4, #0]
    if (Stat != STA_NOINIT)
 80008c4:	7823      	ldrb	r3, [r4, #0]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d00c      	beq.n	80008e4 <SD_initialize+0x4c>
      if (SDQueueID == NULL)
 80008ca:	4d08      	ldr	r5, [pc, #32]	; (80008ec <SD_initialize+0x54>)
 80008cc:	682a      	ldr	r2, [r5, #0]
 80008ce:	b94a      	cbnz	r2, 80008e4 <SD_initialize+0x4c>
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 80008d0:	2102      	movs	r1, #2
 80008d2:	200a      	movs	r0, #10
 80008d4:	f00a fd10 	bl	800b2f8 <osMessageQueueNew>
 80008d8:	6028      	str	r0, [r5, #0]
      if (SDQueueID == NULL)
 80008da:	b918      	cbnz	r0, 80008e4 <SD_initialize+0x4c>
        Stat |= STA_NOINIT;
 80008dc:	7823      	ldrb	r3, [r4, #0]
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	7023      	strb	r3, [r4, #0]
  return Stat;
 80008e4:	7820      	ldrb	r0, [r4, #0]
}
 80008e6:	bd38      	pop	{r3, r4, r5, pc}
 80008e8:	20000004 	.word	0x20000004
 80008ec:	200005c0 	.word	0x200005c0

080008f0 <BSP_SD_WriteCpltCallback>:
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 80008f0:	2302      	movs	r3, #2
{
 80008f2:	b507      	push	{r0, r1, r2, lr}
   const uint16_t msg = WRITE_CPLT_MSG;
 80008f4:	f8ad 3006 	strh.w	r3, [sp, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80008f8:	2300      	movs	r3, #0
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <BSP_SD_WriteCpltCallback+0x20>)
 80008fc:	f10d 0106 	add.w	r1, sp, #6
 8000900:	461a      	mov	r2, r3
 8000902:	6800      	ldr	r0, [r0, #0]
 8000904:	f00a fd3e 	bl	800b384 <osMessageQueuePut>
#endif
}
 8000908:	b003      	add	sp, #12
 800090a:	f85d fb04 	ldr.w	pc, [sp], #4
 800090e:	bf00      	nop
 8000910:	200005c0 	.word	0x200005c0

08000914 <BSP_SD_ReadCpltCallback>:
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8000914:	2301      	movs	r3, #1
{
 8000916:	b507      	push	{r0, r1, r2, lr}
   const uint16_t msg = READ_CPLT_MSG;
 8000918:	f8ad 3006 	strh.w	r3, [sp, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800091c:	2300      	movs	r3, #0
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <BSP_SD_ReadCpltCallback+0x20>)
 8000920:	f10d 0106 	add.w	r1, sp, #6
 8000924:	461a      	mov	r2, r3
 8000926:	6800      	ldr	r0, [r0, #0]
 8000928:	f00a fd2c 	bl	800b384 <osMessageQueuePut>
#endif
}
 800092c:	b003      	add	sp, #12
 800092e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000932:	bf00      	nop
 8000934:	200005c0 	.word	0x200005c0

08000938 <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8000938:	f000 bfce 	b.w	80018d8 <touchgfx_init>

0800093c <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800093c:	f001 b83e 	b.w	80019bc <touchgfx_taskEntry>

08000940 <BSP_PB_Init>:
    __weak void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
    {
        GPIO_InitTypeDef gpio_init_structure;

        /* Enable the BUTTON clock */
        BUTTON_GPIO_CLK_ENABLE();
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <BSP_PB_Init+0x60>)
 8000942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000944:	f042 0201 	orr.w	r2, r2, #1
    {
 8000948:	b510      	push	{r4, lr}
        BUTTON_GPIO_CLK_ENABLE();
 800094a:	631a      	str	r2, [r3, #48]	; 0x30
    {
 800094c:	b086      	sub	sp, #24
        BUTTON_GPIO_CLK_ENABLE();
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	9b00      	ldr	r3, [sp, #0]

        if (Button_Mode == BUTTON_MODE_GPIO)
 8000958:	b959      	cbnz	r1, 8000972 <BSP_PB_Init+0x32>
        {
            /* Configure Button pin as input */
            gpio_init_structure.Pin = BUTTON_PIN[Button];
 800095a:	2301      	movs	r3, #1
            gpio_init_structure.Mode = GPIO_MODE_INPUT;
            gpio_init_structure.Pull = GPIO_NOPULL;
 800095c:	9103      	str	r1, [sp, #12]
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800095e:	4811      	ldr	r0, [pc, #68]	; (80009a4 <BSP_PB_Init+0x64>)
            gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000960:	e9cd 3101 	strd	r3, r1, [sp, #4]
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000964:	2302      	movs	r3, #2
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000966:	a901      	add	r1, sp, #4
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000968:	9304      	str	r3, [sp, #16]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800096a:	f005 ff3d 	bl	80067e8 <HAL_GPIO_Init>

            /* Enable and set Button EXTI Interrupt to the lowest priority */
            HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
            HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
        }
    }
 800096e:	b006      	add	sp, #24
 8000970:	bd10      	pop	{r4, pc}
        if (Button_Mode == BUTTON_MODE_EXTI)
 8000972:	2901      	cmp	r1, #1
 8000974:	d1fb      	bne.n	800096e <BSP_PB_Init+0x2e>
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000976:	2400      	movs	r4, #0
 8000978:	2302      	movs	r3, #2
            gpio_init_structure.Pin = BUTTON_PIN[Button];
 800097a:	9101      	str	r1, [sp, #4]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800097c:	a901      	add	r1, sp, #4
 800097e:	4809      	ldr	r0, [pc, #36]	; (80009a4 <BSP_PB_Init+0x64>)
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000980:	e9cd 4303 	strd	r4, r3, [sp, #12]
            gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000984:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000988:	9302      	str	r3, [sp, #8]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800098a:	f005 ff2d 	bl	80067e8 <HAL_GPIO_Init>
            HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800098e:	4622      	mov	r2, r4
 8000990:	210f      	movs	r1, #15
 8000992:	2006      	movs	r0, #6
 8000994:	f004 ffa8 	bl	80058e8 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000998:	2006      	movs	r0, #6
 800099a:	f004 ffd7 	bl	800594c <HAL_NVIC_EnableIRQ>
    }
 800099e:	e7e6      	b.n	800096e <BSP_PB_Init+0x2e>
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020000 	.word	0x40020000

080009a8 <_ZN8touchgfx7Buttons4initEv>:
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 80009a8:	2100      	movs	r1, #0
{
 80009aa:	b508      	push	{r3, lr}
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 80009ac:	4608      	mov	r0, r1
 80009ae:	f7ff ffc7 	bl	8000940 <BSP_PB_Init>
}
 80009b2:	bd08      	pop	{r3, pc}

080009b4 <BSP_PB_GetState>:
      *            @arg  BUTTON_USER: User Push Button
      * @retval The Button GPIO pin value
      */
    __weak uint32_t BSP_PB_GetState(Button_TypeDef Button)
    {
        return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80009b4:	2101      	movs	r1, #1
 80009b6:	4802      	ldr	r0, [pc, #8]	; (80009c0 <BSP_PB_GetState+0xc>)
    {
 80009b8:	b508      	push	{r3, lr}
        return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80009ba:	f006 f89b 	bl	8006af4 <HAL_GPIO_ReadPin>
    }
 80009be:	bd08      	pop	{r3, pc}
 80009c0:	40020000 	.word	0x40020000

080009c4 <_ZN8touchgfx7Buttons6sampleEv>:
{
 80009c4:	b508      	push	{r3, lr}
    result = BSP_PB_GetState(BUTTON_WAKEUP);
 80009c6:	2000      	movs	r0, #0
 80009c8:	f7ff fff4 	bl	80009b4 <BSP_PB_GetState>
}
 80009cc:	bd08      	pop	{r3, pc}

080009ce <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 80009ce:	6840      	ldr	r0, [r0, #4]
    }
 80009d0:	4770      	bx	lr

080009d2 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 80009d2:	6041      	str	r1, [r0, #4]
    }
 80009d4:	4770      	bx	lr
	...

080009d8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 80009d8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80009dc:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 80009e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009e4:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 80009ea:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 80009ec:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
 80009f0:	430a      	orrs	r2, r1
 80009f2:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	f042 0201 	orr.w	r2, r2, #1
 80009fc:	601a      	str	r2, [r3, #0]
}
 80009fe:	4770      	bx	lr
 8000a00:	e0001000 	.word	0xe0001000
 8000a04:	c5acce55 	.word	0xc5acce55

08000a08 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8000a08:	1a51      	subs	r1, r2, r1
 8000a0a:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 8000a0e:	fbb1 f0f3 	udiv	r0, r1, r3
 8000a12:	4770      	bx	lr

08000a14 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8000a14:	4b01      	ldr	r3, [pc, #4]	; (8000a1c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8000a16:	6858      	ldr	r0, [r3, #4]
}
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e0001000 	.word	0xe0001000

08000a20 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8000a20:	4770      	bx	lr

08000a22 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8000a22:	b510      	push	{r4, lr}
 8000a24:	4604      	mov	r4, r0
 8000a26:	210c      	movs	r1, #12
 8000a28:	f023 ffb7 	bl	802499a <_ZdlPvj>
 8000a2c:	4620      	mov	r0, r4
 8000a2e:	bd10      	pop	{r4, pc}

08000a30 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8000a30:	6803      	ldr	r3, [r0, #0]
{
 8000a32:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8000a34:	691b      	ldr	r3, [r3, #16]
{
 8000a36:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8000a38:	b131      	cbz	r1, 8000a48 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8000a3a:	4798      	blx	r3
 8000a3c:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 8000a3e:	6863      	ldr	r3, [r4, #4]
 8000a40:	1a9b      	subs	r3, r3, r2
 8000a42:	4418      	add	r0, r3
 8000a44:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8000a46:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8000a48:	4798      	blx	r3
 8000a4a:	60a0      	str	r0, [r4, #8]
}
 8000a4c:	e7fb      	b.n	8000a46 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

08000a4e <_ZN8touchgfx16ButtonController5resetEv>:
    virtual bool sample(uint8_t& key) = 0;

    /** Resets button controller. Does nothing in the default implementation. */
    virtual void reset()
    {
    }
 8000a4e:	4770      	bx	lr

08000a50 <_ZN8touchgfx10KeySamplerD1Ev>:
public:
    KeySampler()
    {
        init();
    }
    virtual ~KeySampler() {}
 8000a50:	4770      	bx	lr
	...

08000a54 <_ZN8touchgfx10KeySampler4initEv>:
using namespace touchgfx;

static uint8_t btnstatus[4];

void KeySampler::init()
{
 8000a54:	b508      	push	{r3, lr}
    Buttons::init();
 8000a56:	f7ff ffa7 	bl	80009a8 <_ZN8touchgfx7Buttons4initEv>

    memset(btnstatus, 0x00, sizeof(uint8_t) * 4);
 8000a5a:	4b02      	ldr	r3, [pc, #8]	; (8000a64 <_ZN8touchgfx10KeySampler4initEv+0x10>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
}
 8000a60:	bd08      	pop	{r3, pc}
 8000a62:	bf00      	nop
 8000a64:	200005c4 	.word	0x200005c4

08000a68 <_ZN8touchgfx10KeySampler6sampleERh>:

bool KeySampler::sample(uint8_t& key)
{
 8000a68:	b570      	push	{r4, r5, r6, lr}
 8000a6a:	460d      	mov	r5, r1
    unsigned int buttonValue = Buttons::sample();
 8000a6c:	f7ff ffaa 	bl	80009c4 <_ZN8touchgfx7Buttons6sampleEv>

    //Propergate values through buffer
    btnstatus[3] = btnstatus[2];
 8000a70:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <_ZN8touchgfx10KeySampler6sampleERh+0x38>)
    btnstatus[2] = btnstatus[1];
    btnstatus[1] = btnstatus[0];
    btnstatus[0] = buttonValue;
 8000a72:	b2c4      	uxtb	r4, r0
    btnstatus[3] = btnstatus[2];
 8000a74:	7893      	ldrb	r3, [r2, #2]
    btnstatus[2] = btnstatus[1];
 8000a76:	7856      	ldrb	r6, [r2, #1]
    btnstatus[1] = btnstatus[0];
 8000a78:	7811      	ldrb	r1, [r2, #0]

    //User key
    if (((btnstatus[3] & Key1) == 1) && ((btnstatus[2] & Key1) == 1) &&
 8000a7a:	f013 0001 	ands.w	r0, r3, #1
    btnstatus[3] = btnstatus[2];
 8000a7e:	70d3      	strb	r3, [r2, #3]
    btnstatus[2] = btnstatus[1];
 8000a80:	7096      	strb	r6, [r2, #2]
    btnstatus[1] = btnstatus[0];
 8000a82:	7051      	strb	r1, [r2, #1]
    btnstatus[0] = buttonValue;
 8000a84:	7014      	strb	r4, [r2, #0]
    if (((btnstatus[3] & Key1) == 1) && ((btnstatus[2] & Key1) == 1) &&
 8000a86:	d00a      	beq.n	8000a9e <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 8000a88:	f016 0001 	ands.w	r0, r6, #1
 8000a8c:	d007      	beq.n	8000a9e <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 8000a8e:	f011 0001 	ands.w	r0, r1, #1
 8000a92:	d004      	beq.n	8000a9e <_ZN8touchgfx10KeySampler6sampleERh+0x36>
            ((btnstatus[1] & Key1) == 1) && ((btnstatus[0] & Key1) == 0))
 8000a94:	07e3      	lsls	r3, r4, #31
    {
        key = 1;
 8000a96:	bf56      	itet	pl
 8000a98:	2001      	movpl	r0, #1
        return true;
    }

    return false;
 8000a9a:	2000      	movmi	r0, #0
        key = 1;
 8000a9c:	7028      	strbpl	r0, [r5, #0]
}
 8000a9e:	bd70      	pop	{r4, r5, r6, pc}
 8000aa0:	200005c4 	.word	0x200005c4

08000aa4 <_ZN8touchgfx10KeySamplerD0Ev>:
 8000aa4:	b510      	push	{r4, lr}
 8000aa6:	4604      	mov	r4, r0
 8000aa8:	2104      	movs	r1, #4
 8000aaa:	f023 ff76 	bl	802499a <_ZdlPvj>
 8000aae:	4620      	mov	r0, r4
 8000ab0:	bd10      	pop	{r4, pc}

08000ab2 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8000ab2:	4770      	bx	lr

08000ab4 <_ZN20STM32TouchControllerD0Ev>:
 8000ab4:	b510      	push	{r4, lr}
 8000ab6:	4604      	mov	r4, r0
 8000ab8:	2104      	movs	r1, #4
 8000aba:	f023 ff6e 	bl	802499a <_ZdlPvj>
 8000abe:	4620      	mov	r0, r4
 8000ac0:	bd10      	pop	{r4, pc}

08000ac2 <TS_IO_Init>:
      * @retval None
      */
    __weak void TS_IO_Init(void)
    {
        // I2Cx_Init(&hi2c4);
    }
 8000ac2:	4770      	bx	lr

08000ac4 <TS_IO_Write>:
      * @param  Reg: Reg address
      * @param  Value: Data to be written
      * @retval None
      */
    __weak void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
    {
 8000ac4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000ac6:	2301      	movs	r3, #1
    {
 8000ac8:	f88d 2017 	strb.w	r2, [sp, #23]
        status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000acc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ad0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8000ad4:	f10d 0217 	add.w	r2, sp, #23
 8000ad8:	9200      	str	r2, [sp, #0]
 8000ada:	460a      	mov	r2, r1
 8000adc:	4601      	mov	r1, r0
 8000ade:	4806      	ldr	r0, [pc, #24]	; (8000af8 <TS_IO_Write+0x34>)
 8000ae0:	f006 fa17 	bl	8006f12 <HAL_I2C_Mem_Write>
        if (status != HAL_OK)
 8000ae4:	b120      	cbz	r0, 8000af0 <TS_IO_Write+0x2c>
        HAL_I2C_DeInit(i2c_handler);
 8000ae6:	4804      	ldr	r0, [pc, #16]	; (8000af8 <TS_IO_Write+0x34>)
 8000ae8:	f006 f9fa 	bl	8006ee0 <HAL_I2C_DeInit>
        MX_I2C4_Init();
 8000aec:	f001 f916 	bl	8001d1c <MX_I2C4_Init>
        I2Cx_WriteMultiple(&hi2c4, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
    }
 8000af0:	b007      	add	sp, #28
 8000af2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000af6:	bf00      	nop
 8000af8:	20005700 	.word	0x20005700

08000afc <TS_IO_Read>:
      * @param  Addr: I2C address
      * @param  Reg: Reg address
      * @retval Data to be read
      */
    __weak uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
    {
 8000afc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        uint8_t read_value = 0;
 8000afe:	2300      	movs	r3, #0
    {
 8000b00:	460a      	mov	r2, r1
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000b02:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        uint8_t read_value = 0;
 8000b06:	f88d 3017 	strb.w	r3, [sp, #23]
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8000b10:	f10d 0117 	add.w	r1, sp, #23
 8000b14:	9100      	str	r1, [sp, #0]
 8000b16:	4601      	mov	r1, r0
 8000b18:	4806      	ldr	r0, [pc, #24]	; (8000b34 <TS_IO_Read+0x38>)
 8000b1a:	f006 fab1 	bl	8007080 <HAL_I2C_Mem_Read>
        if (status != HAL_OK)
 8000b1e:	b120      	cbz	r0, 8000b2a <TS_IO_Read+0x2e>
        HAL_I2C_DeInit(i2c_handler);
 8000b20:	4804      	ldr	r0, [pc, #16]	; (8000b34 <TS_IO_Read+0x38>)
 8000b22:	f006 f9dd 	bl	8006ee0 <HAL_I2C_DeInit>
        MX_I2C4_Init();
 8000b26:	f001 f8f9 	bl	8001d1c <MX_I2C4_Init>

        I2Cx_ReadMultiple(&hi2c4, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

        return read_value;
    }
 8000b2a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8000b2e:	b007      	add	sp, #28
 8000b30:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b34:	20005700 	.word	0x20005700

08000b38 <TS_IO_ReadMultiple>:
      * @param  Buffer: Pointer to data buffer
      * @param  Length: Length of the data
      * @retval Number of read data
      */
    __weak uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t* Buffer, uint16_t Length)
    {
 8000b38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000b3a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8000b3e:	9200      	str	r2, [sp, #0]
 8000b40:	460a      	mov	r2, r1
 8000b42:	4601      	mov	r1, r0
 8000b44:	4807      	ldr	r0, [pc, #28]	; (8000b64 <TS_IO_ReadMultiple+0x2c>)
 8000b46:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	f006 fa98 	bl	8007080 <HAL_I2C_Mem_Read>
        if (status != HAL_OK)
 8000b50:	4604      	mov	r4, r0
 8000b52:	b120      	cbz	r0, 8000b5e <TS_IO_ReadMultiple+0x26>
        HAL_I2C_DeInit(i2c_handler);
 8000b54:	4803      	ldr	r0, [pc, #12]	; (8000b64 <TS_IO_ReadMultiple+0x2c>)
 8000b56:	f006 f9c3 	bl	8006ee0 <HAL_I2C_DeInit>
        MX_I2C4_Init();
 8000b5a:	f001 f8df 	bl	8001d1c <MX_I2C4_Init>
        return I2Cx_ReadMultiple(&hi2c4, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
    }
 8000b5e:	b2a0      	uxth	r0, r4
 8000b60:	b004      	add	sp, #16
 8000b62:	bd10      	pop	{r4, pc}
 8000b64:	20005700 	.word	0x20005700

08000b68 <BSP_TS_Init>:
      * @param  ts_SizeX : Maximum X size of the TS area on LCD
      * @param  ts_SizeY : Maximum Y size of the TS area on LCD
      * @retval TS_OK if all initializations are OK. Other value if error.
      */
    __weak uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
    {
 8000b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
        /* but the prototype of Init() is like that in template and should be respected       */

        /* Initialize the communication channel to sensor (I2C) if necessary */
        /* that is initialization is done only once after a power up         */
        ft6x06_ts_drv.Init(I2C_Address);
 8000b6a:	4d13      	ldr	r5, [pc, #76]	; (8000bb8 <BSP_TS_Init+0x50>)
    {
 8000b6c:	4606      	mov	r6, r0
        ft6x06_ts_drv.Init(I2C_Address);
 8000b6e:	4c13      	ldr	r4, [pc, #76]	; (8000bbc <BSP_TS_Init+0x54>)
    {
 8000b70:	460f      	mov	r7, r1
        ft6x06_ts_drv.Init(I2C_Address);
 8000b72:	682b      	ldr	r3, [r5, #0]
 8000b74:	7820      	ldrb	r0, [r4, #0]
 8000b76:	4798      	blx	r3

        ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8000b78:	686b      	ldr	r3, [r5, #4]
 8000b7a:	2054      	movs	r0, #84	; 0x54
 8000b7c:	4798      	blx	r3
        if (ts_id1 != FT6206_ID_VALUE)
 8000b7e:	b2c0      	uxtb	r0, r0
 8000b80:	2811      	cmp	r0, #17
 8000b82:	d009      	beq.n	8000b98 <BSP_TS_Init+0x30>
        {
            ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8000b84:	686b      	ldr	r3, [r5, #4]
 8000b86:	2070      	movs	r0, #112	; 0x70
 8000b88:	4798      	blx	r3
            I2C_Address    = TS_I2C_ADDRESS_A02;
 8000b8a:	2370      	movs	r3, #112	; 0x70
            I2C_Address    = TS_I2C_ADDRESS;
        }

        /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
        /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
        if ((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8000b8c:	b2c0      	uxtb	r0, r0
            I2C_Address    = TS_I2C_ADDRESS_A02;
 8000b8e:	7023      	strb	r3, [r4, #0]
        if ((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8000b90:	2811      	cmp	r0, #17
 8000b92:	d003      	beq.n	8000b9c <BSP_TS_Init+0x34>

            } /* of if(ts_status == TS_OK) */
        }
        else
        {
            ts_status = TS_DEVICE_NOT_FOUND;
 8000b94:	2003      	movs	r0, #3
        }

        return (ts_status);
    }
 8000b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            I2C_Address    = TS_I2C_ADDRESS;
 8000b98:	2354      	movs	r3, #84	; 0x54
 8000b9a:	7023      	strb	r3, [r4, #0]
            if (ts_SizeX < ts_SizeY)
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <BSP_TS_Init+0x58>)
                ts_orientation = TS_SWAP_XY | TS_SWAP_Y;
 8000b9e:	42be      	cmp	r6, r7
 8000ba0:	bf34      	ite	cc
 8000ba2:	2601      	movcc	r6, #1
 8000ba4:	260c      	movcs	r6, #12
                ft6x06_ts_drv.Reset(I2C_Address);
 8000ba6:	7820      	ldrb	r0, [r4, #0]
 8000ba8:	701e      	strb	r6, [r3, #0]
 8000baa:	68ab      	ldr	r3, [r5, #8]
 8000bac:	4798      	blx	r3
                ft6x06_ts_drv.Start(I2C_Address);
 8000bae:	7820      	ldrb	r0, [r4, #0]
 8000bb0:	68eb      	ldr	r3, [r5, #12]
 8000bb2:	4798      	blx	r3
        uint8_t ts_status = TS_OK;
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	e7ee      	b.n	8000b96 <BSP_TS_Init+0x2e>
 8000bb8:	20000020 	.word	0x20000020
 8000bbc:	200005c8 	.word	0x200005c8
 8000bc0:	200005c9 	.word	0x200005c9

08000bc4 <_ZN20STM32TouchController4initEv>:
{
 8000bc4:	b508      	push	{r3, lr}
    if (BSP_TS_Init(800, 480) == TS_OK)
 8000bc6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000bca:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000bce:	f7ff ffcb 	bl	8000b68 <BSP_TS_Init>
 8000bd2:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <_ZN20STM32TouchController4initEv+0x2c>)
 8000bd4:	b910      	cbnz	r0, 8000bdc <_ZN20STM32TouchController4initEv+0x18>
        bsp_ts_initialized = true;
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]
}
 8000bda:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d1fb      	bne.n	8000bda <_ZN20STM32TouchController4initEv+0x16>
 8000be2:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <_ZN20STM32TouchController4initEv+0x30>)
 8000be4:	216a      	movs	r1, #106	; 0x6a
 8000be6:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <_ZN20STM32TouchController4initEv+0x34>)
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <_ZN20STM32TouchController4initEv+0x38>)
 8000bea:	f023 ff05 	bl	80249f8 <__assert_func>
 8000bee:	bf00      	nop
 8000bf0:	200005ca 	.word	0x200005ca
 8000bf4:	08025e00 	.word	0x08025e00
 8000bf8:	08025e13 	.word	0x08025e13
 8000bfc:	08025e3d 	.word	0x08025e3d

08000c00 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
__weak uint8_t BSP_TS_GetState(TS_StateTypeDef* TS_State)
{
 8000c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t xDiff;
    uint16_t yDiff;
    uint32_t index;

    /* Check and update the number of touches active detected */
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 8000c04:	4a35      	ldr	r2, [pc, #212]	; (8000cdc <BSP_TS_GetState+0xdc>)
{
 8000c06:	4607      	mov	r7, r0
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 8000c08:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8000cec <BSP_TS_GetState+0xec>
{
 8000c0c:	b085      	sub	sp, #20
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 8000c0e:	7810      	ldrb	r0, [r2, #0]
 8000c10:	f8da 3010 	ldr.w	r3, [sl, #16]
 8000c14:	4798      	blx	r3
 8000c16:	7038      	strb	r0, [r7, #0]
    if (TS_State->touchDetected)
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	d05a      	beq.n	8000cd2 <BSP_TS_GetState+0xd2>
 8000c1c:	4e30      	ldr	r6, [pc, #192]	; (8000ce0 <BSP_TS_GetState+0xe0>)
 8000c1e:	f107 0902 	add.w	r9, r7, #2
 8000c22:	4d30      	ldr	r5, [pc, #192]	; (8000ce4 <BSP_TS_GetState+0xe4>)
 8000c24:	f10d 0b0c 	add.w	fp, sp, #12
 8000c28:	ac02      	add	r4, sp, #8
    {
        for (index = 0; index < TS_State->touchDetected; index++)
 8000c2a:	f04f 0800 	mov.w	r8, #0
 8000c2e:	783b      	ldrb	r3, [r7, #0]
 8000c30:	4543      	cmp	r3, r8
 8000c32:	d94e      	bls.n	8000cd2 <BSP_TS_GetState+0xd2>
        {
            /* Get each touch coordinates */
            ft6x06_ts_drv.GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8000c34:	4829      	ldr	r0, [pc, #164]	; (8000cdc <BSP_TS_GetState+0xdc>)
 8000c36:	465a      	mov	r2, fp
 8000c38:	4621      	mov	r1, r4
 8000c3a:	f8da 3014 	ldr.w	r3, [sl, #20]
 8000c3e:	7800      	ldrb	r0, [r0, #0]
        for (index = 0; index < TS_State->touchDetected; index++)
 8000c40:	f108 0801 	add.w	r8, r8, #1
            ft6x06_ts_drv.GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8000c44:	4798      	blx	r3

            if (ts_orientation & TS_SWAP_XY)
 8000c46:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <BSP_TS_GetState+0xe8>)
 8000c48:	46b4      	mov	ip, r6
 8000c4a:	46ae      	mov	lr, r5
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	3604      	adds	r6, #4
 8000c50:	3504      	adds	r5, #4
 8000c52:	0719      	lsls	r1, r3, #28
            {
                tmp = Raw_x[index];
 8000c54:	bf41      	itttt	mi
 8000c56:	8822      	ldrhmi	r2, [r4, #0]
                Raw_x[index] = Raw_y[index];
 8000c58:	f8bb 1000 	ldrhmi.w	r1, [fp]
                Raw_y[index] = tmp;
 8000c5c:	f8ab 2000 	strhmi.w	r2, [fp]
                Raw_x[index] = Raw_y[index];
 8000c60:	8021      	strhmi	r1, [r4, #0]
            }

            if (ts_orientation & TS_SWAP_X)
 8000c62:	079a      	lsls	r2, r3, #30
            {
                Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8000c64:	bf41      	itttt	mi
 8000c66:	8822      	ldrhmi	r2, [r4, #0]
 8000c68:	f5c2 7247 	rsbmi	r2, r2, #796	; 0x31c
 8000c6c:	3203      	addmi	r2, #3
 8000c6e:	8022      	strhmi	r2, [r4, #0]
            }

            if (ts_orientation & TS_SWAP_Y)
 8000c70:	075b      	lsls	r3, r3, #29
            {
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
            }

            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000c72:	f856 2c04 	ldr.w	r2, [r6, #-4]
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8000c76:	bf48      	it	mi
 8000c78:	f8bb 3000 	ldrhmi.w	r3, [fp]
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000c7c:	f834 0b02 	ldrh.w	r0, [r4], #2
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8000c80:	bf42      	ittt	mi
 8000c82:	f5c3 73ef 	rsbmi	r3, r3, #478	; 0x1de
 8000c86:	3301      	addmi	r3, #1
 8000c88:	f8ab 3000 	strhmi.w	r3, [fp]
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000c8c:	b293      	uxth	r3, r2
 8000c8e:	4290      	cmp	r0, r2
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8000c90:	f83b 1b02 	ldrh.w	r1, [fp], #2
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000c94:	bf8c      	ite	hi
 8000c96:	1ac3      	subhi	r3, r0, r3
 8000c98:	1a1b      	subls	r3, r3, r0
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	9301      	str	r3, [sp, #4]
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8000c9e:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	4299      	cmp	r1, r3

            if ((xDiff + yDiff) > 5)
 8000ca6:	9b01      	ldr	r3, [sp, #4]
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8000ca8:	bf8c      	ite	hi
 8000caa:	1a8a      	subhi	r2, r1, r2
 8000cac:	1a52      	subls	r2, r2, r1
 8000cae:	b292      	uxth	r2, r2
            if ((xDiff + yDiff) > 5)
 8000cb0:	441a      	add	r2, r3
 8000cb2:	2a05      	cmp	r2, #5
            {
                _x[index] = Raw_x[index];
 8000cb4:	bfc8      	it	gt
 8000cb6:	f846 0c04 	strgt.w	r0, [r6, #-4]
                _y[index] = Raw_y[index];
            }


            TS_State->touchX[index] = _x[index];
 8000cba:	f8dc 3000 	ldr.w	r3, [ip]
                _y[index] = Raw_y[index];
 8000cbe:	bfc8      	it	gt
 8000cc0:	f845 1c04 	strgt.w	r1, [r5, #-4]
            TS_State->touchX[index] = _x[index];
 8000cc4:	f829 3b02 	strh.w	r3, [r9], #2
            TS_State->touchY[index] = _y[index];
 8000cc8:	f8de 3000 	ldr.w	r3, [lr]
 8000ccc:	f8a9 3002 	strh.w	r3, [r9, #2]
        for (index = 0; index < TS_State->touchDetected; index++)
 8000cd0:	e7ad      	b.n	8000c2e <BSP_TS_GetState+0x2e>
        } /* of for(index=0; index < TS_State->touchDetected; index++) */
    } /* end of if(TS_State->touchDetected != 0) */

    return (ts_status);
}
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	b005      	add	sp, #20
 8000cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cda:	bf00      	nop
 8000cdc:	200005c8 	.word	0x200005c8
 8000ce0:	200005cc 	.word	0x200005cc
 8000ce4:	200005d4 	.word	0x200005d4
 8000ce8:	200005c9 	.word	0x200005c9
 8000cec:	20000020 	.word	0x20000020

08000cf0 <_ZN20STM32TouchController11sampleTouchERlS0_>:
{
 8000cf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (bsp_ts_initialized)
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
{
 8000cf4:	460e      	mov	r6, r1
 8000cf6:	4615      	mov	r5, r2
    if (bsp_ts_initialized)
 8000cf8:	781c      	ldrb	r4, [r3, #0]
 8000cfa:	b15c      	cbz	r4, 8000d14 <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
        BSP_TS_GetState(&state);
 8000cfc:	a801      	add	r0, sp, #4
 8000cfe:	f7ff ff7f 	bl	8000c00 <BSP_TS_GetState>
        if (state.touchDetected)
 8000d02:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000d06:	b143      	cbz	r3, 8000d1a <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>
            x = state.touchX[0];
 8000d08:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000d0c:	6033      	str	r3, [r6, #0]
            y = state.touchY[0];
 8000d0e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8000d12:	602b      	str	r3, [r5, #0]
}
 8000d14:	4620      	mov	r0, r4
 8000d16:	b004      	add	sp, #16
 8000d18:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8000d1a:	461c      	mov	r4, r3
 8000d1c:	e7fa      	b.n	8000d14 <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
 8000d1e:	bf00      	nop
 8000d20:	200005ca 	.word	0x200005ca

08000d24 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8000d24:	b110      	cbz	r0, 8000d2c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x8>
 8000d26:	2801      	cmp	r0, #1
 8000d28:	d009      	beq.n	8000d3e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
 8000d2a:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8000d2c:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x28>)
 8000d2e:	2140      	movs	r1, #64	; 0x40
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8000d38:	4805      	ldr	r0, [pc, #20]	; (8000d50 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2c>)
 8000d3a:	f005 bee1 	b.w	8006b00 <HAL_GPIO_WritePin>
 8000d3e:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x28>)
 8000d40:	2180      	movs	r1, #128	; 0x80
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	fab2 f282 	clz	r2, r2
 8000d48:	0952      	lsrs	r2, r2, #5
 8000d4a:	e7f5      	b.n	8000d38 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x14>
 8000d4c:	200005dc 	.word	0x200005dc
 8000d50:	40020800 	.word	0x40020800

08000d54 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8000d54:	b110      	cbz	r0, 8000d5c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x8>
 8000d56:	2801      	cmp	r0, #1
 8000d58:	d009      	beq.n	8000d6e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
 8000d5a:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x28>)
 8000d5e:	2140      	movs	r1, #64	; 0x40
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	3a00      	subs	r2, #0
 8000d64:	bf18      	it	ne
 8000d66:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2c>)
 8000d6a:	f005 bec9 	b.w	8006b00 <HAL_GPIO_WritePin>
 8000d6e:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x28>)
 8000d70:	2180      	movs	r1, #128	; 0x80
 8000d72:	685a      	ldr	r2, [r3, #4]
 8000d74:	3a00      	subs	r2, #0
 8000d76:	bf18      	it	ne
 8000d78:	2201      	movne	r2, #1
 8000d7a:	e7f5      	b.n	8000d68 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x14>
 8000d7c:	200005dc 	.word	0x200005dc
 8000d80:	40020800 	.word	0x40020800

08000d84 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8000d84:	b110      	cbz	r0, 8000d8c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x8>
 8000d86:	2801      	cmp	r0, #1
 8000d88:	d004      	beq.n	8000d94 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 8000d8a:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000d8c:	2140      	movs	r1, #64	; 0x40
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000d8e:	4802      	ldr	r0, [pc, #8]	; (8000d98 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x14>)
 8000d90:	f005 bebb 	b.w	8006b0a <HAL_GPIO_TogglePin>
 8000d94:	2180      	movs	r1, #128	; 0x80
 8000d96:	e7fa      	b.n	8000d8e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xa>
 8000d98:	40020800 	.word	0x40020800

08000d9c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8000d9c:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8000d9e:	b130      	cbz	r0, 8000dae <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
 8000da0:	2801      	cmp	r0, #1
 8000da2:	d009      	beq.n	8000db8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x1c>
 8000da4:	2000      	movs	r0, #0
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8000da6:	1e43      	subs	r3, r0, #1
 8000da8:	4258      	negs	r0, r3
 8000daa:	4158      	adcs	r0, r3
 8000dac:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000dae:	2140      	movs	r1, #64	; 0x40
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x20>)
 8000db2:	f005 fe9f 	bl	8006af4 <HAL_GPIO_ReadPin>
        break;
 8000db6:	e7f6      	b.n	8000da6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0xa>
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	e7f9      	b.n	8000db0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x14>
 8000dbc:	40020800 	.word	0x40020800

08000dc0 <_ZN8touchgfx4GPIO4initEv>:
{
 8000dc0:	b570      	push	{r4, r5, r6, lr}
 8000dc2:	4d08      	ldr	r5, [pc, #32]	; (8000de4 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8000dc4:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8000dc6:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8000dc8:	b2e0      	uxtb	r0, r4
 8000dca:	f7ff ffe7 	bl	8000d9c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8000dce:	b118      	cbz	r0, 8000dd8 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8000dd0:	682b      	ldr	r3, [r5, #0]
 8000dd2:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8000dd4:	bf18      	it	ne
 8000dd6:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8000dd8:	3401      	adds	r4, #1
 8000dda:	3504      	adds	r5, #4
 8000ddc:	2c05      	cmp	r4, #5
 8000dde:	d1f3      	bne.n	8000dc8 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8000de0:	bd70      	pop	{r4, r5, r6, pc}
 8000de2:	bf00      	nop
 8000de4:	200005dc 	.word	0x200005dc

08000de8 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8000de8:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8000dea:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8000dee:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8000df2:	4770      	bx	lr

08000df4 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
    {
        return false;
    }
 8000df4:	2000      	movs	r0, #0
 8000df6:	4770      	bx	lr

08000df8 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000df8:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000dfa:	3900      	subs	r1, #0
 8000dfc:	4b02      	ldr	r3, [pc, #8]	; (8000e08 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8000dfe:	bf18      	it	ne
 8000e00:	2101      	movne	r1, #1
 8000e02:	7019      	strb	r1, [r3, #0]
    }
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20020fd7 	.word	0x20020fd7

08000e0c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	4770      	bx	lr

08000e10 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8000e10:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000e12:	b10b      	cbz	r3, 8000e18 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8000e14:	4608      	mov	r0, r1
 8000e16:	4718      	bx	r3
        }
    }
 8000e18:	4770      	bx	lr

08000e1a <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8000e1a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e1e:	4770      	bx	lr

08000e20 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8000e20:	6840      	ldr	r0, [r0, #4]
 8000e22:	6803      	ldr	r3, [r0, #0]
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	4718      	bx	r3

08000e28 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8000e28:	4b01      	ldr	r3, [pc, #4]	; (8000e30 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8000e2a:	6818      	ldr	r0, [r3, #0]
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	200005ec 	.word	0x200005ec

08000e34 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000e34:	4770      	bx	lr
	...

08000e38 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000e38:	b4f0      	push	{r4, r5, r6, r7}
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	4c10      	ldr	r4, [pc, #64]	; (8000e80 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8000e3e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e42:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e46:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000e4a:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e4e:	f3c3 05c9 	ubfx	r5, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e52:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000e56:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000e58:	ea03 0c06 	and.w	ip, r3, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e5c:	462a      	mov	r2, r5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000e5e:	ea4c 7782 	orr.w	r7, ip, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e62:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000e64:	f8c4 7274 	str.w	r7, [r4, #628]	; 0x274
      } while (ways-- != 0U);
 8000e68:	d2f9      	bcs.n	8000e5e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
    } while(sets-- != 0U);
 8000e6a:	3b20      	subs	r3, #32
 8000e6c:	f113 0f20 	cmn.w	r3, #32
 8000e70:	d1f2      	bne.n	8000e58 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x20>
 8000e72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e76:	f3bf 8f6f 	isb	sy
    /* USER CODE END flushFrameBuffer step 1 */

    /* USER CODE BEGIN flushFrameBuffer step 2 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
    /* USER CODE END flushFrameBuffer step 2 */
}
 8000e7a:	bcf0      	pop	{r4, r5, r6, r7}
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000e7c:	f000 be28 	b.w	8001ad0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8000e84:	b510      	push	{r4, lr}
 8000e86:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8000e88:	f000 fe1f 	bl	8001aca <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8000e8c:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8000e90:	b113      	cbz	r3, 8000e98 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8000e92:	4b02      	ldr	r3, [pc, #8]	; (8000e9c <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	701a      	strb	r2, [r3, #0]
    }
}
 8000e98:	bd10      	pop	{r4, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000015 	.word	0x20000015

08000ea0 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8000ea0:	f000 bdf1 	b.w	8001a86 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08000ea4 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8000ea4:	b510      	push	{r4, lr}
 8000ea6:	4604      	mov	r4, r0
        swapFrameBuffers();
 8000ea8:	f00d fcb8 	bl	800e81c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8000eac:	6823      	ldr	r3, [r4, #0]
 8000eae:	4620      	mov	r0, r4
 8000eb0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 8000eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8000eb8:	4718      	bx	r3

08000eba <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8000eba:	f00c be3b 	b.w	800db34 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08000ebe <_ZN11TouchGFXHALD0Ev>:
 8000ebe:	b510      	push	{r4, lr}
 8000ec0:	4604      	mov	r4, r0
 8000ec2:	217c      	movs	r1, #124	; 0x7c
 8000ec4:	f023 fd69 	bl	802499a <_ZdlPvj>
 8000ec8:	4620      	mov	r0, r4
 8000eca:	bd10      	pop	{r4, pc}

08000ecc <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8000ecc:	4b02      	ldr	r3, [pc, #8]	; (8000ed8 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8000ed2:	f00c be6b 	b.w	800dbac <_ZN8touchgfx3HAL10beginFrameEv>
 8000ed6:	bf00      	nop
 8000ed8:	20000015 	.word	0x20000015

08000edc <_ZN11TouchGFXHAL10initializeEv>:
{
 8000edc:	b538      	push	{r3, r4, r5, lr}
 8000ede:	4604      	mov	r4, r0
    GPIO::init();
 8000ee0:	f7ff ff6e 	bl	8000dc0 <_ZN8touchgfx4GPIO4initEv>
    instrumentation.init();
 8000ee4:	4d08      	ldr	r5, [pc, #32]	; (8000f08 <_ZN11TouchGFXHAL10initializeEv+0x2c>)
    TouchGFXGeneratedHAL::initialize();
 8000ee6:	4620      	mov	r0, r4
 8000ee8:	f000 fdd8 	bl	8001a9c <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8000eec:	2300      	movs	r3, #0
    instrumentation.init();
 8000eee:	4628      	mov	r0, r5
 8000ef0:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8000ef4:	f7ff fd70 	bl	80009d8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8000ef8:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8000efa:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8000efc:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
        buttonController = btnCtrl;
 8000f00:	4b02      	ldr	r3, [pc, #8]	; (8000f0c <_ZN11TouchGFXHAL10initializeEv+0x30>)
 8000f02:	6163      	str	r3, [r4, #20]
}
 8000f04:	bd38      	pop	{r3, r4, r5, pc}
 8000f06:	bf00      	nop
 8000f08:	200005f4 	.word	0x200005f4
 8000f0c:	20000600 	.word	0x20000600

08000f10 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8000f10:	6803      	ldr	r3, [r0, #0]
{
 8000f12:	4604      	mov	r4, r0
 8000f14:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8000f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f1a:	4798      	blx	r3
    enableInterrupts();
 8000f1c:	6823      	ldr	r3, [r4, #0]
 8000f1e:	4620      	mov	r0, r4
 8000f20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000f22:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8000f24:	f000 fa9e 	bl	8001464 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8000f28:	6823      	ldr	r3, [r4, #0]
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f2e:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8000f30:	2100      	movs	r1, #0
 8000f32:	2329      	movs	r3, #41	; 0x29
 8000f34:	2215      	movs	r2, #21
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8000f38:	9100      	str	r1, [sp, #0]
 8000f3a:	f005 fbce 	bl	80066da <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8000f3e:	f000 fa91 	bl	8001464 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000f42:	6823      	ldr	r3, [r4, #0]
 8000f44:	4620      	mov	r0, r4
 8000f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f48:	4798      	blx	r3
    for (;;)
 8000f4a:	e7f8      	b.n	8000f3e <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8000f4c:	200056e4 	.word	0x200056e4

08000f50 <_ZN11TouchGFXHAL19configureInterruptsEv>:
{
 8000f50:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::configureInterrupts();
 8000f52:	f000 fd87 	bl	8001a64 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2107      	movs	r1, #7
 8000f5a:	205a      	movs	r0, #90	; 0x5a
 8000f5c:	f004 fcc4 	bl	80058e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2107      	movs	r1, #7
 8000f64:	2062      	movs	r0, #98	; 0x62
}
 8000f66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8000f6a:	f004 bcbd 	b.w	80058e8 <HAL_NVIC_SetPriority>

08000f6e <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8000f6e:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8000f72:	b11b      	cbz	r3, 8000f7c <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8000f74:	6840      	ldr	r0, [r0, #4]
 8000f76:	6803      	ldr	r3, [r0, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4718      	bx	r3
    }
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	4770      	bx	lr

08000f80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8000f80:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8000f84:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8000f86:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8000f88:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 8000f8c:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8000f8e:	428c      	cmp	r4, r1
 8000f90:	d009      	beq.n	8000fa6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8000f92:	b93a      	cbnz	r2, 8000fa4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8000f94:	490a      	ldr	r1, [pc, #40]	; (8000fc0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8000f98:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000f9a:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8000f9c:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8000f9e:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000fa0:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8000fa2:	701a      	strb	r2, [r3, #0]
        }
    }
 8000fa4:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8000fa6:	2a00      	cmp	r2, #0
 8000fa8:	d0fc      	beq.n	8000fa4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000faa:	4a06      	ldr	r2, [pc, #24]	; (8000fc4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000fac:	4904      	ldr	r1, [pc, #16]	; (8000fc0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000fae:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000fb0:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000fb2:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8000fb4:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	e7f3      	b.n	8000fa2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8000fba:	bf00      	nop
 8000fbc:	20020fd0 	.word	0x20020fd0
 8000fc0:	20020fce 	.word	0x20020fce
 8000fc4:	20020fcc 	.word	0x20020fcc

08000fc8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8000fc8:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	428b      	cmp	r3, r1
 8000fd0:	d803      	bhi.n	8000fda <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d905      	bls.n	8000fe6 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8000fda:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8000fdc:	219e      	movs	r1, #158	; 0x9e
 8000fde:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8000fe0:	4807      	ldr	r0, [pc, #28]	; (8001000 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8000fe2:	f023 fd09 	bl	80249f8 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8000fe8:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8000fea:	4b07      	ldr	r3, [pc, #28]	; (8001008 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8000fec:	801a      	strh	r2, [r3, #0]
    }
 8000fee:	bd08      	pop	{r3, pc}
 8000ff0:	20020fcc 	.word	0x20020fcc
 8000ff4:	20020fce 	.word	0x20020fce
 8000ff8:	08025ea8 	.word	0x08025ea8
 8000ffc:	08025f0b 	.word	0x08025f0b
 8001000:	08025f4e 	.word	0x08025f4e
 8001004:	20020fd2 	.word	0x20020fd2
 8001008:	20020fd4 	.word	0x20020fd4

0800100c <_ZN11TouchGFXHAL16enableInterruptsEv>:
{
 800100c:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::enableInterrupts();
 800100e:	f000 fd31 	bl	8001a74 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001012:	4b03      	ldr	r3, [pc, #12]	; (8001020 <_ZN11TouchGFXHAL16enableInterruptsEv+0x14>)
 8001014:	2204      	movs	r2, #4
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800101c:	609a      	str	r2, [r3, #8]
}
 800101e:	bd08      	pop	{r3, pc}
 8001020:	e000e100 	.word	0xe000e100

08001024 <_ZN11TouchGFXHAL17disableInterruptsEv>:
{
 8001024:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::disableInterrupts();
 8001026:	f000 fd63 	bl	8001af0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <_ZN11TouchGFXHAL17disableInterruptsEv+0x28>)
 800102c:	2204      	movs	r2, #4
 800102e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __ASM volatile ("dsb 0xF":::"memory");
 8001032:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001036:	f3bf 8f6f 	isb	sy
 800103a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800103e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001042:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001046:	f3bf 8f6f 	isb	sy
}
 800104a:	bd08      	pop	{r3, pc}
 800104c:	e000e100 	.word	0xe000e100

08001050 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8001050:	b570      	push	{r4, r5, r6, lr}
 8001052:	460d      	mov	r5, r1
 8001054:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001058:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800105a:	b935      	cbnz	r5, 800106a <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 800105c:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 800105e:	f240 21bb 	movw	r1, #699	; 0x2bb
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001064:	480a      	ldr	r0, [pc, #40]	; (8001090 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001066:	f023 fcc7 	bl	80249f8 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800106a:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800106e:	3a00      	subs	r2, #0
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8001072:	bf18      	it	ne
 8001074:	2201      	movne	r2, #1
 8001076:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001078:	6803      	ldr	r3, [r0, #0]
}
 800107a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800107e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001082:	4718      	bx	r3
 8001084:	200005ec 	.word	0x200005ec
 8001088:	08025f93 	.word	0x08025f93
 800108c:	08025fcb 	.word	0x08025fcb
 8001090:	08025f4e 	.word	0x08025f4e
 8001094:	20020fd6 	.word	0x20020fd6

08001098 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lastRenderMethod(HARDWARE)
 8001098:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800109c:	60c3      	str	r3, [r0, #12]
 800109e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a2:	2300      	movs	r3, #0
 80010a4:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
 80010a8:	4a1e      	ldr	r2, [pc, #120]	; (8001124 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80010aa:	8503      	strh	r3, [r0, #40]	; 0x28
 80010ac:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 80010b0:	62c3      	str	r3, [r0, #44]	; 0x2c
 80010b2:	8603      	strh	r3, [r0, #48]	; 0x30
 80010b4:	6603      	str	r3, [r0, #96]	; 0x60
 80010b6:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
 80010ba:	6703      	str	r3, [r0, #112]	; 0x70
 80010bc:	e9c0 2319 	strd	r2, r3, [r0, #100]	; 0x64
 80010c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 80010c4:	b570      	push	{r4, r5, r6, lr}
 80010c6:	6742      	str	r2, [r0, #116]	; 0x74
 80010c8:	2201      	movs	r2, #1
                           height)
 80010ca:	f8bd 5010 	ldrh.w	r5, [sp, #16]
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 80010ce:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 80010d2:	3520      	adds	r5, #32
 80010d4:	e9c0 3304 	strd	r3, r3, [r0, #16]
              inProgress(false)
 80010d8:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80010dc:	e9c0 3308 	strd	r3, r3, [r0, #32]
 80010e0:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
 80010e4:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 80010e8:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 80010ec:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
 80010f0:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 80010f4:	b2ad      	uxth	r5, r5
        instance = this;
 80010f6:	4a0c      	ldr	r2, [pc, #48]	; (8001128 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80010f8:	42b5      	cmp	r5, r6
        instance = this;
 80010fa:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80010fc:	4a0b      	ldr	r2, [pc, #44]	; (800112c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 80010fe:	8015      	strh	r5, [r2, #0]
 8001100:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 8001102:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001104:	bf28      	it	cs
 8001106:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001108:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800110a:	bf38      	it	cc
 800110c:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800110e:	8016      	strh	r6, [r2, #0]
 8001110:	4a09      	ldr	r2, [pc, #36]	; (8001138 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001112:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001116:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8001118:	4a08      	ldr	r2, [pc, #32]	; (800113c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 800111a:	7013      	strb	r3, [r2, #0]
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 800111e:	6003      	str	r3, [r0, #0]
}
 8001120:	bd70      	pop	{r4, r5, r6, pc}
 8001122:	bf00      	nop
 8001124:	01000001 	.word	0x01000001
 8001128:	20020fd8 	.word	0x20020fd8
 800112c:	20020fcc 	.word	0x20020fcc
 8001130:	20020fd2 	.word	0x20020fd2
 8001134:	20020fce 	.word	0x20020fce
 8001138:	20020fd4 	.word	0x20020fd4
 800113c:	20020fd0 	.word	0x20020fd0
 8001140:	08026024 	.word	0x08026024

08001144 <OTM8009A_IO_Delay>:
      * @brief  OTM8009A delay
      * @param  Delay: Delay in ms
      */
    __weak void OTM8009A_IO_Delay(uint32_t Delay)
    {
        HAL_Delay(Delay);
 8001144:	f004 bbac 	b.w	80058a0 <HAL_Delay>

08001148 <DSI_IO_WriteCmd>:
     * @param  pParams: Pointer to parameter values table.
     * @retval HAL status
     */
    void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t* pParams)
    {
        if (NbrParams <= 1)
 8001148:	2801      	cmp	r0, #1
    {
 800114a:	b507      	push	{r0, r1, r2, lr}
        if (NbrParams <= 1)
 800114c:	d80a      	bhi.n	8001164 <DSI_IO_WriteCmd+0x1c>
        {
            HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 800114e:	784b      	ldrb	r3, [r1, #1]
 8001150:	2215      	movs	r2, #21
 8001152:	4809      	ldr	r0, [pc, #36]	; (8001178 <DSI_IO_WriteCmd+0x30>)
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	780b      	ldrb	r3, [r1, #0]
 8001158:	2100      	movs	r1, #0
 800115a:	f005 fabe 	bl	80066da <HAL_DSI_ShortWrite>
        }
        else
        {
            HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
        }
    }
 800115e:	b003      	add	sp, #12
 8001160:	f85d fb04 	ldr.w	pc, [sp], #4
            HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
 8001164:	9101      	str	r1, [sp, #4]
 8001166:	2239      	movs	r2, #57	; 0x39
 8001168:	5c0b      	ldrb	r3, [r1, r0]
 800116a:	2100      	movs	r1, #0
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	4603      	mov	r3, r0
 8001170:	4801      	ldr	r0, [pc, #4]	; (8001178 <DSI_IO_WriteCmd+0x30>)
 8001172:	f005 fac3 	bl	80066fc <HAL_DSI_LongWrite>
    }
 8001176:	e7f2      	b.n	800115e <DSI_IO_WriteCmd+0x16>
 8001178:	200056e4 	.word	0x200056e4

0800117c <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 800117c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        static uint8_t ScanLineParams[2];

        uint16_t scanline = 533;
        ScanLineParams[0] = scanline >> 8;
 800117e:	2302      	movs	r3, #2
 8001180:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <LCD_ReqTear+0x30>)
        ScanLineParams[1] = scanline & 0x00FF;
 8001182:	2515      	movs	r5, #21

        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001184:	4c0a      	ldr	r4, [pc, #40]	; (80011b0 <LCD_ReqTear+0x34>)
        ScanLineParams[0] = scanline >> 8;
 8001186:	7013      	strb	r3, [r2, #0]
        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001188:	2100      	movs	r1, #0
        ScanLineParams[1] = scanline & 0x00FF;
 800118a:	7055      	strb	r5, [r2, #1]
        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 800118c:	4620      	mov	r0, r4
 800118e:	9201      	str	r2, [sp, #4]
 8001190:	2244      	movs	r2, #68	; 0x44
 8001192:	9200      	str	r2, [sp, #0]
 8001194:	2239      	movs	r2, #57	; 0x39
 8001196:	f005 fab1 	bl	80066fc <HAL_DSI_LongWrite>
        // set_tear_on
        HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 800119a:	2100      	movs	r1, #0
 800119c:	2335      	movs	r3, #53	; 0x35
 800119e:	462a      	mov	r2, r5
 80011a0:	4620      	mov	r0, r4
 80011a2:	9100      	str	r1, [sp, #0]
 80011a4:	f005 fa99 	bl	80066da <HAL_DSI_ShortWrite>
    }
 80011a8:	b003      	add	sp, #12
 80011aa:	bd30      	pop	{r4, r5, pc}
 80011ac:	20000604 	.word	0x20000604
 80011b0:	200056e4 	.word	0x200056e4

080011b4 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 80011b4:	b507      	push	{r0, r1, r2, lr}
 80011b6:	9001      	str	r0, [sp, #4]
    LCD_ReqTear();
 80011b8:	f7ff ffe0 	bl	800117c <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x48>)
 80011be:	2202      	movs	r2, #2
    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80011c0:	9801      	ldr	r0, [sp, #4]
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 80011c8:	2201      	movs	r2, #1
 80011ca:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 80011ce:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80011d2:	f042 0201 	orr.w	r2, r2, #1
 80011d6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 80011da:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80011de:	f042 0202 	orr.w	r2, r2, #2
 80011e2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    __HAL_LTDC_ENABLE_IT(&hltdc, (LTDC_IT_LI | LTDC_IT_FU)); /* Enable line and FIFO underrun interrupts */
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x4c>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80011ec:	f043 0303 	orr.w	r3, r3, #3
 80011f0:	6353      	str	r3, [r2, #52]	; 0x34
}
 80011f2:	b003      	add	sp, #12
 80011f4:	f85d eb04 	ldr.w	lr, [sp], #4
    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80011f8:	f000 bc44 	b.w	8001a84 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
 80011fc:	200056e4 	.word	0x200056e4
 8001200:	2000574c 	.word	0x2000574c

08001204 <LCD_SetUpdateRegion>:

    void LCD_SetUpdateRegion(int idx)
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <LCD_SetUpdateRegion+0x20>)
    {
 8001206:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 8001208:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800120c:	232a      	movs	r3, #42	; 0x2a
 800120e:	2239      	movs	r2, #57	; 0x39
 8001210:	2100      	movs	r1, #0
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	2304      	movs	r3, #4
 8001216:	9001      	str	r0, [sp, #4]
 8001218:	4803      	ldr	r0, [pc, #12]	; (8001228 <LCD_SetUpdateRegion+0x24>)
 800121a:	f005 fa6f 	bl	80066fc <HAL_DSI_LongWrite>
    }
 800121e:	b003      	add	sp, #12
 8001220:	f85d fb04 	ldr.w	pc, [sp], #4
 8001224:	20000005 	.word	0x20000005
 8001228:	200056e4 	.word	0x200056e4

0800122c <HAL_DSI_TearingEffectCallback>:
    // {
    //     HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
    // }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 800122c:	b570      	push	{r4, r5, r6, lr}
        return instance;
 800122e:	4d15      	ldr	r5, [pc, #84]	; (8001284 <HAL_DSI_TearingEffectCallback+0x58>)
 8001230:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8001232:	2000      	movs	r0, #0
 8001234:	f7ff fd76 	bl	8000d24 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001238:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 800123a:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 800123e:	3301      	adds	r3, #1
 8001240:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001244:	f000 f902 	bl	800144c <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <HAL_DSI_TearingEffectCallback+0x5c>)
        return instance;
 800124a:	6828      	ldr	r0, [r5, #0]
 800124c:	781a      	ldrb	r2, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 800124e:	781b      	ldrb	r3, [r3, #0]
        lockDMAToPorch = enableLock;
 8001250:	f880 204a 	strb.w	r2, [r0, #74]	; 0x4a
 8001254:	b123      	cbz	r3, 8001260 <HAL_DSI_TearingEffectCallback+0x34>
 8001256:	4d0d      	ldr	r5, [pc, #52]	; (800128c <HAL_DSI_TearingEffectCallback+0x60>)
 8001258:	782b      	ldrb	r3, [r5, #0]
 800125a:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 800125e:	b123      	cbz	r3, 800126a <HAL_DSI_TearingEffectCallback+0x3e>
            HAL_DSI_Refresh(hdsi);
            displayRefreshing = true;
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001260:	2000      	movs	r0, #0
        }
    }
 8001262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001266:	f7ff bd75 	b.w	8000d54 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                HAL::getInstance()->swapFrameBuffers();
 800126a:	f00d fad7 	bl	800e81c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            updateRegion = 0;
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <HAL_DSI_TearingEffectCallback+0x64>)
            LCD_SetUpdateRegion(updateRegion);
 8001270:	4630      	mov	r0, r6
            updateRegion = 0;
 8001272:	601e      	str	r6, [r3, #0]
            LCD_SetUpdateRegion(updateRegion);
 8001274:	f7ff ffc6 	bl	8001204 <LCD_SetUpdateRegion>
            HAL_DSI_Refresh(hdsi);
 8001278:	4620      	mov	r0, r4
 800127a:	f005 fa1e 	bl	80066ba <HAL_DSI_Refresh>
            displayRefreshing = true;
 800127e:	2301      	movs	r3, #1
 8001280:	702b      	strb	r3, [r5, #0]
    }
 8001282:	bd70      	pop	{r4, r5, r6, pc}
 8001284:	20020fd8 	.word	0x20020fd8
 8001288:	20000015 	.word	0x20000015
 800128c:	20000606 	.word	0x20000606
 8001290:	200005f0 	.word	0x200005f0

08001294 <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
        updateRegion++;
 8001294:	4b33      	ldr	r3, [pc, #204]	; (8001364 <HAL_DSI_EndOfRefreshCallback+0xd0>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	3201      	adds	r2, #1
    {
 800129a:	b570      	push	{r4, r5, r6, lr}
        if (updateRegion < 4)
 800129c:	2a03      	cmp	r2, #3
        updateRegion++;
 800129e:	601a      	str	r2, [r3, #0]
        {
            DSI->WCR &= ~(DSI_WCR_DSIEN);
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 80012a0:	4b31      	ldr	r3, [pc, #196]	; (8001368 <HAL_DSI_EndOfRefreshCallback+0xd4>)
    {
 80012a2:	4605      	mov	r5, r0
 80012a4:	4c31      	ldr	r4, [pc, #196]	; (800136c <HAL_DSI_EndOfRefreshCallback+0xd8>)
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 80012a6:	6819      	ldr	r1, [r3, #0]
 80012a8:	4b31      	ldr	r3, [pc, #196]	; (8001370 <HAL_DSI_EndOfRefreshCallback+0xdc>)
        if (updateRegion < 4)
 80012aa:	dc2e      	bgt.n	800130a <HAL_DSI_EndOfRefreshCallback+0x76>
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 80012ac:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 80012b0:	f020 0008 	bic.w	r0, r0, #8
 80012b4:	f8c4 0404 	str.w	r0, [r4, #1028]	; 0x404
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 80012b8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80012bc:	fb00 1102 	mla	r1, r0, r2, r1
            LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
            LTDC_Layer1->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
            LTDC_Layer1->CFBLR = ((832 * 2) << 16) | ((REAL_WIDTH) * 2 + 3);

            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
            LCD_SetUpdateRegion(updateRegion);
 80012c0:	4610      	mov	r0, r2
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 80012c2:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
                ADJUSTED_WIDTH += 32;
 80012c6:	bf0c      	ite	eq
 80012c8:	23e8      	moveq	r3, #232	; 0xe8
            uint16_t ADJUSTED_WIDTH = 200;
 80012ca:	23c8      	movne	r3, #200	; 0xc8
            LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2; //adj
 80012cc:	4928      	ldr	r1, [pc, #160]	; (8001370 <HAL_DSI_EndOfRefreshCallback+0xdc>)
 80012ce:	3302      	adds	r3, #2
 80012d0:	041b      	lsls	r3, r3, #16
 80012d2:	f443 73f1 	orr.w	r3, r3, #482	; 0x1e2
 80012d6:	610b      	str	r3, [r1, #16]
            LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 80012d8:	4b26      	ldr	r3, [pc, #152]	; (8001374 <HAL_DSI_EndOfRefreshCallback+0xe0>)
 80012da:	614b      	str	r3, [r1, #20]
            LTDC_Layer1->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 80012dc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80012e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
            LTDC_Layer1->CFBLR = ((832 * 2) << 16) | ((REAL_WIDTH) * 2 + 3);
 80012e4:	4b24      	ldr	r3, [pc, #144]	; (8001378 <HAL_DSI_EndOfRefreshCallback+0xe4>)
 80012e6:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	624b      	str	r3, [r1, #36]	; 0x24
            LCD_SetUpdateRegion(updateRegion);
 80012ee:	f7ff ff89 	bl	8001204 <LCD_SetUpdateRegion>

            DSI->WCR |= DSI_WCR_DSIEN;
 80012f2:	4a1e      	ldr	r2, [pc, #120]	; (800136c <HAL_DSI_EndOfRefreshCallback+0xd8>)
            HAL_DSI_Refresh(hdsi);
 80012f4:	4628      	mov	r0, r5
            DSI->WCR |= DSI_WCR_DSIEN;
 80012f6:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 80012fa:	f043 0308 	orr.w	r3, r3, #8
        //             // Signal to the framework that display update has finished.
        //             HAL::getInstance()->frontPorchEntered();
        //         }
        //     }
        // }
    }
 80012fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DSI->WCR |= DSI_WCR_DSIEN;
 8001302:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
            HAL_DSI_Refresh(hdsi);
 8001306:	f005 b9d8 	b.w	80066ba <HAL_DSI_Refresh>
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 800130a:	f8d4 2404 	ldr.w	r2, [r4, #1028]	; 0x404
            LCD_SetUpdateRegion(0);
 800130e:	2000      	movs	r0, #0
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 8001310:	f022 0208 	bic.w	r2, r2, #8
 8001314:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
            LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001318:	4a18      	ldr	r2, [pc, #96]	; (800137c <HAL_DSI_EndOfRefreshCallback+0xe8>)
            LTDC_Layer1->CFBAR = (uint32_t)currFbBase;
 800131a:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
            LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 800131e:	611a      	str	r2, [r3, #16]
            LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 8001320:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 8001324:	615a      	str	r2, [r3, #20]
            LTDC_Layer1->WHPCR = ((WIDTH + 2) << 16) | 3;
 8001326:	4a16      	ldr	r2, [pc, #88]	; (8001380 <HAL_DSI_EndOfRefreshCallback+0xec>)
 8001328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            LTDC_Layer1->CFBLR = (((832 * 2) << 16) | ((WIDTH * 2) + 3));
 800132c:	4a12      	ldr	r2, [pc, #72]	; (8001378 <HAL_DSI_EndOfRefreshCallback+0xe4>)
 800132e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8001332:	2201      	movs	r2, #1
 8001334:	625a      	str	r2, [r3, #36]	; 0x24
            LCD_SetUpdateRegion(0);
 8001336:	f7ff ff65 	bl	8001204 <LCD_SetUpdateRegion>
            DSI->WCR |= DSI_WCR_DSIEN;
 800133a:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
            GPIO::clear(GPIO::VSYNC_FREQ);
 800133e:	2000      	movs	r0, #0
            DSI->WCR |= DSI_WCR_DSIEN;
 8001340:	f043 0308 	orr.w	r3, r3, #8
 8001344:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001348:	f7ff fd04 	bl	8000d54 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            displayRefreshing = false;
 800134c:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <HAL_DSI_EndOfRefreshCallback+0xf0>)
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
        return instance;
 8001352:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <HAL_DSI_EndOfRefreshCallback+0xf4>)
 8001354:	6818      	ldr	r0, [r3, #0]
            if (HAL::getInstance())
 8001356:	b120      	cbz	r0, 8001362 <HAL_DSI_EndOfRefreshCallback+0xce>
        allowDMATransfers();
 8001358:	6803      	ldr	r3, [r0, #0]
    }
 800135a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	4718      	bx	r3
 8001362:	bd70      	pop	{r4, r5, r6, pc}
 8001364:	200005f0 	.word	0x200005f0
 8001368:	200005ec 	.word	0x200005ec
 800136c:	40016c00 	.word	0x40016c00
 8001370:	40016800 	.word	0x40016800
 8001374:	00ca01e3 	.word	0x00ca01e3
 8001378:	06800193 	.word	0x06800193
 800137c:	00ca01e2 	.word	0x00ca01e2
 8001380:	00ca0003 	.word	0x00ca0003
 8001384:	20000606 	.word	0x20000606
 8001388:	20020fd8 	.word	0x20020fd8

0800138c <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 800138c:	4601      	mov	r1, r0
 800138e:	b508      	push	{r3, lr}
        return instance;
 8001390:	4b03      	ldr	r3, [pc, #12]	; (80013a0 <IdleTaskHook+0x14>)
 8001392:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001394:	b101      	cbz	r1, 8001398 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001396:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001398:	f00d fa5a 	bl	800e850 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 800139c:	2001      	movs	r0, #1
 800139e:	bd08      	pop	{r3, pc}
 80013a0:	20020fd8 	.word	0x20020fd8

080013a4 <_GLOBAL__sub_I_displayRefreshing>:
          cc_in(0)
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <_GLOBAL__sub_I_displayRefreshing+0x18>)
 80013a6:	2200      	movs	r2, #0
{
class KeySampler : public ButtonController
{
public:
    KeySampler()
    {
 80013a8:	4805      	ldr	r0, [pc, #20]	; (80013c0 <_GLOBAL__sub_I_displayRefreshing+0x1c>)
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <_GLOBAL__sub_I_displayRefreshing+0x20>)
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <_GLOBAL__sub_I_displayRefreshing+0x24>)
 80013b4:	6003      	str	r3, [r0, #0]
        init();
 80013b6:	f7ff bb4d 	b.w	8000a54 <_ZN8touchgfx10KeySampler4initEv>
 80013ba:	bf00      	nop
 80013bc:	200005f4 	.word	0x200005f4
 80013c0:	20000600 	.word	0x20000600
 80013c4:	08025dc4 	.word	0x08025dc4
 80013c8:	08025dec 	.word	0x08025dec

080013cc <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80013cc:	2101      	movs	r1, #1
 80013ce:	2200      	movs	r2, #0
{
 80013d0:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80013d2:	4608      	mov	r0, r1
 80013d4:	f009 fea8 	bl	800b128 <osSemaphoreNew>
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 80013da:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80013dc:	b928      	cbnz	r0, 80013ea <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 80013e0:	2128      	movs	r1, #40	; 0x28
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80013e4:	480a      	ldr	r0, [pc, #40]	; (8001410 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 80013e6:	f023 fb07 	bl	80249f8 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2104      	movs	r1, #4
 80013ee:	2001      	movs	r0, #1
 80013f0:	f009 ff82 	bl	800b2f8 <osMessageQueueNew>
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 80013f6:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80013f8:	b918      	cbnz	r0, 8001402 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 80013fa:	4b07      	ldr	r3, [pc, #28]	; (8001418 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80013fc:	212c      	movs	r1, #44	; 0x2c
 80013fe:	4a03      	ldr	r2, [pc, #12]	; (800140c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001400:	e7f0      	b.n	80013e4 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001402:	bd08      	pop	{r3, pc}
 8001404:	2000060c 	.word	0x2000060c
 8001408:	080260f4 	.word	0x080260f4
 800140c:	0802613d 	.word	0x0802613d
 8001410:	0802616c 	.word	0x0802616c
 8001414:	20000608 	.word	0x20000608
 8001418:	080261bc 	.word	0x080261bc

0800141c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 800141c:	4b02      	ldr	r3, [pc, #8]	; (8001428 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 800141e:	f04f 31ff 	mov.w	r1, #4294967295
 8001422:	6818      	ldr	r0, [r3, #0]
 8001424:	f009 bed6 	b.w	800b1d4 <osSemaphoreAcquire>
 8001428:	2000060c 	.word	0x2000060c

0800142c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 800142c:	4b01      	ldr	r3, [pc, #4]	; (8001434 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	f009 bf0a 	b.w	800b248 <osSemaphoreRelease>
 8001434:	2000060c 	.word	0x2000060c

08001438 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001438:	4b02      	ldr	r3, [pc, #8]	; (8001444 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 800143a:	2100      	movs	r1, #0
 800143c:	6818      	ldr	r0, [r3, #0]
 800143e:	f009 bec9 	b.w	800b1d4 <osSemaphoreAcquire>
 8001442:	bf00      	nop
 8001444:	2000060c 	.word	0x2000060c

08001448 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001448:	f7ff bff0 	b.w	800142c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800144c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 800144c:	2300      	movs	r3, #0
 800144e:	4803      	ldr	r0, [pc, #12]	; (800145c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001450:	4903      	ldr	r1, [pc, #12]	; (8001460 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001452:	461a      	mov	r2, r3
 8001454:	6800      	ldr	r0, [r0, #0]
 8001456:	f009 bf95 	b.w	800b384 <osMessageQueuePut>
 800145a:	bf00      	nop
 800145c:	20000608 	.word	0x20000608
 8001460:	20000018 	.word	0x20000018

08001464 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001464:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001466:	2300      	movs	r3, #0
 8001468:	4c07      	ldr	r4, [pc, #28]	; (8001488 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 800146a:	a901      	add	r1, sp, #4
 800146c:	461a      	mov	r2, r3
 800146e:	6820      	ldr	r0, [r4, #0]
 8001470:	f009 ffca 	bl	800b408 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001474:	f04f 33ff 	mov.w	r3, #4294967295
 8001478:	2200      	movs	r2, #0
 800147a:	a901      	add	r1, sp, #4
 800147c:	6820      	ldr	r0, [r4, #0]
 800147e:	f009 ffc3 	bl	800b408 <osMessageQueueGet>
}
 8001482:	b002      	add	sp, #8
 8001484:	bd10      	pop	{r4, pc}
 8001486:	bf00      	nop
 8001488:	20000608 	.word	0x20000608

0800148c <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 800148c:	6803      	ldr	r3, [r0, #0]
 800148e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001490:	4718      	bx	r3

08001492 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001492:	2001      	movs	r0, #1
 8001494:	4770      	bx	lr

08001496 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001496:	6803      	ldr	r3, [r0, #0]
 8001498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149a:	4718      	bx	r3

0800149c <_ZN8STM32DMA10initializeEv>:
}

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800149c:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <_ZN8STM32DMA10initializeEv+0x38>)
{
 800149e:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80014a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014a2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80014a6:	631a      	str	r2, [r3, #48]	; 0x30
 80014a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014aa:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 80014ae:	9201      	str	r2, [sp, #4]
 80014b0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80014b2:	691a      	ldr	r2, [r3, #16]
 80014b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80014b8:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80014ba:	691a      	ldr	r2, [r3, #16]
 80014bc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80014c0:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80014c2:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <_ZN8STM32DMA10initializeEv+0x3c>)
 80014c4:	4a05      	ldr	r2, [pc, #20]	; (80014dc <_ZN8STM32DMA10initializeEv+0x40>)
 80014c6:	619a      	str	r2, [r3, #24]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <_ZN8STM32DMA10initializeEv+0x44>)
 80014ce:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 80014d0:	b002      	add	sp, #8
 80014d2:	4770      	bx	lr
 80014d4:	40023800 	.word	0x40023800
 80014d8:	200055cc 	.word	0x200055cc
 80014dc:	08001525 	.word	0x08001525
 80014e0:	e000e100 	.word	0xe000e100

080014e4 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 80014e4:	f240 30ef 	movw	r0, #1007	; 0x3ef
 80014e8:	4770      	bx	lr
	...

080014ec <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014f2:	6003      	str	r3, [r0, #0]
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <_ZN8STM32DMAD1Ev+0x1c>)
 80014f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80014fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80014fe:	f3bf 8f6f 	isb	sy
}
 8001502:	4770      	bx	lr
 8001504:	0802635c 	.word	0x0802635c
 8001508:	e000e100 	.word	0xe000e100

0800150c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 800150c:	b510      	push	{r4, lr}
 800150e:	4604      	mov	r4, r0
}
 8001510:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8001514:	f7ff ffea 	bl	80014ec <_ZN8STM32DMAD1Ev>
 8001518:	4620      	mov	r0, r4
 800151a:	f023 fa3e 	bl	802499a <_ZdlPvj>
 800151e:	4620      	mov	r0, r4
 8001520:	bd10      	pop	{r4, pc}
	...

08001524 <DMA2D_XferCpltCallback>:
 8001524:	4b02      	ldr	r3, [pc, #8]	; (8001530 <DMA2D_XferCpltCallback+0xc>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 800152a:	6803      	ldr	r3, [r0, #0]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	4718      	bx	r3
 8001530:	20020fd8 	.word	0x20020fd8

08001534 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8001534:	b570      	push	{r4, r5, r6, lr}
 8001536:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001538:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <_ZN8STM32DMAC1Ev+0x30>)
 800153a:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800153c:	2600      	movs	r6, #0
 800153e:	4625      	mov	r5, r4
 8001540:	2260      	movs	r2, #96	; 0x60
 8001542:	6060      	str	r0, [r4, #4]
 8001544:	7226      	strb	r6, [r4, #8]
 8001546:	7266      	strb	r6, [r4, #9]
 8001548:	f845 3b20 	str.w	r3, [r5], #32
 800154c:	4629      	mov	r1, r5
 800154e:	f00d fae5 	bl	800eb1c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8001552:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
        : color(0)
 8001556:	60ee      	str	r6, [r5, #12]
 8001558:	3524      	adds	r5, #36	; 0x24
 800155a:	42ab      	cmp	r3, r5
 800155c:	d1fb      	bne.n	8001556 <_ZN8STM32DMAC1Ev+0x22>
}
 800155e:	4620      	mov	r0, r4
 8001560:	bd70      	pop	{r4, r5, r6, pc}
 8001562:	bf00      	nop
 8001564:	0802635c 	.word	0x0802635c

08001568 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001568:	b508      	push	{r3, lr}
    switch (format)
 800156a:	290b      	cmp	r1, #11
 800156c:	d80b      	bhi.n	8001586 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 800156e:	e8df f001 	tbb	[pc, r1]
 8001572:	0612      	.short	0x0612
 8001574:	0a0a0a10 	.word	0x0a0a0a10
 8001578:	0808080a 	.word	0x0808080a
 800157c:	0808      	.short	0x0808
 800157e:	2001      	movs	r0, #1
}
 8001580:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8001582:	2005      	movs	r0, #5
        break;
 8001584:	e7fc      	b.n	8001580 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 8001586:	4b05      	ldr	r3, [pc, #20]	; (800159c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8001588:	2166      	movs	r1, #102	; 0x66
 800158a:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 800158c:	4805      	ldr	r0, [pc, #20]	; (80015a4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 800158e:	f023 fa33 	bl	80249f8 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8001592:	2000      	movs	r0, #0
 8001594:	e7f4      	b.n	8001580 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001596:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001598:	e7f2      	b.n	8001580 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 800159a:	bf00      	nop
 800159c:	080261fe 	.word	0x080261fe
 80015a0:	08026219 	.word	0x08026219
 80015a4:	08026263 	.word	0x08026263

080015a8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 80015a8:	b508      	push	{r3, lr}
    switch (format)
 80015aa:	290a      	cmp	r1, #10
 80015ac:	d809      	bhi.n	80015c2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 80015ae:	e8df f001 	tbb	[pc, r1]
 80015b2:	0610      	.short	0x0610
 80015b4:	0808080e 	.word	0x0808080e
 80015b8:	06060608 	.word	0x06060608
 80015bc:	06          	.byte	0x06
 80015bd:	00          	.byte	0x00
 80015be:	2001      	movs	r0, #1
}
 80015c0:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 80015c2:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 80015c4:	2187      	movs	r1, #135	; 0x87
 80015c6:	4a05      	ldr	r2, [pc, #20]	; (80015dc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 80015c8:	4805      	ldr	r0, [pc, #20]	; (80015e0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 80015ca:	f023 fa15 	bl	80249f8 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80015ce:	2000      	movs	r0, #0
 80015d0:	e7f6      	b.n	80015c0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80015d2:	2002      	movs	r0, #2
    return dma2dColorMode;
 80015d4:	e7f4      	b.n	80015c0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 80015d6:	bf00      	nop
 80015d8:	080261fe 	.word	0x080261fe
 80015dc:	080262b1 	.word	0x080262b1
 80015e0:	08026263 	.word	0x08026263

080015e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80015e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80015e8:	7f4f      	ldrb	r7, [r1, #29]
{
 80015ea:	460c      	mov	r4, r1
 80015ec:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80015ee:	4639      	mov	r1, r7
 80015f0:	f7ff ffba 	bl	8001568 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80015f4:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80015f8:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80015fa:	4648      	mov	r0, r9
 80015fc:	4641      	mov	r1, r8
 80015fe:	f7ff ffb3 	bl	8001568 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001602:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001604:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001606:	4648      	mov	r0, r9
 8001608:	f7ff ffce 	bl	80015a8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800160c:	8aa1      	ldrh	r1, [r4, #20]
 800160e:	8b62      	ldrh	r2, [r4, #26]
 8001610:	4b42      	ldr	r3, [pc, #264]	; (800171c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8001612:	1a52      	subs	r2, r2, r1
 8001614:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001616:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8001618:	8b22      	ldrh	r2, [r4, #24]
 800161a:	1a52      	subs	r2, r2, r1
 800161c:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800161e:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001620:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001622:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001626:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001628:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800162a:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800162c:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800162e:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8001630:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001632:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 8001636:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001638:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 800163c:	d026      	beq.n	800168c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 800163e:	d810      	bhi.n	8001662 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 8001640:	2920      	cmp	r1, #32
 8001642:	ea45 0402 	orr.w	r4, r5, r2
 8001646:	d062      	beq.n	800170e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 8001648:	2940      	cmp	r1, #64	; 0x40
 800164a:	d060      	beq.n	800170e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 800164c:	2904      	cmp	r1, #4
 800164e:	d05e      	beq.n	800170e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001650:	432a      	orrs	r2, r5
 8001652:	4b32      	ldr	r3, [pc, #200]	; (800171c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001654:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001656:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800165a:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 800165c:	d05b      	beq.n	8001716 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800165e:	4a30      	ldr	r2, [pc, #192]	; (8001720 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8001660:	e040      	b.n	80016e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8001662:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001666:	d007      	beq.n	8001678 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 8001668:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800166c:	d1f0      	bne.n	8001650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800166e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001672:	f042 0209 	orr.w	r2, r2, #9
 8001676:	e003      	b.n	8001680 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001678:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800167c:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001680:	61da      	str	r2, [r3, #28]
        return color;
 8001682:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001684:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001686:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001688:	6158      	str	r0, [r3, #20]
 800168a:	e02a      	b.n	80016e2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800168c:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800168e:	432a      	orrs	r2, r5
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001690:	1d21      	adds	r1, r4, #4
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001692:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001696:	62d9      	str	r1, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001698:	61da      	str	r2, [r3, #28]
            switch ((Bitmap::ClutFormat)palette->format)
 800169a:	7822      	ldrb	r2, [r4, #0]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800169c:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800169e:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 80016a0:	b142      	cbz	r2, 80016b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 80016a2:	2a01      	cmp	r2, #1
 80016a4:	d021      	beq.n	80016ea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 80016a6:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 80016a8:	f240 1111 	movw	r1, #273	; 0x111
 80016ac:	4a1e      	ldr	r2, [pc, #120]	; (8001728 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 80016ae:	481f      	ldr	r0, [pc, #124]	; (800172c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 80016b0:	f023 f9a2 	bl	80249f8 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80016b4:	69da      	ldr	r2, [r3, #28]
            bool blend = true;
 80016b6:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80016b8:	8861      	ldrh	r1, [r4, #2]
 80016ba:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80016be:	3901      	subs	r1, #1
 80016c0:	f022 0210 	bic.w	r2, r2, #16
 80016c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80016c8:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 80016cc:	69da      	ldr	r2, [r3, #28]
 80016ce:	f042 0220 	orr.w	r2, r2, #32
 80016d2:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80016d4:	69da      	ldr	r2, [r3, #28]
 80016d6:	0692      	lsls	r2, r2, #26
 80016d8:	d4fc      	bmi.n	80016d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80016da:	2210      	movs	r2, #16
 80016dc:	609a      	str	r2, [r3, #8]
            if(blend)
 80016de:	2800      	cmp	r0, #0
 80016e0:	d0bd      	beq.n	800165e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80016e2:	4a13      	ldr	r2, [pc, #76]	; (8001730 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80016e4:	601a      	str	r2, [r3, #0]
        }
        break;
    }
}
 80016e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80016ea:	8862      	ldrh	r2, [r4, #2]
                if(blitOp.alpha == 255)
 80016ec:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80016f0:	69d9      	ldr	r1, [r3, #28]
 80016f2:	f102 34ff 	add.w	r4, r2, #4294967295
                if(blitOp.alpha == 255)
 80016f6:	bf18      	it	ne
 80016f8:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80016fa:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 80016fe:	f022 0210 	bic.w	r2, r2, #16
 8001702:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8001706:	f042 0210 	orr.w	r2, r2, #16
 800170a:	61da      	str	r2, [r3, #28]
                break;
 800170c:	e7dd      	b.n	80016ca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800170e:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 8001712:	61dc      	str	r4, [r3, #28]
 8001714:	e7b7      	b.n	8001686 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001716:	f240 2201 	movw	r2, #513	; 0x201
 800171a:	e7e3      	b.n	80016e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 800171c:	4002b000 	.word	0x4002b000
 8001720:	00010201 	.word	0x00010201
 8001724:	080262fc 	.word	0x080262fc
 8001728:	08026316 	.word	0x08026316
 800172c:	08026263 	.word	0x08026263
 8001730:	00020201 	.word	0x00020201

08001734 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8001734:	b570      	push	{r4, r5, r6, lr}
 8001736:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001738:	7f89      	ldrb	r1, [r1, #30]
 800173a:	f7ff ff35 	bl	80015a8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001740:	8aa6      	ldrh	r6, [r4, #20]
 8001742:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001744:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001746:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800174a:	6925      	ldr	r5, [r4, #16]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800174c:	1b92      	subs	r2, r2, r6
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800174e:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001750:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001752:	63dd      	str	r5, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001754:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8001756:	6826      	ldr	r6, [r4, #0]
 8001758:	68e1      	ldr	r1, [r4, #12]
 800175a:	2e08      	cmp	r6, #8
 800175c:	d10d      	bne.n	800177a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800175e:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001760:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001762:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8001764:	4a0e      	ldr	r2, [pc, #56]	; (80017a0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 8001766:	7f20      	ldrb	r0, [r4, #28]
 8001768:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800176c:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 800176e:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001770:	6219      	str	r1, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001772:	615d      	str	r5, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001774:	60dd      	str	r5, [r3, #12]

        // set color
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001776:	601a      	str	r2, [r3, #0]
    }
}
 8001778:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 800177a:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800177c:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 800177e:	0948      	lsrs	r0, r1, #5
        WRITE_REG(DMA2D->FGOR, 0);
 8001780:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8001782:	0a0a      	lsrs	r2, r1, #8
 8001784:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8001788:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 800178c:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8001790:	4302      	orrs	r2, r0
 8001792:	430a      	orrs	r2, r1
 8001794:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001796:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 8001798:	e7ed      	b.n	8001776 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 800179a:	bf00      	nop
 800179c:	4002b000 	.word	0x4002b000
 80017a0:	00010009 	.word	0x00010009
 80017a4:	00020201 	.word	0x00020201
 80017a8:	00030201 	.word	0x00030201

080017ac <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 80017ac:	2001      	movs	r0, #1
 80017ae:	4770      	bx	lr

080017b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 80017b0:	2054      	movs	r0, #84	; 0x54
 80017b2:	4770      	bx	lr

080017b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 80017b4:	2354      	movs	r3, #84	; 0x54
 80017b6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80017ba:	3008      	adds	r0, #8
 80017bc:	4770      	bx	lr

080017be <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 80017be:	2354      	movs	r3, #84	; 0x54
 80017c0:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80017c4:	3008      	adds	r0, #8
 80017c6:	4770      	bx	lr

080017c8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80017c8:	2001      	movs	r0, #1
 80017ca:	4770      	bx	lr

080017cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80017cc:	f643 60f8 	movw	r0, #16120	; 0x3ef8
 80017d0:	4770      	bx	lr

080017d2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80017d2:	f643 63f8 	movw	r3, #16120	; 0x3ef8
 80017d6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80017da:	3008      	adds	r0, #8
 80017dc:	4770      	bx	lr

080017de <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80017de:	f643 63f8 	movw	r3, #16120	; 0x3ef8
 80017e2:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80017e6:	3008      	adds	r0, #8
 80017e8:	4770      	bx	lr

080017ea <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80017ea:	2001      	movs	r0, #1
 80017ec:	4770      	bx	lr

080017ee <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80017ee:	2010      	movs	r0, #16
 80017f0:	4770      	bx	lr

080017f2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80017f2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80017f6:	3008      	adds	r0, #8
 80017f8:	4770      	bx	lr

080017fa <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80017fa:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80017fe:	3008      	adds	r0, #8
 8001800:	4770      	bx	lr

08001802 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8001802:	4608      	mov	r0, r1
 8001804:	f001 be2a 	b.w	800345c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08001808 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x10>)
 800180a:	b510      	push	{r4, lr}
 800180c:	4604      	mov	r4, r0
 800180e:	6003      	str	r3, [r0, #0]
 8001810:	f00b feba 	bl	800d588 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001814:	4620      	mov	r0, r4
 8001816:	bd10      	pop	{r4, pc}
 8001818:	08026414 	.word	0x08026414

0800181c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 800181c:	b510      	push	{r4, lr}
 800181e:	4604      	mov	r4, r0
 8001820:	f7ff fff2 	bl	8001808 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8001824:	215c      	movs	r1, #92	; 0x5c
 8001826:	4620      	mov	r0, r4
 8001828:	f023 f8b7 	bl	802499a <_ZdlPvj>
 800182c:	4620      	mov	r0, r4
 800182e:	bd10      	pop	{r4, pc}

08001830 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001832:	b510      	push	{r4, lr}
 8001834:	4604      	mov	r4, r0
 8001836:	6003      	str	r3, [r0, #0]
 8001838:	f00b fea6 	bl	800d588 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800183c:	4620      	mov	r0, r4
 800183e:	bd10      	pop	{r4, pc}
 8001840:	080263e0 	.word	0x080263e0

08001844 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001844:	b510      	push	{r4, lr}
 8001846:	4604      	mov	r4, r0
 8001848:	f7ff fff2 	bl	8001830 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800184c:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
 8001850:	4620      	mov	r0, r4
 8001852:	f023 f8a2 	bl	802499a <_ZdlPvj>
 8001856:	4620      	mov	r0, r4
 8001858:	bd10      	pop	{r4, pc}
	...

0800185c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800185c:	4b03      	ldr	r3, [pc, #12]	; (800186c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800185e:	b510      	push	{r4, lr}
 8001860:	4604      	mov	r4, r0
 8001862:	6003      	str	r3, [r0, #0]
 8001864:	f00b fe90 	bl	800d588 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001868:	4620      	mov	r0, r4
 800186a:	bd10      	pop	{r4, pc}
 800186c:	080263ac 	.word	0x080263ac

08001870 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001870:	b510      	push	{r4, lr}
 8001872:	4604      	mov	r4, r0
 8001874:	f7ff fff2 	bl	800185c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001878:	2118      	movs	r1, #24
 800187a:	4620      	mov	r0, r4
 800187c:	f023 f88d 	bl	802499a <_ZdlPvj>
 8001880:	4620      	mov	r0, r4
 8001882:	bd10      	pop	{r4, pc}

08001884 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <_ZN12FrontendHeapD1Ev+0x28>)
 8001886:	b510      	push	{r4, lr}
 8001888:	4604      	mov	r4, r0
 800188a:	6003      	str	r3, [r0, #0]
 800188c:	f500 507c 	add.w	r0, r0, #16128	; 0x3f00
 8001890:	302c      	adds	r0, #44	; 0x2c
 8001892:	f7ff ffb9 	bl	8001808 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8001896:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800189a:	f7ff ffc9 	bl	8001830 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800189e:	f104 0014 	add.w	r0, r4, #20
 80018a2:	f7ff ffdb 	bl	800185c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80018a6:	4620      	mov	r0, r4
 80018a8:	bd10      	pop	{r4, pc}
 80018aa:	bf00      	nop
 80018ac:	08026448 	.word	0x08026448

080018b0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80018b0:	b508      	push	{r3, lr}
 80018b2:	4802      	ldr	r0, [pc, #8]	; (80018bc <__tcf_0+0xc>)
 80018b4:	f7ff ffe6 	bl	8001884 <_ZN12FrontendHeapD1Ev>
 80018b8:	bd08      	pop	{r3, pc}
 80018ba:	bf00      	nop
 80018bc:	20000614 	.word	0x20000614

080018c0 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80018c0:	b510      	push	{r4, lr}
 80018c2:	4604      	mov	r4, r0
 80018c4:	f7ff ffde 	bl	8001884 <_ZN12FrontendHeapD1Ev>
 80018c8:	f244 01e4 	movw	r1, #16612	; 0x40e4
 80018cc:	4620      	mov	r0, r4
 80018ce:	f023 f864 	bl	802499a <_ZdlPvj>
 80018d2:	4620      	mov	r0, r4
 80018d4:	bd10      	pop	{r4, pc}
	...

080018d8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80018d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80018dc:	f001 fb92 	bl	8003004 <_ZN14BitmapDatabase11getInstanceEv>
 80018e0:	2400      	movs	r4, #0
 80018e2:	4605      	mov	r5, r0
 80018e4:	f001 fb92 	bl	800300c <_ZN14BitmapDatabase15getInstanceSizeEv>
 80018e8:	4623      	mov	r3, r4
 80018ea:	4601      	mov	r1, r0
 80018ec:	4622      	mov	r2, r4
 80018ee:	4628      	mov	r0, r5
 80018f0:	9400      	str	r4, [sp, #0]
 80018f2:	f015 fae1 	bl	8016eb8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80018f6:	4b26      	ldr	r3, [pc, #152]	; (8001990 <touchgfx_init+0xb8>)
 80018f8:	4a26      	ldr	r2, [pc, #152]	; (8001994 <touchgfx_init+0xbc>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80018fa:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80018fc:	4d26      	ldr	r5, [pc, #152]	; (8001998 <touchgfx_init+0xc0>)
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	f003 fb54 	bl	8004fac <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8001904:	4825      	ldr	r0, [pc, #148]	; (800199c <touchgfx_init+0xc4>)
 8001906:	f015 fa23 	bl	8016d50 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 800190a:	782b      	ldrb	r3, [r5, #0]
 800190c:	f3bf 8f5b 	dmb	ish
 8001910:	07db      	lsls	r3, r3, #31
 8001912:	d437      	bmi.n	8001984 <touchgfx_init+0xac>
 8001914:	4628      	mov	r0, r5
 8001916:	f023 f842 	bl	802499e <__cxa_guard_acquire>
 800191a:	b398      	cbz	r0, 8001984 <touchgfx_init+0xac>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800191c:	4c20      	ldr	r4, [pc, #128]	; (80019a0 <touchgfx_init+0xc8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 800191e:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <touchgfx_init+0xcc>)
 8001920:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8001924:	f104 0014 	add.w	r0, r4, #20
 8001928:	6023      	str	r3, [r4, #0]
 800192a:	f508 577c 	add.w	r7, r8, #16128	; 0x3f00
 800192e:	6060      	str	r0, [r4, #4]
 8001930:	f8c4 8008 	str.w	r8, [r4, #8]
 8001934:	f107 0660 	add.w	r6, r7, #96	; 0x60
 8001938:	60e7      	str	r7, [r4, #12]
 800193a:	6126      	str	r6, [r4, #16]
 800193c:	f00b fe26 	bl	800d58c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001940:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <touchgfx_init+0xd0>)
 8001942:	4640      	mov	r0, r8
 8001944:	6163      	str	r3, [r4, #20]
 8001946:	f00b fe21 	bl	800d58c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800194a:	4b18      	ldr	r3, [pc, #96]	; (80019ac <touchgfx_init+0xd4>)
 800194c:	4638      	mov	r0, r7
 800194e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001950:	f00b fe1c 	bl	800d58c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001954:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 8001958:	4a15      	ldr	r2, [pc, #84]	; (80019b0 <touchgfx_init+0xd8>)
 800195a:	f603 7088 	addw	r0, r3, #3976	; 0xf88
 800195e:	f8c3 2f2c 	str.w	r2, [r3, #3884]	; 0xf2c
 8001962:	f003 fb9f 	bl	80050a4 <_ZN5ModelC1Ev>
 8001966:	4622      	mov	r2, r4
 8001968:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800196c:	4630      	mov	r0, r6
 800196e:	f003 fb8f 	bl	8005090 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8001972:	4630      	mov	r0, r6
 8001974:	f001 fd72 	bl	800345c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8001978:	480e      	ldr	r0, [pc, #56]	; (80019b4 <touchgfx_init+0xdc>)
 800197a:	f023 f85b 	bl	8024a34 <atexit>
 800197e:	4628      	mov	r0, r5
 8001980:	f023 f819 	bl	80249b6 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8001984:	480c      	ldr	r0, [pc, #48]	; (80019b8 <touchgfx_init+0xe0>)
}
 8001986:	b002      	add	sp, #8
 8001988:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 800198c:	f7ff baa6 	b.w	8000edc <_ZN11TouchGFXHAL10initializeEv>
 8001990:	20021054 	.word	0x20021054
 8001994:	20005518 	.word	0x20005518
 8001998:	20000610 	.word	0x20000610
 800199c:	2000001c 	.word	0x2000001c
 80019a0:	20000614 	.word	0x20000614
 80019a4:	08026448 	.word	0x08026448
 80019a8:	080263ac 	.word	0x080263ac
 80019ac:	080263e0 	.word	0x080263e0
 80019b0:	08026414 	.word	0x08026414
 80019b4:	080018b1 	.word	0x080018b1
 80019b8:	2000549c 	.word	0x2000549c

080019bc <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80019bc:	4801      	ldr	r0, [pc, #4]	; (80019c4 <touchgfx_taskEntry+0x8>)
 80019be:	f7ff baa7 	b.w	8000f10 <_ZN11TouchGFXHAL9taskEntryEv>
 80019c2:	bf00      	nop
 80019c4:	2000549c 	.word	0x2000549c

080019c8 <_GLOBAL__sub_I_touchgfx_init>:
}
 80019c8:	b513      	push	{r0, r1, r4, lr}
static STM32DMA dma;
 80019ca:	490c      	ldr	r1, [pc, #48]	; (80019fc <_GLOBAL__sub_I_touchgfx_init+0x34>)
{
public:

    STM32TouchController() {}
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <_GLOBAL__sub_I_touchgfx_init+0x38>)
 80019ce:	4c0d      	ldr	r4, [pc, #52]	; (8001a04 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
 80019d0:	4608      	mov	r0, r1
 80019d2:	6023      	str	r3, [r4, #0]
 80019d4:	f7ff fdae 	bl	8001534 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 80019d8:	4a0b      	ldr	r2, [pc, #44]	; (8001a08 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80019da:	4610      	mov	r0, r2
 80019dc:	f018 fc1a 	bl	801a214 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80019e0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80019e4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80019e8:	4904      	ldr	r1, [pc, #16]	; (80019fc <_GLOBAL__sub_I_touchgfx_init+0x34>)
 80019ea:	4808      	ldr	r0, [pc, #32]	; (8001a0c <_GLOBAL__sub_I_touchgfx_init+0x44>)
 80019ec:	e9cd 3200 	strd	r3, r2, [sp]
 80019f0:	4623      	mov	r3, r4
 80019f2:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80019f4:	f7ff fb50 	bl	8001098 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 80019f8:	b002      	add	sp, #8
 80019fa:	bd10      	pop	{r4, pc}
 80019fc:	200046fc 	.word	0x200046fc
 8001a00:	08025e98 	.word	0x08025e98
 8001a04:	200046f8 	.word	0x200046f8
 8001a08:	2000551c 	.word	0x2000551c
 8001a0c:	2000549c 	.word	0x2000549c

08001a10 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8001a10:	4801      	ldr	r0, [pc, #4]	; (8001a18 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8001a12:	f7ff bd6b 	b.w	80014ec <_ZN8STM32DMAD1Ev>
 8001a16:	bf00      	nop
 8001a18:	200046fc 	.word	0x200046fc

08001a1c <SCB_CleanInvalidateDCache>:
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001a1c:	4910      	ldr	r1, [pc, #64]	; (8001a60 <SCB_CleanInvalidateDCache+0x44>)
 8001a1e:	2300      	movs	r3, #0
{
 8001a20:	b570      	push	{r4, r5, r6, lr}
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001a22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001a26:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001a2a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001a2e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001a32:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001a36:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001a3a:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001a3c:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001a40:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001a42:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
      } while (ways-- != 0U);
 8001a46:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001a48:	f8c1 5274 	str.w	r5, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001a4c:	d2f9      	bcs.n	8001a42 <SCB_CleanInvalidateDCache+0x26>
    } while(sets-- != 0U);
 8001a4e:	3b20      	subs	r3, #32
 8001a50:	f113 0f20 	cmn.w	r3, #32
 8001a54:	d1f2      	bne.n	8001a3c <SCB_CleanInvalidateDCache+0x20>
 8001a56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a5a:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8001a5e:	bd70      	pop	{r4, r5, r6, pc}
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a64:	4b02      	ldr	r3, [pc, #8]	; (8001a70 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 8001a66:	2290      	movs	r2, #144	; 0x90
 8001a68:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000e100 	.word	0xe000e100

08001a74 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a74:	4b02      	ldr	r3, [pc, #8]	; (8001a80 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 8001a76:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a7a:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000e100 	.word	0xe000e100

08001a84 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(DMA2D_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
}
 8001a84:	4770      	bx	lr

08001a86 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 8001a86:	4770      	bx	lr

08001a88 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x10>)
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	03db      	lsls	r3, r3, #15
 8001a8e:	d501      	bpl.n	8001a94 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xc>
    {
        SCB_CleanInvalidateDCache();
 8001a90:	f7ff bfc4 	b.w	8001a1c <SCB_CleanInvalidateDCache>
    }
}
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8001a9c:	b570      	push	{r4, r5, r6, lr}
 8001a9e:	4604      	mov	r4, r0
    HAL::initialize();
 8001aa0:	f00c f89d 	bl	800dbde <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8001aa4:	6823      	ldr	r3, [r4, #0]
 8001aa6:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8001aa8:	f012 f8e0 	bl	8013c6c <_ZN8touchgfx11Application11getInstanceEv>
 8001aac:	4601      	mov	r1, r0
 8001aae:	4620      	mov	r0, r4
 8001ab0:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001aba:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001abe:	2300      	movs	r3, #0
 8001ac0:	46ac      	mov	ip, r5
 8001ac2:	461a      	mov	r2, r3
}
 8001ac4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8001ac8:	4760      	bx	ip

08001aca <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    HAL::endFrame();
 8001aca:	f00c b87b 	b.w	800dbc4 <_ZN8touchgfx3HAL8endFrameEv>
	...

08001ad0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8001ad0:	b508      	push	{r3, lr}
    HAL::flushFrameBuffer(rect);
 8001ad2:	f00c f835 	bl	800db40 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001ad6:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x18>)
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	03db      	lsls	r3, r3, #15
 8001adc:	d503      	bpl.n	8001ae6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x16>
}
 8001ade:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        SCB_CleanInvalidateDCache();
 8001ae2:	f7ff bf9b 	b.w	8001a1c <SCB_CleanInvalidateDCache>
}
 8001ae6:	bd08      	pop	{r3, pc}
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    return HAL::blockCopy(dest, src, numBytes);
 8001aec:	f00c b983 	b.w	800ddf6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08001af0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 8001af2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001af6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001afa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001afe:	f3bf 8f6f 	isb	sy
}
 8001b02:	4770      	bx	lr
 8001b04:	e000e100 	.word	0xe000e100

08001b08 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8001b08:	4901      	ldr	r1, [pc, #4]	; (8001b10 <vApplicationIdleHook+0x8>)
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	f00b b836 	b.w	800cb7c <vTaskSetApplicationTaskTag>
 8001b10:	0800138d 	.word	0x0800138d

08001b14 <QSPI_WriteEnable.constprop.0>:
/**
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8001b14:	b500      	push	{lr}
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001b16:	f44f 7340 	mov.w	r3, #768	; 0x300
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8001b1a:	b095      	sub	sp, #84	; 0x54
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b20:	4817      	ldr	r0, [pc, #92]	; (8001b80 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001b22:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8001b24:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b26:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8001b28:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001b2a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001b2c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8001b30:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 8001b32:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001b34:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001b36:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b3a:	f005 fecf 	bl	80078dc <HAL_QSPI_Command>
 8001b3e:	b9e0      	cbnz	r0, 8001b7a <QSPI_WriteEnable.constprop.0+0x66>
  {
    return QSPI_ERROR;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MX25L512_SR_WREN;
 8001b40:	2302      	movs	r3, #2
  s_config.Mask            = MX25L512_SR_WREN;
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 1;
  s_config.Interval        = 0x10;
 8001b42:	2201      	movs	r2, #1
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8001b44:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8001b48:	9004      	str	r0, [sp, #16]
  s_command.DataMode       = QSPI_DATA_4_LINES;

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b4a:	480d      	ldr	r0, [pc, #52]	; (8001b80 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = MX25L512_SR_WREN;
 8001b4c:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8001b50:	2310      	movs	r3, #16
 8001b52:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8001b56:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b58:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8001b5a:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_4_LINES;
 8001b5e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b62:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_4_LINES;
 8001b64:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b66:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b6a:	f005 ffb2 	bl	8007ad2 <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 8001b6e:	3800      	subs	r0, #0
 8001b70:	bf18      	it	ne
 8001b72:	2001      	movne	r0, #1
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 8001b74:	b015      	add	sp, #84	; 0x54
 8001b76:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	e7fa      	b.n	8001b74 <QSPI_WriteEnable.constprop.0+0x60>
 8001b7e:	bf00      	nop
 8001b80:	200057f4 	.word	0x200057f4

08001b84 <bufclear>:
		dados[i] = '\0';
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <bufclear+0x10>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
 8001b8a:	705a      	strb	r2, [r3, #1]
 8001b8c:	709a      	strb	r2, [r3, #2]
 8001b8e:	70da      	strb	r2, [r3, #3]
 8001b90:	711a      	strb	r2, [r3, #4]
}
 8001b92:	4770      	bx	lr
 8001b94:	2000559c 	.word	0x2000559c

08001b98 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE BEGIN 5 */
	//Prepara a imagem da area de trabalho do cartão SD
		f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	492c      	ldr	r1, [pc, #176]	; (8001c50 <StartDefaultTask+0xb8>)
 8001ba0:	482c      	ldr	r0, [pc, #176]	; (8001c54 <StartDefaultTask+0xbc>)

		//fecha a area de trabalho do cartão SD
		f_close(&SDFile);

		//------LOOP DE PREPARAÇÂO DOS DADOS------
		for (int a=0; a<bytesread-1; a++){
 8001ba2:	2400      	movs	r4, #0
		f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8001ba4:	f008 ff40 	bl	800aa28 <f_mount>
		f_open(&SDFile, "DADOS.txt", FA_READ);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	492b      	ldr	r1, [pc, #172]	; (8001c58 <StartDefaultTask+0xc0>)
 8001bac:	482b      	ldr	r0, [pc, #172]	; (8001c5c <StartDefaultTask+0xc4>)
 8001bae:	f008 ff7b 	bl	800aaa8 <f_open>
		for (int a=0; a<bytesread-1; a++){
 8001bb2:	4f2b      	ldr	r7, [pc, #172]	; (8001c60 <StartDefaultTask+0xc8>)
		f_read(&SDFile, rtext, sizeof(rtext), (UINT*)&bytesread);
 8001bb4:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <StartDefaultTask+0xc8>)
 8001bb6:	f644 2238 	movw	r2, #19000	; 0x4a38
 8001bba:	492a      	ldr	r1, [pc, #168]	; (8001c64 <StartDefaultTask+0xcc>)
 8001bbc:	4827      	ldr	r0, [pc, #156]	; (8001c5c <StartDefaultTask+0xc4>)
			if('0' <= rtext[a] && rtext[a]<= '9'){//se o valor na posição do vetor for um número ...
			j = 0;
 8001bbe:	4e2a      	ldr	r6, [pc, #168]	; (8001c68 <StartDefaultTask+0xd0>)
		f_read(&SDFile, rtext, sizeof(rtext), (UINT*)&bytesread);
 8001bc0:	f009 f876 	bl	800acb0 <f_read>
		f_close(&SDFile);
 8001bc4:	4825      	ldr	r0, [pc, #148]	; (8001c5c <StartDefaultTask+0xc4>)
 8001bc6:	f009 f988 	bl	800aeda <f_close>
		for (int a=0; a<bytesread-1; a++){
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	4620      	mov	r0, r4
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	42a3      	cmp	r3, r4
 8001bd2:	d816      	bhi.n	8001c02 <StartDefaultTask+0x6a>
		}

  for(;;)
  {
	  //---LOOP DE ENVIO CONTINUO DOS DADOS DE ECG---
	  xQueueSend(messageQ, &valor[x], 0);//envia um dado para uma fila
 8001bd4:	4c25      	ldr	r4, [pc, #148]	; (8001c6c <StartDefaultTask+0xd4>)
 8001bd6:	4d26      	ldr	r5, [pc, #152]	; (8001c70 <StartDefaultTask+0xd8>)
 8001bd8:	6821      	ldr	r1, [r4, #0]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	4825      	ldr	r0, [pc, #148]	; (8001c74 <StartDefaultTask+0xdc>)
 8001bde:	461a      	mov	r2, r3
 8001be0:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8001be4:	6800      	ldr	r0, [r0, #0]
 8001be6:	f00a f8d6 	bl	800bd96 <xQueueGenericSend>
	  if(x<z){//testa se o vetor "valor" chegou ao fim
 8001bea:	4a23      	ldr	r2, [pc, #140]	; (8001c78 <StartDefaultTask+0xe0>)
 8001bec:	6823      	ldr	r3, [r4, #0]
		  x++;
	  }else{
		 x=0;
	  }
    osDelay(3);
 8001bee:	2003      	movs	r0, #3
	  if(x<z){//testa se o vetor "valor" chegou ao fim
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	4293      	cmp	r3, r2
		  x++;
 8001bf4:	bfb4      	ite	lt
 8001bf6:	3301      	addlt	r3, #1
		 x=0;
 8001bf8:	2300      	movge	r3, #0
 8001bfa:	6023      	str	r3, [r4, #0]
    osDelay(3);
 8001bfc:	f009 fa7a 	bl	800b0f4 <osDelay>
	  xQueueSend(messageQ, &valor[x], 0);//envia um dado para uma fila
 8001c00:	e7ea      	b.n	8001bd8 <StartDefaultTask+0x40>
			if('0' <= rtext[a] && rtext[a]<= '9'){//se o valor na posição do vetor for um número ...
 8001c02:	4a18      	ldr	r2, [pc, #96]	; (8001c64 <StartDefaultTask+0xcc>)
 8001c04:	5d13      	ldrb	r3, [r2, r4]
 8001c06:	3b30      	subs	r3, #48	; 0x30
 8001c08:	2b09      	cmp	r3, #9
 8001c0a:	d81a      	bhi.n	8001c42 <StartDefaultTask+0xaa>
			j = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	4402      	add	r2, r0
 8001c10:	f8df c068 	ldr.w	ip, [pc, #104]	; 8001c7c <StartDefaultTask+0xe4>
				while(rtext[a] !='\r'){//enquanto os os dados serem números...
 8001c14:	4619      	mov	r1, r3
			j = 0;
 8001c16:	6033      	str	r3, [r6, #0]
				while(rtext[a] !='\r'){//enquanto os os dados serem números...
 8001c18:	f812 5b01 	ldrb.w	r5, [r2], #1
 8001c1c:	180c      	adds	r4, r1, r0
 8001c1e:	2d0d      	cmp	r5, #13
 8001c20:	d111      	bne.n	8001c46 <StartDefaultTask+0xae>
 8001c22:	b103      	cbz	r3, 8001c26 <StartDefaultTask+0x8e>
 8001c24:	6031      	str	r1, [r6, #0]
				valor [z] = atoi(dados); /*pega os dados do vetor "dados" e
 8001c26:	4d14      	ldr	r5, [pc, #80]	; (8001c78 <StartDefaultTask+0xe0>)
 8001c28:	4814      	ldr	r0, [pc, #80]	; (8001c7c <StartDefaultTask+0xe4>)
 8001c2a:	f8d5 8000 	ldr.w	r8, [r5]
 8001c2e:	f022 ff07 	bl	8024a40 <atoi>
 8001c32:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <StartDefaultTask+0xd8>)
 8001c34:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
				bufclear(); // limpa o vetor dados
 8001c38:	f7ff ffa4 	bl	8001b84 <bufclear>
				z++;
 8001c3c:	682b      	ldr	r3, [r5, #0]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	602b      	str	r3, [r5, #0]
		for (int a=0; a<bytesread-1; a++){
 8001c42:	3401      	adds	r4, #1
 8001c44:	e7c1      	b.n	8001bca <StartDefaultTask+0x32>
				j++;
 8001c46:	3101      	adds	r1, #1
 8001c48:	2301      	movs	r3, #1
				dados[j]= rtext[a];//copia o valor (numerico) para outro vetor
 8001c4a:	f80c 5b01 	strb.w	r5, [ip], #1
				j++;
 8001c4e:	e7e3      	b.n	8001c18 <StartDefaultTask+0x80>
 8001c50:	200005b8 	.word	0x200005b8
 8001c54:	20000154 	.word	0x20000154
 8001c58:	08026454 	.word	0x08026454
 8001c5c:	20000388 	.word	0x20000388
 8001c60:	20005598 	.word	0x20005598
 8001c64:	200058fc 	.word	0x200058fc
 8001c68:	200058f8 	.word	0x200058f8
 8001c6c:	2000db74 	.word	0x2000db74
 8001c70:	2000a334 	.word	0x2000a334
 8001c74:	2000dc84 	.word	0x2000dc84
 8001c78:	2000db78 	.word	0x2000db78
 8001c7c:	2000559c 	.word	0x2000559c

08001c80 <SystemClock_Config>:
{
 8001c80:	b510      	push	{r4, lr}
 8001c82:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c84:	2210      	movs	r2, #16
 8001c86:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c88:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c8a:	a809      	add	r0, sp, #36	; 0x24
 8001c8c:	f023 f83e 	bl	8024d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c90:	2214      	movs	r2, #20
 8001c92:	2100      	movs	r1, #0
 8001c94:	a802      	add	r0, sp, #8
 8001c96:	f023 f839 	bl	8024d0c <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <SystemClock_Config+0x94>)
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001c9c:	2119      	movs	r1, #25
  RCC_OscInitStruct.PLL.PLLR = 7;
 8001c9e:	2008      	movs	r0, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ca2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ca6:	641a      	str	r2, [r3, #64]	; 0x40
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cb2:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <SystemClock_Config+0x98>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001cba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cbc:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cbe:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cc0:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cc2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cc6:	9301      	str	r3, [sp, #4]
 8001cc8:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cce:	e9cd 2307 	strd	r2, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cd6:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001cda:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001cde:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 7;
 8001ce2:	2307      	movs	r3, #7
 8001ce4:	e9cd 0312 	strd	r0, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce8:	a807      	add	r0, sp, #28
 8001cea:	f005 ff83 	bl	8007bf4 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001cee:	f005 fc91 	bl	8007614 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf2:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001cf4:	2106      	movs	r1, #6
 8001cf6:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cf8:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cfc:	2400      	movs	r4, #0
 8001cfe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d02:	e9cd 4304 	strd	r4, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d0a:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001d0c:	f006 f966 	bl	8007fdc <HAL_RCC_ClockConfig>
}
 8001d10:	b014      	add	sp, #80	; 0x50
 8001d12:	bd10      	pop	{r4, pc}
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40007000 	.word	0x40007000

08001d1c <MX_I2C4_Init>:
{
 8001d1c:	b538      	push	{r3, r4, r5, lr}
  hi2c4.Init.Timing = 0x00C0EAFF;
 8001d1e:	4a0d      	ldr	r2, [pc, #52]	; (8001d54 <MX_I2C4_Init+0x38>)
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d20:	2500      	movs	r5, #0
  hi2c4.Instance = I2C4;
 8001d22:	4c0d      	ldr	r4, [pc, #52]	; (8001d58 <MX_I2C4_Init+0x3c>)
  hi2c4.Init.Timing = 0x00C0EAFF;
 8001d24:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <MX_I2C4_Init+0x40>)
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001d26:	4620      	mov	r0, r4
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d28:	6225      	str	r5, [r4, #32]
  hi2c4.Init.Timing = 0x00C0EAFF;
 8001d2a:	e9c4 2300 	strd	r2, r3, [r4]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d2e:	2301      	movs	r3, #1
  hi2c4.Init.OwnAddress2 = 0;
 8001d30:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d34:	e9c4 5302 	strd	r5, r3, [r4, #8]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d38:	e9c4 5506 	strd	r5, r5, [r4, #24]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001d3c:	f005 f87f 	bl	8006e3e <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d40:	4629      	mov	r1, r5
 8001d42:	4620      	mov	r0, r4
 8001d44:	f005 fa5f 	bl	8007206 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001d48:	4629      	mov	r1, r5
 8001d4a:	4620      	mov	r0, r4
}
 8001d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001d50:	f005 ba7f 	b.w	8007252 <HAL_I2CEx_ConfigDigitalFilter>
 8001d54:	40006000 	.word	0x40006000
 8001d58:	20005700 	.word	0x20005700
 8001d5c:	00c0eaff 	.word	0x00c0eaff

08001d60 <main>:
{
 8001d60:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001d64:	b0bb      	sub	sp, #236	; 0xec

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001d66:	2210      	movs	r2, #16
 8001d68:	2100      	movs	r1, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d6a:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001d6c:	a82c      	add	r0, sp, #176	; 0xb0

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8001d6e:	261c      	movs	r6, #28
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001d70:	f022 ffcc 	bl	8024d0c <memset>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001d74:	2503      	movs	r5, #3
  HAL_MPU_Disable();
 8001d76:	f003 fe0b 	bl	8005990 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8001d7a:	f04f 5e00 	mov.w	lr, #536870912	; 0x20000000
 8001d7e:	4bcc      	ldr	r3, [pc, #816]	; (80020b0 <main+0x350>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d80:	a82c      	add	r0, sp, #176	; 0xb0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d82:	f8ad 40b0 	strh.w	r4, [sp, #176]	; 0xb0
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001d86:	f240 1701 	movw	r7, #257	; 0x101
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8001d8a:	e9cd e32d 	strd	lr, r3, [sp, #180]	; 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001d8e:	4bc9      	ldr	r3, [pc, #804]	; (80020b4 <main+0x354>)
 8001d90:	932f      	str	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d92:	f003 fe1b 	bl	80059cc <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x90000000;
 8001d96:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001d9a:	f88d 40b1 	strb.w	r4, [sp, #177]	; 0xb1
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001d9e:	2400      	movs	r4, #0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001da0:	a82c      	add	r0, sp, #176	; 0xb0
  MPU_InitStruct.BaseAddress = 0x90000000;
 8001da2:	932d      	str	r3, [sp, #180]	; 0xb4
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8001da4:	f88d 60b8 	strb.w	r6, [sp, #184]	; 0xb8
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001da8:	f88d 40bb 	strb.w	r4, [sp, #187]	; 0xbb
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001dac:	f8ad 40be 	strh.w	r4, [sp, #190]	; 0xbe
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001db0:	f003 fe0c 	bl	80059cc <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001db4:	2302      	movs	r3, #2
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001db6:	a82c      	add	r0, sp, #176	; 0xb0
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001db8:	f88d 50bb 	strb.w	r5, [sp, #187]	; 0xbb
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001dbc:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8001dc0:	2319      	movs	r3, #25
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001dc2:	f8ad 70be 	strh.w	r7, [sp, #190]	; 0xbe
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8001dc6:	f88d 30b8 	strb.w	r3, [sp, #184]	; 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001dca:	f003 fdff 	bl	80059cc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0xC0000000;
 8001dce:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001dd2:	a82c      	add	r0, sp, #176	; 0xb0
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8001dd4:	f88d 60b8 	strb.w	r6, [sp, #184]	; 0xb8

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8001dd8:	2604      	movs	r6, #4
  MPU_InitStruct.BaseAddress = 0xC0000000;
 8001dda:	932d      	str	r3, [sp, #180]	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8001ddc:	f88d 50b1 	strb.w	r5, [sp, #177]	; 0xb1
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001de0:	f88d 40bb 	strb.w	r4, [sp, #187]	; 0xbb
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001de4:	f8ad 40be 	strh.w	r4, [sp, #190]	; 0xbe
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001de8:	f003 fdf0 	bl	80059cc <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8001dec:	2317      	movs	r3, #23
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001dee:	a82c      	add	r0, sp, #176	; 0xb0
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8001df0:	f88d 60b1 	strb.w	r6, [sp, #177]	; 0xb1
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8001df4:	f88d 30b8 	strb.w	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001df8:	f88d 50bb 	strb.w	r5, [sp, #187]	; 0xbb
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001dfc:	f8ad 70be 	strh.w	r7, [sp, #190]	; 0xbe
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001e00:	f003 fde4 	bl	80059cc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001e04:	4630      	mov	r0, r6
 8001e06:	f003 fdd1 	bl	80059ac <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e0e:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e12:	4aa9      	ldr	r2, [pc, #676]	; (80020b8 <main+0x358>)
 8001e14:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e1c:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e20:	6953      	ldr	r3, [r2, #20]
 8001e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e26:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e2c:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001e30:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001e34:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001e38:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001e3c:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001e40:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001e44:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001e48:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001e4a:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001e4e:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001e50:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8001e54:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001e56:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8001e5a:	d2f9      	bcs.n	8001e50 <main+0xf0>
    } while(sets-- != 0U);
 8001e5c:	3b20      	subs	r3, #32
 8001e5e:	f113 0f20 	cmn.w	r3, #32
 8001e62:	d1f2      	bne.n	8001e4a <main+0xea>
 8001e64:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001e68:	6953      	ldr	r3, [r2, #20]
 8001e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6e:	6153      	str	r3, [r2, #20]
 8001e70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e74:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001e78:	f003 fcee 	bl	8005858 <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7c:	2501      	movs	r5, #1
  SystemClock_Config();
 8001e7e:	f7ff feff 	bl	8001c80 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e82:	2214      	movs	r2, #20
 8001e84:	2100      	movs	r1, #0
 8001e86:	a82c      	add	r0, sp, #176	; 0xb0
 8001e88:	f022 ff40 	bl	8024d0c <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e8c:	4b8b      	ldr	r3, [pc, #556]	; (80020bc <main+0x35c>)
  HAL_GPIO_WritePin(GPIOJ, VSYNC_FREQ2_Pin|RENDER_TIME2_Pin|FRAMERATE_Pin, GPIO_PIN_RESET);
 8001e8e:	f242 0122 	movw	r1, #8226	; 0x2022
 8001e92:	488b      	ldr	r0, [pc, #556]	; (80020c0 <main+0x360>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e96:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Pin = DSI_RESET_Pin;
 8001e9a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e9e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ea0:	f042 0210 	orr.w	r2, r2, #16
  hdsi.Instance = DSI;
 8001ea4:	4f87      	ldr	r7, [pc, #540]	; (80020c4 <main+0x364>)
  hdsi.Init.TXEscapeCkdiv = 4;
 8001ea6:	f04f 0a04 	mov.w	sl, #4
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8001eaa:	f44f 7b80 	mov.w	fp, #256	; 0x100
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eae:	631a      	str	r2, [r3, #48]	; 0x30
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8001eb0:	f44f 6980 	mov.w	r9, #1024	; 0x400
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eb6:	f002 0210 	and.w	r2, r2, #16
 8001eba:	9203      	str	r2, [sp, #12]
 8001ebc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ec0:	f042 0202 	orr.w	r2, r2, #2
 8001ec4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ec8:	f002 0202 	and.w	r2, r2, #2
 8001ecc:	9204      	str	r2, [sp, #16]
 8001ece:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ed2:	f042 0208 	orr.w	r2, r2, #8
 8001ed6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eda:	f002 0208 	and.w	r2, r2, #8
 8001ede:	9205      	str	r2, [sp, #20]
 8001ee0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ee8:	631a      	str	r2, [r3, #48]	; 0x30
 8001eea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eec:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001ef0:	9206      	str	r2, [sp, #24]
 8001ef2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001efa:	631a      	str	r2, [r3, #48]	; 0x30
 8001efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001efe:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001f02:	9207      	str	r2, [sp, #28]
 8001f04:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f08:	f042 0204 	orr.w	r2, r2, #4
 8001f0c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f10:	f002 0204 	and.w	r2, r2, #4
 8001f14:	9208      	str	r2, [sp, #32]
 8001f16:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f1e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f22:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001f26:	9209      	str	r2, [sp, #36]	; 0x24
 8001f28:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f2c:	f042 0220 	orr.w	r2, r2, #32
 8001f30:	631a      	str	r2, [r3, #48]	; 0x30
 8001f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f34:	f002 0220 	and.w	r2, r2, #32
 8001f38:	920a      	str	r2, [sp, #40]	; 0x28
 8001f3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f42:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOJ, VSYNC_FREQ2_Pin|RENDER_TIME2_Pin|FRAMERATE_Pin, GPIO_PIN_RESET);
 8001f44:	2200      	movs	r2, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8001f4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOJ, VSYNC_FREQ2_Pin|RENDER_TIME2_Pin|FRAMERATE_Pin, GPIO_PIN_RESET);
 8001f50:	f004 fdd6 	bl	8006b00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 8001f54:	2201      	movs	r2, #1
 8001f56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f5a:	4859      	ldr	r0, [pc, #356]	; (80020c0 <main+0x360>)
 8001f5c:	f004 fdd0 	bl	8006b00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8001f60:	2200      	movs	r2, #0
 8001f62:	21c0      	movs	r1, #192	; 0xc0
 8001f64:	4858      	ldr	r0, [pc, #352]	; (80020c8 <main+0x368>)
 8001f66:	f004 fdcb 	bl	8006b00 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6a:	f242 0320 	movw	r3, #8224	; 0x2020
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001f6e:	a92c      	add	r1, sp, #176	; 0xb0
 8001f70:	4853      	ldr	r0, [pc, #332]	; (80020c0 <main+0x360>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f72:	952e      	str	r5, [sp, #184]	; 0xb8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f74:	f8cd 80bc 	str.w	r8, [sp, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f78:	e9cd 352c 	strd	r3, r5, [sp, #176]	; 0xb0
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001f7c:	f004 fc34 	bl	80067e8 <HAL_GPIO_Init>
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 8001f80:	a92c      	add	r1, sp, #176	; 0xb0
 8001f82:	484f      	ldr	r0, [pc, #316]	; (80020c0 <main+0x360>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f84:	e9cd 652c 	strd	r6, r5, [sp, #176]	; 0xb0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001f88:	e9cd 552e 	strd	r5, r5, [sp, #184]	; 0xb8
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 8001f8c:	f004 fc2c 	bl	80067e8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f90:	a92c      	add	r1, sp, #176	; 0xb0
 8001f92:	484e      	ldr	r0, [pc, #312]	; (80020cc <main+0x36c>)
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f94:	962c      	str	r6, [sp, #176]	; 0xb0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f9a:	f004 fc25 	bl	80067e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RENDER_TIME_Pin|VSYNC_FREQ_Pin;
 8001f9e:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa0:	a92c      	add	r1, sp, #176	; 0xb0
 8001fa2:	4849      	ldr	r0, [pc, #292]	; (80020c8 <main+0x368>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa4:	e9cd 352c 	strd	r3, r5, [sp, #176]	; 0xb0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fa8:	e9cd 482e 	strd	r4, r8, [sp, #184]	; 0xb8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fac:	f004 fc1c 	bl	80067e8 <HAL_GPIO_Init>
  HAL_GPIO_Init(FRAMERATE_GPIO_Port, &GPIO_InitStruct);
 8001fb0:	a92c      	add	r1, sp, #176	; 0xb0
 8001fb2:	4843      	ldr	r0, [pc, #268]	; (80020c0 <main+0x360>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb4:	e9cd 852c 	strd	r8, r5, [sp, #176]	; 0xb0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fb8:	e9cd 482e 	strd	r4, r8, [sp, #184]	; 0xb8
  HAL_GPIO_Init(FRAMERATE_GPIO_Port, &GPIO_InitStruct);
 8001fbc:	f004 fc14 	bl	80067e8 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8001fc0:	4843      	ldr	r0, [pc, #268]	; (80020d0 <main+0x370>)
 8001fc2:	4b44      	ldr	r3, [pc, #272]	; (80020d4 <main+0x374>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001fc4:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 8001fc6:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001fc8:	6205      	str	r5, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001fca:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001fce:	f003 fd29 	bl	8005a24 <HAL_CRC_Init>
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_RESET);
 8001fd2:	4631      	mov	r1, r6
 8001fd4:	4622      	mov	r2, r4
 8001fd6:	483a      	ldr	r0, [pc, #232]	; (80020c0 <main+0x360>)
 8001fd8:	f004 fd92 	bl	8006b00 <HAL_GPIO_WritePin>
  HAL_Delay(20); /* wait 20 ms */
 8001fdc:	2014      	movs	r0, #20
 8001fde:	f003 fc5f 	bl	80058a0 <HAL_Delay>
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 8001fe2:	4631      	mov	r1, r6
 8001fe4:	462a      	mov	r2, r5
 8001fe6:	4836      	ldr	r0, [pc, #216]	; (80020c0 <main+0x360>)
 8001fe8:	f004 fd8a 	bl	8006b00 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001fec:	200a      	movs	r0, #10
 8001fee:	f003 fc57 	bl	80058a0 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8001ff2:	2224      	movs	r2, #36	; 0x24
 8001ff4:	4621      	mov	r1, r4
 8001ff6:	a815      	add	r0, sp, #84	; 0x54
  DSI_PLLInitTypeDef PLLInit = {0};
 8001ff8:	940e      	str	r4, [sp, #56]	; 0x38
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8001ffa:	f022 fe87 	bl	8024d0c <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8001ffe:	2218      	movs	r2, #24
 8002000:	4621      	mov	r1, r4
 8002002:	a80f      	add	r0, sp, #60	; 0x3c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8002004:	2664      	movs	r6, #100	; 0x64
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8002006:	f022 fe81 	bl	8024d0c <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 800200a:	2234      	movs	r2, #52	; 0x34
 800200c:	4621      	mov	r1, r4
 800200e:	a82c      	add	r0, sp, #176	; 0xb0
 8002010:	f022 fe7c 	bl	8024d0c <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8002014:	222c      	movs	r2, #44	; 0x2c
 8002016:	4621      	mov	r1, r4
 8002018:	a81e      	add	r0, sp, #120	; 0x78
 800201a:	f022 fe77 	bl	8024d0c <memset>
  hdsi.Instance = DSI;
 800201e:	4b2e      	ldr	r3, [pc, #184]	; (80020d8 <main+0x378>)
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8002020:	a90c      	add	r1, sp, #48	; 0x30
 8002022:	4638      	mov	r0, r7
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8002024:	e9c7 3400 	strd	r3, r4, [r7]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8002028:	2305      	movs	r3, #5
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800202a:	e9c7 a502 	strd	sl, r5, [r7, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 800202e:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8002032:	f004 f88f 	bl	8006154 <HAL_DSI_Init>
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8002036:	a915      	add	r1, sp, #84	; 0x54
 8002038:	4638      	mov	r0, r7
  HostTimeouts.BTATimeout = 0;
 800203a:	941d      	str	r4, [sp, #116]	; 0x74
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 800203c:	f44f 2600 	mov.w	r6, #524288	; 0x80000
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8002040:	e9cd 5415 	strd	r5, r4, [sp, #84]	; 0x54
  HostTimeouts.HighSpeedReadTimeout = 0;
 8002044:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8002048:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
  HostTimeouts.LowPowerWriteTimeout = 0;
 800204c:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8002050:	f004 faaa 	bl	80065a8 <HAL_DSI_ConfigHostTimeouts>
  PhyTimings.ClockLaneLP2HSTime = 33;
 8002054:	f04f 0c1c 	mov.w	ip, #28
 8002058:	2321      	movs	r3, #33	; 0x21
  PhyTimings.DataLaneLP2HSTime = 25;
 800205a:	f04f 0e0f 	mov.w	lr, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800205e:	a90f      	add	r1, sp, #60	; 0x3c
 8002060:	4638      	mov	r0, r7
  PhyTimings.ClockLaneLP2HSTime = 33;
 8002062:	e9cd c30f 	strd	ip, r3, [sp, #60]	; 0x3c
  PhyTimings.DataLaneLP2HSTime = 25;
 8002066:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 8002068:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  PhyTimings.DataLaneLP2HSTime = 25;
 800206c:	e9cd e311 	strd	lr, r3, [sp, #68]	; 0x44
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8002070:	f004 fa5d 	bl	800652e <HAL_DSI_ConfigPhyTimer>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8002074:	4651      	mov	r1, sl
 8002076:	4638      	mov	r0, r7
 8002078:	f004 fa48 	bl	800650c <HAL_DSI_ConfigFlowControl>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 800207c:	f242 7110 	movw	r1, #10000	; 0x2710
 8002080:	4638      	mov	r0, r7
 8002082:	f004 fb9b 	bl	80067bc <HAL_DSI_SetLowPowerRXFilter>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_OVF) != HAL_OK)
 8002086:	f44f 7180 	mov.w	r1, #256	; 0x100
 800208a:	4638      	mov	r0, r7
 800208c:	f004 f800 	bl	8006090 <HAL_DSI_ConfigErrorMonitor>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8002090:	f44f 7300 	mov.w	r3, #512	; 0x200
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8002094:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8002098:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 800209c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 80020a0:	f8cd 80e0 	str.w	r8, [sp, #224]	; 0xe0
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 80020a4:	e9cd b32c 	strd	fp, r3, [sp, #176]	; 0xb0
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 80020a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020ac:	e016      	b.n	80020dc <main+0x37c>
 80020ae:	bf00      	nop
 80020b0:	03000012 	.word	0x03000012
 80020b4:	01010001 	.word	0x01010001
 80020b8:	e000ed00 	.word	0xe000ed00
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40022400 	.word	0x40022400
 80020c4:	200056e4 	.word	0x200056e4
 80020c8:	40020800 	.word	0x40020800
 80020cc:	40022000 	.word	0x40022000
 80020d0:	200055a8 	.word	0x200055a8
 80020d4:	40023000 	.word	0x40023000
 80020d8:	40016c00 	.word	0x40016c00
 80020dc:	e9cd 932e 	strd	r9, r3, [sp, #184]	; 0xb8
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 80020e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 80020e4:	f04f 0910 	mov.w	r9, #16
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 80020e8:	e9cd 2330 	strd	r2, r3, [sp, #192]	; 0xc0
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 80020ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020f0:	e9cd 1332 	strd	r1, r3, [sp, #200]	; 0xc8
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 80020f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 80020f8:	a92c      	add	r1, sp, #176	; 0xb0
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 80020fa:	e9cd 0334 	strd	r0, r3, [sp, #208]	; 0xd0
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 80020fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8002102:	4638      	mov	r0, r7
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8002104:	e9cd 6336 	strd	r6, r3, [sp, #216]	; 0xd8
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8002108:	f004 f9cc 	bl	80064a4 <HAL_DSI_ConfigCommand>
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800210c:	23c8      	movs	r3, #200	; 0xc8
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 800210e:	a91e      	add	r1, sp, #120	; 0x78
 8002110:	4638      	mov	r0, r7
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8002112:	9528      	str	r5, [sp, #160]	; 0xa0
  hltdc.Instance = LTDC;
 8002114:	4ed0      	ldr	r6, [pc, #832]	; (8002458 <main+0x6f8>)
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8002116:	e9cd 3920 	strd	r3, r9, [sp, #128]	; 0x80
  CmdCfg.ColorCoding = DSI_RGB565;
 800211a:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 800211e:	e9cd 4a22 	strd	r4, sl, [sp, #136]	; 0x88
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8002122:	e9cd 8424 	strd	r8, r4, [sp, #144]	; 0x90
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8002126:	e9cd 4426 	strd	r4, r4, [sp, #152]	; 0x98
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 800212a:	f004 f949 	bl	80063c0 <HAL_DSI_ConfigAdaptedCommandMode>
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 800212e:	4621      	mov	r1, r4
 8002130:	4638      	mov	r0, r7
 8002132:	f004 f934 	bl	800639e <HAL_DSI_SetGenericVCID>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002136:	4621      	mov	r1, r4
 8002138:	2234      	movs	r2, #52	; 0x34
 800213a:	a81e      	add	r0, sp, #120	; 0x78
 800213c:	f022 fde6 	bl	8024d0c <memset>
  hltdc.Instance = LTDC;
 8002140:	4ac6      	ldr	r2, [pc, #792]	; (800245c <main+0x6fc>)
  hltdc.Init.AccumulatedActiveH = 482;
 8002142:	f04f 0cca 	mov.w	ip, #202	; 0xca
  hltdc.Init.TotalHeigh = 483;
 8002146:	f04f 0ecb 	mov.w	lr, #203	; 0xcb
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800214a:	4630      	mov	r0, r6
  hltdc.Init.Backcolor.Blue = 0;
 800214c:	86b4      	strh	r4, [r6, #52]	; 0x34
  hltdc.Init.AccumulatedVBP = 2;
 800214e:	f8c6 8020 	str.w	r8, [r6, #32]
  hltdc.Init.Backcolor.Red = 0;
 8002152:	f886 4036 	strb.w	r4, [r6, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002156:	e9c6 2400 	strd	r2, r4, [r6]
  hltdc.Init.AccumulatedActiveH = 482;
 800215a:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800215e:	e9c6 c209 	strd	ip, r2, [r6, #36]	; 0x24
  hltdc.Init.TotalHeigh = 483;
 8002162:	f240 12e3 	movw	r2, #483	; 0x1e3
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002166:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hltdc.Init.TotalHeigh = 483;
 800216a:	e9c6 e20b 	strd	lr, r2, [r6, #44]	; 0x2c
  hltdc.Init.HorizontalSync = 1;
 800216e:	e9c6 4504 	strd	r4, r5, [r6, #16]
  hltdc.Init.AccumulatedHBP = 2;
 8002172:	e9c6 5806 	strd	r5, r8, [r6, #24]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002176:	f005 f917 	bl	80073a8 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 800217a:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800217c:	f44f 6080 	mov.w	r0, #1024	; 0x400
  pLayerCfg.WindowX1 = 200;
 8002180:	23c8      	movs	r3, #200	; 0xc8
  pLayerCfg.WindowY1 = 480;
 8002182:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  pLayerCfg.WindowX0 = 0;
 8002186:	941e      	str	r4, [sp, #120]	; 0x78
  pLayerCfg.Backcolor.Blue = 0;
 8002188:	f8ad 40a8 	strh.w	r4, [sp, #168]	; 0xa8
  pLayerCfg.ImageHeight = 480;
 800218c:	9229      	str	r2, [sp, #164]	; 0xa4
  pLayerCfg.Backcolor.Red = 0;
 800218e:	f88d 40aa 	strb.w	r4, [sp, #170]	; 0xaa
  pLayerCfg.Alpha0 = 0;
 8002192:	e9cd 1423 	strd	r1, r4, [sp, #140]	; 0x8c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002196:	2105      	movs	r1, #5
 8002198:	e9cd 0125 	strd	r0, r1, [sp, #148]	; 0x94
  pLayerCfg.FBStartAdress = 0xC0000000;
 800219c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80021a0:	4630      	mov	r0, r6
  pLayerCfg.ImageWidth = 200;
 80021a2:	e9cd 1327 	strd	r1, r3, [sp, #156]	; 0x9c
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80021a6:	e9cd 2821 	strd	r2, r8, [sp, #132]	; 0x84
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80021aa:	a91e      	add	r1, sp, #120	; 0x78
 80021ac:	4622      	mov	r2, r4
  pLayerCfg.WindowY0 = 0;
 80021ae:	e9cd 341f 	strd	r3, r4, [sp, #124]	; 0x7c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80021b2:	f005 f9c5 	bl	8007540 <HAL_LTDC_ConfigLayer>
  __HAL_LTDC_DISABLE(&hltdc);
 80021b6:	6832      	ldr	r2, [r6, #0]
  HAL_DSI_Start(&hdsi);
 80021b8:	4638      	mov	r0, r7
  __HAL_LTDC_DISABLE(&hltdc);
 80021ba:	6993      	ldr	r3, [r2, #24]
 80021bc:	f023 0301 	bic.w	r3, r3, #1
 80021c0:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 80021c2:	f004 fa57 	bl	8006674 <HAL_DSI_Start>
  OTM8009A_Init(OTM8009A_FORMAT_RBG565, LCD_ORIENTATION_LANDSCAPE);
 80021c6:	4629      	mov	r1, r5
 80021c8:	4640      	mov	r0, r8
 80021ca:	f003 f8d3 	bl	8005374 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 80021ce:	2328      	movs	r3, #40	; 0x28
 80021d0:	2215      	movs	r2, #21
 80021d2:	4621      	mov	r1, r4
 80021d4:	4638      	mov	r0, r7
 80021d6:	9400      	str	r4, [sp, #0]
 80021d8:	f004 fa7f 	bl	80066da <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 80021dc:	a92c      	add	r1, sp, #176	; 0xb0
 80021de:	4638      	mov	r0, r7
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 80021e0:	9436      	str	r4, [sp, #216]	; 0xd8
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80021e2:	2720      	movs	r7, #32
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 80021e4:	e9cd 442c 	strd	r4, r4, [sp, #176]	; 0xb0
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 80021e8:	e9cd 442e 	strd	r4, r4, [sp, #184]	; 0xb8
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 80021ec:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 80021f0:	e9cd 4432 	strd	r4, r4, [sp, #200]	; 0xc8
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 80021f4:	e9cd 4434 	strd	r4, r4, [sp, #208]	; 0xd0
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 80021f8:	f004 f954 	bl	80064a4 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 80021fc:	4622      	mov	r2, r4
 80021fe:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002202:	4630      	mov	r0, r6
 8002204:	f005 f9ca 	bl	800759c <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8002208:	6832      	ldr	r2, [r6, #0]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800220a:	4e95      	ldr	r6, [pc, #596]	; (8002460 <main+0x700>)
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800220c:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  __HAL_LTDC_ENABLE(&hltdc);
 8002210:	6993      	ldr	r3, [r2, #24]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002212:	a92c      	add	r1, sp, #176	; 0xb0
 8002214:	4630      	mov	r0, r6
  __HAL_LTDC_ENABLE(&hltdc);
 8002216:	432b      	orrs	r3, r5
 8002218:	6193      	str	r3, [r2, #24]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800221a:	4b92      	ldr	r3, [pc, #584]	; (8002464 <main+0x704>)
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800221c:	62b4      	str	r4, [r6, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 800221e:	f8cd 80b0 	str.w	r8, [sp, #176]	; 0xb0
  SdramTiming.RPDelay = 2;
 8002222:	f8cd 80c4 	str.w	r8, [sp, #196]	; 0xc4
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002226:	e9c6 3400 	strd	r3, r4, [r6]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800222a:	2340      	movs	r3, #64	; 0x40
 800222c:	e9c6 7304 	strd	r7, r3, [r6, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002230:	f44f 73c0 	mov.w	r3, #384	; 0x180
  SdramTiming.RCDDelay = 3;
 8002234:	2703      	movs	r7, #3
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002236:	e9c6 3406 	strd	r3, r4, [r6, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800223a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  SdramTiming.RCDDelay = 3;
 800223e:	9732      	str	r7, [sp, #200]	; 0xc8
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002240:	e9c6 c308 	strd	ip, r3, [r6, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002244:	2307      	movs	r3, #7
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002246:	e9c6 4a02 	strd	r4, sl, [r6, #8]
  SdramTiming.SelfRefreshTime = 4;
 800224a:	e9cd 3a2d 	strd	r3, sl, [sp, #180]	; 0xb4
  SdramTiming.WriteRecoveryTime = 2;
 800224e:	e9cd 382f 	strd	r3, r8, [sp, #188]	; 0xbc
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002252:	f006 ffc1 	bl	80091d8 <HAL_SDRAM_Init>
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8002256:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800225a:	a91e      	add	r1, sp, #120	; 0x78
 800225c:	4630      	mov	r0, r6
 __IO uint32_t tmpmrd = 0;
 800225e:	940f      	str	r4, [sp, #60]	; 0x3c
    Command->CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8002260:	e9cd 591e 	strd	r5, r9, [sp, #120]	; 0x78
    Command->ModeRegisterDefinition = 0;
 8002264:	e9cd 5420 	strd	r5, r4, [sp, #128]	; 0x80
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8002268:	f006 ffd6 	bl	8009218 <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 800226c:	4628      	mov	r0, r5
 800226e:	f003 fb17 	bl	80058a0 <HAL_Delay>
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8002272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002276:	a91e      	add	r1, sp, #120	; 0x78
 8002278:	4630      	mov	r0, r6
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800227a:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
    Command->ModeRegisterDefinition = 0;
 800227e:	e9cd 5420 	strd	r5, r4, [sp, #128]	; 0x80
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8002282:	f006 ffc9 	bl	8009218 <HAL_SDRAM_SendCommand>
    Command->AutoRefreshNumber      = 8;
 8002286:	2308      	movs	r3, #8
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8002288:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800228c:	a91e      	add	r1, sp, #120	; 0x78
 800228e:	4630      	mov	r0, r6
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002290:	e9cd 791e 	strd	r7, r9, [sp, #120]	; 0x78
    Command->ModeRegisterDefinition = 0;
 8002294:	e9cd 3420 	strd	r3, r4, [sp, #128]	; 0x80
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8002298:	f006 ffbe 	bl	8009218 <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          | \
 800229c:	f44f 730c 	mov.w	r3, #560	; 0x230
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80022a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022a4:	a91e      	add	r1, sp, #120	; 0x78
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          | \
 80022a6:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80022a8:	4630      	mov	r0, r6
    Command->ModeRegisterDefinition = tmpmrd;
 80022aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 80022ac:	f44f 7740 	mov.w	r7, #768	; 0x300
    Command->AutoRefreshNumber      = 1;
 80022b0:	9520      	str	r5, [sp, #128]	; 0x80
    Command->ModeRegisterDefinition = tmpmrd;
 80022b2:	9321      	str	r3, [sp, #132]	; 0x84
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80022b4:	e9cd a91e 	strd	sl, r9, [sp, #120]	; 0x78
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80022b8:	f006 ffae 	bl	8009218 <HAL_SDRAM_SendCommand>
    HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 80022bc:	f240 712a 	movw	r1, #1834	; 0x72a
 80022c0:	4630      	mov	r0, r6
  hqspi.Instance = QUADSPI;
 80022c2:	4e69      	ldr	r6, [pc, #420]	; (8002468 <main+0x708>)
    HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 80022c4:	f006 ffc7 	bl	8009256 <HAL_SDRAM_ProgramRefreshRate>
  FMC_Bank1->BTCR[0] = 0x000030D2;
 80022c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80022cc:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80022d0:	4630      	mov	r0, r6
  FMC_Bank1->BTCR[0] = 0x000030D2;
 80022d2:	601a      	str	r2, [r3, #0]
  hqspi.Instance = QUADSPI;
 80022d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80022d8:	6234      	str	r4, [r6, #32]
  hqspi.Init.ClockPrescaler = 1;
 80022da:	e9c6 3500 	strd	r3, r5, [r6]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 80022de:	2319      	movs	r3, #25
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80022e0:	e9c6 9902 	strd	r9, r9, [r6, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 80022e4:	e9c6 3704 	strd	r3, r7, [r6, #16]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80022e8:	e9c6 4406 	strd	r4, r4, [r6, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80022ec:	f005 faa2 	bl	8007834 <HAL_QSPI_Init>
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80022f0:	9732      	str	r7, [sp, #200]	; 0xc8
  s_command.Instruction       = RESET_ENABLE_CMD;
 80022f2:	2766      	movs	r7, #102	; 0x66
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80022f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f8:	a92c      	add	r1, sp, #176	; 0xb0
 80022fa:	4630      	mov	r0, r6
  s_command.Instruction       = RESET_ENABLE_CMD;
 80022fc:	972c      	str	r7, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_NONE;
 80022fe:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 8002300:	9431      	str	r4, [sp, #196]	; 0xc4
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002302:	9439      	str	r4, [sp, #228]	; 0xe4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002304:	e9cd 4433 	strd	r4, r4, [sp, #204]	; 0xcc
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002308:	e9cd 4437 	strd	r4, r4, [sp, #220]	; 0xdc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800230c:	f005 fae6 	bl	80078dc <HAL_QSPI_Command>
 8002310:	2800      	cmp	r0, #0
 8002312:	f040 80b5 	bne.w	8002480 <main+0x720>
  s_command.Instruction = RESET_MEMORY_CMD;
 8002316:	2499      	movs	r4, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002318:	f241 3288 	movw	r2, #5000	; 0x1388
 800231c:	a92c      	add	r1, sp, #176	; 0xb0
 800231e:	4630      	mov	r0, r6
  s_command.Instruction = RESET_MEMORY_CMD;
 8002320:	942c      	str	r4, [sp, #176]	; 0xb0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002322:	f005 fadb 	bl	80078dc <HAL_QSPI_Command>
 8002326:	2800      	cmp	r0, #0
 8002328:	f040 80aa 	bne.w	8002480 <main+0x720>
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800232c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002330:	a92c      	add	r1, sp, #176	; 0xb0
 8002332:	4630      	mov	r0, r6
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002334:	f8cd b0c8 	str.w	fp, [sp, #200]	; 0xc8
  s_command.Instruction       = RESET_ENABLE_CMD;
 8002338:	972c      	str	r7, [sp, #176]	; 0xb0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800233a:	f005 facf 	bl	80078dc <HAL_QSPI_Command>
 800233e:	2800      	cmp	r0, #0
 8002340:	f040 809e 	bne.w	8002480 <main+0x720>
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002344:	f241 3288 	movw	r2, #5000	; 0x1388
 8002348:	a92c      	add	r1, sp, #176	; 0xb0
 800234a:	4630      	mov	r0, r6
  s_command.Instruction = RESET_MEMORY_CMD;
 800234c:	942c      	str	r4, [sp, #176]	; 0xb0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800234e:	f005 fac5 	bl	80078dc <HAL_QSPI_Command>
 8002352:	4604      	mov	r4, r0
 8002354:	2800      	cmp	r0, #0
 8002356:	f040 8093 	bne.w	8002480 <main+0x720>
  HAL_Delay( 1000 );
 800235a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800235e:	f003 fa9f 	bl	80058a0 <HAL_Delay>
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002362:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002366:	aa1e      	add	r2, sp, #120	; 0x78
 8002368:	a92c      	add	r1, sp, #176	; 0xb0
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800236a:	9323      	str	r3, [sp, #140]	; 0x8c
  s_command.Instruction     = READ_STATUS_REG_CMD;
 800236c:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800236e:	4630      	mov	r0, r6
  s_config.Interval        = 0x10;
 8002370:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
  s_command.Instruction     = READ_STATUS_REG_CMD;
 8002374:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode        = QSPI_DATA_1_LINE;
 8002376:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800237a:	f8cd b0c8 	str.w	fp, [sp, #200]	; 0xc8
  s_command.DataMode        = QSPI_DATA_1_LINE;
 800237e:	9335      	str	r3, [sp, #212]	; 0xd4
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002380:	f241 3388 	movw	r3, #5000	; 0x1388
  s_config.Mask            = MX25L512_SR_WIP;
 8002384:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
  s_config.StatusBytesSize = 1;
 8002388:	e9cd 5421 	strd	r5, r4, [sp, #132]	; 0x84
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800238c:	f005 fba1 	bl	8007ad2 <HAL_QSPI_AutoPolling>
 8002390:	2800      	cmp	r0, #0
 8002392:	d175      	bne.n	8002480 <main+0x720>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8002394:	2305      	movs	r3, #5
  s_command.DummyCycles       = 0;
 8002396:	9031      	str	r0, [sp, #196]	; 0xc4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002398:	f241 3288 	movw	r2, #5000	; 0x1388
 800239c:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800239e:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80023a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80023a4:	f8cd b0c8 	str.w	fp, [sp, #200]	; 0xc8
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80023a8:	9335      	str	r3, [sp, #212]	; 0xd4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80023aa:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80023ae:	e9cd 5036 	strd	r5, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80023b2:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80023b6:	4630      	mov	r0, r6
 80023b8:	f005 fa90 	bl	80078dc <HAL_QSPI_Command>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d15f      	bne.n	8002480 <main+0x720>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80023c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c4:	a915      	add	r1, sp, #84	; 0x54
 80023c6:	4630      	mov	r0, r6
 80023c8:	f005 fb24 	bl	8007a14 <HAL_QSPI_Receive>
 80023cc:	2800      	cmp	r0, #0
 80023ce:	d157      	bne.n	8002480 <main+0x720>
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80023d0:	2306      	movs	r3, #6
  s_command.DataMode          = QSPI_DATA_NONE;
 80023d2:	9035      	str	r0, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 80023d4:	9031      	str	r0, [sp, #196]	; 0xc4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80023d6:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80023da:	9039      	str	r0, [sp, #228]	; 0xe4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80023dc:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80023de:	f8cd b0c8 	str.w	fp, [sp, #200]	; 0xc8
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80023e2:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80023e4:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80023e8:	e9cd 0037 	strd	r0, r0, [sp, #220]	; 0xdc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80023ec:	4630      	mov	r0, r6
 80023ee:	f005 fa75 	bl	80078dc <HAL_QSPI_Command>
 80023f2:	2800      	cmp	r0, #0
 80023f4:	d144      	bne.n	8002480 <main+0x720>
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80023f6:	2300      	movs	r3, #0
  s_config.StatusBytesSize = 1;
 80023f8:	462c      	mov	r4, r5
 80023fa:	9521      	str	r5, [sp, #132]	; 0x84
  s_command.DataMode       = QSPI_DATA_1_LINE;
 80023fc:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002400:	9322      	str	r3, [sp, #136]	; 0x88
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002402:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002406:	aa1e      	add	r2, sp, #120	; 0x78
 8002408:	a92c      	add	r1, sp, #176	; 0xb0
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800240a:	9323      	str	r3, [sp, #140]	; 0x8c
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800240c:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800240e:	4630      	mov	r0, r6
  s_config.Interval        = 0x10;
 8002410:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8002414:	932c      	str	r3, [sp, #176]	; 0xb0
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002416:	f241 3388 	movw	r3, #5000	; 0x1388
  s_command.DataMode       = QSPI_DATA_1_LINE;
 800241a:	9535      	str	r5, [sp, #212]	; 0xd4
  s_config.Mask            = MX25L512_SR_WREN;
 800241c:	e9cd 881e 	strd	r8, r8, [sp, #120]	; 0x78
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002420:	f005 fb57 	bl	8007ad2 <HAL_QSPI_AutoPolling>
 8002424:	bb60      	cbnz	r0, 8002480 <main+0x720>
  reg |= MX25L512_SR_QUADEN;
 8002426:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800242a:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.DummyCycles       = 0;
 800242e:	9031      	str	r0, [sp, #196]	; 0xc4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002430:	a92c      	add	r1, sp, #176	; 0xb0
  reg |= MX25L512_SR_QUADEN;
 8002432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002436:	f8cd b0c8 	str.w	fp, [sp, #200]	; 0xc8
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 800243a:	942c      	str	r4, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800243c:	9535      	str	r5, [sp, #212]	; 0xd4
  reg |= MX25L512_SR_QUADEN;
 800243e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002442:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002446:	e9cd 4036 	strd	r4, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800244a:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800244e:	4630      	mov	r0, r6
 8002450:	f005 fa44 	bl	80078dc <HAL_QSPI_Command>
 8002454:	b9a0      	cbnz	r0, 8002480 <main+0x720>
 8002456:	e009      	b.n	800246c <main+0x70c>
 8002458:	2000574c 	.word	0x2000574c
 800245c:	40016800 	.word	0x40016800
 8002460:	200058c4 	.word	0x200058c4
 8002464:	a0000140 	.word	0xa0000140
 8002468:	200057f4 	.word	0x200057f4
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800246c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002470:	a915      	add	r1, sp, #84	; 0x54
 8002472:	4630      	mov	r0, r6
 8002474:	f005 fa75 	bl	8007962 <HAL_QSPI_Transmit>
 8002478:	b910      	cbnz	r0, 8002480 <main+0x720>
  HAL_Delay( 40 );
 800247a:	2028      	movs	r0, #40	; 0x28
 800247c:	f003 fa10 	bl	80058a0 <HAL_Delay>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002480:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002484:	f241 3288 	movw	r2, #5000	; 0x1388
 8002488:	a92c      	add	r1, sp, #176	; 0xb0
 800248a:	48b8      	ldr	r0, [pc, #736]	; (800276c <main+0xa0c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800248c:	9332      	str	r3, [sp, #200]	; 0xc8
  s_command.Instruction       = ENTER_QUAD_CMD;
 800248e:	2335      	movs	r3, #53	; 0x35
 8002490:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002492:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002494:	e9cd 3333 	strd	r3, r3, [sp, #204]	; 0xcc
  s_command.DataMode          = QSPI_DATA_NONE;
 8002498:	9335      	str	r3, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 800249a:	9331      	str	r3, [sp, #196]	; 0xc4
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800249c:	9339      	str	r3, [sp, #228]	; 0xe4
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800249e:	e9cd 3337 	strd	r3, r3, [sp, #220]	; 0xdc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80024a2:	f005 fa1b 	bl	80078dc <HAL_QSPI_Command>
 80024a6:	b9e0      	cbnz	r0, 80024e2 <main+0x782>
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 80024a8:	2341      	movs	r3, #65	; 0x41
 80024aa:	f04f 0c40 	mov.w	ip, #64	; 0x40
  s_config.Interval        = 0x10;
 80024ae:	f04f 0e01 	mov.w	lr, #1
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80024b2:	9022      	str	r0, [sp, #136]	; 0x88
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80024b4:	aa1e      	add	r2, sp, #120	; 0x78
 80024b6:	a92c      	add	r1, sp, #176	; 0xb0
 80024b8:	48ac      	ldr	r0, [pc, #688]	; (800276c <main+0xa0c>)
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 80024ba:	e9cd c31e 	strd	ip, r3, [sp, #120]	; 0x78
  s_config.Interval        = 0x10;
 80024be:	2310      	movs	r3, #16
 80024c0:	e9cd 3e20 	strd	r3, lr, [sp, #128]	; 0x80
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80024c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024c8:	9323      	str	r3, [sp, #140]	; 0x8c
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80024ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024ce:	9332      	str	r3, [sp, #200]	; 0xc8
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80024d0:	2305      	movs	r3, #5
 80024d2:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80024d4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80024d8:	9335      	str	r3, [sp, #212]	; 0xd4
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80024da:	f241 3388 	movw	r3, #5000	; 0x1388
 80024de:	f005 faf8 	bl	8007ad2 <HAL_QSPI_AutoPolling>
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 80024e2:	23b7      	movs	r3, #183	; 0xb7
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80024e4:	f44f 7440 	mov.w	r4, #768	; 0x300
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 80024e8:	931e      	str	r3, [sp, #120]	; 0x78
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80024ea:	2300      	movs	r3, #0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80024ec:	9424      	str	r4, [sp, #144]	; 0x90
  s_command.DataMode          = QSPI_DATA_NONE;
 80024ee:	9327      	str	r3, [sp, #156]	; 0x9c
  s_command.DummyCycles       = 0;
 80024f0:	9323      	str	r3, [sp, #140]	; 0x8c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80024f2:	932b      	str	r3, [sp, #172]	; 0xac
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80024f4:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80024f8:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 80024fc:	f7ff fb0a 	bl	8001b14 <QSPI_WriteEnable.constprop.0>
 8002500:	bb18      	cbnz	r0, 800254a <main+0x7ea>
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002502:	f241 3288 	movw	r2, #5000	; 0x1388
 8002506:	a91e      	add	r1, sp, #120	; 0x78
 8002508:	4898      	ldr	r0, [pc, #608]	; (800276c <main+0xa0c>)
 800250a:	f005 f9e7 	bl	80078dc <HAL_QSPI_Command>
 800250e:	b9e0      	cbnz	r0, 800254a <main+0x7ea>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8002510:	2305      	movs	r3, #5
  s_command.DummyCycles       = 0;
 8002512:	9031      	str	r0, [sp, #196]	; 0xc4
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002514:	9039      	str	r0, [sp, #228]	; 0xe4
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8002516:	aa15      	add	r2, sp, #84	; 0x54
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8002518:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800251a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
  s_config.Match           = 0;
 800251e:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8002520:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002522:	9335      	str	r3, [sp, #212]	; 0xd4
  s_config.Mask            = MX25L512_SR_WIP;
 8002524:	2301      	movs	r3, #1
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002526:	9432      	str	r4, [sp, #200]	; 0xc8
  s_config.Mask            = MX25L512_SR_WIP;
 8002528:	9316      	str	r3, [sp, #88]	; 0x58
  s_config.StatusBytesSize = 1;
 800252a:	e9cd 3018 	strd	r3, r0, [sp, #96]	; 0x60
  s_config.Interval        = 0x10;
 800252e:	2310      	movs	r3, #16
 8002530:	9317      	str	r3, [sp, #92]	; 0x5c
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002532:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002536:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800253a:	e9cd 0037 	strd	r0, r0, [sp, #220]	; 0xdc
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800253e:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8002540:	f241 3388 	movw	r3, #5000	; 0x1388
 8002544:	4889      	ldr	r0, [pc, #548]	; (800276c <main+0xa0c>)
 8002546:	f005 fac4 	bl	8007ad2 <HAL_QSPI_AutoPolling>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800254a:	2305      	movs	r3, #5
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800254c:	f44f 7640 	mov.w	r6, #768	; 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002550:	f04f 7440 	mov.w	r4, #50331648	; 0x3000000
  s_command.NbData            = 1;
 8002554:	2501      	movs	r5, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8002556:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002558:	2300      	movs	r3, #0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800255a:	f241 3288 	movw	r2, #5000	; 0x1388
 800255e:	a92c      	add	r1, sp, #176	; 0xb0
 8002560:	4882      	ldr	r0, [pc, #520]	; (800276c <main+0xa0c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002562:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002564:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 8002566:	9331      	str	r3, [sp, #196]	; 0xc4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002568:	e9cd 3333 	strd	r3, r3, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800256c:	e9cd 5336 	strd	r5, r3, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002570:	e9cd 3338 	strd	r3, r3, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002574:	f005 f9b2 	bl	80078dc <HAL_QSPI_Command>
 8002578:	2800      	cmp	r0, #0
 800257a:	d14f      	bne.n	800261c <main+0x8bc>
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800257c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002580:	a91e      	add	r1, sp, #120	; 0x78
 8002582:	487a      	ldr	r0, [pc, #488]	; (800276c <main+0xa0c>)
 8002584:	f005 fa46 	bl	8007a14 <HAL_QSPI_Receive>
 8002588:	2800      	cmp	r0, #0
 800258a:	d147      	bne.n	800261c <main+0x8bc>
  s_command.Instruction       = READ_CFG_REG_CMD;
 800258c:	2315      	movs	r3, #21
  s_command.DummyCycles       = 0;
 800258e:	9031      	str	r0, [sp, #196]	; 0xc4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002590:	f241 3288 	movw	r2, #5000	; 0x1388
 8002594:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002596:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.Instruction       = READ_CFG_REG_CMD;
 8002598:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800259a:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800259c:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80025a0:	e9cd 5036 	strd	r5, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80025a4:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80025a8:	4870      	ldr	r0, [pc, #448]	; (800276c <main+0xa0c>)
 80025aa:	f005 f997 	bl	80078dc <HAL_QSPI_Command>
 80025ae:	bba8      	cbnz	r0, 800261c <main+0x8bc>
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80025b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b4:	f10d 0179 	add.w	r1, sp, #121	; 0x79
 80025b8:	486c      	ldr	r0, [pc, #432]	; (800276c <main+0xa0c>)
 80025ba:	f005 fa2b 	bl	8007a14 <HAL_QSPI_Receive>
 80025be:	bb68      	cbnz	r0, 800261c <main+0x8bc>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 80025c0:	f7ff faa8 	bl	8001b14 <QSPI_WriteEnable.constprop.0>
 80025c4:	bb50      	cbnz	r0, 800261c <main+0x8bc>
  s_command.NbData            = 2;
 80025c6:	2302      	movs	r3, #2
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	22c0      	movs	r2, #192	; 0xc0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80025ca:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 80025cc:	952c      	str	r5, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80025ce:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 80025d0:	9031      	str	r0, [sp, #196]	; 0xc4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80025d2:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80025d6:	e9cd 3036 	strd	r3, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80025da:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
 80025de:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 80025e2:	2103      	movs	r1, #3
 80025e4:	f89d 3079 	ldrb.w	r3, [sp, #121]	; 0x79
 80025e8:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80025ec:	485f      	ldr	r0, [pc, #380]	; (800276c <main+0xa0c>)
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 80025ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025f2:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80025f6:	a92c      	add	r1, sp, #176	; 0xb0
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 80025f8:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80025fa:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 80025fe:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002602:	f005 f96b 	bl	80078dc <HAL_QSPI_Command>
 8002606:	b948      	cbnz	r0, 800261c <main+0x8bc>
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002608:	f241 3288 	movw	r2, #5000	; 0x1388
 800260c:	a91e      	add	r1, sp, #120	; 0x78
 800260e:	4857      	ldr	r0, [pc, #348]	; (800276c <main+0xa0c>)
 8002610:	f005 f9a7 	bl	8007962 <HAL_QSPI_Transmit>
 8002614:	b910      	cbnz	r0, 800261c <main+0x8bc>
  HAL_Delay( 40 );
 8002616:	2028      	movs	r0, #40	; 0x28
 8002618:	f003 f942 	bl	80058a0 <HAL_Delay>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800261c:	2305      	movs	r3, #5
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800261e:	f44f 7640 	mov.w	r6, #768	; 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002622:	f04f 7440 	mov.w	r4, #50331648	; 0x3000000
  s_command.NbData            = 1;
 8002626:	2501      	movs	r5, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8002628:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800262a:	2300      	movs	r3, #0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800262c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002630:	a92c      	add	r1, sp, #176	; 0xb0
 8002632:	484e      	ldr	r0, [pc, #312]	; (800276c <main+0xa0c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002634:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002636:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 8002638:	9331      	str	r3, [sp, #196]	; 0xc4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800263a:	e9cd 3333 	strd	r3, r3, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800263e:	e9cd 5336 	strd	r5, r3, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002642:	e9cd 3338 	strd	r3, r3, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002646:	f005 f949 	bl	80078dc <HAL_QSPI_Command>
 800264a:	2800      	cmp	r0, #0
 800264c:	d14b      	bne.n	80026e6 <main+0x986>
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800264e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002652:	a91e      	add	r1, sp, #120	; 0x78
 8002654:	4845      	ldr	r0, [pc, #276]	; (800276c <main+0xa0c>)
 8002656:	f005 f9dd 	bl	8007a14 <HAL_QSPI_Receive>
 800265a:	2800      	cmp	r0, #0
 800265c:	d143      	bne.n	80026e6 <main+0x986>
  s_command.Instruction       = READ_CFG_REG_CMD;
 800265e:	2315      	movs	r3, #21
  s_command.DummyCycles       = 0;
 8002660:	9031      	str	r0, [sp, #196]	; 0xc4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002662:	f241 3288 	movw	r2, #5000	; 0x1388
 8002666:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002668:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.Instruction       = READ_CFG_REG_CMD;
 800266a:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800266c:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800266e:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002672:	e9cd 5036 	strd	r5, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002676:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800267a:	483c      	ldr	r0, [pc, #240]	; (800276c <main+0xa0c>)
 800267c:	f005 f92e 	bl	80078dc <HAL_QSPI_Command>
 8002680:	bb88      	cbnz	r0, 80026e6 <main+0x986>
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002682:	f241 3288 	movw	r2, #5000	; 0x1388
 8002686:	f10d 0179 	add.w	r1, sp, #121	; 0x79
 800268a:	4838      	ldr	r0, [pc, #224]	; (800276c <main+0xa0c>)
 800268c:	f005 f9c2 	bl	8007a14 <HAL_QSPI_Receive>
 8002690:	bb48      	cbnz	r0, 80026e6 <main+0x986>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8002692:	f7ff fa3f 	bl	8001b14 <QSPI_WriteEnable.constprop.0>
 8002696:	bb30      	cbnz	r0, 80026e6 <main+0x986>
  s_command.NbData            = 2;
 8002698:	2302      	movs	r3, #2
 800269a:	2207      	movs	r2, #7
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800269c:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 800269e:	952c      	str	r5, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80026a0:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 80026a2:	9031      	str	r0, [sp, #196]	; 0xc4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80026a4:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80026a8:	e9cd 3036 	strd	r3, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80026ac:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
 80026b0:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 80026b4:	2106      	movs	r1, #6
 80026b6:	f89d 3079 	ldrb.w	r3, [sp, #121]	; 0x79
 80026ba:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80026be:	482b      	ldr	r0, [pc, #172]	; (800276c <main+0xa0c>)
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 80026c0:	f023 0307 	bic.w	r3, r3, #7
 80026c4:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80026c8:	a92c      	add	r1, sp, #176	; 0xb0
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 80026ca:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80026cc:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 80026d0:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80026d4:	f005 f902 	bl	80078dc <HAL_QSPI_Command>
 80026d8:	b928      	cbnz	r0, 80026e6 <main+0x986>
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80026da:	f241 3288 	movw	r2, #5000	; 0x1388
 80026de:	a91e      	add	r1, sp, #120	; 0x78
 80026e0:	4822      	ldr	r0, [pc, #136]	; (800276c <main+0xa0c>)
 80026e2:	f005 f93e 	bl	8007962 <HAL_QSPI_Transmit>
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80026e6:	f44f 7340 	mov.w	r3, #768	; 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80026ea:	2400      	movs	r4, #0
  hdma2d.Instance = DMA2D;
 80026ec:	4d20      	ldr	r5, [pc, #128]	; (8002770 <main+0xa10>)
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80026ee:	aa1e      	add	r2, sp, #120	; 0x78
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80026f0:	9332      	str	r3, [sp, #200]	; 0xc8
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 80026f2:	23ec      	movs	r3, #236	; 0xec
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80026f4:	a92c      	add	r1, sp, #176	; 0xb0
 80026f6:	481d      	ldr	r0, [pc, #116]	; (800276c <main+0xa0c>)
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 80026f8:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80026fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80026fe:	9439      	str	r4, [sp, #228]	; 0xe4
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002700:	9333      	str	r3, [sp, #204]	; 0xcc
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8002702:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002706:	932f      	str	r3, [sp, #188]	; 0xbc
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002708:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800270c:	e9cd 4334 	strd	r4, r3, [sp, #208]	; 0xd0
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 8002710:	230a      	movs	r3, #10
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002712:	e9cd 4437 	strd	r4, r4, [sp, #220]	; 0xdc
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 8002716:	9331      	str	r3, [sp, #196]	; 0xc4
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8002718:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800271c:	f005 fa29 	bl	8007b72 <HAL_QSPI_MemoryMapped>
  hdma2d.Instance = DMA2D;
 8002720:	4b14      	ldr	r3, [pc, #80]	; (8002774 <main+0xa14>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002722:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8002724:	e9c5 440e 	strd	r4, r4, [r5, #56]	; 0x38
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8002728:	e9c5 4410 	strd	r4, r4, [r5, #64]	; 0x40
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800272c:	e9c5 4412 	strd	r4, r4, [r5, #72]	; 0x48
  hdma2d.Init.Mode = DMA2D_M2M;
 8002730:	e9c5 3400 	strd	r3, r4, [r5]
  hdma2d.Init.OutputOffset = 0;
 8002734:	e9c5 4402 	strd	r4, r4, [r5, #8]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002738:	f003 fb78 	bl	8005e2c <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800273c:	2101      	movs	r1, #1
 800273e:	4628      	mov	r0, r5
 8002740:	f003 fc36 	bl	8005fb0 <HAL_DMA2D_ConfigLayer>
  MX_I2C4_Init();
 8002744:	f7ff faea 	bl	8001d1c <MX_I2C4_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <main+0xa18>)
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800274a:	2105      	movs	r1, #5
 800274c:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 800274e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002750:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002754:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002756:	4622      	mov	r2, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800275e:	932c      	str	r3, [sp, #176]	; 0xb0
 8002760:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002762:	f003 f8c1 	bl	80058e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002766:	2038      	movs	r0, #56	; 0x38
 8002768:	e008      	b.n	800277c <main+0xa1c>
 800276a:	bf00      	nop
 800276c:	200057f4 	.word	0x200057f4
 8002770:	200055cc 	.word	0x200055cc
 8002774:	4002b000 	.word	0x4002b000
 8002778:	40023800 	.word	0x40023800
 800277c:	f003 f8e6 	bl	800594c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8002780:	2105      	movs	r1, #5
 8002782:	4622      	mov	r2, r4
 8002784:	2044      	movs	r0, #68	; 0x44
 8002786:	f003 f8af 	bl	80058e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800278a:	2044      	movs	r0, #68	; 0x44
 800278c:	f003 f8de 	bl	800594c <HAL_NVIC_EnableIRQ>
  hsd2.Instance = SDMMC2;
 8002790:	4b0f      	ldr	r3, [pc, #60]	; (80027d0 <main+0xa70>)
 8002792:	4a10      	ldr	r2, [pc, #64]	; (80027d4 <main+0xa74>)
  hsd2.Init.ClockDiv = 0;
 8002794:	619c      	str	r4, [r3, #24]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002796:	e9c3 2400 	strd	r2, r4, [r3]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800279a:	e9c3 4402 	strd	r4, r4, [r3, #8]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800279e:	e9c3 4404 	strd	r4, r4, [r3, #16]
  MX_FATFS_Init();
 80027a2:	f7fd ff49 	bl	8000638 <MX_FATFS_Init>
  MX_TouchGFX_Init();
 80027a6:	f7fe f8c7 	bl	8000938 <MX_TouchGFX_Init>
  osKernelInitialize();
 80027aa:	f008 fbef 	bl	800af8c <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80027ae:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <main+0xa78>)
 80027b0:	4621      	mov	r1, r4
 80027b2:	480a      	ldr	r0, [pc, #40]	; (80027dc <main+0xa7c>)
 80027b4:	f008 fc48 	bl	800b048 <osThreadNew>
 80027b8:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <main+0xa80>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80027ba:	4a0a      	ldr	r2, [pc, #40]	; (80027e4 <main+0xa84>)
 80027bc:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80027be:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80027c0:	4809      	ldr	r0, [pc, #36]	; (80027e8 <main+0xa88>)
 80027c2:	f008 fc41 	bl	800b048 <osThreadNew>
 80027c6:	4b09      	ldr	r3, [pc, #36]	; (80027ec <main+0xa8c>)
 80027c8:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80027ca:	f008 fc09 	bl	800afe0 <osKernelStart>
  while (1)
 80027ce:	e7fe      	b.n	80027ce <main+0xa6e>
 80027d0:	20005840 	.word	0x20005840
 80027d4:	40011c00 	.word	0x40011c00
 80027d8:	0802649c 	.word	0x0802649c
 80027dc:	08001b99 	.word	0x08001b99
 80027e0:	200055a4 	.word	0x200055a4
 80027e4:	08026478 	.word	0x08026478
 80027e8:	0800093d 	.word	0x0800093d
 80027ec:	20005594 	.word	0x20005594

080027f0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80027f0:	6802      	ldr	r2, [r0, #0]
 80027f2:	4b03      	ldr	r3, [pc, #12]	; (8002800 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d101      	bne.n	80027fc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80027f8:	f003 b840 	b.w	800587c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40001000 	.word	0x40001000

08002804 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002804:	4770      	bx	lr
	...

08002808 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002808:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <HAL_MspInit+0x38>)
{
 800280a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800280c:	210f      	movs	r1, #15
 800280e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002812:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002814:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002818:	641a      	str	r2, [r3, #64]	; 0x40
 800281a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800281c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002820:	9200      	str	r2, [sp, #0]
 8002822:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002824:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002826:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800282a:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800282c:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002834:	9301      	str	r3, [sp, #4]
 8002836:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002838:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800283a:	f003 b855 	b.w	80058e8 <HAL_NVIC_SetPriority>
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800

08002844 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8002844:	6802      	ldr	r2, [r0, #0]
{
 8002846:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8002848:	4b08      	ldr	r3, [pc, #32]	; (800286c <HAL_CRC_MspInit+0x28>)
 800284a:	429a      	cmp	r2, r3
 800284c:	d10b      	bne.n	8002866 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800284e:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8002852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002856:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800285a:	631a      	str	r2, [r3, #48]	; 0x30
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002862:	9301      	str	r3, [sp, #4]
 8002864:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002866:	b002      	add	sp, #8
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40023000 	.word	0x40023000

08002870 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8002870:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <HAL_DMA2D_MspInit+0x3c>)
{
 8002872:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8002874:	6802      	ldr	r2, [r0, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d115      	bne.n	80028a6 <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800287a:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800287e:	2105      	movs	r1, #5
 8002880:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002884:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002888:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800288a:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002892:	9301      	str	r3, [sp, #4]
 8002894:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002896:	f003 f827 	bl	80058e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800289a:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800289c:	b003      	add	sp, #12
 800289e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80028a2:	f003 b853 	b.w	800594c <HAL_NVIC_EnableIRQ>
}
 80028a6:	b003      	add	sp, #12
 80028a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80028ac:	4002b000 	.word	0x4002b000

080028b0 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80028b0:	b510      	push	{r4, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b6:	2214      	movs	r2, #20
 80028b8:	2100      	movs	r1, #0
 80028ba:	a803      	add	r0, sp, #12
 80028bc:	f022 fa26 	bl	8024d0c <memset>
  if(hdsi->Instance==DSI)
 80028c0:	6822      	ldr	r2, [r4, #0]
 80028c2:	4b15      	ldr	r3, [pc, #84]	; (8002918 <HAL_DSI_MspInit+0x68>)
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d125      	bne.n	8002914 <HAL_DSI_MspInit+0x64>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80028c8:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80028cc:	a903      	add	r1, sp, #12
 80028ce:	4813      	ldr	r0, [pc, #76]	; (800291c <HAL_DSI_MspInit+0x6c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 80028d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028d2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80028d6:	645a      	str	r2, [r3, #68]	; 0x44
 80028d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028da:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80028de:	9201      	str	r2, [sp, #4]
 80028e0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80028e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e8:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ea:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028f2:	9302      	str	r3, [sp, #8]
 80028f4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f6:	2302      	movs	r3, #2
 80028f8:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80028fc:	230d      	movs	r3, #13
 80028fe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002900:	f003 ff72 	bl	80067e8 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 8002904:	2062      	movs	r0, #98	; 0x62
 8002906:	2200      	movs	r2, #0
 8002908:	2105      	movs	r1, #5
 800290a:	f002 ffed 	bl	80058e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800290e:	2062      	movs	r0, #98	; 0x62
 8002910:	f003 f81c 	bl	800594c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8002914:	b008      	add	sp, #32
 8002916:	bd10      	pop	{r4, pc}
 8002918:	40016c00 	.word	0x40016c00
 800291c:	40022400 	.word	0x40022400

08002920 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002922:	b0ad      	sub	sp, #180	; 0xb4
 8002924:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002926:	2214      	movs	r2, #20
 8002928:	2100      	movs	r1, #0
 800292a:	a803      	add	r0, sp, #12
 800292c:	f022 f9ee 	bl	8024d0c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002930:	2290      	movs	r2, #144	; 0x90
 8002932:	2100      	movs	r1, #0
 8002934:	a808      	add	r0, sp, #32
 8002936:	f022 f9e9 	bl	8024d0c <memset>
  if(hi2c->Instance==I2C4)
 800293a:	6822      	ldr	r2, [r4, #0]
 800293c:	4b25      	ldr	r3, [pc, #148]	; (80029d4 <HAL_I2C_MspInit+0xb4>)
 800293e:	429a      	cmp	r2, r3
 8002940:	d146      	bne.n	80029d0 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002942:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002946:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002948:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800294a:	f005 fc15 	bl	8008178 <HAL_RCCEx_PeriphCLKConfig>
 800294e:	b108      	cbz	r0, 8002954 <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 8002950:	f7ff ff58 	bl	8002804 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002954:	4c20      	ldr	r4, [pc, #128]	; (80029d8 <HAL_I2C_MspInit+0xb8>)
    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002956:	2712      	movs	r7, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002958:	2601      	movs	r6, #1
 800295a:	2503      	movs	r5, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800295c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800295e:	a903      	add	r1, sp, #12
 8002960:	481e      	ldr	r0, [pc, #120]	; (80029dc <HAL_I2C_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002962:	f043 0302 	orr.w	r3, r3, #2
 8002966:	6323      	str	r3, [r4, #48]	; 0x30
 8002968:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002972:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002974:	f043 0308 	orr.w	r3, r3, #8
 8002978:	6323      	str	r3, [r4, #48]	; 0x30
 800297a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	9301      	str	r3, [sp, #4]
 8002982:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002984:	2380      	movs	r3, #128	; 0x80
 8002986:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 800298a:	230b      	movs	r3, #11
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800298c:	e9cd 6505 	strd	r6, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8002990:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002992:	f003 ff29 	bl	80067e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800299a:	a903      	add	r1, sp, #12
 800299c:	4810      	ldr	r0, [pc, #64]	; (80029e0 <HAL_I2C_MspInit+0xc0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800299e:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80029a2:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a4:	e9cd 6505 	strd	r6, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80029a8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029aa:	f003 ff1d 	bl	80067e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80029ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 80029b0:	205f      	movs	r0, #95	; 0x5f
 80029b2:	2200      	movs	r2, #0
 80029b4:	2105      	movs	r1, #5
    __HAL_RCC_I2C4_CLK_ENABLE();
 80029b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ba:	6423      	str	r3, [r4, #64]	; 0x40
 80029bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029c2:	9302      	str	r3, [sp, #8]
 80029c4:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 80029c6:	f002 ff8f 	bl	80058e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80029ca:	205f      	movs	r0, #95	; 0x5f
 80029cc:	f002 ffbe 	bl	800594c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80029d0:	b02d      	add	sp, #180	; 0xb4
 80029d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029d4:	40006000 	.word	0x40006000
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40020400 	.word	0x40020400
 80029e0:	40020c00 	.word	0x40020c00

080029e4 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C4)
 80029e4:	6802      	ldr	r2, [r0, #0]
{
 80029e6:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C4)
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <HAL_I2C_MspDeInit+0x34>)
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d112      	bne.n	8002a14 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 80029ee:	4a0b      	ldr	r2, [pc, #44]	; (8002a1c <HAL_I2C_MspDeInit+0x38>)

    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80029f0:	2180      	movs	r1, #128	; 0x80
 80029f2:	480b      	ldr	r0, [pc, #44]	; (8002a20 <HAL_I2C_MspDeInit+0x3c>)
    __HAL_RCC_I2C4_CLK_DISABLE();
 80029f4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80029f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029fa:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80029fc:	f003 ffd8 	bl	80069b0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8002a00:	4808      	ldr	r0, [pc, #32]	; (8002a24 <HAL_I2C_MspDeInit+0x40>)
 8002a02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a06:	f003 ffd3 	bl	80069b0 <HAL_GPIO_DeInit>

    /* I2C4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 8002a0a:	205f      	movs	r0, #95	; 0x5f
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8002a0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 8002a10:	f002 bfaa 	b.w	8005968 <HAL_NVIC_DisableIRQ>
}
 8002a14:	bd08      	pop	{r3, pc}
 8002a16:	bf00      	nop
 8002a18:	40006000 	.word	0x40006000
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40020400 	.word	0x40020400
 8002a24:	40020c00 	.word	0x40020c00

08002a28 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002a28:	b510      	push	{r4, lr}
 8002a2a:	b0a6      	sub	sp, #152	; 0x98
 8002a2c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a2e:	2290      	movs	r2, #144	; 0x90
 8002a30:	2100      	movs	r1, #0
 8002a32:	a802      	add	r0, sp, #8
 8002a34:	f022 f96a 	bl	8024d0c <memset>
  if(hltdc->Instance==LTDC)
 8002a38:	6822      	ldr	r2, [r4, #0]
 8002a3a:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <HAL_LTDC_MspInit+0x64>)
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d122      	bne.n	8002a86 <HAL_LTDC_MspInit+0x5e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002a40:	2308      	movs	r3, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002a42:	2007      	movs	r0, #7
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002a44:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8002a46:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002a4a:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e9cd 3008 	strd	r3, r0, [sp, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002a52:	2301      	movs	r3, #1
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a54:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002a56:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a58:	f005 fb8e 	bl	8008178 <HAL_RCCEx_PeriphCLKConfig>
 8002a5c:	b108      	cbz	r0, 8002a62 <HAL_LTDC_MspInit+0x3a>
    {
      Error_Handler();
 8002a5e:	f7ff fed1 	bl	8002804 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002a62:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_LTDC_MspInit+0x68>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8002a64:	2058      	movs	r0, #88	; 0x58
 8002a66:	2103      	movs	r1, #3
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a6a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002a6e:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8002a70:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a78:	9301      	str	r3, [sp, #4]
 8002a7a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8002a7c:	f002 ff34 	bl	80058e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002a80:	2058      	movs	r0, #88	; 0x58
 8002a82:	f002 ff63 	bl	800594c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002a86:	b026      	add	sp, #152	; 0x98
 8002a88:	bd10      	pop	{r4, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40016800 	.word	0x40016800
 8002a90:	40023800 	.word	0x40023800

08002a94 <HAL_QSPI_MspInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	2214      	movs	r2, #20
 8002a96:	2100      	movs	r1, #0
{
 8002a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a9c:	b08a      	sub	sp, #40	; 0x28
 8002a9e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa0:	eb0d 0002 	add.w	r0, sp, r2
 8002aa4:	f022 f932 	bl	8024d0c <memset>
  if(hqspi->Instance==QUADSPI)
 8002aa8:	6822      	ldr	r2, [r4, #0]
 8002aaa:	4b3a      	ldr	r3, [pc, #232]	; (8002b94 <HAL_QSPI_MspInit+0x100>)
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d16e      	bne.n	8002b8e <HAL_QSPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

    __HAL_RCC_QSPI_FORCE_RESET();
 8002ab0:	4b39      	ldr	r3, [pc, #228]	; (8002b98 <HAL_QSPI_MspInit+0x104>)
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab2:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002ab4:	2403      	movs	r4, #3
 8002ab6:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_FORCE_RESET();
 8002ab8:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aba:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002abe:	a905      	add	r1, sp, #20
 8002ac0:	4836      	ldr	r0, [pc, #216]	; (8002b9c <HAL_QSPI_MspInit+0x108>)
    __HAL_RCC_QSPI_FORCE_RESET();
 8002ac2:	f042 0202 	orr.w	r2, r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_FORCE_RESET();
 8002ac8:	619a      	str	r2, [r3, #24]
    __HAL_RCC_QSPI_RELEASE_RESET();
 8002aca:	699a      	ldr	r2, [r3, #24]
 8002acc:	f022 0202 	bic.w	r2, r2, #2
 8002ad0:	619a      	str	r2, [r3, #24]
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002ad2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ad4:	f042 0202 	orr.w	r2, r2, #2
 8002ad8:	639a      	str	r2, [r3, #56]	; 0x38
 8002ada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002adc:	f002 0202 	and.w	r2, r2, #2
 8002ae0:	9200      	str	r2, [sp, #0]
 8002ae2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ae6:	f042 0210 	orr.w	r2, r2, #16
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30
 8002aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aee:	f002 0210 	and.w	r2, r2, #16
 8002af2:	9201      	str	r2, [sp, #4]
 8002af4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002af8:	f042 0202 	orr.w	r2, r2, #2
 8002afc:	631a      	str	r2, [r3, #48]	; 0x30
 8002afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b00:	f002 0202 	and.w	r2, r2, #2
 8002b04:	9202      	str	r2, [sp, #8]
 8002b06:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b0a:	f042 0204 	orr.w	r2, r2, #4
 8002b0e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b12:	f002 0204 	and.w	r2, r2, #4
 8002b16:	9203      	str	r2, [sp, #12]
 8002b18:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b1c:	f042 0208 	orr.w	r2, r2, #8
 8002b20:	631a      	str	r2, [r3, #48]	; 0x30
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	9304      	str	r3, [sp, #16]
 8002b2a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2c:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002b30:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b34:	f003 fe58 	bl	80067e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b38:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3a:	a905      	add	r1, sp, #20
 8002b3c:	4818      	ldr	r0, [pc, #96]	; (8002ba0 <HAL_QSPI_MspInit+0x10c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3e:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b42:	2301      	movs	r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b44:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002b48:	230a      	movs	r3, #10
 8002b4a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b4c:	f003 fe4c 	bl	80067e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8002b50:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b54:	a905      	add	r1, sp, #20
 8002b56:	4813      	ldr	r0, [pc, #76]	; (8002ba4 <HAL_QSPI_MspInit+0x110>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002b58:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5a:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5e:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b62:	f003 fe41 	bl	80067e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b66:	a905      	add	r1, sp, #20
 8002b68:	480d      	ldr	r0, [pc, #52]	; (8002ba0 <HAL_QSPI_MspInit+0x10c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002b6a:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6c:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b70:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b74:	f003 fe38 	bl	80067e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002b78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b7c:	a905      	add	r1, sp, #20
 8002b7e:	480a      	ldr	r0, [pc, #40]	; (8002ba8 <HAL_QSPI_MspInit+0x114>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002b80:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b82:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b86:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b8a:	f003 fe2d 	bl	80067e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002b8e:	b00a      	add	sp, #40	; 0x28
 8002b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b94:	a0001000 	.word	0xa0001000
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	40020400 	.word	0x40020400
 8002ba4:	40020800 	.word	0x40020800
 8002ba8:	40020c00 	.word	0x40020c00

08002bac <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb0:	2214      	movs	r2, #20
{
 8002bb2:	b0ae      	sub	sp, #184	; 0xb8
 8002bb4:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	eb0d 0002 	add.w	r0, sp, r2
 8002bbc:	f022 f8a6 	bl	8024d0c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bc0:	2290      	movs	r2, #144	; 0x90
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	a80a      	add	r0, sp, #40	; 0x28
 8002bc6:	f022 f8a1 	bl	8024d0c <memset>
  if(hsd->Instance==SDMMC2)
 8002bca:	682a      	ldr	r2, [r5, #0]
 8002bcc:	4b58      	ldr	r3, [pc, #352]	; (8002d30 <HAL_SD_MspInit+0x184>)
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	f040 80ab 	bne.w	8002d2a <HAL_SD_MspInit+0x17e>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC2|RCC_PERIPHCLK_CLK48;
 8002bd4:	f04f 6384 	mov.w	r3, #69206016	; 0x4200000
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
    PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bd8:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC2|RCC_PERIPHCLK_CLK48;
 8002bda:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bdc:	f005 facc 	bl	8008178 <HAL_RCCEx_PeriphCLKConfig>
 8002be0:	b108      	cbz	r0, 8002be6 <HAL_SD_MspInit+0x3a>
    {
      Error_Handler();
 8002be2:	f7ff fe0f 	bl	8002804 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002be6:	4b53      	ldr	r3, [pc, #332]	; (8002d34 <HAL_SD_MspInit+0x188>)
    PD6     ------> SDMMC2_CK
    PG10     ------> SDMMC2_D1
    PG9     ------> SDMMC2_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be8:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bea:	2600      	movs	r6, #0
 8002bec:	2703      	movs	r7, #3
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002bee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf0:	a905      	add	r1, sp, #20
 8002bf2:	4851      	ldr	r0, [pc, #324]	; (8002d38 <HAL_SD_MspInit+0x18c>)

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002bf4:	f04f 080b 	mov.w	r8, #11
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002bf8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bfc:	645a      	str	r2, [r3, #68]	; 0x44
 8002bfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c00:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002c04:	9201      	str	r2, [sp, #4]
 8002c06:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c0a:	f042 0202 	orr.w	r2, r2, #2
 8002c0e:	631a      	str	r2, [r3, #48]	; 0x30
 8002c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c12:	f002 0202 	and.w	r2, r2, #2
 8002c16:	9202      	str	r2, [sp, #8]
 8002c18:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c1c:	f042 0208 	orr.w	r2, r2, #8
 8002c20:	631a      	str	r2, [r3, #48]	; 0x30
 8002c22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c24:	f002 0208 	and.w	r2, r2, #8
 8002c28:	9203      	str	r2, [sp, #12]
 8002c2a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3a:	9304      	str	r3, [sp, #16]
 8002c3c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3e:	2318      	movs	r3, #24
 8002c40:	e9cd 3405 	strd	r3, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002c44:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c46:	e9cd 6707 	strd	r6, r7, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002c4a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c4c:	f003 fdcc 	bl	80067e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002c50:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c52:	a905      	add	r1, sp, #20
 8002c54:	4839      	ldr	r0, [pc, #228]	; (8002d3c <HAL_SD_MspInit+0x190>)
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002c56:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5a:	e9cd 3405 	strd	r3, r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5e:	e9cd 6707 	strd	r6, r7, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c62:	f003 fdc1 	bl	80067e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8002c66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c6a:	a905      	add	r1, sp, #20
 8002c6c:	4834      	ldr	r0, [pc, #208]	; (8002d40 <HAL_SD_MspInit+0x194>)
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002c6e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    hdma_sdmmc2_rx.Instance = DMA2_Stream5;
    hdma_sdmmc2_rx.Init.Channel = DMA_CHANNEL_11;
    hdma_sdmmc2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_sdmmc2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_sdmmc2_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sdmmc2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c72:	f44f 6880 	mov.w	r8, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c76:	e9cd 3405 	strd	r3, r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c7a:	e9cd 6707 	strd	r6, r7, [sp, #28]
    hdma_sdmmc2_rx.Instance = DMA2_Stream5;
 8002c7e:	4c31      	ldr	r4, [pc, #196]	; (8002d44 <HAL_SD_MspInit+0x198>)
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c80:	f003 fdb2 	bl	80067e8 <HAL_GPIO_Init>
    hdma_sdmmc2_rx.Init.Channel = DMA_CHANNEL_11;
 8002c84:	f04f 53b0 	mov.w	r3, #369098752	; 0x16000000
 8002c88:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 8002d50 <HAL_SD_MspInit+0x1a4>
    hdma_sdmmc2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sdmmc2_rx.Init.Mode = DMA_PFCTRL;
 8002c8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_sdmmc2_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_sdmmc2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_sdmmc2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_sdmmc2_rx.Init.MemBurst = DMA_MBURST_INC4;
    hdma_sdmmc2_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002c90:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    if (HAL_DMA_Init(&hdma_sdmmc2_rx) != HAL_OK)
 8002c94:	4620      	mov	r0, r4
    hdma_sdmmc2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c96:	6226      	str	r6, [r4, #32]
    hdma_sdmmc2_rx.Init.Channel = DMA_CHANNEL_11;
 8002c98:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_sdmmc2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ca0:	e9c4 8304 	strd	r8, r3, [r4, #16]
    hdma_sdmmc2_rx.Init.Mode = DMA_PFCTRL;
 8002ca4:	2320      	movs	r3, #32
 8002ca6:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_sdmmc2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002caa:	2304      	movs	r3, #4
    hdma_sdmmc2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002cac:	e9c4 3709 	strd	r3, r7, [r4, #36]	; 0x24
    hdma_sdmmc2_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002cb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    hdma_sdmmc2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cb4:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_sdmmc2_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002cb8:	e9c4 130b 	strd	r1, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_sdmmc2_rx) != HAL_OK)
 8002cbc:	f002 ff26 	bl	8005b0c <HAL_DMA_Init>
 8002cc0:	b108      	cbz	r0, 8002cc6 <HAL_SD_MspInit+0x11a>
    {
      Error_Handler();
 8002cc2:	f7ff fd9f 	bl	8002804 <Error_Handler>

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc2_rx);

    /* SDMMC2_TX Init */
    hdma_sdmmc2_tx.Instance = DMA2_Stream0;
    hdma_sdmmc2_tx.Init.Channel = DMA_CHANNEL_11;
 8002cc6:	4a20      	ldr	r2, [pc, #128]	; (8002d48 <HAL_SD_MspInit+0x19c>)
 8002cc8:	f04f 53b0 	mov.w	r3, #369098752	; 0x16000000
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc2_rx);
 8002ccc:	642c      	str	r4, [r5, #64]	; 0x40
    hdma_sdmmc2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_sdmmc2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cce:	2140      	movs	r1, #64	; 0x40
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc2_rx);
 8002cd0:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_sdmmc2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sdmmc2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002cd2:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_sdmmc2_tx.Instance = DMA2_Stream0;
 8002cd6:	4c1d      	ldr	r4, [pc, #116]	; (8002d4c <HAL_SD_MspInit+0x1a0>)
    hdma_sdmmc2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sdmmc2_tx.Init.Mode = DMA_PFCTRL;
    hdma_sdmmc2_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_sdmmc2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_sdmmc2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002cd8:	2704      	movs	r7, #4
    hdma_sdmmc2_tx.Init.Mode = DMA_PFCTRL;
 8002cda:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    hdma_sdmmc2_tx.Init.MemBurst = DMA_MBURST_INC4;
    hdma_sdmmc2_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002cde:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    hdma_sdmmc2_tx.Init.Channel = DMA_CHANNEL_11;
 8002ce2:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_sdmmc2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ce6:	2300      	movs	r3, #0
    hdma_sdmmc2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ce8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sdmmc2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cec:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_sdmmc2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cf0:	6223      	str	r3, [r4, #32]
    hdma_sdmmc2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002cf2:	2303      	movs	r3, #3
    hdma_sdmmc2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002cf4:	e9c4 0204 	strd	r0, r2, [r4, #16]
    hdma_sdmmc2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002cf8:	e9c4 7309 	strd	r7, r3, [r4, #36]	; 0x24
    hdma_sdmmc2_tx.Init.Mode = DMA_PFCTRL;
 8002cfc:	2220      	movs	r2, #32
    hdma_sdmmc2_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002cfe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_sdmmc2_tx) != HAL_OK)
 8002d02:	4620      	mov	r0, r4
    hdma_sdmmc2_tx.Init.Mode = DMA_PFCTRL;
 8002d04:	e9c4 6206 	strd	r6, r2, [r4, #24]
    hdma_sdmmc2_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002d08:	e9c4 c30b 	strd	ip, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_sdmmc2_tx) != HAL_OK)
 8002d0c:	f002 fefe 	bl	8005b0c <HAL_DMA_Init>
 8002d10:	b108      	cbz	r0, 8002d16 <HAL_SD_MspInit+0x16a>
    {
      Error_Handler();
 8002d12:	f7ff fd77 	bl	8002804 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc2_tx);

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 5, 0);
 8002d16:	2067      	movs	r0, #103	; 0x67
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2105      	movs	r1, #5
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc2_tx);
 8002d1c:	63ec      	str	r4, [r5, #60]	; 0x3c
 8002d1e:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 5, 0);
 8002d20:	f002 fde2 	bl	80058e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8002d24:	2067      	movs	r0, #103	; 0x67
 8002d26:	f002 fe11 	bl	800594c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8002d2a:	b02e      	add	sp, #184	; 0xb8
 8002d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d30:	40011c00 	.word	0x40011c00
 8002d34:	40023800 	.word	0x40023800
 8002d38:	40020400 	.word	0x40020400
 8002d3c:	40020c00 	.word	0x40020c00
 8002d40:	40021800 	.word	0x40021800
 8002d44:	20005624 	.word	0x20005624
 8002d48:	40026410 	.word	0x40026410
 8002d4c:	20005684 	.word	0x20005684
 8002d50:	40026488 	.word	0x40026488

08002d54 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002d54:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002d56:	2300      	movs	r3, #0
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002d58:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002d5a:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 8002d5c:	4b2a      	ldr	r3, [pc, #168]	; (8002e08 <HAL_SDRAM_MspInit+0xb4>)
 8002d5e:	681e      	ldr	r6, [r3, #0]
 8002d60:	2e00      	cmp	r6, #0
 8002d62:	d14f      	bne.n	8002e04 <HAL_SDRAM_MspInit+0xb0>
  FMC_Initialized = 1;
 8002d64:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d66:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d68:	2503      	movs	r5, #3
 8002d6a:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 8002d6c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d6e:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8002d70:	4b26      	ldr	r3, [pc, #152]	; (8002e0c <HAL_SDRAM_MspInit+0xb8>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d72:	4827      	ldr	r0, [pc, #156]	; (8002e10 <HAL_SDRAM_MspInit+0xbc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8002d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d76:	f042 0201 	orr.w	r2, r2, #1
 8002d7a:	639a      	str	r2, [r3, #56]	; 0x38
 8002d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d86:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d8a:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d92:	f003 fd29 	bl	80067e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8002d96:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d9a:	a901      	add	r1, sp, #4
 8002d9c:	481d      	ldr	r0, [pc, #116]	; (8002e14 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d9e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da0:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da4:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002da8:	f003 fd1e 	bl	80067e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8002dac:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002db0:	a901      	add	r1, sp, #4
 8002db2:	4819      	ldr	r0, [pc, #100]	; (8002e18 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002db4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dba:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dbe:	f003 fd13 	bl	80067e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 8002dc2:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002dc6:	a901      	add	r1, sp, #4
 8002dc8:	4814      	ldr	r0, [pc, #80]	; (8002e1c <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002dca:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dcc:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002dd4:	f003 fd08 	bl	80067e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002dd8:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ddc:	a901      	add	r1, sp, #4
 8002dde:	4810      	ldr	r0, [pc, #64]	; (8002e20 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002de0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de6:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dea:	f003 fcfd 	bl	80067e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5
 8002dee:	f64f 732c 	movw	r3, #65324	; 0xff2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002df2:	a901      	add	r1, sp, #4
 8002df4:	480b      	ldr	r0, [pc, #44]	; (8002e24 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002df6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df8:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dfc:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002e00:	f003 fcf2 	bl	80067e8 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002e04:	b007      	add	sp, #28
 8002e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e08:	2000db7c 	.word	0x2000db7c
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40021800 	.word	0x40021800
 8002e18:	40020c00 	.word	0x40020c00
 8002e1c:	40022000 	.word	0x40022000
 8002e20:	40021400 	.word	0x40021400
 8002e24:	40021c00 	.word	0x40021c00

08002e28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e28:	b510      	push	{r4, lr}
 8002e2a:	4601      	mov	r1, r0
 8002e2c:	b088      	sub	sp, #32
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2036      	movs	r0, #54	; 0x36
 8002e32:	f002 fd59 	bl	80058e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e36:	2036      	movs	r0, #54	; 0x36
 8002e38:	f002 fd88 	bl	800594c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002e3c:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <HAL_InitTick+0x68>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e3e:	a901      	add	r1, sp, #4
 8002e40:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002e42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002e44:	4c13      	ldr	r4, [pc, #76]	; (8002e94 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002e46:	f042 0210 	orr.w	r2, r2, #16
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f003 0310 	and.w	r3, r3, #16
 8002e52:	9302      	str	r3, [sp, #8]
 8002e54:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e56:	f005 f971 	bl	800813c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002e5a:	f005 f95f 	bl	800811c <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8002e5e:	4b0e      	ldr	r3, [pc, #56]	; (8002e98 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002e60:	0040      	lsls	r0, r0, #1
  htim6.Instance = TIM6;
 8002e62:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002e64:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002e68:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e6a:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <HAL_InitTick+0x74>)
 8002e6c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e70:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 8002e72:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8002e74:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002e76:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8002e78:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e7a:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002e7c:	f006 fb5c 	bl	8009538 <HAL_TIM_Base_Init>
 8002e80:	b920      	cbnz	r0, 8002e8c <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002e82:	4620      	mov	r0, r4
 8002e84:	f006 fa00 	bl	8009288 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8002e88:	b008      	add	sp, #32
 8002e8a:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	e7fb      	b.n	8002e88 <HAL_InitTick+0x60>
 8002e90:	40023800 	.word	0x40023800
 8002e94:	2000db80 	.word	0x2000db80
 8002e98:	40001000 	.word	0x40001000
 8002e9c:	000f4240 	.word	0x000f4240

08002ea0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ea0:	4770      	bx	lr

08002ea2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ea2:	e7fe      	b.n	8002ea2 <HardFault_Handler>

08002ea4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ea4:	e7fe      	b.n	8002ea4 <MemManage_Handler>

08002ea6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ea6:	e7fe      	b.n	8002ea6 <BusFault_Handler>

08002ea8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ea8:	e7fe      	b.n	8002ea8 <UsageFault_Handler>

08002eaa <DebugMon_Handler>:
 8002eaa:	4770      	bx	lr

08002eac <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002eac:	4801      	ldr	r0, [pc, #4]	; (8002eb4 <TIM6_DAC_IRQHandler+0x8>)
 8002eae:	f006 ba2d 	b.w	800930c <HAL_TIM_IRQHandler>
 8002eb2:	bf00      	nop
 8002eb4:	2000db80 	.word	0x2000db80

08002eb8 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_tx);
 8002eb8:	4801      	ldr	r0, [pc, #4]	; (8002ec0 <DMA2_Stream0_IRQHandler+0x8>)
 8002eba:	f002 bef7 	b.w	8005cac <HAL_DMA_IRQHandler>
 8002ebe:	bf00      	nop
 8002ec0:	20005684 	.word	0x20005684

08002ec4 <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_rx);
 8002ec4:	4801      	ldr	r0, [pc, #4]	; (8002ecc <DMA2_Stream5_IRQHandler+0x8>)
 8002ec6:	f002 bef1 	b.w	8005cac <HAL_DMA_IRQHandler>
 8002eca:	bf00      	nop
 8002ecc:	20005624 	.word	0x20005624

08002ed0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002ed0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */
  int now = HAL_GetTick();
 8002ed2:	f002 fcdf 	bl	8005894 <HAL_GetTick>
  diff = last - now;
 8002ed6:	4a05      	ldr	r2, [pc, #20]	; (8002eec <LTDC_IRQHandler+0x1c>)
 8002ed8:	4905      	ldr	r1, [pc, #20]	; (8002ef0 <LTDC_IRQHandler+0x20>)
 8002eda:	6813      	ldr	r3, [r2, #0]
 8002edc:	1a1b      	subs	r3, r3, r0
 8002ede:	600b      	str	r3, [r1, #0]
  last = now;
 8002ee0:	6010      	str	r0, [r2, #0]
  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002ee2:	4804      	ldr	r0, [pc, #16]	; (8002ef4 <LTDC_IRQHandler+0x24>)
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002ee4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_LTDC_IRQHandler(&hltdc);
 8002ee8:	f004 bacd 	b.w	8007486 <HAL_LTDC_IRQHandler>
 8002eec:	2000dbd0 	.word	0x2000dbd0
 8002ef0:	2000dbcc 	.word	0x2000dbcc
 8002ef4:	2000574c 	.word	0x2000574c

08002ef8 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002ef8:	4801      	ldr	r0, [pc, #4]	; (8002f00 <DMA2D_IRQHandler+0x8>)
 8002efa:	f002 bfcf 	b.w	8005e9c <HAL_DMA2D_IRQHandler>
 8002efe:	bf00      	nop
 8002f00:	200055cc 	.word	0x200055cc

08002f04 <I2C4_EV_IRQHandler>:
void I2C4_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8002f04:	4801      	ldr	r0, [pc, #4]	; (8002f0c <I2C4_EV_IRQHandler+0x8>)
 8002f06:	f004 b977 	b.w	80071f8 <HAL_I2C_EV_IRQHandler>
 8002f0a:	bf00      	nop
 8002f0c:	20005700 	.word	0x20005700

08002f10 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8002f10:	4801      	ldr	r0, [pc, #4]	; (8002f18 <DSI_IRQHandler+0x8>)
 8002f12:	f003 b9d2 	b.w	80062ba <HAL_DSI_IRQHandler>
 8002f16:	bf00      	nop
 8002f18:	200056e4 	.word	0x200056e4

08002f1c <SDMMC2_IRQHandler>:
void SDMMC2_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8002f1c:	4801      	ldr	r0, [pc, #4]	; (8002f24 <SDMMC2_IRQHandler+0x8>)
 8002f1e:	f006 b859 	b.w	8008fd4 <HAL_SD_IRQHandler>
 8002f22:	bf00      	nop
 8002f24:	20005840 	.word	0x20005840

08002f28 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002f28:	2001      	movs	r0, #1
 8002f2a:	4770      	bx	lr

08002f2c <_kill>:

int _kill(int pid, int sig)
{
 8002f2c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002f2e:	f021 fd99 	bl	8024a64 <__errno>
 8002f32:	2316      	movs	r3, #22
 8002f34:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002f36:	f04f 30ff 	mov.w	r0, #4294967295
 8002f3a:	bd08      	pop	{r3, pc}

08002f3c <_exit>:

void _exit (int status)
{
 8002f3c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002f3e:	f021 fd91 	bl	8024a64 <__errno>
 8002f42:	2316      	movs	r3, #22
 8002f44:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8002f46:	e7fe      	b.n	8002f46 <_exit+0xa>

08002f48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f48:	b570      	push	{r4, r5, r6, lr}
 8002f4a:	460d      	mov	r5, r1
 8002f4c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f4e:	460e      	mov	r6, r1
 8002f50:	1b73      	subs	r3, r6, r5
 8002f52:	429c      	cmp	r4, r3
 8002f54:	dc01      	bgt.n	8002f5a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8002f56:	4620      	mov	r0, r4
 8002f58:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002f5a:	f3af 8000 	nop.w
 8002f5e:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f62:	e7f5      	b.n	8002f50 <_read+0x8>

08002f64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f64:	b570      	push	{r4, r5, r6, lr}
 8002f66:	460d      	mov	r5, r1
 8002f68:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f6a:	460e      	mov	r6, r1
 8002f6c:	1b73      	subs	r3, r6, r5
 8002f6e:	429c      	cmp	r4, r3
 8002f70:	dc01      	bgt.n	8002f76 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8002f72:	4620      	mov	r0, r4
 8002f74:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8002f76:	f816 0b01 	ldrb.w	r0, [r6], #1
 8002f7a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f7e:	e7f5      	b.n	8002f6c <_write+0x8>

08002f80 <_close>:

int _close(int file)
{
	return -1;
}
 8002f80:	f04f 30ff 	mov.w	r0, #4294967295
 8002f84:	4770      	bx	lr

08002f86 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002f86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8002f8a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8002f8c:	604b      	str	r3, [r1, #4]
}
 8002f8e:	4770      	bx	lr

08002f90 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002f90:	2001      	movs	r0, #1
 8002f92:	4770      	bx	lr

08002f94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002f94:	2000      	movs	r0, #0
 8002f96:	4770      	bx	lr

08002f98 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002f98:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <_sbrk+0x2c>)
 8002f9a:	6811      	ldr	r1, [r2, #0]
{
 8002f9c:	b508      	push	{r3, lr}
 8002f9e:	4603      	mov	r3, r0
	if (heap_end == 0)
 8002fa0:	b909      	cbnz	r1, 8002fa6 <_sbrk+0xe>
		heap_end = &end;
 8002fa2:	4909      	ldr	r1, [pc, #36]	; (8002fc8 <_sbrk+0x30>)
 8002fa4:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8002fa6:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002fa8:	4669      	mov	r1, sp
 8002faa:	4403      	add	r3, r0
 8002fac:	428b      	cmp	r3, r1
 8002fae:	d906      	bls.n	8002fbe <_sbrk+0x26>
	{
		errno = ENOMEM;
 8002fb0:	f021 fd58 	bl	8024a64 <__errno>
 8002fb4:	230c      	movs	r3, #12
 8002fb6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002fb8:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8002fbc:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8002fbe:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8002fc0:	e7fc      	b.n	8002fbc <_sbrk+0x24>
 8002fc2:	bf00      	nop
 8002fc4:	2000dbd4 	.word	0x2000dbd4
 8002fc8:	200212a0 	.word	0x200212a0

08002fcc <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdanab_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8002fcc:	4770      	bx	lr

08002fce <_ZN23ApplicationFontProviderD0Ev>:
 8002fce:	b510      	push	{r4, lr}
 8002fd0:	4604      	mov	r4, r0
 8002fd2:	2104      	movs	r1, #4
 8002fd4:	f021 fce1 	bl	802499a <_ZdlPvj>
 8002fd8:	4620      	mov	r0, r4
 8002fda:	bd10      	pop	{r4, pc}

08002fdc <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8002fdc:	2901      	cmp	r1, #1
{
 8002fde:	b508      	push	{r3, lr}
    switch (typography)
 8002fe0:	d006      	beq.n	8002ff0 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8002fe2:	2902      	cmp	r1, #2
 8002fe4:	d008      	beq.n	8002ff8 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8002fe6:	b959      	cbnz	r1, 8003000 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdanab_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8002fe8:	f002 f82c 	bl	8005044 <_ZN17TypedTextDatabase8getFontsEv>
 8002fec:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8002fee:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8002ff0:	f002 f828 	bl	8005044 <_ZN17TypedTextDatabase8getFontsEv>
 8002ff4:	6840      	ldr	r0, [r0, #4]
 8002ff6:	e7fa      	b.n	8002fee <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8002ff8:	f002 f824 	bl	8005044 <_ZN17TypedTextDatabase8getFontsEv>
 8002ffc:	6880      	ldr	r0, [r0, #8]
 8002ffe:	e7f6      	b.n	8002fee <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8003000:	2000      	movs	r0, #0
 8003002:	e7f4      	b.n	8002fee <_ZN23ApplicationFontProvider7getFontEt+0x12>

08003004 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003004:	4800      	ldr	r0, [pc, #0]	; (8003008 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003006:	4770      	bx	lr
 8003008:	080264d4 	.word	0x080264d4

0800300c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 800300c:	2006      	movs	r0, #6
 800300e:	4770      	bx	lr

08003010 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003010:	b513      	push	{r0, r1, r4, lr}
 8003012:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003014:	b151      	cbz	r1, 800302c <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003016:	6803      	ldr	r3, [r0, #0]
 8003018:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 800301a:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 800301c:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003020:	689c      	ldr	r4, [r3, #8]
 8003022:	f10d 0303 	add.w	r3, sp, #3
 8003026:	47a0      	blx	r4
        return glyph;
    }
 8003028:	b002      	add	sp, #8
 800302a:	bd10      	pop	{r4, pc}
            return 0;
 800302c:	4608      	mov	r0, r1
 800302e:	e7fb      	b.n	8003028 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003030 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003030:	8940      	ldrh	r0, [r0, #10]
 8003032:	4770      	bx	lr

08003034 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003034:	8980      	ldrh	r0, [r0, #12]
 8003036:	4770      	bx	lr

08003038 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 8003038:	8880      	ldrh	r0, [r0, #4]
 800303a:	4770      	bx	lr

0800303c <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 800303c:	7983      	ldrb	r3, [r0, #6]
 800303e:	8880      	ldrh	r0, [r0, #4]
 8003040:	4418      	add	r0, r3
    }
 8003042:	b280      	uxth	r0, r0
 8003044:	4770      	bx	lr

08003046 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003046:	79c0      	ldrb	r0, [r0, #7]
    }
 8003048:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800304c:	4770      	bx	lr

0800304e <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 800304e:	79c0      	ldrb	r0, [r0, #7]
    }
 8003050:	09c0      	lsrs	r0, r0, #7
 8003052:	4770      	bx	lr

08003054 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8003054:	4770      	bx	lr

08003056 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003056:	b510      	push	{r4, lr}
 8003058:	4604      	mov	r4, r0
    }
 800305a:	2108      	movs	r1, #8
 800305c:	f021 fc9d 	bl	802499a <_ZdlPvj>
 8003060:	4620      	mov	r0, r4
 8003062:	bd10      	pop	{r4, pc}

08003064 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8003064:	4770      	bx	lr

08003066 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
    }
 8003066:	4770      	bx	lr

08003068 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8003068:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 800306c:	6808      	ldr	r0, [r1, #0]
 800306e:	6849      	ldr	r1, [r1, #4]
 8003070:	c303      	stmia	r3!, {r0, r1}
    }
 8003072:	4770      	bx	lr

08003074 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8003074:	4770      	bx	lr

08003076 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8003076:	4770      	bx	lr

08003078 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003078:	6041      	str	r1, [r0, #4]
    }
 800307a:	4770      	bx	lr

0800307c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800307c:	4770      	bx	lr
	...

08003080 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003080:	4b06      	ldr	r3, [pc, #24]	; (800309c <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8003082:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8003086:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 800308a:	2300      	movs	r3, #0
 800308c:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003090:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8003094:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	080032ad 	.word	0x080032ad

080030a0 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80030a0:	2301      	movs	r3, #1
 80030a2:	7203      	strb	r3, [r0, #8]
    }
 80030a4:	4770      	bx	lr

080030a6 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80030a6:	4770      	bx	lr

080030a8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 80030a8:	4603      	mov	r3, r0
 80030aa:	4608      	mov	r0, r1
    {
        if (&d == snapshotPtr)
 80030ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ae:	428a      	cmp	r2, r1
    virtual void tickMoveDrawable(Drawable& d)
 80030b0:	b410      	push	{r4}
        if (&d == snapshotPtr)
 80030b2:	d008      	beq.n	80030c6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x1e>

        switch (templateDirection)
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 80030b4:	680a      	ldr	r2, [r1, #0]
 80030b6:	f9b3 1050 	ldrsh.w	r1, [r3, #80]	; 0x50
 80030ba:	6d54      	ldr	r4, [r2, #84]	; 0x54
 80030bc:	2200      	movs	r2, #0
 80030be:	4623      	mov	r3, r4
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
            break;
        }
    }
 80030c0:	f85d 4b04 	ldr.w	r4, [sp], #4
            d.moveRelative(calculatedValue, 0);
 80030c4:	4718      	bx	r3
    }
 80030c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
class SlideTransition : public Transition
 80030cc:	4770      	bx	lr

080030ce <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80030ce:	4770      	bx	lr

080030d0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80030d0:	4770      	bx	lr
	...

080030d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 80030d4:	680b      	ldr	r3, [r1, #0]
    virtual void initMoveDrawable(Drawable& d)
 80030d6:	4608      	mov	r0, r1
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 80030d8:	4902      	ldr	r1, [pc, #8]	; (80030e4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x10>)
 80030da:	2200      	movs	r2, #0
 80030dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030de:	f9b1 1000 	ldrsh.w	r1, [r1]
 80030e2:	4718      	bx	r3
 80030e4:	20020fcc 	.word	0x20020fcc

080030e8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 80030e8:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 80030ea:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 80030ec:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 80030ee:	68c2      	ldr	r2, [r0, #12]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	1055      	asrs	r5, r2, #1
 80030f4:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80030f8:	07d2      	lsls	r2, r2, #31
 80030fa:	bf48      	it	mi
 80030fc:	5962      	ldrmi	r2, [r4, r5]
    }
 80030fe:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8003100:	bf48      	it	mi
 8003102:	58d3      	ldrmi	r3, [r2, r3]
 8003104:	4718      	bx	r3

08003106 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
 8003106:	6843      	ldr	r3, [r0, #4]
 8003108:	b12b      	cbz	r3, 8003116 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x10>
 800310a:	6883      	ldr	r3, [r0, #8]
 800310c:	b92b      	cbnz	r3, 800311a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x14>
 800310e:	68c0      	ldr	r0, [r0, #12]
 8003110:	f000 0001 	and.w	r0, r0, #1
 8003114:	4770      	bx	lr
 8003116:	4618      	mov	r0, r3
 8003118:	4770      	bx	lr
 800311a:	2001      	movs	r0, #1
    }
 800311c:	4770      	bx	lr

0800311e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800311e:	b410      	push	{r4}
    {
        (pobject->*pmemfun_0)();
 8003120:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8003122:	4603      	mov	r3, r0
        (pobject->*pmemfun_0)();
 8003124:	68c2      	ldr	r2, [r0, #12]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	1054      	asrs	r4, r2, #1
 800312a:	eb01 0062 	add.w	r0, r1, r2, asr #1
 800312e:	07d2      	lsls	r2, r2, #31
 8003130:	bf48      	it	mi
 8003132:	590a      	ldrmi	r2, [r1, r4]
    }
 8003134:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun_0)();
 8003138:	bf48      	it	mi
 800313a:	58d3      	ldrmi	r3, [r2, r3]
 800313c:	4718      	bx	r3

0800313e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800313e:	6843      	ldr	r3, [r0, #4]
 8003140:	b12b      	cbz	r3, 800314e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 8003142:	6883      	ldr	r3, [r0, #8]
 8003144:	b92b      	cbnz	r3, 8003152 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8003146:	68c0      	ldr	r0, [r0, #12]
 8003148:	f000 0001 	and.w	r0, r0, #1
 800314c:	4770      	bx	lr
 800314e:	4618      	mov	r0, r3
 8003150:	4770      	bx	lr
 8003152:	2001      	movs	r0, #1
    }
 8003154:	4770      	bx	lr

08003156 <_ZN8touchgfx12NoTransitionD0Ev>:
 8003156:	b510      	push	{r4, lr}
 8003158:	4604      	mov	r4, r0
 800315a:	210c      	movs	r1, #12
 800315c:	f021 fc1d 	bl	802499a <_ZdlPvj>
 8003160:	4620      	mov	r0, r4
 8003162:	bd10      	pop	{r4, pc}

08003164 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003164:	b510      	push	{r4, lr}
 8003166:	4604      	mov	r4, r0
 8003168:	2110      	movs	r1, #16
 800316a:	f021 fc16 	bl	802499a <_ZdlPvj>
 800316e:	4620      	mov	r0, r4
 8003170:	bd10      	pop	{r4, pc}

08003172 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8003172:	b510      	push	{r4, lr}
 8003174:	4604      	mov	r4, r0
 8003176:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800317a:	f021 fc0e 	bl	802499a <_ZdlPvj>
 800317e:	4620      	mov	r0, r4
 8003180:	bd10      	pop	{r4, pc}

08003182 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
class SlideTransition : public Transition
 8003182:	b510      	push	{r4, lr}
 8003184:	4604      	mov	r4, r0
 8003186:	2154      	movs	r1, #84	; 0x54
 8003188:	f021 fc07 	bl	802499a <_ZdlPvj>
 800318c:	4620      	mov	r0, r4
 800318e:	bd10      	pop	{r4, pc}

08003190 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003190:	b510      	push	{r4, lr}
 8003192:	4604      	mov	r4, r0
 8003194:	2110      	movs	r1, #16
 8003196:	f021 fc00 	bl	802499a <_ZdlPvj>
 800319a:	4620      	mov	r0, r4
 800319c:	bd10      	pop	{r4, pc}

0800319e <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 800319e:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 80031a0:	f010 fd64 	bl	8013c6c <_ZN8touchgfx11Application11getInstanceEv>
    }
 80031a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 80031a8:	f011 b928 	b.w	80143fc <_ZN8touchgfx11Application10invalidateEv>

080031ac <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x18>)
    virtual void tearDown()
 80031ae:	4601      	mov	r1, r0
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	b12b      	cbz	r3, 80031c0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x14>
 80031b4:	6840      	ldr	r0, [r0, #4]
 80031b6:	b118      	cbz	r0, 80031c0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x14>
            screenContainer->remove(snapshot);
 80031b8:	6803      	ldr	r3, [r0, #0]
 80031ba:	310c      	adds	r1, #12
 80031bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031be:	4718      	bx	r3
    }
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	20020fd7 	.word	0x20020fd7

080031c8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
        if (!HAL::USE_ANIMATION_STORAGE)
 80031c8:	4b1f      	ldr	r3, [pc, #124]	; (8003248 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x80>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
    virtual void handleTickEvent()
 80031cc:	b510      	push	{r4, lr}
 80031ce:	4604      	mov	r4, r0
        if (!HAL::USE_ANIMATION_STORAGE)
 80031d0:	b913      	cbnz	r3, 80031d8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x10>
            done = true;
 80031d2:	2301      	movs	r3, #1
 80031d4:	7203      	strb	r3, [r0, #8]
    }
 80031d6:	bd10      	pop	{r4, pc}
        animationCounter++;
 80031d8:	f890 004d 	ldrb.w	r0, [r0, #77]	; 0x4d
        if (animationCounter <= animationSteps)
 80031dc:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
        animationCounter++;
 80031e0:	3001      	adds	r0, #1
 80031e2:	b2c0      	uxtb	r0, r0
        if (animationCounter <= animationSteps)
 80031e4:	4298      	cmp	r0, r3
        animationCounter++;
 80031e6:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
        if (animationCounter <= animationSteps)
 80031ea:	d824      	bhi.n	8003236 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x6e>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80031ec:	f9b4 204e 	ldrsh.w	r2, [r4, #78]	; 0x4e
 80031f0:	2100      	movs	r1, #0
 80031f2:	f012 fa11 	bl	8015618 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
            if (calculatedValue % 2)
 80031f6:	f010 0201 	ands.w	r2, r0, #1
 80031fa:	b283      	uxth	r3, r0
 80031fc:	d021      	beq.n	8003242 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x7a>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80031fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003202:	2800      	cmp	r0, #0
 8003204:	bfd8      	it	le
 8003206:	460a      	movle	r2, r1
 8003208:	4413      	add	r3, r2
 800320a:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
            calculatedValue -= snapshot.getX();
 800320e:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
            snapshot.moveRelative(calculatedValue, 0);
 8003212:	f104 000c 	add.w	r0, r4, #12
            calculatedValue -= snapshot.getX();
 8003216:	8a23      	ldrh	r3, [r4, #16]
            snapshot.moveRelative(calculatedValue, 0);
 8003218:	2200      	movs	r2, #0
            calculatedValue -= snapshot.getX();
 800321a:	1ac9      	subs	r1, r1, r3
 800321c:	b209      	sxth	r1, r1
 800321e:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
            snapshot.moveRelative(calculatedValue, 0);
 8003222:	f011 fd33 	bl	8014c8c <_ZN8touchgfx8Drawable12moveRelativeEss>
        screenContainer->forEachChild(&handleTickCallback);
 8003226:	6860      	ldr	r0, [r4, #4]
 8003228:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800322c:	6803      	ldr	r3, [r0, #0]
    }
 800322e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        screenContainer->forEachChild(&handleTickCallback);
 8003232:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003234:	4718      	bx	r3
            done = true;
 8003236:	2301      	movs	r3, #1
 8003238:	7223      	strb	r3, [r4, #8]
            animationCounter = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
            return;
 8003240:	e7c9      	b.n	80031d6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xe>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8003242:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 8003246:	e7e2      	b.n	800320e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x46>
 8003248:	20020fd7 	.word	0x20020fd7

0800324c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800324c:	b510      	push	{r4, lr}
 800324e:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003250:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8003254:	b158      	cbz	r0, 800326e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8003256:	6803      	ldr	r3, [r0, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	4798      	blx	r3
 800325c:	b138      	cbz	r0, 800326e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 800325e:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8003262:	6803      	ldr	r3, [r0, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003268:	2300      	movs	r3, #0
 800326a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 800326e:	bd10      	pop	{r4, pc}

08003270 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 8003270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        if (HAL::USE_ANIMATION_STORAGE)
 8003272:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x34>)
    virtual void init()
 8003274:	4604      	mov	r4, r0
        if (HAL::USE_ANIMATION_STORAGE)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	b18b      	cbz	r3, 800329e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x2e>
        : pobject(pobject), pmemfun_1(pmemfun_1)
 800327a:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x38>)
 800327c:	221c      	movs	r2, #28
            screenContainer->forEachChild(&initCallback);
 800327e:	4669      	mov	r1, sp
 8003280:	e9cd 3000 	strd	r3, r0, [sp]
 8003284:	6840      	ldr	r0, [r0, #4]
 8003286:	2301      	movs	r3, #1
 8003288:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800328c:	6803      	ldr	r3, [r0, #0]
 800328e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003290:	4798      	blx	r3
            screenContainer->add(snapshot);
 8003292:	6860      	ldr	r0, [r4, #4]
 8003294:	f104 010c 	add.w	r1, r4, #12
 8003298:	6803      	ldr	r3, [r0, #0]
 800329a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800329c:	4798      	blx	r3
    }
 800329e:	b004      	add	sp, #16
 80032a0:	bd10      	pop	{r4, pc}
 80032a2:	bf00      	nop
 80032a4:	20020fd7 	.word	0x20020fd7
 80032a8:	08026b3c 	.word	0x08026b3c

080032ac <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 80032ac:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80032b0:	e9d0 5a54 	ldrd	r5, sl, [r0, #336]	; 0x150
{
 80032b4:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80032b6:	68a8      	ldr	r0, [r5, #8]
 80032b8:	6803      	ldr	r3, [r0, #0]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	4798      	blx	r3
 80032be:	f5b0 7ff4 	cmp.w	r0, #488	; 0x1e8
 80032c2:	d205      	bcs.n	80032d0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>
 80032c4:	4b45      	ldr	r3, [pc, #276]	; (80033dc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 80032c6:	21a3      	movs	r1, #163	; 0xa3
 80032c8:	4a45      	ldr	r2, [pc, #276]	; (80033e0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80032ca:	4846      	ldr	r0, [pc, #280]	; (80033e4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 80032cc:	f021 fb94 	bl	80249f8 <__assert_func>
 80032d0:	6868      	ldr	r0, [r5, #4]
 80032d2:	6803      	ldr	r3, [r0, #0]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	4798      	blx	r3
 80032d8:	280f      	cmp	r0, #15
 80032da:	d803      	bhi.n	80032e4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x38>
 80032dc:	4b42      	ldr	r3, [pc, #264]	; (80033e8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 80032de:	21a4      	movs	r1, #164	; 0xa4
 80032e0:	4a3f      	ldr	r2, [pc, #252]	; (80033e0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 80032e2:	e7f2      	b.n	80032ca <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80032e4:	68e8      	ldr	r0, [r5, #12]
 80032e6:	6803      	ldr	r3, [r0, #0]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	4798      	blx	r3
 80032ec:	280b      	cmp	r0, #11
 80032ee:	d803      	bhi.n	80032f8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4c>
 80032f0:	4b3e      	ldr	r3, [pc, #248]	; (80033ec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 80032f2:	21a5      	movs	r1, #165	; 0xa5
 80032f4:	4a3a      	ldr	r2, [pc, #232]	; (80033e0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 80032f6:	e7e8      	b.n	80032ca <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 80032f8:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80033f4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
    Application::getInstance()->clearAllTimerWidgets();
 80032fc:	f010 fcb6 	bl	8013c6c <_ZN8touchgfx11Application11getInstanceEv>
 8003300:	f010 fcba 	bl	8013c78 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8003304:	f8d9 0000 	ldr.w	r0, [r9]
 8003308:	b110      	cbz	r0, 8003310 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 800330a:	6803      	ldr	r3, [r0, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	4798      	blx	r3
    if (*currentTrans)
 8003310:	f8d9 0000 	ldr.w	r0, [r9]
 8003314:	b110      	cbz	r0, 800331c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 8003316:	6803      	ldr	r3, [r0, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4798      	blx	r3
    if (*currentScreen)
 800331c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80033f8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14c>
 8003320:	f8d8 0000 	ldr.w	r0, [r8]
 8003324:	b110      	cbz	r0, 800332c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 8003326:	6803      	ldr	r3, [r0, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	4798      	blx	r3
    if (*currentPresenter)
 800332c:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8003330:	b110      	cbz	r0, 8003338 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 8003332:	6803      	ldr	r3, [r0, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4798      	blx	r3
    if (*currentScreen)
 8003338:	f8d8 0000 	ldr.w	r0, [r8]
 800333c:	b110      	cbz	r0, 8003344 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 800333e:	6803      	ldr	r3, [r0, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4798      	blx	r3
    if (*currentPresenter)
 8003344:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8003348:	b110      	cbz	r0, 8003350 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 800334a:	6803      	ldr	r3, [r0, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003350:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003352:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8003354:	f04f 0b00 	mov.w	fp, #0
 8003358:	6803      	ldr	r3, [r0, #0]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	4798      	blx	r3
 800335e:	4b24      	ldr	r3, [pc, #144]	; (80033f0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>)
 8003360:	4604      	mov	r4, r0
 8003362:	f8c0 b004 	str.w	fp, [r0, #4]
 8003366:	6003      	str	r3, [r0, #0]
 8003368:	4659      	mov	r1, fp
 800336a:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800336e:	68a8      	ldr	r0, [r5, #8]
 8003370:	6803      	ldr	r3, [r0, #0]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	4798      	blx	r3
 8003376:	4606      	mov	r6, r0
 8003378:	f001 fefe 	bl	8005178 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800337c:	6868      	ldr	r0, [r5, #4]
 800337e:	4659      	mov	r1, fp
 8003380:	6803      	ldr	r3, [r0, #0]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	4798      	blx	r3
 8003386:	4605      	mov	r5, r0
 8003388:	4631      	mov	r1, r6
 800338a:	f001 fedb 	bl	8005144 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 800338e:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8003392:	f8c7 5138 	str.w	r5, [r7, #312]	; 0x138
    *currentScreen = newScreen;
 8003396:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 800339a:	b1e5      	cbz	r5, 80033d6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12a>
 800339c:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 800339e:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80033a2:	4630      	mov	r0, r6
 80033a4:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 80033a6:	f8c5 a008 	str.w	sl, [r5, #8]
 80033aa:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
    {
        this->presenter = &presenter;
 80033ac:	63f5      	str	r5, [r6, #60]	; 0x3c
 80033ae:	4798      	blx	r3
    newPresenter->activate();
 80033b0:	682b      	ldr	r3, [r5, #0]
 80033b2:	4628      	mov	r0, r5
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80033b8:	4621      	mov	r1, r4
 80033ba:	4630      	mov	r0, r6
 80033bc:	f012 f926 	bl	801560c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80033c0:	6823      	ldr	r3, [r4, #0]
 80033c2:	4620      	mov	r0, r4
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	4798      	blx	r3
    newTransition->invalidate();
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	4620      	mov	r0, r4
 80033cc:	695b      	ldr	r3, [r3, #20]
}
 80033ce:	b001      	add	sp, #4
 80033d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033d4:	4718      	bx	r3
    model->bind(newPresenter);
 80033d6:	462b      	mov	r3, r5
 80033d8:	e7e1      	b.n	800339e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xf2>
 80033da:	bf00      	nop
 80033dc:	0802655c 	.word	0x0802655c
 80033e0:	080265ea 	.word	0x080265ea
 80033e4:	080266ee 	.word	0x080266ee
 80033e8:	08026735 	.word	0x08026735
 80033ec:	080267d8 	.word	0x080267d8
 80033f0:	08026b18 	.word	0x08026b18
 80033f4:	20021038 	.word	0x20021038
 80033f8:	20021034 	.word	0x20021034

080033fc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80033fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fe:	4604      	mov	r4, r0
 8003400:	4617      	mov	r7, r2
 8003402:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8003404:	f010 fc54 	bl	8013cb0 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8003408:	4b10      	ldr	r3, [pc, #64]	; (800344c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 800340a:	2500      	movs	r5, #0
        instance = this;
 800340c:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800340e:	4629      	mov	r1, r5
      model(m)
 8003410:	4b0f      	ldr	r3, [pc, #60]	; (8003450 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 8003412:	e9c4 7654 	strd	r7, r6, [r4, #336]	; 0x150
        return instance;
 8003416:	4e0f      	ldr	r6, [pc, #60]	; (8003454 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8003418:	6023      	str	r3, [r4, #0]
 800341a:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun_0(0)
 800341c:	4b0e      	ldr	r3, [pc, #56]	; (8003458 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 800341e:	e9c4 5552 	strd	r5, r5, [r4, #328]	; 0x148
 8003422:	e9c4 3550 	strd	r3, r5, [r4, #320]	; 0x140
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003426:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8003428:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8003430:	4628      	mov	r0, r5
 8003432:	f001 fdbb 	bl	8004fac <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003436:	6833      	ldr	r3, [r6, #0]
 8003438:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800343c:	b10a      	cbz	r2, 8003442 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 800343e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003440:	b900      	cbnz	r0, 8003444 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 8003442:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003444:	f018 fd31 	bl	801beaa <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 8003448:	4620      	mov	r0, r4
 800344a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800344c:	20021044 	.word	0x20021044
 8003450:	08026acc 	.word	0x08026acc
 8003454:	20020fd8 	.word	0x20020fd8
 8003458:	08026ab4 	.word	0x08026ab4

0800345c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800345c:	4b06      	ldr	r3, [pc, #24]	; (8003478 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 800345e:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8003462:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8003466:	2300      	movs	r3, #0
 8003468:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
    pendingScreenTransitionCallback = &transitionCallback;
 800346c:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8003470:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	080032ad 	.word	0x080032ad

0800347c <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>:
 800347c:	4b06      	ldr	r3, [pc, #24]	; (8003498 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv+0x1c>)
 800347e:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8003482:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8003486:	2300      	movs	r3, #0
 8003488:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Screen2

void FrontendApplicationBase::gotoScreen2ScreenSlideTransitionEast()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenSlideTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 800348c:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8003490:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	08003685 	.word	0x08003685

0800349c <_ZN23FrontendApplicationBase36gotoScreen3ScreenSlideTransitionEastEv>:
 800349c:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <_ZN23FrontendApplicationBase36gotoScreen3ScreenSlideTransitionEastEv+0x1c>)
 800349e:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 80034a2:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 80034a6:	2300      	movs	r3, #0
 80034a8:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Screen3

void FrontendApplicationBase::gotoScreen3ScreenSlideTransitionEast()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen3ScreenSlideTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80034ac:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 80034b0:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	08003545 	.word	0x08003545

080034bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
    SlideTransition(const uint8_t transitionSteps = 20)
 80034bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
          calculatedValue(0)
 80034c0:	4b1b      	ldr	r3, [pc, #108]	; (8003530 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x74>)
 80034c2:	2600      	movs	r6, #0
 80034c4:	4605      	mov	r5, r0
    SlideTransition(const uint8_t transitionSteps = 20)
 80034c6:	4604      	mov	r4, r0
 80034c8:	6046      	str	r6, [r0, #4]
 80034ca:	460f      	mov	r7, r1
 80034cc:	7206      	strb	r6, [r0, #8]
          calculatedValue(0)
 80034ce:	f845 3b0c 	str.w	r3, [r5], #12
 80034d2:	4628      	mov	r0, r5
 80034d4:	f00d fce4 	bl	8010ea0 <_ZN8touchgfx14SnapshotWidgetC1Ev>
        : pobject(pobject), pmemfun_1(pmemfun_1)
 80034d8:	4b16      	ldr	r3, [pc, #88]	; (8003534 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x78>)
 80034da:	2220      	movs	r2, #32
 80034dc:	63a5      	str	r5, [r4, #56]	; 0x38
 80034de:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
 80034e2:	f884 604d 	strb.w	r6, [r4, #77]	; 0x4d
 80034e6:	f8a4 6050 	strh.w	r6, [r4, #80]	; 0x50
 80034ea:	e9c4 340f 	strd	r3, r4, [r4, #60]	; 0x3c
 80034ee:	2301      	movs	r3, #1
 80034f0:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
        if (HAL::USE_ANIMATION_STORAGE)
 80034f4:	4b10      	ldr	r3, [pc, #64]	; (8003538 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x7c>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	b1b3      	cbz	r3, 8003528 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x6c>
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 80034fa:	4b10      	ldr	r3, [pc, #64]	; (800353c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x80>)
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
    {
        setWidth(width);
 80034fc:	4628      	mov	r0, r5
 80034fe:	4f10      	ldr	r7, [pc, #64]	; (8003540 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x84>)
 8003500:	f9b3 8000 	ldrsh.w	r8, [r3]
        setX(x);
 8003504:	68e3      	ldr	r3, [r4, #12]
        setWidth(width);
 8003506:	f9b7 1000 	ldrsh.w	r1, [r7]
 800350a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        rect.x = x;
 800350c:	6126      	str	r6, [r4, #16]
        setWidth(width);
 800350e:	4798      	blx	r3
        setHeight(height);
 8003510:	68e3      	ldr	r3, [r4, #12]
 8003512:	4641      	mov	r1, r8
 8003514:	4628      	mov	r0, r5
 8003516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003518:	4798      	blx	r3
            snapshot.makeSnapshot();
 800351a:	4628      	mov	r0, r5
 800351c:	f00d fc3c 	bl	8010d98 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
                targetValue = -HAL::DISPLAY_WIDTH;
 8003520:	883b      	ldrh	r3, [r7, #0]
 8003522:	425b      	negs	r3, r3
 8003524:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
    }
 8003528:	4620      	mov	r0, r4
 800352a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800352e:	bf00      	nop
 8003530:	08026b54 	.word	0x08026b54
 8003534:	08026b3c 	.word	0x08026b3c
 8003538:	20020fd7 	.word	0x20020fd7
 800353c:	20020fce 	.word	0x20020fce
 8003540:	20020fcc 	.word	0x20020fcc

08003544 <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoScreen3ScreenSlideTransitionEastImpl()
{
 8003544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    touchgfx::makeTransition<Screen3View, Screen3Presenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003548:	e9d0 4a54 	ldrd	r4, sl, [r0, #336]	; 0x150
{
 800354c:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800354e:	68a0      	ldr	r0, [r4, #8]
 8003550:	6803      	ldr	r3, [r0, #0]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	4798      	blx	r3
 8003556:	f643 63f7 	movw	r3, #16119	; 0x3ef7
 800355a:	4298      	cmp	r0, r3
 800355c:	d805      	bhi.n	800356a <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionEastImplEv+0x26>
 800355e:	4b42      	ldr	r3, [pc, #264]	; (8003668 <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionEastImplEv+0x124>)
 8003560:	21a3      	movs	r1, #163	; 0xa3
 8003562:	4a42      	ldr	r2, [pc, #264]	; (800366c <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionEastImplEv+0x128>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003564:	4842      	ldr	r0, [pc, #264]	; (8003670 <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionEastImplEv+0x12c>)
 8003566:	f021 fa47 	bl	80249f8 <__assert_func>
 800356a:	6860      	ldr	r0, [r4, #4]
 800356c:	6803      	ldr	r3, [r0, #0]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	4798      	blx	r3
 8003572:	280f      	cmp	r0, #15
 8003574:	d803      	bhi.n	800357e <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionEastImplEv+0x3a>
 8003576:	4b3f      	ldr	r3, [pc, #252]	; (8003674 <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionEastImplEv+0x130>)
 8003578:	21a4      	movs	r1, #164	; 0xa4
 800357a:	4a3c      	ldr	r2, [pc, #240]	; (800366c <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionEastImplEv+0x128>)
 800357c:	e7f2      	b.n	8003564 <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionEastImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800357e:	68e0      	ldr	r0, [r4, #12]
 8003580:	6803      	ldr	r3, [r0, #0]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	4798      	blx	r3
 8003586:	2853      	cmp	r0, #83	; 0x53
 8003588:	d803      	bhi.n	8003592 <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionEastImplEv+0x4e>
 800358a:	4b3b      	ldr	r3, [pc, #236]	; (8003678 <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionEastImplEv+0x134>)
 800358c:	21a5      	movs	r1, #165	; 0xa5
 800358e:	4a37      	ldr	r2, [pc, #220]	; (800366c <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionEastImplEv+0x128>)
 8003590:	e7e8      	b.n	8003564 <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionEastImplEv+0x20>
    if (*currentTrans)
 8003592:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 800367c <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionEastImplEv+0x138>
    Application::getInstance()->clearAllTimerWidgets();
 8003596:	f010 fb69 	bl	8013c6c <_ZN8touchgfx11Application11getInstanceEv>
 800359a:	f010 fb6d 	bl	8013c78 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800359e:	f8d9 0000 	ldr.w	r0, [r9]
 80035a2:	b110      	cbz	r0, 80035aa <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionEastImplEv+0x66>
        (*currentTrans)->tearDown();
 80035a4:	6803      	ldr	r3, [r0, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	4798      	blx	r3
    if (*currentTrans)
 80035aa:	f8d9 0000 	ldr.w	r0, [r9]
 80035ae:	b110      	cbz	r0, 80035b6 <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionEastImplEv+0x72>
        (*currentTrans)->~Transition();
 80035b0:	6803      	ldr	r3, [r0, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4798      	blx	r3
    if (*currentScreen)
 80035b6:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8003680 <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionEastImplEv+0x13c>
 80035ba:	f8d8 0000 	ldr.w	r0, [r8]
 80035be:	b110      	cbz	r0, 80035c6 <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionEastImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 80035c0:	6803      	ldr	r3, [r0, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	4798      	blx	r3
    if (*currentPresenter)
 80035c6:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 80035ca:	b110      	cbz	r0, 80035d2 <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionEastImplEv+0x8e>
        (*currentPresenter)->deactivate();
 80035cc:	6803      	ldr	r3, [r0, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	4798      	blx	r3
    if (*currentScreen)
 80035d2:	f8d8 0000 	ldr.w	r0, [r8]
 80035d6:	b110      	cbz	r0, 80035de <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionEastImplEv+0x9a>
        (*currentScreen)->~Screen();
 80035d8:	6803      	ldr	r3, [r0, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4798      	blx	r3
    if (*currentPresenter)
 80035de:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 80035e2:	b110      	cbz	r0, 80035ea <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionEastImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 80035e4:	6803      	ldr	r3, [r0, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80035ea:	68e0      	ldr	r0, [r4, #12]
 80035ec:	2100      	movs	r1, #0
 80035ee:	6803      	ldr	r3, [r0, #0]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	4798      	blx	r3
 80035f4:	2114      	movs	r1, #20
 80035f6:	4605      	mov	r5, r0
 80035f8:	f7ff ff60 	bl	80034bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80035fc:	68a0      	ldr	r0, [r4, #8]
 80035fe:	2100      	movs	r1, #0
 8003600:	6803      	ldr	r3, [r0, #0]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	4798      	blx	r3
 8003606:	4606      	mov	r6, r0
 8003608:	f001 fe22 	bl	8005250 <_ZN11Screen3ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800360c:	6860      	ldr	r0, [r4, #4]
 800360e:	2100      	movs	r1, #0
 8003610:	6803      	ldr	r3, [r0, #0]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	4798      	blx	r3
 8003616:	4604      	mov	r4, r0
 8003618:	4631      	mov	r1, r6
 800361a:	f001 fdff 	bl	800521c <_ZN16Screen3PresenterC1ER11Screen3View>
    *currentTrans = newTransition;
 800361e:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
 8003622:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
    *currentScreen = newScreen;
 8003626:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 800362a:	b1dc      	cbz	r4, 8003664 <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionEastImplEv+0x120>
 800362c:	1d23      	adds	r3, r4, #4
 800362e:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003632:	4630      	mov	r0, r6
 8003634:	6833      	ldr	r3, [r6, #0]
 8003636:	f8c4 a008 	str.w	sl, [r4, #8]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	63f4      	str	r4, [r6, #60]	; 0x3c
 800363e:	4798      	blx	r3
    newPresenter->activate();
 8003640:	6823      	ldr	r3, [r4, #0]
 8003642:	4620      	mov	r0, r4
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003648:	4629      	mov	r1, r5
 800364a:	4630      	mov	r0, r6
 800364c:	f011 ffde 	bl	801560c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003650:	682b      	ldr	r3, [r5, #0]
 8003652:	4628      	mov	r0, r5
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	4798      	blx	r3
    newTransition->invalidate();
 8003658:	682b      	ldr	r3, [r5, #0]
 800365a:	4628      	mov	r0, r5
 800365c:	695b      	ldr	r3, [r3, #20]
}
 800365e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003662:	4718      	bx	r3
    model->bind(newPresenter);
 8003664:	4623      	mov	r3, r4
 8003666:	e7e2      	b.n	800362e <_ZN23FrontendApplicationBase40gotoScreen3ScreenSlideTransitionEastImplEv+0xea>
 8003668:	0802655c 	.word	0x0802655c
 800366c:	0802687b 	.word	0x0802687b
 8003670:	080266ee 	.word	0x080266ee
 8003674:	08026735 	.word	0x08026735
 8003678:	080267d8 	.word	0x080267d8
 800367c:	20021038 	.word	0x20021038
 8003680:	20021034 	.word	0x20021034

08003684 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv>:
{
 8003684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003688:	e9d0 4a54 	ldrd	r4, sl, [r0, #336]	; 0x150
{
 800368c:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800368e:	68a0      	ldr	r0, [r4, #8]
 8003690:	6803      	ldr	r3, [r0, #0]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	4798      	blx	r3
 8003696:	f5b0 7f9c 	cmp.w	r0, #312	; 0x138
 800369a:	d205      	bcs.n	80036a8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x24>
 800369c:	4b42      	ldr	r3, [pc, #264]	; (80037a8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x124>)
 800369e:	21a3      	movs	r1, #163	; 0xa3
 80036a0:	4a42      	ldr	r2, [pc, #264]	; (80037ac <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x128>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80036a2:	4843      	ldr	r0, [pc, #268]	; (80037b0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x12c>)
 80036a4:	f021 f9a8 	bl	80249f8 <__assert_func>
 80036a8:	6860      	ldr	r0, [r4, #4]
 80036aa:	6803      	ldr	r3, [r0, #0]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	4798      	blx	r3
 80036b0:	280f      	cmp	r0, #15
 80036b2:	d803      	bhi.n	80036bc <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x38>
 80036b4:	4b3f      	ldr	r3, [pc, #252]	; (80037b4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x130>)
 80036b6:	21a4      	movs	r1, #164	; 0xa4
 80036b8:	4a3c      	ldr	r2, [pc, #240]	; (80037ac <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x128>)
 80036ba:	e7f2      	b.n	80036a2 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80036bc:	68e0      	ldr	r0, [r4, #12]
 80036be:	6803      	ldr	r3, [r0, #0]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	4798      	blx	r3
 80036c4:	2853      	cmp	r0, #83	; 0x53
 80036c6:	d803      	bhi.n	80036d0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x4c>
 80036c8:	4b3b      	ldr	r3, [pc, #236]	; (80037b8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x134>)
 80036ca:	21a5      	movs	r1, #165	; 0xa5
 80036cc:	4a37      	ldr	r2, [pc, #220]	; (80037ac <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x128>)
 80036ce:	e7e8      	b.n	80036a2 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1e>
    if (*currentTrans)
 80036d0:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 80037bc <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x138>
    Application::getInstance()->clearAllTimerWidgets();
 80036d4:	f010 faca 	bl	8013c6c <_ZN8touchgfx11Application11getInstanceEv>
 80036d8:	f010 face 	bl	8013c78 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80036dc:	f8d9 0000 	ldr.w	r0, [r9]
 80036e0:	b110      	cbz	r0, 80036e8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x64>
        (*currentTrans)->tearDown();
 80036e2:	6803      	ldr	r3, [r0, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	4798      	blx	r3
    if (*currentTrans)
 80036e8:	f8d9 0000 	ldr.w	r0, [r9]
 80036ec:	b110      	cbz	r0, 80036f4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x70>
        (*currentTrans)->~Transition();
 80036ee:	6803      	ldr	r3, [r0, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4798      	blx	r3
    if (*currentScreen)
 80036f4:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80037c0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x13c>
 80036f8:	f8d8 0000 	ldr.w	r0, [r8]
 80036fc:	b110      	cbz	r0, 8003704 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 80036fe:	6803      	ldr	r3, [r0, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	4798      	blx	r3
    if (*currentPresenter)
 8003704:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8003708:	b110      	cbz	r0, 8003710 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x8c>
        (*currentPresenter)->deactivate();
 800370a:	6803      	ldr	r3, [r0, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	4798      	blx	r3
    if (*currentScreen)
 8003710:	f8d8 0000 	ldr.w	r0, [r8]
 8003714:	b110      	cbz	r0, 800371c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x98>
        (*currentScreen)->~Screen();
 8003716:	6803      	ldr	r3, [r0, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4798      	blx	r3
    if (*currentPresenter)
 800371c:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8003720:	b110      	cbz	r0, 8003728 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 8003722:	6803      	ldr	r3, [r0, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003728:	68e0      	ldr	r0, [r4, #12]
 800372a:	2100      	movs	r1, #0
 800372c:	6803      	ldr	r3, [r0, #0]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	4798      	blx	r3
 8003732:	2114      	movs	r1, #20
 8003734:	4605      	mov	r5, r0
 8003736:	f7ff fec1 	bl	80034bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800373a:	68a0      	ldr	r0, [r4, #8]
 800373c:	2100      	movs	r1, #0
 800373e:	6803      	ldr	r3, [r0, #0]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	4798      	blx	r3
 8003744:	4606      	mov	r6, r0
 8003746:	f001 fd49 	bl	80051dc <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800374a:	6860      	ldr	r0, [r4, #4]
 800374c:	2100      	movs	r1, #0
 800374e:	6803      	ldr	r3, [r0, #0]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	4798      	blx	r3
 8003754:	4604      	mov	r4, r0
 8003756:	4631      	mov	r1, r6
 8003758:	f001 fd26 	bl	80051a8 <_ZN16Screen2PresenterC1ER11Screen2View>
    *currentTrans = newTransition;
 800375c:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
 8003760:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
    *currentScreen = newScreen;
 8003764:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 8003768:	b1dc      	cbz	r4, 80037a2 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x11e>
 800376a:	1d23      	adds	r3, r4, #4
 800376c:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003770:	4630      	mov	r0, r6
 8003772:	6833      	ldr	r3, [r6, #0]
 8003774:	f8c4 a008 	str.w	sl, [r4, #8]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	63f4      	str	r4, [r6, #60]	; 0x3c
 800377c:	4798      	blx	r3
    newPresenter->activate();
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	4620      	mov	r0, r4
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003786:	4629      	mov	r1, r5
 8003788:	4630      	mov	r0, r6
 800378a:	f011 ff3f 	bl	801560c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800378e:	682b      	ldr	r3, [r5, #0]
 8003790:	4628      	mov	r0, r5
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	4798      	blx	r3
    newTransition->invalidate();
 8003796:	682b      	ldr	r3, [r5, #0]
 8003798:	4628      	mov	r0, r5
 800379a:	695b      	ldr	r3, [r3, #20]
}
 800379c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037a0:	4718      	bx	r3
    model->bind(newPresenter);
 80037a2:	4623      	mov	r3, r4
 80037a4:	e7e2      	b.n	800376c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0xe8>
 80037a6:	bf00      	nop
 80037a8:	0802655c 	.word	0x0802655c
 80037ac:	08026992 	.word	0x08026992
 80037b0:	080266ee 	.word	0x080266ee
 80037b4:	08026735 	.word	0x08026735
 80037b8:	080267d8 	.word	0x080267d8
 80037bc:	20021038 	.word	0x20021038
 80037c0:	20021034 	.word	0x20021034

080037c4 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 80037c4:	6a00      	ldr	r0, [r0, #32]
 80037c6:	4770      	bx	lr

080037c8 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 80037c8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80037ca:	4770      	bx	lr

080037cc <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 80037cc:	4770      	bx	lr

080037ce <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80037ce:	888b      	ldrh	r3, [r1, #4]
 80037d0:	6980      	ldr	r0, [r0, #24]
 80037d2:	0adb      	lsrs	r3, r3, #11
 80037d4:	680a      	ldr	r2, [r1, #0]
 80037d6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 80037da:	4410      	add	r0, r2
 80037dc:	4770      	bx	lr

080037de <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80037de:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 80037e0:	b1c2      	cbz	r2, 8003814 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 80037e2:	7b13      	ldrb	r3, [r2, #12]
 80037e4:	b1b3      	cbz	r3, 8003814 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80037e6:	7b54      	ldrb	r4, [r2, #13]
 80037e8:	7ad2      	ldrb	r2, [r2, #11]
 80037ea:	0224      	lsls	r4, r4, #8
 80037ec:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80037f0:	4314      	orrs	r4, r2
 80037f2:	69c2      	ldr	r2, [r0, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80037f4:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80037f6:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 80037fa:	8813      	ldrh	r3, [r2, #0]
 80037fc:	428b      	cmp	r3, r1
 80037fe:	d102      	bne.n	8003806 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8003800:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8003804:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8003806:	d805      	bhi.n	8003814 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003808:	3801      	subs	r0, #1
 800380a:	3204      	adds	r2, #4
 800380c:	b280      	uxth	r0, r0
 800380e:	2800      	cmp	r0, #0
 8003810:	d1f3      	bne.n	80037fa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8003812:	e7f7      	b.n	8003804 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8003814:	2000      	movs	r0, #0
 8003816:	e7f5      	b.n	8003804 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08003818 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003818:	b510      	push	{r4, lr}
 800381a:	4604      	mov	r4, r0
 800381c:	2128      	movs	r1, #40	; 0x28
 800381e:	f021 f8bc 	bl	802499a <_ZdlPvj>
 8003822:	4620      	mov	r0, r4
 8003824:	bd10      	pop	{r4, pc}
	...

08003828 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003828:	b530      	push	{r4, r5, lr}
 800382a:	b089      	sub	sp, #36	; 0x24
 800382c:	4604      	mov	r4, r0
      arabicTable(formsTable)
 800382e:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8003832:	9506      	str	r5, [sp, #24]
 8003834:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8003838:	9505      	str	r5, [sp, #20]
 800383a:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 800383e:	9504      	str	r5, [sp, #16]
 8003840:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8003844:	9503      	str	r5, [sp, #12]
 8003846:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 800384a:	9502      	str	r5, [sp, #8]
 800384c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8003850:	9501      	str	r5, [sp, #4]
 8003852:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8003856:	9500      	str	r5, [sp, #0]
 8003858:	f011 fa44 	bl	8014ce4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800385c:	4b06      	ldr	r3, [pc, #24]	; (8003878 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
}
 800385e:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8003860:	6023      	str	r3, [r4, #0]
 8003862:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003864:	61a3      	str	r3, [r4, #24]
 8003866:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003868:	61e3      	str	r3, [r4, #28]
 800386a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800386c:	6223      	str	r3, [r4, #32]
 800386e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003870:	6263      	str	r3, [r4, #36]	; 0x24
}
 8003872:	b009      	add	sp, #36	; 0x24
 8003874:	bd30      	pop	{r4, r5, pc}
 8003876:	bf00      	nop
 8003878:	08026b80 	.word	0x08026b80

0800387c <_ZN8touchgfx8Drawable13getFirstChildEv>:
    }
 800387c:	2000      	movs	r0, #0
 800387e:	4770      	bx	lr

08003880 <_ZN8touchgfx8Drawable4setXEs>:
        rect.x = x;
 8003880:	8081      	strh	r1, [r0, #4]
    }
 8003882:	4770      	bx	lr

08003884 <_ZN8touchgfx8Drawable4setYEs>:
        rect.y = y;
 8003884:	80c1      	strh	r1, [r0, #6]
    }
 8003886:	4770      	bx	lr

08003888 <_ZN8touchgfx8Drawable8setWidthEs>:
        rect.width = width;
 8003888:	8101      	strh	r1, [r0, #8]
    }
 800388a:	4770      	bx	lr

0800388c <_ZN8touchgfx8Drawable9setHeightEs>:
        rect.height = height;
 800388c:	8141      	strh	r1, [r0, #10]
    }
 800388e:	4770      	bx	lr

08003890 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    }
 8003890:	4770      	bx	lr

08003892 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
    }
 8003892:	4770      	bx	lr

08003894 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
    }
 8003894:	4770      	bx	lr

08003896 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
    }
 8003896:	4770      	bx	lr

08003898 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8003898:	4770      	bx	lr

0800389a <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800389a:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 800389c:	88c4      	ldrh	r4, [r0, #6]
 800389e:	6803      	ldr	r3, [r0, #0]
 80038a0:	1b12      	subs	r2, r2, r4
 80038a2:	8884      	ldrh	r4, [r0, #4]
 80038a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a6:	1b09      	subs	r1, r1, r4
 80038a8:	b212      	sxth	r2, r2
    }
 80038aa:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 80038ae:	b209      	sxth	r1, r1
 80038b0:	4718      	bx	r3

080038b2 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80038b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038b6:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80038b8:	f04f 33ff 	mov.w	r3, #4294967295
 80038bc:	6203      	str	r3, [r0, #32]
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80038be:	6813      	ldr	r3, [r2, #0]
 80038c0:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80038c2:	6010      	str	r0, [r2, #0]
    }
 80038c4:	4770      	bx	lr

080038c6 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80038c6:	4770      	bx	lr

080038c8 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80038c8:	4770      	bx	lr

080038ca <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80038ca:	4770      	bx	lr

080038cc <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80038cc:	4770      	bx	lr

080038ce <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
    }
 80038ce:	4770      	bx	lr

080038d0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 80038d0:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80038d4:	b11a      	cbz	r2, 80038de <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80038d6:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80038da:	b102      	cbz	r2, 80038de <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 80038dc:	6018      	str	r0, [r3, #0]
        }
    }
 80038de:	4770      	bx	lr

080038e0 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 80038e0:	4770      	bx	lr

080038e2 <_ZN15Screen1ViewBase11setupScreenEv>:
}

void Screen1ViewBase::setupScreen()
{

}
 80038e2:	4770      	bx	lr

080038e4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80038e4:	4770      	bx	lr

080038e6 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80038e6:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 80038e8:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 80038ea:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 80038ec:	68c2      	ldr	r2, [r0, #12]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	1055      	asrs	r5, r2, #1
 80038f2:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80038f6:	07d2      	lsls	r2, r2, #31
 80038f8:	bf48      	it	mi
 80038fa:	5962      	ldrmi	r2, [r4, r5]
    }
 80038fc:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 80038fe:	bf48      	it	mi
 8003900:	58d3      	ldrmi	r3, [r2, r3]
 8003902:	4718      	bx	r3

08003904 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
 8003904:	6843      	ldr	r3, [r0, #4]
 8003906:	b12b      	cbz	r3, 8003914 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8003908:	6883      	ldr	r3, [r0, #8]
 800390a:	b92b      	cbnz	r3, 8003918 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 800390c:	68c0      	ldr	r0, [r0, #12]
 800390e:	f000 0001 	and.w	r0, r0, #1
 8003912:	4770      	bx	lr
 8003914:	4618      	mov	r0, r3
 8003916:	4770      	bx	lr
 8003918:	2001      	movs	r0, #1
    }
 800391a:	4770      	bx	lr

0800391c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800391c:	b510      	push	{r4, lr}
 800391e:	4604      	mov	r4, r0
 8003920:	2110      	movs	r1, #16
 8003922:	f021 f83a 	bl	802499a <_ZdlPvj>
 8003926:	4620      	mov	r0, r4
 8003928:	bd10      	pop	{r4, pc}

0800392a <_ZN15Screen1ViewBaseD0Ev>:
 800392a:	b510      	push	{r4, lr}
 800392c:	4604      	mov	r4, r0
 800392e:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8003932:	f021 f832 	bl	802499a <_ZdlPvj>
 8003936:	4620      	mov	r0, r4
 8003938:	bd10      	pop	{r4, pc}

0800393a <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 800393a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800393e:	b112      	cbz	r2, 8003946 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8003940:	6803      	ldr	r3, [r0, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	4718      	bx	r3
    }
 8003946:	4770      	bx	lr

08003948 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonWithLabel1)
 8003948:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 800394c:	4288      	cmp	r0, r1
{
 800394e:	b508      	push	{r3, lr}
    if (&src == &buttonWithLabel1)
 8003950:	d105      	bne.n	800395e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8003952:	f010 f98b 	bl	8013c6c <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When buttonWithLabel1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenSlideTransitionEast();
    }
}
 8003956:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenSlideTransitionEast();
 800395a:	f7ff bd8f 	b.w	800347c <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>
}
 800395e:	bd08      	pop	{r3, pc}

08003960 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8003960:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8003962:	b570      	push	{r4, r5, r6, lr}
 8003964:	4604      	mov	r4, r0
        setX(x);
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 8003968:	4615      	mov	r5, r2
        setX(x);
 800396a:	4798      	blx	r3
        setY(y);
 800396c:	6823      	ldr	r3, [r4, #0]
 800396e:	4620      	mov	r0, r4
 8003970:	4629      	mov	r1, r5
 8003972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 8003974:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8003978:	4718      	bx	r3

0800397a <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800397a:	b570      	push	{r4, r5, r6, lr}
 800397c:	4604      	mov	r4, r0
 800397e:	461d      	mov	r5, r3
 8003980:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8003984:	f7ff ffec 	bl	8003960 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	4629      	mov	r1, r5
 800398c:	4620      	mov	r0, r4
 800398e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003990:	4798      	blx	r3
        setHeight(height);
 8003992:	6823      	ldr	r3, [r4, #0]
 8003994:	4631      	mov	r1, r6
 8003996:	4620      	mov	r0, r4
 8003998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 800399a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 800399e:	4718      	bx	r3

080039a0 <_ZN8touchgfx3BoxC1Ev>:
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 80039a0:	4a09      	ldr	r2, [pc, #36]	; (80039c8 <_ZN8touchgfx3BoxC1Ev+0x28>)
          visible(true)
 80039a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039a6:	6002      	str	r2, [r0, #0]
        : x(0), y(0), width(0), height(0)
 80039a8:	2200      	movs	r2, #0
 80039aa:	8481      	strh	r1, [r0, #36]	; 0x24
 80039ac:	21ff      	movs	r1, #255	; 0xff
        : color(col)
 80039ae:	6282      	str	r2, [r0, #40]	; 0x28
 80039b0:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
        : x(0), y(0), width(0), height(0)
 80039b4:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80039b8:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80039bc:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80039c0:	e9c0 2207 	strd	r2, r2, [r0, #28]
    {
    }
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	08028ea0 	.word	0x08028ea0

080039cc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
        return typedTextId < numberOfTypedTexts;
 80039cc:	4b1b      	ldr	r3, [pc, #108]	; (8003a3c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x70>)
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 80039ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
    {
        if (typedText.hasValidId())
 80039d0:	881b      	ldrh	r3, [r3, #0]
    void updateTextPosition()
 80039d2:	4606      	mov	r6, r0
 80039d4:	8f01      	ldrh	r1, [r0, #56]	; 0x38
        if (typedText.hasValidId())
 80039d6:	428b      	cmp	r3, r1
 80039d8:	d92b      	bls.n	8003a32 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x66>
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80039da:	4b19      	ldr	r3, [pc, #100]	; (8003a40 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x74>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	b92b      	cbnz	r3, 80039ec <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x20>
 80039e0:	4b18      	ldr	r3, [pc, #96]	; (8003a44 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x78>)
 80039e2:	21ae      	movs	r1, #174	; 0xae
 80039e4:	4a18      	ldr	r2, [pc, #96]	; (8003a48 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x7c>)
 80039e6:	4819      	ldr	r0, [pc, #100]	; (8003a4c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x80>)
 80039e8:	f021 f806 	bl	80249f8 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 80039ec:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 80039f0:	4b17      	ldr	r3, [pc, #92]	; (8003a50 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x84>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 80039f8:	4b16      	ldr	r3, [pc, #88]	; (8003a54 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x88>)
 80039fa:	6818      	ldr	r0, [r3, #0]
 80039fc:	f001 fb12 	bl	8005024 <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8003a00:	682b      	ldr	r3, [r5, #0]
 8003a02:	4601      	mov	r1, r0
 8003a04:	9001      	str	r0, [sp, #4]
 8003a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a08:	4628      	mov	r0, r5
 8003a0a:	4798      	blx	r3
 8003a0c:	682b      	ldr	r3, [r5, #0]
 8003a0e:	4604      	mov	r4, r0
 8003a10:	9901      	ldr	r1, [sp, #4]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	4628      	mov	r0, r5
 8003a16:	4798      	blx	r3
 8003a18:	fb14 f400 	smulbb	r4, r4, r0
 8003a1c:	682b      	ldr	r3, [r5, #0]
 8003a1e:	4628      	mov	r0, r5
 8003a20:	b2e4      	uxtb	r4, r4
 8003a22:	9901      	ldr	r1, [sp, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	4798      	blx	r3
 8003a28:	4404      	add	r4, r0
 8003a2a:	f886 4045 	strb.w	r4, [r6, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 8003a2e:	b002      	add	sp, #8
 8003a30:	bd70      	pop	{r4, r5, r6, pc}
            textHeightIncludingSpacing = 0;
 8003a32:	2300      	movs	r3, #0
 8003a34:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    }
 8003a38:	e7f9      	b.n	8003a2e <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x62>
 8003a3a:	bf00      	nop
 8003a3c:	2002104c 	.word	0x2002104c
 8003a40:	20021048 	.word	0x20021048
 8003a44:	08026bd0 	.word	0x08026bd0
 8003a48:	08026c12 	.word	0x08026c12
 8003a4c:	08026c40 	.word	0x08026c40
 8003a50:	20021050 	.word	0x20021050
 8003a54:	20021054 	.word	0x20021054

08003a58 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 8003a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a5c:	4604      	mov	r4, r0
        : presenter(0)
 8003a5e:	2500      	movs	r5, #0
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8003a60:	f64f 76ff 	movw	r6, #65535	; 0xffff
    __background.setPosition(0, 0, 800, 480);
 8003a64:	f44f 7bf0 	mov.w	fp, #480	; 0x1e0
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8003a68:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 8003a6c:	f104 09c4 	add.w	r9, r4, #196	; 0xc4
 8003a70:	f504 789c 	add.w	r8, r4, #312	; 0x138
 8003a74:	f504 77b2 	add.w	r7, r4, #356	; 0x164
Screen1ViewBase::Screen1ViewBase() :
 8003a78:	ed2d 8b04 	vpush	{d8-d9}
 8003a7c:	b08b      	sub	sp, #44	; 0x2c
 8003a7e:	f011 fc19 	bl	80152b4 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8003a82:	4622      	mov	r2, r4
 8003a84:	4b98      	ldr	r3, [pc, #608]	; (8003ce8 <_ZN15Screen1ViewBaseC1Ev+0x290>)
 8003a86:	63e5      	str	r5, [r4, #60]	; 0x3c
 8003a88:	f842 3b40 	str.w	r3, [r2], #64
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	ee08 2a10 	vmov	s16, r2
 8003a92:	f7ff ff85 	bl	80039a0 <_ZN8touchgfx3BoxC1Ev>
 8003a96:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	ee09 3a10 	vmov	s18, r3
 8003aa0:	f7ff ff7e 	bl	80039a0 <_ZN8touchgfx3BoxC1Ev>
 8003aa4:	a908      	add	r1, sp, #32
 8003aa6:	4650      	mov	r0, sl
 8003aa8:	f8ad 6020 	strh.w	r6, [sp, #32]
 8003aac:	f00d fa56 	bl	8010f5c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8003ab0:	a908      	add	r1, sp, #32
 8003ab2:	4648      	mov	r0, r9
 8003ab4:	f8ad 6020 	strh.w	r6, [sp, #32]
 8003ab8:	f00d fa50 	bl	8010f5c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8003abc:	f104 03f0 	add.w	r3, r4, #240	; 0xf0
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
        : x(x), y(y), width(width), height(height)
 8003ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac4:	a908      	add	r1, sp, #32
 8003ac6:	ee08 3a90 	vmov	s17, r3
 8003aca:	f44f 7380 	mov.w	r3, #256	; 0x100
        : typedTextId(id)
 8003ace:	f8a4 611c 	strh.w	r6, [r4, #284]	; 0x11c
 8003ad2:	4640      	mov	r0, r8
 8003ad4:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
 */
class TextArea : public Widget
{
public:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003ad8:	4b84      	ldr	r3, [pc, #528]	; (8003cec <_ZN15Screen1ViewBaseC1Ev+0x294>)
        : color(col)
 8003ada:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
 8003ade:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 8003ae2:	4b83      	ldr	r3, [pc, #524]	; (8003cf0 <_ZN15Screen1ViewBaseC1Ev+0x298>)
 8003ae4:	f8a4 5128 	strh.w	r5, [r4, #296]	; 0x128
 8003ae8:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8003aec:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
        : x(x), y(y), width(width), height(height)
 8003af0:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8003af4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003af8:	f8ad 2020 	strh.w	r2, [sp, #32]
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 8003afc:	e9c4 254c 	strd	r2, r5, [r4, #304]	; 0x130
        : x(0), y(0), width(0), height(0)
 8003b00:	e9c4 553d 	strd	r5, r5, [r4, #244]	; 0xf4
 8003b04:	e9c4 553f 	strd	r5, r5, [r4, #252]	; 0xfc
 8003b08:	e9c4 5541 	strd	r5, r5, [r4, #260]	; 0x104
 8003b0c:	e9c4 5543 	strd	r5, r5, [r4, #268]	; 0x10c
 8003b10:	f00d fa24 	bl	8010f5c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8003b14:	f8ad 6020 	strh.w	r6, [sp, #32]
 8003b18:	f504 76c8 	add.w	r6, r4, #400	; 0x190
 8003b1c:	a908      	add	r1, sp, #32
 8003b1e:	4638      	mov	r0, r7
 8003b20:	f00d fa1c 	bl	8010f5c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8003b24:	4630      	mov	r0, r6
 8003b26:	f00e fb13 	bl	8012150 <_ZN8touchgfx15ButtonWithLabelC1Ev>
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8003b2a:	4b72      	ldr	r3, [pc, #456]	; (8003cf4 <_ZN15Screen1ViewBaseC1Ev+0x29c>)
    __background.setPosition(0, 0, 800, 480);
 8003b2c:	462a      	mov	r2, r5
 8003b2e:	4629      	mov	r1, r5
 8003b30:	ee18 0a10 	vmov	r0, s16
 8003b34:	f8cd b000 	str.w	fp, [sp]
 8003b38:	e9c4 3476 	strd	r3, r4, [r4, #472]	; 0x1d8
 8003b3c:	4b6e      	ldr	r3, [pc, #440]	; (8003cf8 <_ZN15Screen1ViewBaseC1Ev+0x2a0>)
 8003b3e:	e9c4 3578 	strd	r3, r5, [r4, #480]	; 0x1e0
 8003b42:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003b46:	f7ff ff18 	bl	800397a <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
    {
        this->color = color;
 8003b4a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    box1.setPosition(0, 0, 800, 480);
 8003b4e:	462a      	mov	r2, r5
 8003b50:	4629      	mov	r1, r5
 8003b52:	ee19 0a10 	vmov	r0, s18
 8003b56:	66a3      	str	r3, [r4, #104]	; 0x68
 8003b58:	f8cd b000 	str.w	fp, [sp]
 8003b5c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003b60:	f7ff ff0b 	bl	800397a <_ZN8touchgfx8Drawable11setPositionEssss>
 8003b64:	4b65      	ldr	r3, [pc, #404]	; (8003cfc <_ZN15Screen1ViewBaseC1Ev+0x2a4>)
    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_ECG_ID));
 8003b66:	a908      	add	r1, sp, #32
 8003b68:	4650      	mov	r0, sl
 8003b6a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8003b6e:	2302      	movs	r3, #2
        boundingArea = calculateBoundingArea();
 8003b70:	f10d 0b08 	add.w	fp, sp, #8
 8003b74:	f8ad 3020 	strh.w	r3, [sp, #32]
 8003b78:	f00e f9ab 	bl	8011ed2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage1.setPosition(136, 59, 518, 262);
 8003b7c:	f44f 7383 	mov.w	r3, #262	; 0x106
 8003b80:	223b      	movs	r2, #59	; 0x3b
 8003b82:	4650      	mov	r0, sl
 8003b84:	2188      	movs	r1, #136	; 0x88
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	f240 2306 	movw	r3, #518	; 0x206
 8003b8c:	f7ff fef5 	bl	800397a <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8003b90:	4629      	mov	r1, r5
 8003b92:	4650      	mov	r0, sl
 8003b94:	f00d f9a9 	bl	8010eea <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8003b98:	2304      	movs	r3, #4
    scalableImage2.setBitmap(touchgfx::Bitmap(BITMAP_PNGWING_COM_ID));
 8003b9a:	a908      	add	r1, sp, #32
 8003b9c:	4648      	mov	r0, r9
 8003b9e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8003ba2:	f00e f996 	bl	8011ed2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage2.setPosition(577, 167, 87, 81);
 8003ba6:	2351      	movs	r3, #81	; 0x51
 8003ba8:	22a7      	movs	r2, #167	; 0xa7
 8003baa:	4648      	mov	r0, r9
 8003bac:	f240 2141 	movw	r1, #577	; 0x241
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	2357      	movs	r3, #87	; 0x57
 8003bb4:	f7ff fee1 	bl	800397a <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage2.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8003bb8:	4629      	mov	r1, r5
 8003bba:	4648      	mov	r0, r9
 8003bbc:	f00d f995 	bl	8010eea <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    textArea1.setXY(192, 129);
 8003bc0:	ee18 0a90 	vmov	r0, s17
 8003bc4:	2281      	movs	r2, #129	; 0x81
 8003bc6:	21c0      	movs	r1, #192	; 0xc0
 8003bc8:	f7ff feca 	bl	8003960 <_ZN8touchgfx8Drawable5setXYEss>
        this->color = color;
 8003bcc:	f04f 32ff 	mov.w	r2, #4294967295
        boundingArea = calculateBoundingArea();
 8003bd0:	ee18 1a90 	vmov	r1, s17
 8003bd4:	4658      	mov	r0, fp
        this->color = color;
 8003bd6:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
        linespace = space;
 8003bda:	f8a4 5124 	strh.w	r5, [r4, #292]	; 0x124
        boundingArea = calculateBoundingArea();
 8003bde:	f00d fced 	bl	80115bc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003be2:	f504 7396 	add.w	r3, r4, #300	; 0x12c
 8003be6:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 8003bea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003bee:	4b40      	ldr	r3, [pc, #256]	; (8003cf0 <_ZN15Screen1ViewBaseC1Ev+0x298>)
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_AIU2));
 8003bf0:	a908      	add	r1, sp, #32
 8003bf2:	ee18 0a90 	vmov	r0, s17
 8003bf6:	f04f 0b05 	mov.w	fp, #5
 8003bfa:	9308      	str	r3, [sp, #32]
 8003bfc:	2306      	movs	r3, #6
 8003bfe:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8003c02:	f00e f82d 	bl	8011c60 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003c06:	2303      	movs	r3, #3
    scalableImage3.setBitmap(touchgfx::Bitmap(BITMAP_LOGO_ID));
 8003c08:	a908      	add	r1, sp, #32
 8003c0a:	4640      	mov	r0, r8
 8003c0c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8003c10:	f00e f95f 	bl	8011ed2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage3.setPosition(400, 8, 381, 88);
 8003c14:	2358      	movs	r3, #88	; 0x58
 8003c16:	2208      	movs	r2, #8
 8003c18:	4640      	mov	r0, r8
 8003c1a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	f240 137d 	movw	r3, #381	; 0x17d
 8003c24:	f7ff fea9 	bl	800397a <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage3.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8003c28:	4629      	mov	r1, r5
 8003c2a:	4640      	mov	r0, r8
 8003c2c:	f00d f95d 	bl	8010eea <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    scalableImage4.setBitmap(touchgfx::Bitmap(BITMAP_VERSAOHORIZONTAL1_ID));
 8003c30:	a908      	add	r1, sp, #32
 8003c32:	4638      	mov	r0, r7
 8003c34:	f8ad b020 	strh.w	fp, [sp, #32]
 8003c38:	f00e f94b 	bl	8011ed2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage4.setPosition(13, 14, 359, 82);
 8003c3c:	2352      	movs	r3, #82	; 0x52
 8003c3e:	220e      	movs	r2, #14
 8003c40:	4638      	mov	r0, r7
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	210d      	movs	r1, #13
 8003c46:	f240 1367 	movw	r3, #359	; 0x167
 8003c4a:	f7ff fe96 	bl	800397a <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage4.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8003c4e:	4629      	mov	r1, r5
 8003c50:	4638      	mov	r0, r7
 8003c52:	f00d f94a 	bl	8010eea <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    buttonWithLabel1.setXY(315, 355);
 8003c56:	4630      	mov	r0, r6
 8003c58:	f240 1263 	movw	r2, #355	; 0x163
 8003c5c:	f240 113b 	movw	r1, #315	; 0x13b
 8003c60:	f7ff fe7e 	bl	8003960 <_ZN8touchgfx8Drawable5setXYEss>
 8003c64:	2301      	movs	r3, #1
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8003c66:	aa08      	add	r2, sp, #32
 8003c68:	a907      	add	r1, sp, #28
 8003c6a:	4630      	mov	r0, r6
 8003c6c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8003c70:	f8ad 501c 	strh.w	r5, [sp, #28]
 8003c74:	f00e f851 	bl	8011d1a <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8003c78:	4630      	mov	r0, r6
class TypedText
 8003c7a:	f8a4 b1c8 	strh.w	fp, [r4, #456]	; 0x1c8
 8003c7e:	f7ff fea5 	bl	80039cc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
        color = col;
 8003c82:	f04f 33ff 	mov.w	r3, #4294967295
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003c86:	1d25      	adds	r5, r4, #4
 8003c88:	ee18 1a10 	vmov	r1, s16
        colorPressed = col;
 8003c8c:	e9c4 3373 	strd	r3, r3, [r4, #460]	; 0x1cc
    buttonWithLabel1.setAction(buttonCallback);
 8003c90:	f504 73ec 	add.w	r3, r4, #472	; 0x1d8
 8003c94:	4628      	mov	r0, r5
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8003c96:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
 8003c9a:	f009 fcf9 	bl	800d690 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003c9e:	ee19 1a10 	vmov	r1, s18
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	f009 fcf4 	bl	800d690 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003ca8:	4651      	mov	r1, sl
 8003caa:	4628      	mov	r0, r5
 8003cac:	f009 fcf0 	bl	800d690 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003cb0:	4649      	mov	r1, r9
 8003cb2:	4628      	mov	r0, r5
 8003cb4:	f009 fcec 	bl	800d690 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003cb8:	ee18 1a90 	vmov	r1, s17
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	f009 fce7 	bl	800d690 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003cc2:	4641      	mov	r1, r8
 8003cc4:	4628      	mov	r0, r5
 8003cc6:	f009 fce3 	bl	800d690 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003cca:	4639      	mov	r1, r7
 8003ccc:	4628      	mov	r0, r5
 8003cce:	f009 fcdf 	bl	800d690 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	4631      	mov	r1, r6
 8003cd6:	f009 fcdb 	bl	800d690 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003cda:	4620      	mov	r0, r4
 8003cdc:	b00b      	add	sp, #44	; 0x2c
 8003cde:	ecbd 8b04 	vpop	{d8-d9}
 8003ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ce6:	bf00      	nop
 8003ce8:	08026ca8 	.word	0x08026ca8
 8003cec:	08028de0 	.word	0x08028de0
 8003cf0:	08026554 	.word	0x08026554
 8003cf4:	08026c90 	.word	0x08026c90
 8003cf8:	08003949 	.word	0x08003949
 8003cfc:	ff143059 	.word	0xff143059

08003d00 <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 8003d00:	4770      	bx	lr

08003d02 <_ZN15Screen2ViewBase11setupScreenEv>:
}

void Screen2ViewBase::setupScreen()
{

}
 8003d02:	4770      	bx	lr

08003d04 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003d04:	4770      	bx	lr

08003d06 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8003d06:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8003d08:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8003d0a:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8003d0c:	68c2      	ldr	r2, [r0, #12]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	1055      	asrs	r5, r2, #1
 8003d12:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003d16:	07d2      	lsls	r2, r2, #31
 8003d18:	bf48      	it	mi
 8003d1a:	5962      	ldrmi	r2, [r4, r5]
    }
 8003d1c:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8003d1e:	bf48      	it	mi
 8003d20:	58d3      	ldrmi	r3, [r2, r3]
 8003d22:	4718      	bx	r3

08003d24 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
 8003d24:	6843      	ldr	r3, [r0, #4]
 8003d26:	b12b      	cbz	r3, 8003d34 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8003d28:	6883      	ldr	r3, [r0, #8]
 8003d2a:	b92b      	cbnz	r3, 8003d38 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8003d2c:	68c0      	ldr	r0, [r0, #12]
 8003d2e:	f000 0001 	and.w	r0, r0, #1
 8003d32:	4770      	bx	lr
 8003d34:	4618      	mov	r0, r3
 8003d36:	4770      	bx	lr
 8003d38:	2001      	movs	r0, #1
    }
 8003d3a:	4770      	bx	lr

08003d3c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003d3c:	b510      	push	{r4, lr}
 8003d3e:	4604      	mov	r4, r0
 8003d40:	2110      	movs	r1, #16
 8003d42:	f020 fe2a 	bl	802499a <_ZdlPvj>
 8003d46:	4620      	mov	r0, r4
 8003d48:	bd10      	pop	{r4, pc}

08003d4a <_ZN15Screen2ViewBaseD0Ev>:
 8003d4a:	b510      	push	{r4, lr}
 8003d4c:	4604      	mov	r4, r0
 8003d4e:	f44f 719c 	mov.w	r1, #312	; 0x138
 8003d52:	f020 fe22 	bl	802499a <_ZdlPvj>
 8003d56:	4620      	mov	r0, r4
 8003d58:	bd10      	pop	{r4, pc}

08003d5a <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonWithLabel1)
 8003d5a:	30e0      	adds	r0, #224	; 0xe0
 8003d5c:	4288      	cmp	r0, r1
{
 8003d5e:	b508      	push	{r3, lr}
    if (&src == &buttonWithLabel1)
 8003d60:	d105      	bne.n	8003d6e <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8003d62:	f00f ff83 	bl	8013c6c <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When buttonWithLabel1 clicked change screen to Screen3
        //Go to Screen3 with screen transition towards East
        application().gotoScreen3ScreenSlideTransitionEast();
    }
}
 8003d66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen3ScreenSlideTransitionEast();
 8003d6a:	f7ff bb97 	b.w	800349c <_ZN23FrontendApplicationBase36gotoScreen3ScreenSlideTransitionEastEv>
}
 8003d6e:	bd08      	pop	{r3, pc}

08003d70 <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 8003d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d74:	4604      	mov	r4, r0
 8003d76:	b08d      	sub	sp, #52	; 0x34
 8003d78:	2500      	movs	r5, #0
 8003d7a:	f011 fa9b 	bl	80152b4 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 8003d7e:	4627      	mov	r7, r4
 8003d80:	4b52      	ldr	r3, [pc, #328]	; (8003ecc <_ZN15Screen2ViewBaseC1Ev+0x15c>)
 8003d82:	f104 0a6c 	add.w	sl, r4, #108	; 0x6c
 8003d86:	63e5      	str	r5, [r4, #60]	; 0x3c
 8003d88:	f847 3b40 	str.w	r3, [r7], #64
 8003d8c:	4638      	mov	r0, r7
 8003d8e:	f7ff fe07 	bl	80039a0 <_ZN8touchgfx3BoxC1Ev>
 8003d92:	4650      	mov	r0, sl
 8003d94:	f7ff fe04 	bl	80039a0 <_ZN8touchgfx3BoxC1Ev>
 8003d98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d9c:	f104 06e0 	add.w	r6, r4, #224	; 0xe0
        : x(x), y(y), width(width), height(height)
 8003da0:	f04f 39ff 	mov.w	r9, #4294967295
 8003da4:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
    __background.setPosition(0, 0, 800, 480);
 8003da8:	f44f 7bf0 	mov.w	fp, #480	; 0x1e0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003dac:	4b48      	ldr	r3, [pc, #288]	; (8003ed0 <_ZN15Screen2ViewBaseC1Ev+0x160>)
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 8003dae:	4630      	mov	r0, r6
        : color(col)
 8003db0:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
 8003db4:	f104 0898 	add.w	r8, r4, #152	; 0x98
 8003db8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
        : typedTextId(id)
 8003dbc:	4b45      	ldr	r3, [pc, #276]	; (8003ed4 <_ZN15Screen2ViewBaseC1Ev+0x164>)
 8003dbe:	f8a4 50d0 	strh.w	r5, [r4, #208]	; 0xd0
 8003dc2:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 8003dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
        : x(x), y(y), width(width), height(height)
 8003dca:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
 8003dce:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
 8003dd2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
        : x(0), y(0), width(0), height(0)
 8003dd6:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 8003dda:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
 8003dde:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8003de2:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 8003de6:	e9c4 552d 	strd	r5, r5, [r4, #180]	; 0xb4
              text(0)
 8003dea:	e9c4 9536 	strd	r9, r5, [r4, #216]	; 0xd8
 8003dee:	f00e f9af 	bl	8012150 <_ZN8touchgfx15ButtonWithLabelC1Ev>
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8003df2:	4b39      	ldr	r3, [pc, #228]	; (8003ed8 <_ZN15Screen2ViewBaseC1Ev+0x168>)
    __background.setPosition(0, 0, 800, 480);
 8003df4:	462a      	mov	r2, r5
 8003df6:	4629      	mov	r1, r5
 8003df8:	4638      	mov	r0, r7
 8003dfa:	f8cd b000 	str.w	fp, [sp]
 8003dfe:	e9c4 344a 	strd	r3, r4, [r4, #296]	; 0x128
 8003e02:	4b36      	ldr	r3, [pc, #216]	; (8003edc <_ZN15Screen2ViewBaseC1Ev+0x16c>)
 8003e04:	e9c4 354c 	strd	r3, r5, [r4, #304]	; 0x130
 8003e08:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003e0c:	f7ff fdb5 	bl	800397a <_ZN8touchgfx8Drawable11setPositionEssss>
 8003e10:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    box1.setPosition(0, 0, 800, 480);
 8003e14:	462a      	mov	r2, r5
 8003e16:	4629      	mov	r1, r5
 8003e18:	4650      	mov	r0, sl
 8003e1a:	66a3      	str	r3, [r4, #104]	; 0x68
 8003e1c:	f8cd b000 	str.w	fp, [sp]
 8003e20:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003e24:	f7ff fda9 	bl	800397a <_ZN8touchgfx8Drawable11setPositionEssss>
 8003e28:	4b2d      	ldr	r3, [pc, #180]	; (8003ee0 <_ZN15Screen2ViewBaseC1Ev+0x170>)
        boundingArea = calculateBoundingArea();
 8003e2a:	f10d 0b10 	add.w	fp, sp, #16
    textArea1.setXY(105, 59);
 8003e2e:	223b      	movs	r2, #59	; 0x3b
 8003e30:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8003e34:	4640      	mov	r0, r8
 8003e36:	2169      	movs	r1, #105	; 0x69
 8003e38:	f7ff fd92 	bl	8003960 <_ZN8touchgfx8Drawable5setXYEss>
 8003e3c:	4641      	mov	r1, r8
 8003e3e:	4658      	mov	r0, fp
        this->color = color;
 8003e40:	f8c4 90c8 	str.w	r9, [r4, #200]	; 0xc8
        linespace = space;
 8003e44:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
        boundingArea = calculateBoundingArea();
 8003e48:	f00d fbb8 	bl	80115bc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003e4c:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
 8003e50:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 8003e54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003e58:	4b1e      	ldr	r3, [pc, #120]	; (8003ed4 <_ZN15Screen2ViewBaseC1Ev+0x164>)
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9807));
 8003e5a:	a90a      	add	r1, sp, #40	; 0x28
 8003e5c:	4640      	mov	r0, r8
 8003e5e:	930a      	str	r3, [sp, #40]	; 0x28
 8003e60:	2304      	movs	r3, #4
 8003e62:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8003e66:	f00d fefb 	bl	8011c60 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    buttonWithLabel1.setXY(66, 160);
 8003e6a:	4630      	mov	r0, r6
 8003e6c:	22a0      	movs	r2, #160	; 0xa0
 8003e6e:	2142      	movs	r1, #66	; 0x42
 8003e70:	f7ff fd76 	bl	8003960 <_ZN8touchgfx8Drawable5setXYEss>
 8003e74:	2301      	movs	r3, #1
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8003e76:	aa0a      	add	r2, sp, #40	; 0x28
 8003e78:	a909      	add	r1, sp, #36	; 0x24
 8003e7a:	4630      	mov	r0, r6
 8003e7c:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8003e80:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
 8003e84:	f00d ff49 	bl	8011d1a <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 8003e88:	2303      	movs	r3, #3
        updateTextPosition();
 8003e8a:	4630      	mov	r0, r6
 8003e8c:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
 8003e90:	f7ff fd9c 	bl	80039cc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    buttonWithLabel1.setAction(buttonCallback);
 8003e94:	f504 7394 	add.w	r3, r4, #296	; 0x128
 8003e98:	1d20      	adds	r0, r4, #4
 8003e9a:	4639      	mov	r1, r7
 8003e9c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 8003ea0:	9003      	str	r0, [sp, #12]
        colorPressed = col;
 8003ea2:	e9c4 9947 	strd	r9, r9, [r4, #284]	; 0x11c
 8003ea6:	f009 fbf3 	bl	800d690 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003eaa:	4651      	mov	r1, sl
 8003eac:	9803      	ldr	r0, [sp, #12]
 8003eae:	f009 fbef 	bl	800d690 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003eb2:	4641      	mov	r1, r8
 8003eb4:	9803      	ldr	r0, [sp, #12]
 8003eb6:	f009 fbeb 	bl	800d690 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003eba:	9803      	ldr	r0, [sp, #12]
 8003ebc:	4631      	mov	r1, r6
 8003ebe:	f009 fbe7 	bl	800d690 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	b00d      	add	sp, #52	; 0x34
 8003ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eca:	bf00      	nop
 8003ecc:	08026cf4 	.word	0x08026cf4
 8003ed0:	08028de0 	.word	0x08028de0
 8003ed4:	08026554 	.word	0x08026554
 8003ed8:	08026cdc 	.word	0x08026cdc
 8003edc:	08003d5b 	.word	0x08003d5b
 8003ee0:	ff143059 	.word	0xff143059

08003ee4 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8003ee4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003ee6:	4770      	bx	lr

08003ee8 <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003ee8:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    }
 8003eec:	4770      	bx	lr

08003eee <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
 8003eee:	b410      	push	{r4}
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8003ef0:	6803      	ldr	r3, [r0, #0]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
 8003ef2:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8003ef4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ef8:	4362      	muls	r2, r4
 8003efa:	4361      	muls	r1, r4
    }
 8003efc:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8003f00:	4718      	bx	r3

08003f02 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
     *
     * @return The product of the two numbers, rounded to nearest integer value.
     */
    FORCE_INLINE_FUNCTION static int float2scaled(float f, int scale)
    {
        const float fs = f * scale;
 8003f02:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8003f06:	6803      	ldr	r3, [r0, #0]
        const float fs = f * scale;
 8003f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8003f0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
        const float fs = f * scale;
 8003f10:	ee20 0a27 	vmul.f32	s0, s0, s15
        if (fs >= 0)
 8003f14:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f1c:	db17      	blt.n	8003f4e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4c>
        {
            return int(fs + 0.5f);
 8003f1e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003f22:	ee30 0a07 	vadd.f32	s0, s0, s14
 8003f26:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8003f2a:	ee17 1a10 	vmov	r1, s14
        const float fs = f * scale;
 8003f2e:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8003f32:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8003f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f3a:	db1c      	blt.n	8003f76 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x74>
            return int(fs + 0.5f);
 8003f3c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003f40:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8003f44:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8003f48:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8003f4c:	4718      	bx	r3
        }
        return (int(fs) - 1) + int(1.5f + (fs - int(fs)));
 8003f4e:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8003f52:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8003f56:	ee17 2a10 	vmov	r2, s14
 8003f5a:	1e51      	subs	r1, r2, #1
 8003f5c:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003f60:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8003f64:	ee30 0a26 	vadd.f32	s0, s0, s13
 8003f68:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003f6c:	ee10 2a10 	vmov	r2, s0
 8003f70:	440a      	add	r2, r1
 8003f72:	4611      	mov	r1, r2
 8003f74:	e7db      	b.n	8003f2e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x2c>
 8003f76:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8003f7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f7e:	ee17 2a90 	vmov	r2, s15
 8003f82:	3a01      	subs	r2, #1
 8003f84:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8003f88:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003f8c:	ee70 0a87 	vadd.f32	s1, s1, s14
 8003f90:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8003f94:	ee10 ca90 	vmov	ip, s1
 8003f98:	4494      	add	ip, r2
 8003f9a:	4662      	mov	r2, ip
 8003f9c:	e7d6      	b.n	8003f4c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4a>

08003f9e <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
 8003f9e:	b410      	push	{r4}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8003fa0:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 8003fa2:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8003fa4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fa8:	4362      	muls	r2, r4
    }
 8003faa:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8003fae:	4718      	bx	r3

08003fb0 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
        const float fs = f * scale;
 8003fb0:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8003fb4:	6803      	ldr	r3, [r0, #0]
        const float fs = f * scale;
 8003fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8003fba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
        const float fs = f * scale;
 8003fbe:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8003fc2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fca:	db08      	blt.n	8003fde <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2e>
            return int(fs + 0.5f);
 8003fcc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003fd0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003fd4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003fd8:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8003fdc:	4718      	bx	r3
        return (int(fs) - 1) + int(1.5f + (fs - int(fs)));
 8003fde:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003fe2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fe6:	ee17 2a90 	vmov	r2, s15
 8003fea:	3a01      	subs	r2, #1
 8003fec:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003ff0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003ff4:	ee30 0a07 	vadd.f32	s0, s0, s14
 8003ff8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003ffc:	ee10 ca10 	vmov	ip, s0
 8004000:	4494      	add	ip, r2
 8004002:	4662      	mov	r2, ip
 8004004:	e7ea      	b.n	8003fdc <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2c>

08004006 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
 8004006:	b410      	push	{r4}
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8004008:	6803      	ldr	r3, [r0, #0]
        return int2scaled(i, yScale);
 800400a:	6b44      	ldr	r4, [r0, #52]	; 0x34
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 800400c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004010:	4362      	muls	r2, r4
 8004012:	4361      	muls	r1, r4
    }
 8004014:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8004018:	4718      	bx	r3

0800401a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
        const float fs = f * scale;
 800401a:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 800401e:	6803      	ldr	r3, [r0, #0]
        const float fs = f * scale;
 8004020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8004024:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
        const float fs = f * scale;
 8004028:	ee20 0a27 	vmul.f32	s0, s0, s15
        if (fs >= 0)
 800402c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004034:	db17      	blt.n	8004066 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4c>
            return int(fs + 0.5f);
 8004036:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800403a:	ee30 0a07 	vadd.f32	s0, s0, s14
 800403e:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8004042:	ee17 1a10 	vmov	r1, s14
        const float fs = f * scale;
 8004046:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 800404a:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800404e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004052:	db1c      	blt.n	800408e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x74>
            return int(fs + 0.5f);
 8004054:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004058:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800405c:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8004060:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8004064:	4718      	bx	r3
        return (int(fs) - 1) + int(1.5f + (fs - int(fs)));
 8004066:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800406a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800406e:	ee17 2a10 	vmov	r2, s14
 8004072:	1e51      	subs	r1, r2, #1
 8004074:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004078:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800407c:	ee30 0a26 	vadd.f32	s0, s0, s13
 8004080:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004084:	ee10 2a10 	vmov	r2, s0
 8004088:	440a      	add	r2, r1
 800408a:	4611      	mov	r1, r2
 800408c:	e7db      	b.n	8004046 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x2c>
 800408e:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8004092:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004096:	ee17 2a90 	vmov	r2, s15
 800409a:	3a01      	subs	r2, #1
 800409c:	ee70 0ac7 	vsub.f32	s1, s1, s14
 80040a0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80040a4:	ee70 0a87 	vadd.f32	s1, s1, s14
 80040a8:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 80040ac:	ee10 ca90 	vmov	ip, s1
 80040b0:	4494      	add	ip, r2
 80040b2:	4662      	mov	r2, ip
 80040b4:	e7d6      	b.n	8004064 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4a>

080040b6 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
 80040b6:	b410      	push	{r4}
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 80040b8:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 80040ba:	6b44      	ldr	r4, [r0, #52]	; 0x34
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 80040bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80040c0:	4362      	muls	r2, r4
    }
 80040c2:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 80040c6:	4718      	bx	r3

080040c8 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
        const float fs = f * scale;
 80040c8:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 80040cc:	6803      	ldr	r3, [r0, #0]
        const float fs = f * scale;
 80040ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 80040d2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
        const float fs = f * scale;
 80040d6:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 80040da:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80040de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040e2:	db08      	blt.n	80040f6 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2e>
            return int(fs + 0.5f);
 80040e4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80040e8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80040ec:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80040f0:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 80040f4:	4718      	bx	r3
        return (int(fs) - 1) + int(1.5f + (fs - int(fs)));
 80040f6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80040fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040fe:	ee17 2a90 	vmov	r2, s15
 8004102:	3a01      	subs	r2, #1
 8004104:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004108:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800410c:	ee30 0a07 	vadd.f32	s0, s0, s14
 8004110:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004114:	ee10 ca10 	vmov	ip, s0
 8004118:	4494      	add	ip, r2
 800411a:	4662      	mov	r2, ip
 800411c:	e7ea      	b.n	80040f4 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2c>

0800411e <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
        return scaled2intX(graphRangeMinX);
 800411e:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
 8004122:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
 8004124:	2b00      	cmp	r3, #0
 8004126:	db07      	blt.n	8004138 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8004128:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800412c:	fb93 f0f2 	sdiv	r0, r3, r2
 8004130:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004134:	1040      	asrs	r0, r0, #1
 8004136:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8004138:	f06f 0001 	mvn.w	r0, #1
 800413c:	fb00 2003 	mla	r0, r0, r3, r2
 8004140:	3801      	subs	r0, #1
 8004142:	fb90 f0f2 	sdiv	r0, r0, r2
 8004146:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800414a:	1040      	asrs	r0, r0, #1
 800414c:	4240      	negs	r0, r0
    }
 800414e:	4770      	bx	lr

08004150 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
     *
     * @return The number divided by the scale.
     */
    FORCE_INLINE_FUNCTION static float scaled2float(int i, int scale)
    {
        return (float)i / (float)scale;
 8004150:	edd0 7a4b 	vldr	s15, [r0, #300]	; 0x12c
 8004154:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8004158:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 800415c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8004160:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8004164:	4770      	bx	lr

08004166 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    }
 8004166:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
 800416a:	4770      	bx	lr

0800416c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
        return scaled2intX(graphRangeMaxX);
 800416c:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
        return scaled2int(i, xScale);
 8004170:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
 8004172:	2b00      	cmp	r3, #0
 8004174:	db07      	blt.n	8004186 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8004176:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800417a:	fb93 f0f2 	sdiv	r0, r3, r2
 800417e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004182:	1040      	asrs	r0, r0, #1
 8004184:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8004186:	f06f 0001 	mvn.w	r0, #1
 800418a:	fb00 2003 	mla	r0, r0, r3, r2
 800418e:	3801      	subs	r0, #1
 8004190:	fb90 f0f2 	sdiv	r0, r0, r2
 8004194:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004198:	1040      	asrs	r0, r0, #1
 800419a:	4240      	negs	r0, r0
    }
 800419c:	4770      	bx	lr

0800419e <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
        return (float)i / (float)scale;
 800419e:	edd0 7a4c 	vldr	s15, [r0, #304]	; 0x130
 80041a2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80041a6:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 80041aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 80041ae:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80041b2:	4770      	bx	lr

080041b4 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    }
 80041b4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
 80041b8:	4770      	bx	lr

080041ba <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
        return scaled2intY(graphRangeMinY);
 80041ba:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
        return scaled2int(i, yScale);
 80041be:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	db07      	blt.n	80041d4 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 80041c4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80041c8:	fb93 f0f2 	sdiv	r0, r3, r2
 80041cc:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80041d0:	1040      	asrs	r0, r0, #1
 80041d2:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80041d4:	f06f 0001 	mvn.w	r0, #1
 80041d8:	fb00 2003 	mla	r0, r0, r3, r2
 80041dc:	3801      	subs	r0, #1
 80041de:	fb90 f0f2 	sdiv	r0, r0, r2
 80041e2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80041e6:	1040      	asrs	r0, r0, #1
 80041e8:	4240      	negs	r0, r0
    }
 80041ea:	4770      	bx	lr

080041ec <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
        return (float)i / (float)scale;
 80041ec:	edd0 7a4d 	vldr	s15, [r0, #308]	; 0x134
 80041f0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80041f4:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
 80041f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 80041fc:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8004200:	4770      	bx	lr

08004202 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    }
 8004202:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
 8004206:	4770      	bx	lr

08004208 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
        return scaled2intY(graphRangeMaxY);
 8004208:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
        return scaled2int(i, yScale);
 800420c:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
 800420e:	2b00      	cmp	r3, #0
 8004210:	db07      	blt.n	8004222 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8004212:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8004216:	fb93 f0f2 	sdiv	r0, r3, r2
 800421a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800421e:	1040      	asrs	r0, r0, #1
 8004220:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8004222:	f06f 0001 	mvn.w	r0, #1
 8004226:	fb00 2003 	mla	r0, r0, r3, r2
 800422a:	3801      	subs	r0, #1
 800422c:	fb90 f0f2 	sdiv	r0, r0, r2
 8004230:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004234:	1040      	asrs	r0, r0, #1
 8004236:	4240      	negs	r0, r0
    }
 8004238:	4770      	bx	lr

0800423a <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
        return (float)i / (float)scale;
 800423a:	edd0 7a4e 	vldr	s15, [r0, #312]	; 0x138
 800423e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8004242:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
 8004246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 800424a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800424e:	4770      	bx	lr

08004250 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    }
 8004250:	f8d0 0138 	ldr.w	r0, [r0, #312]	; 0x138
 8004254:	4770      	bx	lr

08004256 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>:
     * @note The current xAxisFactor, xAxisOffet and xGraphRange values are updated to reflect the
     *       new scale being set.
     */
    virtual void setScale(int scale, bool updateData = false)
    {
        setScaleX(scale, updateData);
 8004256:	6803      	ldr	r3, [r0, #0]
    virtual void setScale(int scale, bool updateData = false)
 8004258:	b570      	push	{r4, r5, r6, lr}
 800425a:	4604      	mov	r4, r0
        setScaleX(scale, updateData);
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    virtual void setScale(int scale, bool updateData = false)
 8004260:	460d      	mov	r5, r1
 8004262:	4616      	mov	r6, r2
        setScaleX(scale, updateData);
 8004264:	4798      	blx	r3
        setScaleY(scale, updateData);
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	4632      	mov	r2, r6
 800426a:	4629      	mov	r1, r5
 800426c:	4620      	mov	r0, r4
 800426e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    }
 8004272:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setScaleY(scale, updateData);
 8004276:	4718      	bx	r3

08004278 <_ZNK8touchgfx16DynamicDataGraph8getScaleEv>:
     *
     * @see setScale
     */
    virtual int getScale() const
    {
        return getScaleY();
 8004278:	6803      	ldr	r3, [r0, #0]
 800427a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800427e:	4718      	bx	r3

08004280 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv>:
     *
     * @return The minimum x coordinate .
     */
    virtual int getGraphRangeXMin() const
    {
        return getGraphRangeXMinScaled();
 8004280:	6803      	ldr	r3, [r0, #0]
 8004282:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004286:	4718      	bx	r3

08004288 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv>:
     *
     * @return The maximum x coordinate .
     */
    virtual int getGraphRangeXMax() const
    {
        return getGraphRangeXMaxScaled();
 8004288:	6803      	ldr	r3, [r0, #0]
 800428a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800428e:	4718      	bx	r3

08004290 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi>:

    virtual void setGraphRangeYAutoScaled(bool showXaxis, int margin);

    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
    {
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8004290:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 8004292:	2a00      	cmp	r2, #0
    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
 8004294:	b410      	push	{r4}
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8004296:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
        return scaled2int(i, xScale);
 800429a:	6b04      	ldr	r4, [r0, #48]	; 0x30
        if (i >= 0)
 800429c:	db0e      	blt.n	80042bc <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x2c>
            return ((i * 2 + scale) / scale) / 2;
 800429e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80042a2:	fb92 f1f4 	sdiv	r1, r2, r4
 80042a6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80042aa:	1049      	asrs	r1, r1, #1
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 80042ac:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
    }
 80042b0:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 80042b4:	3a01      	subs	r2, #1
 80042b6:	440a      	add	r2, r1
 80042b8:	4249      	negs	r1, r1
 80042ba:	4718      	bx	r3
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80042bc:	f06f 0101 	mvn.w	r1, #1
 80042c0:	fb01 4102 	mla	r1, r1, r2, r4
 80042c4:	3901      	subs	r1, #1
 80042c6:	fb91 f1f4 	sdiv	r1, r1, r4
 80042ca:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80042ce:	1049      	asrs	r1, r1, #1
 80042d0:	4249      	negs	r1, r1
 80042d2:	e7eb      	b.n	80042ac <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x1c>

080042d4 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(int scale))
    {
        setXAxisFactor(scale);
 80042d4:	6803      	ldr	r3, [r0, #0]
 80042d6:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80042da:	4718      	bx	r3

080042dc <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>:
        return i * scale;
 80042dc:	6b02      	ldr	r2, [r0, #48]	; 0x30
     *
     * @param  factor The x axis factor.
     */
    virtual void setXAxisFactor(int factor)
    {
        setXAxisFactorScaled(int2scaledX(factor));
 80042de:	6803      	ldr	r3, [r0, #0]
 80042e0:	4351      	muls	r1, r2
 80042e2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80042e6:	4718      	bx	r3

080042e8 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf>:
    }

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(float scale))
    {
        setXAxisFactor(scale);
 80042e8:	6803      	ldr	r3, [r0, #0]
 80042ea:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80042ee:	4718      	bx	r3

080042f0 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf>:
        const float fs = f * scale;
 80042f0:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
    /// @endcond

    /** @copydoc setXAxisFactor(int) */
    virtual void setXAxisFactor(float factor)
    {
        setXAxisFactorScaled(float2scaledX(factor));
 80042f4:	6803      	ldr	r3, [r0, #0]
        const float fs = f * scale;
 80042f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisFactorScaled(float2scaledX(factor));
 80042fa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
        const float fs = f * scale;
 80042fe:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8004302:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800430a:	db08      	blt.n	800431e <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2e>
            return int(fs + 0.5f);
 800430c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004310:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004314:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004318:	ee17 1a90 	vmov	r1, s15
        setXAxisFactorScaled(float2scaledX(factor));
 800431c:	4718      	bx	r3
        return (int(fs) - 1) + int(1.5f + (fs - int(fs)));
 800431e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004322:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004326:	ee17 2a90 	vmov	r2, s15
 800432a:	1e51      	subs	r1, r2, #1
 800432c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004330:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8004334:	ee30 0a07 	vadd.f32	s0, s0, s14
 8004338:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800433c:	ee10 2a10 	vmov	r2, s0
 8004340:	440a      	add	r2, r1
 8004342:	4611      	mov	r1, r2
 8004344:	e7ea      	b.n	800431c <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2c>

08004346 <_ZN8touchgfx16DynamicDataGraph20setXAxisFactorScaledEi>:
     *
     * @see setXAxisFactorScaled,setXAxisFactor
     */
    virtual void setXAxisFactorScaled(int factor)
    {
        xAxisFactor = factor;
 8004346:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    }
 800434a:	4770      	bx	lr

0800434c <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsInt()", virtual int getXAxisScaleAsInt() const)
    {
        return getXAxisFactorAsInt();
 800434c:	6803      	ldr	r3, [r0, #0]
 800434e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8004352:	4718      	bx	r3

08004354 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv>:
     *
     * @return The x axis factor.
     */
    virtual int getXAxisFactorAsInt() const
    {
        return scaled2intX(getXAxisFactorScaled());
 8004354:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisFactorAsInt() const
 8004356:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisFactorScaled());
 8004358:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
    virtual int getXAxisFactorAsInt() const
 800435c:	4604      	mov	r4, r0
        return scaled2intX(getXAxisFactorScaled());
 800435e:	4798      	blx	r3
        if (i >= 0)
 8004360:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 8004362:	6b23      	ldr	r3, [r4, #48]	; 0x30
        if (i >= 0)
 8004364:	db07      	blt.n	8004376 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 8004366:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800436a:	fb90 f0f3 	sdiv	r0, r0, r3
 800436e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004372:	1040      	asrs	r0, r0, #1
    }
 8004374:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8004376:	f06f 0201 	mvn.w	r2, #1
 800437a:	fb02 3000 	mla	r0, r2, r0, r3
 800437e:	3801      	subs	r0, #1
 8004380:	fb90 f0f3 	sdiv	r0, r0, r3
 8004384:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004388:	1040      	asrs	r0, r0, #1
 800438a:	4240      	negs	r0, r0
        return scaled2intX(getXAxisFactorScaled());
 800438c:	e7f2      	b.n	8004374 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x20>

0800438e <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsFloat()", virtual float getXAxisScaleAsFloat() const)
    {
        return getXAxisFactorAsFloat();
 800438e:	6803      	ldr	r3, [r0, #0]
 8004390:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8004394:	4718      	bx	r3

08004396 <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv>:
    /// @endcond

    /** @copydoc getXAxisFactorAsInt() */
    virtual float getXAxisFactorAsFloat() const
    {
        return scaled2floatX(getXAxisFactorScaled());
 8004396:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisFactorAsFloat() const
 8004398:	b510      	push	{r4, lr}
        return scaled2floatX(getXAxisFactorScaled());
 800439a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
    virtual float getXAxisFactorAsFloat() const
 800439e:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisFactorScaled());
 80043a0:	4798      	blx	r3
        return (float)i / (float)scale;
 80043a2:	ee07 0a90 	vmov	s15, r0
 80043a6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80043aa:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 80043ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 80043b2:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80043b6:	bd10      	pop	{r4, pc}

080043b8 <_ZNK8touchgfx16DynamicDataGraph20getXAxisFactorScaledEv>:
     * @see getXAxisFactorAsInt, getXAxisFactorAsFloat, setXAxisFactor
     */
    virtual int getXAxisFactorScaled() const
    {
        return xAxisFactor;
    }
 80043b8:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 80043bc:	4770      	bx	lr

080043be <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>:
        return i * scale;
 80043be:	6b02      	ldr	r2, [r0, #48]	; 0x30
     *
     * @param  offset The x axis offset.
     */
    virtual void setXAxisOffset(int offset)
    {
        setXAxisOffsetScaled(int2scaledX(offset));
 80043c0:	6803      	ldr	r3, [r0, #0]
 80043c2:	4351      	muls	r1, r2
 80043c4:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80043c8:	4718      	bx	r3

080043ca <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf>:
        const float fs = f * scale;
 80043ca:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
    }

    /** @copydoc setXAxisOffset(int) */
    virtual void setXAxisOffset(float offset)
    {
        setXAxisOffsetScaled(float2scaledX(offset));
 80043ce:	6803      	ldr	r3, [r0, #0]
        const float fs = f * scale;
 80043d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 80043d4:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
        const float fs = f * scale;
 80043d8:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 80043dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80043e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e4:	db08      	blt.n	80043f8 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2e>
            return int(fs + 0.5f);
 80043e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80043ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 80043ee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80043f2:	ee17 1a90 	vmov	r1, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 80043f6:	4718      	bx	r3
        return (int(fs) - 1) + int(1.5f + (fs - int(fs)));
 80043f8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80043fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004400:	ee17 2a90 	vmov	r2, s15
 8004404:	1e51      	subs	r1, r2, #1
 8004406:	ee30 0a47 	vsub.f32	s0, s0, s14
 800440a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800440e:	ee30 0a07 	vadd.f32	s0, s0, s14
 8004412:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004416:	ee10 2a10 	vmov	r2, s0
 800441a:	440a      	add	r2, r1
 800441c:	4611      	mov	r1, r2
 800441e:	e7ea      	b.n	80043f6 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2c>

08004420 <_ZN8touchgfx16DynamicDataGraph20setXAxisOffsetScaledEi>:
     *
     * @see setXAxisOffset, getXAxisOffsetScaled
     */
    virtual void setXAxisOffsetScaled(int offset)
    {
        xAxisOffset = offset;
 8004420:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    }
 8004424:	4770      	bx	lr

08004426 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv>:
     *
     * @return The x axis offset.
     */
    virtual int getXAxisOffsetAsInt() const
    {
        return scaled2intX(getXAxisOffsetScaled());
 8004426:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisOffsetAsInt() const
 8004428:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisOffsetScaled());
 800442a:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
    virtual int getXAxisOffsetAsInt() const
 800442e:	4604      	mov	r4, r0
        return scaled2intX(getXAxisOffsetScaled());
 8004430:	4798      	blx	r3
        if (i >= 0)
 8004432:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 8004434:	6b23      	ldr	r3, [r4, #48]	; 0x30
        if (i >= 0)
 8004436:	db07      	blt.n	8004448 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 8004438:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800443c:	fb90 f0f3 	sdiv	r0, r0, r3
 8004440:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004444:	1040      	asrs	r0, r0, #1
    }
 8004446:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8004448:	f06f 0201 	mvn.w	r2, #1
 800444c:	fb02 3000 	mla	r0, r2, r0, r3
 8004450:	3801      	subs	r0, #1
 8004452:	fb90 f0f3 	sdiv	r0, r0, r3
 8004456:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800445a:	1040      	asrs	r0, r0, #1
 800445c:	4240      	negs	r0, r0
        return scaled2intX(getXAxisOffsetScaled());
 800445e:	e7f2      	b.n	8004446 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x20>

08004460 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv>:

    /** @copydoc getXAxisOffsetAsInt() */
    virtual float getXAxisOffsetAsFloat() const
    {
        return scaled2floatX(getXAxisOffsetScaled());
 8004460:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisOffsetAsFloat() const
 8004462:	b510      	push	{r4, lr}
        return scaled2floatX(getXAxisOffsetScaled());
 8004464:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
    virtual float getXAxisOffsetAsFloat() const
 8004468:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisOffsetScaled());
 800446a:	4798      	blx	r3
        return (float)i / (float)scale;
 800446c:	ee07 0a90 	vmov	s15, r0
 8004470:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8004474:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8004478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 800447c:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8004480:	bd10      	pop	{r4, pc}

08004482 <_ZNK8touchgfx16DynamicDataGraph20getXAxisOffsetScaledEv>:
     * @see getXAxisOffsetAsInt, getXAxisOffsetAsFloat, setXAxisOffsetScaled, setXAxisOffset
     */
    virtual int getXAxisOffsetScaled() const
    {
        return xAxisOffset;
    }
 8004482:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 8004486:	4770      	bx	lr

08004488 <_ZNK8touchgfx16DynamicDataGraph9dataIndexEs>:
     * @return The index in the yValues array.
     */
    virtual int16_t dataIndex(int16_t screenIndex) const
    {
        return screenIndex;
    }
 8004488:	4608      	mov	r0, r1
 800448a:	4770      	bx	lr

0800448c <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii>:
    }

    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
    {
        // Value is also index for these types of graphs.
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 800448c:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 800448e:	2900      	cmp	r1, #0
        return scaled2int(i, xScale);
 8004490:	6b02      	ldr	r2, [r0, #48]	; 0x30
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 8004492:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
 8004496:	b510      	push	{r4, lr}
 8004498:	4604      	mov	r4, r0
        if (i >= 0)
 800449a:	db0e      	blt.n	80044ba <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x2e>
            return ((i * 2 + scale) / scale) / 2;
 800449c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80044a0:	fb91 f1f2 	sdiv	r1, r1, r2
 80044a4:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80044a8:	1049      	asrs	r1, r1, #1
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 80044aa:	b209      	sxth	r1, r1
 80044ac:	4620      	mov	r0, r4
 80044ae:	4798      	blx	r3
 80044b0:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	; 0x13c
    }
 80044b4:	fb02 3000 	mla	r0, r2, r0, r3
 80044b8:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80044ba:	f06f 0001 	mvn.w	r0, #1
 80044be:	fb00 2101 	mla	r1, r0, r1, r2
 80044c2:	3901      	subs	r1, #1
 80044c4:	fb91 f1f2 	sdiv	r1, r1, r2
 80044c8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80044cc:	1049      	asrs	r1, r1, #1
 80044ce:	4249      	negs	r1, r1
 80044d0:	e7eb      	b.n	80044aa <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x1e>

080044d2 <_ZNK8touchgfx16DynamicDataGraph9getScaleXEv>:
    virtual void setScaleX(int scale, bool updateData = false);

    virtual int getScaleX() const
    {
        return AbstractDataGraph::getScaleX();
    }
 80044d2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80044d4:	4770      	bx	lr

080044d6 <_ZNK8touchgfx16DynamicDataGraph9getScaleYEv>:
    virtual void setScaleY(int scale, bool updateData = false);

    virtual int getScaleY() const
    {
        return AbstractDataGraph::getScaleY();
    }
 80044d6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80044d8:	4770      	bx	lr

080044da <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactorScaled()", virtual void setXAxisScaleScaled(int scale))
    {
        setXAxisFactorScaled(scale);
 80044da:	6803      	ldr	r3, [r0, #0]
 80044dc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80044e0:	4718      	bx	r3

080044e2 <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv>:
    /// @endcond

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorScaled()", virtual int getXAxisScaleScaled() const)
    {
        return getXAxisFactorScaled();
 80044e2:	6803      	ldr	r3, [r0, #0]
 80044e4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80044e8:	4718      	bx	r3

080044ea <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es>:
        return i * scale;
 80044ea:	6b02      	ldr	r2, [r0, #48]	; 0x30
    }
    /// @endcond

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
    {
        return valueToScreenXQ5(int2scaledX(index));
 80044ec:	6803      	ldr	r3, [r0, #0]
 80044ee:	4351      	muls	r1, r2
 80044f0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80044f4:	4718      	bx	r3

080044f6 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es>:
    }

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
    {
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80044f6:	6803      	ldr	r3, [r0, #0]
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 80044f8:	b570      	push	{r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80044fa:	f8d3 5118 	ldr.w	r5, [r3, #280]	; 0x118
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 80044fe:	4604      	mov	r4, r0
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8004500:	f8d0 6144 	ldr.w	r6, [r0, #324]	; 0x144
 8004504:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8004508:	4798      	blx	r3
 800450a:	462b      	mov	r3, r5
 800450c:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 8004510:	4620      	mov	r0, r4
    }
 8004512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8004516:	4718      	bx	r3

08004518 <_ZNK8touchgfx21GraphWrapAndClearData18indexToGlobalIndexEs>:

    virtual void clear();

    virtual int32_t indexToGlobalIndex(int16_t index) const
    {
        return (this->dataCounter - this->usedCapacity) + index;
 8004518:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 800451c:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 8004520:	4419      	add	r1, r3
    }
 8004522:	1a08      	subs	r0, r1, r0
 8004524:	4770      	bx	lr

08004526 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    virtual AbstractPainter& getPainter() const;

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8004526:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    }
 800452a:	4770      	bx	lr

0800452c <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 800452c:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8004530:	4770      	bx	lr

08004532 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>:
     *
     * @see getColor
     */
    virtual void setColor(colortype newColor)
    {
        color = newColor;
 8004532:	6301      	str	r1, [r0, #48]	; 0x30
    }
 8004534:	4770      	bx	lr

08004536 <_ZNK8touchgfx25AbstractGraphElementNoCWR8getColorEv>:
     * @see setColor
     */
    virtual colortype getColor() const
    {
        return color;
    }
 8004536:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8004538:	4770      	bx	lr

0800453a <_ZNK8touchgfx25AbstractGraphElementNoCWR16drawCanvasWidgetERKNS_4RectE>:

    virtual bool drawCanvasWidget(const Rect&) const
    {
        return true;
    }
 800453a:	2001      	movs	r0, #1
 800453c:	4770      	bx	lr

0800453e <_ZN8touchgfx25AbstractGraphElementNoCWR10setPainterERNS_15AbstractPainterE>:
    /**
     * Protected function to prevent users from setting a painter.
     *
     * @param [in] painter The painter.
     */
    virtual void setPainter(AbstractPainter& painter){};
 800453e:	4770      	bx	lr

08004540 <_ZN8touchgfx20GraphElementGridBase22invalidateGraphPointAtEs>:
        return lineWidth;
    }

    virtual void invalidateGraphPointAt(int16_t)
    {
    }
 8004540:	4770      	bx	lr

08004542 <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
     *
     * @return The correctly scaled major interval.
     */
    virtual int getCorrectlyScaledMajorInterval(const AbstractDataGraph* graph) const
    {
        return majorGrid == 0 ? 0 : majorGrid->getCorrectlyScaledGridInterval(graph);
 8004542:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8004544:	b118      	cbz	r0, 800454e <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 8004546:	6803      	ldr	r3, [r0, #0]
 8004548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800454c:	4718      	bx	r3
    }
 800454e:	4770      	bx	lr

08004550 <_ZNK8touchgfx17GraphElementGridX13enclosingAreaEPKNS_17AbstractDataGraphE>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8004550:	f8b2 111a 	ldrh.w	r1, [r2, #282]	; 0x11a
    {
        return convertToGraphScaleX(graph, gridInterval, dataScale);
    }

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 8004554:	b530      	push	{r4, r5, lr}
        return topPadding;
 8004556:	f9b2 4114 	ldrsh.w	r4, [r2, #276]	; 0x114
        return rect.width;
 800455a:	f9b2 5040 	ldrsh.w	r5, [r2, #64]	; 0x40
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800455e:	4421      	add	r1, r4
 8004560:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
        : x(x), y(y), width(width), height(height)
 8004564:	8044      	strh	r4, [r0, #2]
 8004566:	1a52      	subs	r2, r2, r1
 8004568:	2100      	movs	r1, #0
 800456a:	8085      	strh	r5, [r0, #4]
 800456c:	8001      	strh	r1, [r0, #0]
 800456e:	80c2      	strh	r2, [r0, #6]
    {
        return Rect(0, graph->getGraphAreaPaddingTop(), graph->getGraphAreaWidthIncludingPadding(), graph->getGraphAreaHeight());
    }
 8004570:	bd30      	pop	{r4, r5, pc}

08004572 <_ZNK8touchgfx17GraphElementGridX8lineRectEssss>:

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
 8004572:	b510      	push	{r4, lr}
 8004574:	8042      	strh	r2, [r0, #2]
 8004576:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 800457a:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800457e:	8004      	strh	r4, [r0, #0]
 8004580:	8082      	strh	r2, [r0, #4]
 8004582:	80c3      	strh	r3, [r0, #6]
    {
        return Rect(pos, start, width, length);
    }
 8004584:	bd10      	pop	{r4, pc}

08004586 <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeXMinScaled();
 8004586:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 8004588:	4608      	mov	r0, r1
        return graph->getGraphRangeXMinScaled();
 800458a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800458e:	4718      	bx	r3

08004590 <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeXMaxScaled();
 8004590:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 8004592:	4608      	mov	r0, r1
        return graph->getGraphRangeXMaxScaled();
 8004594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004598:	4718      	bx	r3

0800459a <_ZNK8touchgfx17GraphElementGridX17getGraphAreaStartEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingTop();
    }
 800459a:	f9b1 0114 	ldrsh.w	r0, [r1, #276]	; 0x114
 800459e:	4770      	bx	lr

080045a0 <_ZNK8touchgfx17GraphElementGridX18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:
 80045a0:	f8b1 0114 	ldrh.w	r0, [r1, #276]	; 0x114
 80045a4:	f8b1 311a 	ldrh.w	r3, [r1, #282]	; 0x11a
 80045a8:	4403      	add	r3, r0
 80045aa:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
 80045ae:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaHeight();
    }
 80045b0:	b200      	sxth	r0, r0
 80045b2:	4770      	bx	lr

080045b4 <_ZNK8touchgfx17GraphElementGridX20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingLeft();
    }
 80045b4:	f9b1 0116 	ldrsh.w	r0, [r1, #278]	; 0x116
 80045b8:	4770      	bx	lr

080045ba <_ZNK8touchgfx17GraphElementGridX18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:
        return graphArea.getWidth() - (leftPadding + rightPadding);
 80045ba:	f8b1 0116 	ldrh.w	r0, [r1, #278]	; 0x116
 80045be:	f8b1 3118 	ldrh.w	r3, [r1, #280]	; 0x118
 80045c2:	4403      	add	r3, r0
 80045c4:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
 80045c8:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaWidth();
    }
 80045ca:	b200      	sxth	r0, r0
 80045cc:	4770      	bx	lr

080045ce <_ZNK8touchgfx17GraphElementGridX15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:
        return graph->valueToScreenXQ5(x);
 80045ce:	680b      	ldr	r3, [r1, #0]

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 80045d0:	4608      	mov	r0, r1
        return graph->valueToScreenXQ5(x);
 80045d2:	4611      	mov	r1, r2
 80045d4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80045d8:	4718      	bx	r3

080045da <_ZNK8touchgfx17GraphElementGridY13enclosingAreaEPKNS_17AbstractDataGraphE>:
 80045da:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
    {
        return convertToGraphScaleY(graph, gridInterval, dataScale);
    }

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 80045de:	b530      	push	{r4, r5, lr}
        return leftPadding;
 80045e0:	f9b2 5116 	ldrsh.w	r5, [r2, #278]	; 0x116
        return graphArea.getWidth() - (leftPadding + rightPadding);
 80045e4:	186c      	adds	r4, r5, r1
 80045e6:	f8b2 1040 	ldrh.w	r1, [r2, #64]	; 0x40
        return rect.height;
 80045ea:	f9b2 2042 	ldrsh.w	r2, [r2, #66]	; 0x42
 80045ee:	1b09      	subs	r1, r1, r4
 80045f0:	2400      	movs	r4, #0
 80045f2:	8005      	strh	r5, [r0, #0]
 80045f4:	8044      	strh	r4, [r0, #2]
 80045f6:	8081      	strh	r1, [r0, #4]
 80045f8:	80c2      	strh	r2, [r0, #6]
    {
        return Rect(graph->getGraphAreaPaddingLeft(), 0, graph->getGraphAreaWidth(), graph->getGraphAreaHeightIncludingPadding());
    }
 80045fa:	bd30      	pop	{r4, r5, pc}

080045fc <_ZNK8touchgfx17GraphElementGridY8lineRectEssss>:
 80045fc:	8002      	strh	r2, [r0, #0]
 80045fe:	8083      	strh	r3, [r0, #4]
 8004600:	f9bd 2000 	ldrsh.w	r2, [sp]
 8004604:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8004608:	8042      	strh	r2, [r0, #2]
 800460a:	80c3      	strh	r3, [r0, #6]

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
    {
        return Rect(start, pos, length, width);
    }
 800460c:	4770      	bx	lr

0800460e <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeYMinScaled();
 800460e:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 8004610:	4608      	mov	r0, r1
        return graph->getGraphRangeYMinScaled();
 8004612:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004616:	4718      	bx	r3

08004618 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeYMaxScaled();
 8004618:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 800461a:	4608      	mov	r0, r1
        return graph->getGraphRangeYMaxScaled();
 800461c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004620:	4718      	bx	r3

08004622 <_ZNK8touchgfx17GraphElementGridY17getGraphAreaStartEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingLeft();
    }
 8004622:	f9b1 0116 	ldrsh.w	r0, [r1, #278]	; 0x116
 8004626:	4770      	bx	lr

08004628 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:
 8004628:	f8b1 0116 	ldrh.w	r0, [r1, #278]	; 0x116
 800462c:	f8b1 3118 	ldrh.w	r3, [r1, #280]	; 0x118
 8004630:	4403      	add	r3, r0
 8004632:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
 8004636:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaWidth();
    }
 8004638:	b200      	sxth	r0, r0
 800463a:	4770      	bx	lr

0800463c <_ZNK8touchgfx17GraphElementGridY20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingTop();
    }
 800463c:	f9b1 0114 	ldrsh.w	r0, [r1, #276]	; 0x114
 8004640:	4770      	bx	lr

08004642 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8004642:	f8b1 0114 	ldrh.w	r0, [r1, #276]	; 0x114
 8004646:	f8b1 311a 	ldrh.w	r3, [r1, #282]	; 0x11a
 800464a:	4403      	add	r3, r0
 800464c:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
 8004650:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaHeight();
    }
 8004652:	b200      	sxth	r0, r0
 8004654:	4770      	bx	lr

08004656 <_ZNK8touchgfx17GraphElementGridY15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:
        return graph->valueToScreenYQ5(y);
 8004656:	680b      	ldr	r3, [r1, #0]

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 8004658:	4608      	mov	r0, r1
        return graph->valueToScreenYQ5(y);
 800465a:	4611      	mov	r1, r2
 800465c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004660:	4718      	bx	r3

08004662 <_ZN15Screen3ViewBaseD1Ev>:

class Screen3ViewBase : public touchgfx::View<Screen3Presenter>
{
public:
    Screen3ViewBase();
    virtual ~Screen3ViewBase() {}
 8004662:	4770      	bx	lr

08004664 <_ZN15Screen3ViewBase11setupScreenEv>:
}

void Screen3ViewBase::setupScreen()
{

}
 8004664:	4770      	bx	lr

08004666 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004666:	4770      	bx	lr

08004668 <_ZN8touchgfx17GraphWrapAndClearILs750EED1Ev>:
 * be created as new values are added.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class GraphWrapAndClear : public GraphWrapAndClearData
 8004668:	4770      	bx	lr

0800466a <_ZN8touchgfx17GraphElementGridYD1Ev>:
class GraphElementGridY : public GraphElementGridBase
 800466a:	4770      	bx	lr

0800466c <_ZN8touchgfx17GraphElementGridXD1Ev>:
class GraphElementGridX : public GraphElementGridBase
 800466c:	4770      	bx	lr

0800466e <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800466e:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8004670:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8004672:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8004674:	68c2      	ldr	r2, [r0, #12]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	1055      	asrs	r5, r2, #1
 800467a:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800467e:	07d2      	lsls	r2, r2, #31
 8004680:	bf48      	it	mi
 8004682:	5962      	ldrmi	r2, [r4, r5]
    }
 8004684:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8004686:	bf48      	it	mi
 8004688:	58d3      	ldrmi	r3, [r2, r3]
 800468a:	4718      	bx	r3

0800468c <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
 800468c:	6843      	ldr	r3, [r0, #4]
 800468e:	b12b      	cbz	r3, 800469c <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8004690:	6883      	ldr	r3, [r0, #8]
 8004692:	b92b      	cbnz	r3, 80046a0 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8004694:	68c0      	ldr	r0, [r0, #12]
 8004696:	f000 0001 	and.w	r0, r0, #1
 800469a:	4770      	bx	lr
 800469c:	4618      	mov	r0, r3
 800469e:	4770      	bx	lr
 80046a0:	2001      	movs	r0, #1
    }
 80046a2:	4770      	bx	lr

080046a4 <_ZN8touchgfx17GraphElementGridXD0Ev>:
 80046a4:	b510      	push	{r4, lr}
 80046a6:	4604      	mov	r4, r0
 80046a8:	2144      	movs	r1, #68	; 0x44
 80046aa:	f020 f976 	bl	802499a <_ZdlPvj>
 80046ae:	4620      	mov	r0, r4
 80046b0:	bd10      	pop	{r4, pc}

080046b2 <_ZN8touchgfx17GraphElementGridYD0Ev>:
class GraphElementGridY : public GraphElementGridBase
 80046b2:	b510      	push	{r4, lr}
 80046b4:	4604      	mov	r4, r0
 80046b6:	2144      	movs	r1, #68	; 0x44
 80046b8:	f020 f96f 	bl	802499a <_ZdlPvj>
 80046bc:	4620      	mov	r0, r4
 80046be:	bd10      	pop	{r4, pc}

080046c0 <_ZN8touchgfx17GraphWrapAndClearILs750EED0Ev>:
 80046c0:	b510      	push	{r4, lr}
 80046c2:	4604      	mov	r4, r0
 80046c4:	f640 5104 	movw	r1, #3332	; 0xd04
 80046c8:	f020 f967 	bl	802499a <_ZdlPvj>
 80046cc:	4620      	mov	r0, r4
 80046ce:	bd10      	pop	{r4, pc}

080046d0 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80046d0:	b510      	push	{r4, lr}
 80046d2:	4604      	mov	r4, r0
 80046d4:	2110      	movs	r1, #16
 80046d6:	f020 f960 	bl	802499a <_ZdlPvj>
 80046da:	4620      	mov	r0, r4
 80046dc:	bd10      	pop	{r4, pc}

080046de <_ZN15Screen3ViewBaseD0Ev>:
 80046de:	b510      	push	{r4, lr}
 80046e0:	4604      	mov	r4, r0
 80046e2:	f643 61f8 	movw	r1, #16120	; 0x3ef8
 80046e6:	f020 f958 	bl	802499a <_ZdlPvj>
 80046ea:	4620      	mov	r0, r4
 80046ec:	bd10      	pop	{r4, pc}

080046ee <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
        if (alpha > 0)
 80046ee:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80046f2:	b10b      	cbz	r3, 80046f8 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0xa>
            Container::invalidateContent();
 80046f4:	f008 bf88 	b.w	800d608 <_ZNK8touchgfx9Container17invalidateContentEv>
    }
 80046f8:	4770      	bx	lr

080046fa <_ZNK8touchgfx17GraphElementGridX30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 80046fa:	b513      	push	{r0, r1, r4, lr}
 80046fc:	4603      	mov	r3, r0
 80046fe:	4608      	mov	r0, r1
        return convertToGraphScaleX(graph, gridInterval, dataScale);
 8004700:	e9d3 140d 	ldrd	r1, r4, [r3, #52]	; 0x34
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 8004704:	6803      	ldr	r3, [r0, #0]
        return convertToGraphScaleX(graph, gridInterval, dataScale);
 8004706:	9101      	str	r1, [sp, #4]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 8004708:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800470c:	4798      	blx	r3
 800470e:	9901      	ldr	r1, [sp, #4]
 8004710:	4602      	mov	r2, r0
 8004712:	4620      	mov	r0, r4
    }
 8004714:	b002      	add	sp, #8
 8004716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 800471a:	f00b b8b7 	b.w	800f88c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

0800471e <_ZNK8touchgfx17GraphElementGridY30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 800471e:	b513      	push	{r0, r1, r4, lr}
 8004720:	4603      	mov	r3, r0
 8004722:	4608      	mov	r0, r1
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 8004724:	e9d3 140d 	ldrd	r1, r4, [r3, #52]	; 0x34
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 8004728:	6803      	ldr	r3, [r0, #0]
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 800472a:	9101      	str	r1, [sp, #4]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 800472c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004730:	4798      	blx	r3
 8004732:	9901      	ldr	r1, [sp, #4]
 8004734:	4602      	mov	r2, r0
 8004736:	4620      	mov	r0, r4
    }
 8004738:	b002      	add	sp, #8
 800473a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 800473e:	f00b b8a5 	b.w	800f88c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
	...

08004744 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 8004744:	1e0a      	subs	r2, r1, #0
    virtual int indexToDataPointYScaled(int16_t index) const
 8004746:	b510      	push	{r4, lr}
        assert(index >= 0 && index < usedCapacity);
 8004748:	db03      	blt.n	8004752 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0xe>
 800474a:	f9b0 411e 	ldrsh.w	r4, [r0, #286]	; 0x11e
 800474e:	4294      	cmp	r4, r2
 8004750:	dc06      	bgt.n	8004760 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x1c>
 8004752:	4b08      	ldr	r3, [pc, #32]	; (8004774 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x30>)
 8004754:	f240 6131 	movw	r1, #1585	; 0x631
 8004758:	4a07      	ldr	r2, [pc, #28]	; (8004778 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x34>)
 800475a:	4808      	ldr	r0, [pc, #32]	; (800477c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x38>)
 800475c:	f020 f94c 	bl	80249f8 <__assert_func>
        return yValues[dataIndex(index)];
 8004760:	6803      	ldr	r3, [r0, #0]
 8004762:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
 8004766:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800476a:	4798      	blx	r3
    }
 800476c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8004770:	bd10      	pop	{r4, pc}
 8004772:	bf00      	nop
 8004774:	08026d20 	.word	0x08026d20
 8004778:	08026d43 	.word	0x08026d43
 800477c:	08026d92 	.word	0x08026d92

08004780 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 8004780:	1e0b      	subs	r3, r1, #0
    virtual int indexToDataPointXScaled(int16_t index) const
 8004782:	b510      	push	{r4, lr}
 8004784:	4604      	mov	r4, r0
        assert(index >= 0 && index < usedCapacity);
 8004786:	db03      	blt.n	8004790 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x10>
 8004788:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
 800478c:	429a      	cmp	r2, r3
 800478e:	dc06      	bgt.n	800479e <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x1e>
 8004790:	4b07      	ldr	r3, [pc, #28]	; (80047b0 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x30>)
 8004792:	f240 612b 	movw	r1, #1579	; 0x62b
 8004796:	4a07      	ldr	r2, [pc, #28]	; (80047b4 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x34>)
 8004798:	4807      	ldr	r0, [pc, #28]	; (80047b8 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x38>)
 800479a:	f020 f92d 	bl	80249f8 <__assert_func>
        return (indexToGlobalIndex(index) * xAxisFactor) + xAxisOffset;
 800479e:	6803      	ldr	r3, [r0, #0]
 80047a0:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80047a4:	4798      	blx	r3
 80047a6:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	; 0x13c
    }
 80047aa:	fb02 3000 	mla	r0, r2, r0, r3
 80047ae:	bd10      	pop	{r4, pc}
 80047b0:	08026d20 	.word	0x08026d20
 80047b4:	08026def 	.word	0x08026def
 80047b8:	08026d92 	.word	0x08026d92

080047bc <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen3ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonWithLabel1)
 80047bc:	f600 7094 	addw	r0, r0, #3988	; 0xf94
 80047c0:	4288      	cmp	r0, r1
{
 80047c2:	b508      	push	{r3, lr}
    if (&src == &buttonWithLabel1)
 80047c4:	d105      	bne.n	80047d2 <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80047c6:	f00f fa51 	bl	8013c6c <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When buttonWithLabel1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenSlideTransitionEast();
    }
}
 80047ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenSlideTransitionEast();
 80047ce:	f7fe be55 	b.w	800347c <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>
}
 80047d2:	bd08      	pop	{r3, pc}

080047d4 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 80047d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 80047d6:	ab01      	add	r3, sp, #4
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 80047d8:	4615      	mov	r5, r2
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 80047da:	f010 fba1 	bl	8014f20 <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
 80047de:	2800      	cmp	r0, #0
        return Q5(muldiv(int(factor1), int(factor2), int(divisor)));
 80047e0:	462a      	mov	r2, r5
 80047e2:	9901      	ldr	r1, [sp, #4]
 80047e4:	ea4f 1440 	mov.w	r4, r0, lsl #5
 80047e8:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
 80047ec:	db04      	blt.n	80047f8 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x24>
        return Q5(muldiv(int(factor1), int(factor2), int(divisor)));
 80047ee:	f010 fbb6 	bl	8014f5e <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
 80047f2:	4420      	add	r0, r4
        {
            return toQ5(result) + muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
        }
        return toQ5(result) - muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
    }
 80047f4:	b003      	add	sp, #12
 80047f6:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv(int(factor1), int(factor2), int(divisor)));
 80047f8:	f010 fbb1 	bl	8014f5e <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
 80047fc:	1a20      	subs	r0, r4, r0
 80047fe:	e7f9      	b.n	80047f4 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x20>

08004800 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 8004800:	b570      	push	{r4, r5, r6, lr}
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8004802:	f9b0 4114 	ldrsh.w	r4, [r0, #276]	; 0x114
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 8004806:	460e      	mov	r6, r1
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8004808:	f8b0 511a 	ldrh.w	r5, [r0, #282]	; 0x11a
 800480c:	1963      	adds	r3, r4, r5
 800480e:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
 8004812:	1aed      	subs	r5, r5, r3
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
 8004814:	b22d      	sxth	r5, r5
 8004816:	442c      	add	r4, r5
 8004818:	1e69      	subs	r1, r5, #1
 800481a:	e9d0 324d 	ldrd	r3, r2, [r0, #308]	; 0x134
 800481e:	3c01      	subs	r4, #1
 8004820:	1ad2      	subs	r2, r2, r3
 8004822:	1af0      	subs	r0, r6, r3
 8004824:	f7ff ffd6 	bl	80047d4 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
    }
 8004828:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 800482c:	bd70      	pop	{r4, r5, r6, pc}

0800482e <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
 800482e:	b538      	push	{r3, r4, r5, lr}
 8004830:	4604      	mov	r4, r0
 8004832:	4608      	mov	r0, r1
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8004834:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 8004838:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
 800483c:	440b      	add	r3, r1
 800483e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8004842:	1ac9      	subs	r1, r1, r3
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 8004844:	e9d4 524b 	ldrd	r5, r2, [r4, #300]	; 0x12c
 8004848:	b209      	sxth	r1, r1
 800484a:	1b52      	subs	r2, r2, r5
 800484c:	1b40      	subs	r0, r0, r5
 800484e:	3901      	subs	r1, #1
 8004850:	f7ff ffc0 	bl	80047d4 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
            return Q5(v + q5.v);
 8004854:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
    }
 8004858:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800485c:	bd38      	pop	{r3, r4, r5, pc}
	...

08004860 <_ZN8touchgfx20GraphElementGridBaseC1Ev>:
    GraphElementGridBase()
 8004860:	b510      	push	{r4, lr}
 8004862:	4604      	mov	r4, r0
        : CanvasWidget()
 8004864:	f00a fbb2 	bl	800efcc <_ZN8touchgfx12CanvasWidgetC1Ev>
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8004868:	4a06      	ldr	r2, [pc, #24]	; (8004884 <_ZN8touchgfx20GraphElementGridBaseC1Ev+0x24>)
        : color(col)
 800486a:	2300      	movs	r3, #0
 800486c:	210a      	movs	r1, #10
    }
 800486e:	4620      	mov	r0, r4
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8004870:	6022      	str	r2, [r4, #0]
 8004872:	2201      	movs	r2, #1
 8004874:	6323      	str	r3, [r4, #48]	; 0x30
 8004876:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
 800487a:	6423      	str	r3, [r4, #64]	; 0x40
 800487c:	e9c4 210d 	strd	r2, r1, [r4, #52]	; 0x34
    }
 8004880:	bd10      	pop	{r4, pc}
 8004882:	bf00      	nop
 8004884:	080289e0 	.word	0x080289e0

08004888 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 8004888:	b570      	push	{r4, r5, r6, lr}
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
        : areaOffsetX(0),
          areaOffsetY(0),
          widgetAlpha(255)
 800488a:	2300      	movs	r3, #0
 800488c:	22ff      	movs	r2, #255	; 0xff
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800488e:	4e14      	ldr	r6, [pc, #80]	; (80048e0 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x58>)
 8004890:	4604      	mov	r4, r0
 8004892:	7202      	strb	r2, [r0, #8]
 8004894:	6043      	str	r3, [r0, #4]
        : AbstractPainter(), currentX(0), currentY(0)
 8004896:	4a13      	ldr	r2, [pc, #76]	; (80048e4 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x5c>)
 8004898:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800489c:	6833      	ldr	r3, [r6, #0]
 800489e:	6002      	str	r2, [r0, #0]
 80048a0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80048a4:	b10a      	cbz	r2, 80048aa <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x22>
 80048a6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80048a8:	b900      	cbnz	r0, 80048ac <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x24>
        return instance->lcdRef;
 80048aa:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 80048ac:	6803      	ldr	r3, [r0, #0]
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	4798      	blx	r3
        return auxiliaryLCD;
 80048b2:	6833      	ldr	r3, [r6, #0]
 80048b4:	fab0 f580 	clz	r5, r0
 80048b8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80048ba:	096d      	lsrs	r5, r5, #5
        if (HAL::getInstance()->getAuxiliaryLCD())
 80048bc:	b130      	cbz	r0, 80048cc <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x44>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80048be:	6803      	ldr	r3, [r0, #0]
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	4798      	blx	r3
 80048c4:	2800      	cmp	r0, #0
 80048c6:	bf08      	it	eq
 80048c8:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 80048cc:	b92d      	cbnz	r5, 80048da <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x52>
 80048ce:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x60>)
 80048d0:	212c      	movs	r1, #44	; 0x2c
 80048d2:	4a06      	ldr	r2, [pc, #24]	; (80048ec <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x64>)
 80048d4:	4806      	ldr	r0, [pc, #24]	; (80048f0 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x68>)
 80048d6:	f020 f88f 	bl	80249f8 <__assert_func>
    }
 80048da:	4620      	mov	r0, r4
 80048dc:	bd70      	pop	{r4, r5, r6, pc}
 80048de:	bf00      	nop
 80048e0:	20020fd8 	.word	0x20020fd8
 80048e4:	08028398 	.word	0x08028398
 80048e8:	08026e3e 	.word	0x08026e3e
 80048ec:	08026e9c 	.word	0x08026e9c
 80048f0:	08026ed5 	.word	0x08026ed5

080048f4 <_ZN8touchgfx15GraphLabelsBaseC1Ev>:
 * @see GraphLabelsX, GraphLabelsY
 */
class GraphLabelsBase : public AbstractGraphDecoration
{
public:
    GraphLabelsBase()
 80048f4:	b510      	push	{r4, lr}
 80048f6:	4604      	mov	r4, r0
        : CanvasWidget()
 80048f8:	f00a fb68 	bl	800efcc <_ZN8touchgfx12CanvasWidgetC1Ev>
        : AbstractGraphDecoration(),
          dataScale(1), labelInterval(0), labelTypedText(TypedText(TYPED_TEXT_INVALID)), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 80048fc:	4a0b      	ldr	r2, [pc, #44]	; (800492c <_ZN8touchgfx15GraphLabelsBaseC1Ev+0x38>)
 80048fe:	2300      	movs	r3, #0
    {
    }
 8004900:	4620      	mov	r0, r4
          dataScale(1), labelInterval(0), labelTypedText(TypedText(TYPED_TEXT_INVALID)), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 8004902:	6022      	str	r2, [r4, #0]
 8004904:	2201      	movs	r2, #1
 8004906:	6323      	str	r3, [r4, #48]	; 0x30
 8004908:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800490c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8004910:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004912:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
        : typedTextId(id)
 8004916:	4a06      	ldr	r2, [pc, #24]	; (8004930 <_ZN8touchgfx15GraphLabelsBaseC1Ev+0x3c>)
 8004918:	63e2      	str	r2, [r4, #60]	; 0x3c
 800491a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800491e:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
 8004922:	222e      	movs	r2, #46	; 0x2e
 8004924:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    }
 8004928:	bd10      	pop	{r4, pc}
 800492a:	bf00      	nop
 800492c:	08028c28 	.word	0x08028c28
 8004930:	08026554 	.word	0x08026554

08004934 <_ZN15Screen3ViewBaseC1Ev>:
Screen3ViewBase::Screen3ViewBase() :
 8004934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004938:	4604      	mov	r4, r0
 800493a:	2500      	movs	r5, #0
class GraphElementGridX : public GraphElementGridBase
 800493c:	f8df 8404 	ldr.w	r8, [pc, #1028]	; 8004d44 <_ZN15Screen3ViewBaseC1Ev+0x410>
    buttonCallback(this, &Screen3ViewBase::buttonCallbackHandler)
 8004940:	46a2      	mov	sl, r4
 8004942:	f104 0698 	add.w	r6, r4, #152	; 0x98
 8004946:	f604 5be4 	addw	fp, r4, #3556	; 0xde4
class GraphElementGridY : public GraphElementGridBase
 800494a:	4fee      	ldr	r7, [pc, #952]	; (8004d04 <_ZN15Screen3ViewBaseC1Ev+0x3d0>)
 800494c:	f604 7994 	addw	r9, r4, #3988	; 0xf94
Screen3ViewBase::Screen3ViewBase() :
 8004950:	ed2d 8b08 	vpush	{d8-d11}
 8004954:	b087      	sub	sp, #28
 8004956:	f010 fcad 	bl	80152b4 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen3ViewBase::buttonCallbackHandler)
 800495a:	4beb      	ldr	r3, [pc, #940]	; (8004d08 <_ZN15Screen3ViewBaseC1Ev+0x3d4>)
 800495c:	63e5      	str	r5, [r4, #60]	; 0x3c
 800495e:	f84a 3b40 	str.w	r3, [sl], #64
 8004962:	4650      	mov	r0, sl
 8004964:	f7ff f81c 	bl	80039a0 <_ZN8touchgfx3BoxC1Ev>
 8004968:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800496c:	4618      	mov	r0, r3
 800496e:	ee08 3a10 	vmov	s16, r3
 8004972:	f7ff f815 	bl	80039a0 <_ZN8touchgfx3BoxC1Ev>
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8004976:	f240 21ee 	movw	r1, #750	; 0x2ee
 800497a:	4630      	mov	r0, r6
 800497c:	f00a ff14 	bl	800f7a8 <_ZN8touchgfx17AbstractDataGraphC1Es>
 8004980:	4be2      	ldr	r3, [pc, #904]	; (8004d0c <_ZN15Screen3ViewBaseC1Ev+0x3d8>)
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 8004982:	f240 22ed 	movw	r2, #749	; 0x2ed
 8004986:	4629      	mov	r1, r5
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8004988:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800498c:	2301      	movs	r3, #1
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 800498e:	4630      	mov	r0, r6
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8004990:	e9c4 3575 	strd	r3, r5, [r4, #468]	; 0x1d4
{
public:
    GraphWrapAndClear()
        : GraphWrapAndClearData(CAPACITY, yValues)
 8004994:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 8004998:	e9c4 3577 	strd	r3, r5, [r4, #476]	; 0x1dc
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 800499c:	f7ff faa7 	bl	8003eee <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
 80049a0:	4bdb      	ldr	r3, [pc, #876]	; (8004d10 <_ZN15Screen3ViewBaseC1Ev+0x3dc>)
 80049a2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 80049a6:	f604 539c 	addw	r3, r4, #3484	; 0xd9c
        : CanvasWidget()
 80049aa:	4618      	mov	r0, r3
 80049ac:	ee08 3a90 	vmov	s17, r3
 80049b0:	f00a fb0c 	bl	800efcc <_ZN8touchgfx12CanvasWidgetC1Ev>
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
        : lineWidth(2)
 80049b4:	4bd7      	ldr	r3, [pc, #860]	; (8004d14 <_ZN15Screen3ViewBaseC1Ev+0x3e0>)
 80049b6:	f8c4 3d9c 	str.w	r3, [r4, #3484]	; 0xd9c
 80049ba:	f04f 0302 	mov.w	r3, #2
 80049be:	f884 3dca 	strb.w	r3, [r4, #3530]	; 0xdca
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
        : AbstractPainterRGB565(), painterColor(0)
 80049c2:	f604 53cc 	addw	r3, r4, #3532	; 0xdcc
 80049c6:	4618      	mov	r0, r3
 80049c8:	ee0b 3a90 	vmov	s23, r3
 80049cc:	f7ff ff5c 	bl	8004888 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 80049d0:	4bd1      	ldr	r3, [pc, #836]	; (8004d18 <_ZN15Screen3ViewBaseC1Ev+0x3e4>)
class GraphElementGridX : public GraphElementGridBase
 80049d2:	4658      	mov	r0, fp
     *
     * @param  color The color.
     */
    void setColor(colortype color)
    {
        painterColor = color;
 80049d4:	f8c4 5de0 	str.w	r5, [r4, #3552]	; 0xde0
        : AbstractPainterRGB565(), painterColor(0)
 80049d8:	f8c4 3dcc 	str.w	r3, [r4, #3532]	; 0xdcc
 80049dc:	f7ff ff40 	bl	8004860 <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 80049e0:	f604 6328 	addw	r3, r4, #3624	; 0xe28
 80049e4:	f8c4 8de4 	str.w	r8, [r4, #3556]	; 0xde4
class GraphElementGridY : public GraphElementGridBase
 80049e8:	4618      	mov	r0, r3
 80049ea:	ee0a 3a10 	vmov	s20, r3
 80049ee:	f7ff ff37 	bl	8004860 <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 80049f2:	f604 636c 	addw	r3, r4, #3692	; 0xe6c
 80049f6:	f8c4 7e28 	str.w	r7, [r4, #3624]	; 0xe28
class GraphElementGridX : public GraphElementGridBase
 80049fa:	4618      	mov	r0, r3
 80049fc:	ee09 3a10 	vmov	s18, r3
 8004a00:	f7ff ff2e 	bl	8004860 <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 8004a04:	f504 636b 	add.w	r3, r4, #3760	; 0xeb0
 8004a08:	f8c4 8e6c 	str.w	r8, [r4, #3692]	; 0xe6c
 8004a0c:	f604 78dc 	addw	r8, r4, #4060	; 0xfdc
class GraphElementGridY : public GraphElementGridBase
 8004a10:	4618      	mov	r0, r3
 8004a12:	ee09 3a90 	vmov	s19, r3
 8004a16:	f7ff ff23 	bl	8004860 <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 8004a1a:	f604 63f4 	addw	r3, r4, #3828	; 0xef4
 8004a1e:	f8c4 7eb0 	str.w	r7, [r4, #3760]	; 0xeb0
    __background.setPosition(0, 0, 800, 480);
 8004a22:	f44f 77f0 	mov.w	r7, #480	; 0x1e0

/**
 * GraphLabelsX will draw labels along the X axis at given intervals. By combining two
 * GraphLabelsX it is possible to have different appearance for major and minor y offsets.
 */
class GraphLabelsX : public GraphLabelsBase
 8004a26:	4618      	mov	r0, r3
    buttonCallback(this, &Screen3ViewBase::buttonCallbackHandler)
 8004a28:	ee0a 3a90 	vmov	s21, r3
 8004a2c:	f7ff ff62 	bl	80048f4 <_ZN8touchgfx15GraphLabelsBaseC1Ev>
 8004a30:	4bba      	ldr	r3, [pc, #744]	; (8004d1c <_ZN15Screen3ViewBaseC1Ev+0x3e8>)
 8004a32:	f8c4 3ef4 	str.w	r3, [r4, #3828]	; 0xef4
 8004a36:	f604 7344 	addw	r3, r4, #3908	; 0xf44

/**
 * GraphLabelsY will draw labels along the Y axis at given intervals. By combining two
 * GraphLabelsY it is possible to have different appearance for major and minor y offsets.
 */
class GraphLabelsY : public GraphLabelsBase
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	ee0b 3a10 	vmov	s22, r3
 8004a40:	f7ff ff58 	bl	80048f4 <_ZN8touchgfx15GraphLabelsBaseC1Ev>
 8004a44:	4bb6      	ldr	r3, [pc, #728]	; (8004d20 <_ZN15Screen3ViewBaseC1Ev+0x3ec>)
 8004a46:	4648      	mov	r0, r9
 8004a48:	f8c4 3f44 	str.w	r3, [r4, #3908]	; 0xf44
 8004a4c:	f00d fb80 	bl	8012150 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004a50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a54:	a905      	add	r1, sp, #20
 8004a56:	4640      	mov	r0, r8
 8004a58:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004a5c:	f00c fa7e 	bl	8010f5c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8004a60:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8004a64:	4aaf      	ldr	r2, [pc, #700]	; (8004d24 <_ZN15Screen3ViewBaseC1Ev+0x3f0>)
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8004a66:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	e9c3 2402 	strd	r2, r4, [r3, #8]
 8004a70:	4aad      	ldr	r2, [pc, #692]	; (8004d28 <_ZN15Screen3ViewBaseC1Ev+0x3f4>)
 8004a72:	3018      	adds	r0, #24
 8004a74:	e9c3 2504 	strd	r2, r5, [r3, #16]
 8004a78:	f00d fb98 	bl	80121ac <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    __background.setPosition(0, 0, 800, 480);
 8004a7c:	462a      	mov	r2, r5
 8004a7e:	4629      	mov	r1, r5
 8004a80:	4650      	mov	r0, sl
 8004a82:	9700      	str	r7, [sp, #0]
 8004a84:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004a88:	f7fe ff77 	bl	800397a <_ZN8touchgfx8Drawable11setPositionEssss>
 8004a8c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    box1.setPosition(0, 0, 800, 480);
 8004a90:	462a      	mov	r2, r5
 8004a92:	4629      	mov	r1, r5
 8004a94:	ee18 0a10 	vmov	r0, s16
 8004a98:	66a3      	str	r3, [r4, #104]	; 0x68
 8004a9a:	9700      	str	r7, [sp, #0]
 8004a9c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004aa0:	f7fe ff6b 	bl	800397a <_ZN8touchgfx8Drawable11setPositionEssss>
 8004aa4:	f04f 33ff 	mov.w	r3, #4294967295
    dynamicGraph1.setScale(10000);
 8004aa8:	462a      	mov	r2, r5
 8004aaa:	4630      	mov	r0, r6
 8004aac:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8004ab0:	f242 7110 	movw	r1, #10000	; 0x2710
 8004ab4:	f7ff fbcf 	bl	8004256 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>
    dynamicGraph1.setGraphRangeX(0, 749);
 8004ab8:	f240 22ed 	movw	r2, #749	; 0x2ed
 8004abc:	4629      	mov	r1, r5
 8004abe:	4630      	mov	r0, r6
 8004ac0:	f7ff fa15 	bl	8003eee <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
    dynamicGraph1.setXAxisFactor(0.0028f);
 8004ac4:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8004d2c <_ZN15Screen3ViewBaseC1Ev+0x3f8>
 8004ac8:	4630      	mov	r0, r6
 8004aca:	f7ff fc11 	bl	80042f0 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf>
    dynamicGraph1.setXAxisOffset(0);
 8004ace:	4629      	mov	r1, r5
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	f7ff fc74 	bl	80043be <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>
    dynamicGraph1.setPosition(0, 0, 800, 480);
 8004ad6:	462a      	mov	r2, r5
 8004ad8:	4629      	mov	r1, r5
 8004ada:	4630      	mov	r0, r6
 8004adc:	9700      	str	r7, [sp, #0]
 8004ade:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004ae2:	f7fe ff4a 	bl	800397a <_ZN8touchgfx8Drawable11setPositionEssss>
    dynamicGraph1.setGraphAreaMargin(10, 50, 0, 120);
 8004ae6:	2378      	movs	r3, #120	; 0x78
 8004ae8:	4630      	mov	r0, r6
 8004aea:	2232      	movs	r2, #50	; 0x32
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	210a      	movs	r1, #10
 8004af0:	462b      	mov	r3, r5
        dataScale = scale;
 8004af2:	f242 7710 	movw	r7, #10000	; 0x2710
 8004af6:	f00a fe09 	bl	800f70c <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph1.setGraphAreaPadding(0, 0, 0, 0);
 8004afa:	462b      	mov	r3, r5
 8004afc:	462a      	mov	r2, r5
 8004afe:	4629      	mov	r1, r5
 8004b00:	4630      	mov	r0, r6
 8004b02:	9500      	str	r5, [sp, #0]
 8004b04:	f00a fd05 	bl	800f512 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph1.setGraphRangeY(0, 350);
 8004b08:	4629      	mov	r1, r5
 8004b0a:	4630      	mov	r0, r6
 8004b0c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8004b10:	f7ff fa79 	bl	8004006 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8004b14:	f242 7210 	movw	r2, #10000	; 0x2710
 8004b18:	f8d4 1e18 	ldr.w	r1, [r4, #3608]	; 0xe18
 8004b1c:	f8d4 0e1c 	ldr.w	r0, [r4, #3612]	; 0xe1c
 8004b20:	f00a feb4 	bl	800f88c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
        color = newColor;
 8004b24:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    dynamicGraph1.addGraphElement(dynamicGraph1MinorXAxisGrid);
 8004b28:	4659      	mov	r1, fp
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	f8c4 3e14 	str.w	r3, [r4, #3604]	; 0xe14
        gridInterval = abs(interval);
 8004b30:	4b7f      	ldr	r3, [pc, #508]	; (8004d30 <_ZN15Screen3ViewBaseC1Ev+0x3fc>)
        dataScale = scale;
 8004b32:	f8c4 7e18 	str.w	r7, [r4, #3608]	; 0xe18
        gridInterval = abs(interval);
 8004b36:	f8c4 3e1c 	str.w	r3, [r4, #3612]	; 0xe1c
        lineWidth = width;
 8004b3a:	f04f 0301 	mov.w	r3, #1
        gridInterval = abs(interval);
 8004b3e:	f8df b208 	ldr.w	fp, [pc, #520]	; 8004d48 <_ZN15Screen3ViewBaseC1Ev+0x414>
        lineWidth = width;
 8004b42:	f884 3e20 	strb.w	r3, [r4, #3616]	; 0xe20
        majorGrid = &major;
 8004b46:	ee19 3a10 	vmov	r3, s18
 8004b4a:	f8c4 3e24 	str.w	r3, [r4, #3620]	; 0xe24
 8004b4e:	f00a fceb 	bl	800f528 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8004b52:	463a      	mov	r2, r7
 8004b54:	f8d4 1e5c 	ldr.w	r1, [r4, #3676]	; 0xe5c
 8004b58:	f8d4 0e60 	ldr.w	r0, [r4, #3680]	; 0xe60
 8004b5c:	f00a fe96 	bl	800f88c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
        gridInterval = abs(interval);
 8004b60:	4b74      	ldr	r3, [pc, #464]	; (8004d34 <_ZN15Screen3ViewBaseC1Ev+0x400>)
        color = newColor;
 8004b62:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    dynamicGraph1.addGraphElement(dynamicGraph1MinorYAxisGrid);
 8004b66:	4630      	mov	r0, r6
        gridInterval = abs(interval);
 8004b68:	f8c4 3e60 	str.w	r3, [r4, #3680]	; 0xe60
        lineWidth = width;
 8004b6c:	f04f 0301 	mov.w	r3, #1
        dataScale = scale;
 8004b70:	f8c4 7e5c 	str.w	r7, [r4, #3676]	; 0xe5c
        lineWidth = width;
 8004b74:	f884 3e64 	strb.w	r3, [r4, #3684]	; 0xe64
        majorGrid = &major;
 8004b78:	ee19 3a90 	vmov	r3, s19
        color = newColor;
 8004b7c:	f8c4 1e58 	str.w	r1, [r4, #3672]	; 0xe58
 8004b80:	ee1a 1a10 	vmov	r1, s20
        majorGrid = &major;
 8004b84:	f8c4 3e68 	str.w	r3, [r4, #3688]	; 0xe68
 8004b88:	f00a fcce 	bl	800f528 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8004b8c:	463a      	mov	r2, r7
 8004b8e:	f8d4 1ea0 	ldr.w	r1, [r4, #3744]	; 0xea0
 8004b92:	f8d4 0ea4 	ldr.w	r0, [r4, #3748]	; 0xea4
 8004b96:	f00a fe79 	bl	800f88c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
        lineWidth = width;
 8004b9a:	f04f 0202 	mov.w	r2, #2
        color = newColor;
 8004b9e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    dynamicGraph1.addGraphElement(dynamicGraph1MajorXAxisGrid);
 8004ba2:	4630      	mov	r0, r6
        dataScale = scale;
 8004ba4:	f8c4 7ea0 	str.w	r7, [r4, #3744]	; 0xea0
        color = newColor;
 8004ba8:	f8c4 1e9c 	str.w	r1, [r4, #3740]	; 0xe9c
 8004bac:	ee19 1a10 	vmov	r1, s18
        lineWidth = width;
 8004bb0:	f884 2ea8 	strb.w	r2, [r4, #3752]	; 0xea8
        gridInterval = abs(interval);
 8004bb4:	f8c4 bea4 	str.w	fp, [r4, #3748]	; 0xea4
 8004bb8:	f00a fcb6 	bl	800f528 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8004bbc:	463a      	mov	r2, r7
 8004bbe:	f8d4 1ee4 	ldr.w	r1, [r4, #3812]	; 0xee4
 8004bc2:	f8d4 0ee8 	ldr.w	r0, [r4, #3816]	; 0xee8
 8004bc6:	f00a fe61 	bl	800f88c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
        color = newColor;
 8004bca:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        lineWidth = width;
 8004bce:	f04f 0301 	mov.w	r3, #1
    dynamicGraph1.addGraphElement(dynamicGraph1MajorYAxisGrid);
 8004bd2:	ee19 1a90 	vmov	r1, s19
        color = newColor;
 8004bd6:	f8c4 2ee0 	str.w	r2, [r4, #3808]	; 0xee0
 8004bda:	4630      	mov	r0, r6
        gridInterval = abs(interval);
 8004bdc:	4a56      	ldr	r2, [pc, #344]	; (8004d38 <_ZN15Screen3ViewBaseC1Ev+0x404>)
        lineWidth = width;
 8004bde:	f884 3eec 	strb.w	r3, [r4, #3820]	; 0xeec
        dataScale = scale;
 8004be2:	f8c4 7ee4 	str.w	r7, [r4, #3812]	; 0xee4
        gridInterval = abs(interval);
 8004be6:	f8c4 2ee8 	str.w	r2, [r4, #3816]	; 0xee8
 8004bea:	f00a fc9d 	bl	800f528 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8004bee:	463a      	mov	r2, r7
 8004bf0:	f8d4 1f28 	ldr.w	r1, [r4, #3880]	; 0xf28
 8004bf4:	f8d4 0f2c 	ldr.w	r0, [r4, #3884]	; 0xf2c
 8004bf8:	f00a fe48 	bl	800f88c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
class TypedText
 8004bfc:	f04f 0302 	mov.w	r3, #2
    dynamicGraph1.addBottomElement(dynamicGraph1MajorXAxisLabel);
 8004c00:	ee1a 1a90 	vmov	r1, s21
 8004c04:	4630      	mov	r0, r6
 8004c06:	f8a4 3f34 	strh.w	r3, [r4, #3892]	; 0xf34
        color = newColor;
 8004c0a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
        dataScale = scale;
 8004c0e:	f8c4 7f28 	str.w	r7, [r4, #3880]	; 0xf28
 8004c12:	f8c4 3f24 	str.w	r3, [r4, #3876]	; 0xf24
        labelInterval = abs(interval);
 8004c16:	f8c4 bf2c 	str.w	fp, [r4, #3884]	; 0xf2c
 8004c1a:	f00a fca9 	bl	800f570 <_ZN8touchgfx17AbstractDataGraph16addBottomElementERNS_23AbstractGraphDecorationE>
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8004c1e:	463a      	mov	r2, r7
 8004c20:	f8d4 1f78 	ldr.w	r1, [r4, #3960]	; 0xf78
 8004c24:	f8d4 0f7c 	ldr.w	r0, [r4, #3964]	; 0xf7c
 8004c28:	f00a fe30 	bl	800f88c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
        labelInterval = abs(interval);
 8004c2c:	4b41      	ldr	r3, [pc, #260]	; (8004d34 <_ZN15Screen3ViewBaseC1Ev+0x400>)
        dataScale = scale;
 8004c2e:	f8c4 7f78 	str.w	r7, [r4, #3960]	; 0xf78
 8004c32:	f04f 0701 	mov.w	r7, #1
        labelInterval = abs(interval);
 8004c36:	f8c4 3f7c 	str.w	r3, [r4, #3964]	; 0xf7c
    dynamicGraph1.addLeftElement(dynamicGraph1MajorYAxisLabel);
 8004c3a:	ee1b 1a10 	vmov	r1, s22
 8004c3e:	4b3f      	ldr	r3, [pc, #252]	; (8004d3c <_ZN15Screen3ViewBaseC1Ev+0x408>)
 8004c40:	4630      	mov	r0, r6
 8004c42:	f8a4 7f84 	strh.w	r7, [r4, #3972]	; 0xf84
 8004c46:	f8c4 3f74 	str.w	r3, [r4, #3956]	; 0xf74
 8004c4a:	f00a fc7f 	bl	800f54c <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>
        painterColor = color;
 8004c4e:	4b3c      	ldr	r3, [pc, #240]	; (8004d40 <_ZN15Screen3ViewBaseC1Ev+0x40c>)
    dynamicGraph1Line1.setPainter(dynamicGraph1Line1Painter);
 8004c50:	ee1b 1a90 	vmov	r1, s23
 8004c54:	ee18 0a90 	vmov	r0, s17
 8004c58:	f8c4 3de0 	str.w	r3, [r4, #3552]	; 0xde0
 8004c5c:	f00a f8b2 	bl	800edc4 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
 8004c60:	f04f 0302 	mov.w	r3, #2
    dynamicGraph1.addGraphElement(dynamicGraph1Line1);
 8004c64:	ee18 1a90 	vmov	r1, s17
 8004c68:	4630      	mov	r0, r6
 8004c6a:	f884 3dca 	strb.w	r3, [r4, #3530]	; 0xdca
 8004c6e:	f00a fc5b 	bl	800f528 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
    buttonWithLabel1.setXY(45, 406);
 8004c72:	4648      	mov	r0, r9
 8004c74:	f44f 72cb 	mov.w	r2, #406	; 0x196
 8004c78:	212d      	movs	r1, #45	; 0x2d
 8004c7a:	f7fe fe71 	bl	8003960 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8004c7e:	aa05      	add	r2, sp, #20
 8004c80:	a904      	add	r1, sp, #16
 8004c82:	4648      	mov	r0, r9
 8004c84:	f8ad 5010 	strh.w	r5, [sp, #16]
 8004c88:	f8ad 7014 	strh.w	r7, [sp, #20]
 8004c8c:	f00d f845 	bl	8011d1a <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8004c90:	4648      	mov	r0, r9
 8004c92:	f8a4 5fcc 	strh.w	r5, [r4, #4044]	; 0xfcc
 8004c96:	f7fe fe99 	bl	80039cc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
        color = col;
 8004c9a:	f04f 33ff 	mov.w	r3, #4294967295
    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_VERSAOHORIZONTAL1_ID));
 8004c9e:	a905      	add	r1, sp, #20
 8004ca0:	4640      	mov	r0, r8
 8004ca2:	f8c4 3fd0 	str.w	r3, [r4, #4048]	; 0xfd0
        colorPressed = col;
 8004ca6:	f8c4 3fd4 	str.w	r3, [r4, #4052]	; 0xfd4
    buttonWithLabel1.setAction(buttonCallback);
 8004caa:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8004cae:	3308      	adds	r3, #8
 8004cb0:	f8c4 3fbc 	str.w	r3, [r4, #4028]	; 0xfbc
 8004cb4:	2305      	movs	r3, #5
 8004cb6:	f8ad 3014 	strh.w	r3, [sp, #20]
    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_VERSAOHORIZONTAL1_ID));
 8004cba:	f00d f90a 	bl	8011ed2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage1.setPosition(265, 365, 525, 115);
 8004cbe:	2373      	movs	r3, #115	; 0x73
 8004cc0:	f240 126d 	movw	r2, #365	; 0x16d
 8004cc4:	4640      	mov	r0, r8
 8004cc6:	f240 1109 	movw	r1, #265	; 0x109
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	f240 230d 	movw	r3, #525	; 0x20d
 8004cd0:	f7fe fe53 	bl	800397a <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	4640      	mov	r0, r8
 8004cd8:	f00c f907 	bl	8010eea <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8004cdc:	1d20      	adds	r0, r4, #4
 8004cde:	4651      	mov	r1, sl
 8004ce0:	9003      	str	r0, [sp, #12]
 8004ce2:	f008 fcd5 	bl	800d690 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004ce6:	ee18 1a10 	vmov	r1, s16
 8004cea:	9803      	ldr	r0, [sp, #12]
 8004cec:	f008 fcd0 	bl	800d690 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004cf0:	4631      	mov	r1, r6
 8004cf2:	9803      	ldr	r0, [sp, #12]
 8004cf4:	f008 fccc 	bl	800d690 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004cf8:	4649      	mov	r1, r9
 8004cfa:	9803      	ldr	r0, [sp, #12]
 8004cfc:	f008 fcc8 	bl	800d690 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004d00:	e024      	b.n	8004d4c <_ZN15Screen3ViewBaseC1Ev+0x418>
 8004d02:	bf00      	nop
 8004d04:	08026ffc 	.word	0x08026ffc
 8004d08:	08027268 	.word	0x08027268
 8004d0c:	0802854c 	.word	0x0802854c
 8004d10:	080270b8 	.word	0x080270b8
 8004d14:	0802895c 	.word	0x0802895c
 8004d18:	08028378 	.word	0x08028378
 8004d1c:	08028ae0 	.word	0x08028ae0
 8004d20:	08028b84 	.word	0x08028b84
 8004d24:	08027250 	.word	0x08027250
 8004d28:	080047bd 	.word	0x080047bd
 8004d2c:	3b378034 	.word	0x3b378034
 8004d30:	001b7740 	.word	0x001b7740
 8004d34:	000aae60 	.word	0x000aae60
 8004d38:	00200b20 	.word	0x00200b20
 8004d3c:	ff1497c5 	.word	0xff1497c5
 8004d40:	ffff0022 	.word	0xffff0022
 8004d44:	08026f40 	.word	0x08026f40
 8004d48:	0036ee80 	.word	0x0036ee80
 8004d4c:	9803      	ldr	r0, [sp, #12]
 8004d4e:	4641      	mov	r1, r8
 8004d50:	f008 fc9e 	bl	800d690 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8004d54:	4620      	mov	r0, r4
 8004d56:	b007      	add	sp, #28
 8004d58:	ecbd 8b08 	vpop	{d8-d11}
 8004d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004d60 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004d60:	4770      	bx	lr
	...

08004d64 <_Z23getFont_verdana_10_4bppv>:
{
 8004d64:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004d66:	4d15      	ldr	r5, [pc, #84]	; (8004dbc <_Z23getFont_verdana_10_4bppv+0x58>)
{
 8004d68:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004d6a:	782c      	ldrb	r4, [r5, #0]
 8004d6c:	f3bf 8f5b 	dmb	ish
 8004d70:	f014 0401 	ands.w	r4, r4, #1
 8004d74:	d11e      	bne.n	8004db4 <_Z23getFont_verdana_10_4bppv+0x50>
 8004d76:	4628      	mov	r0, r5
 8004d78:	f01f fe11 	bl	802499e <__cxa_guard_acquire>
 8004d7c:	b1d0      	cbz	r0, 8004db4 <_Z23getFont_verdana_10_4bppv+0x50>
 8004d7e:	233f      	movs	r3, #63	; 0x3f
 8004d80:	2201      	movs	r2, #1
 8004d82:	490f      	ldr	r1, [pc, #60]	; (8004dc0 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8004d84:	9307      	str	r3, [sp, #28]
 8004d86:	4b0f      	ldr	r3, [pc, #60]	; (8004dc4 <_Z23getFont_verdana_10_4bppv+0x60>)
 8004d88:	480f      	ldr	r0, [pc, #60]	; (8004dc8 <_Z23getFont_verdana_10_4bppv+0x64>)
 8004d8a:	9306      	str	r3, [sp, #24]
 8004d8c:	4b0f      	ldr	r3, [pc, #60]	; (8004dcc <_Z23getFont_verdana_10_4bppv+0x68>)
 8004d8e:	9408      	str	r4, [sp, #32]
 8004d90:	9403      	str	r4, [sp, #12]
 8004d92:	9400      	str	r4, [sp, #0]
 8004d94:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8004d98:	2304      	movs	r3, #4
 8004d9a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8004d9e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004da2:	230a      	movs	r3, #10
 8004da4:	f7fe fd40 	bl	8003828 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004da8:	4809      	ldr	r0, [pc, #36]	; (8004dd0 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8004daa:	f01f fe43 	bl	8024a34 <atexit>
 8004dae:	4628      	mov	r0, r5
 8004db0:	f01f fe01 	bl	80249b6 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8004db4:	4804      	ldr	r0, [pc, #16]	; (8004dc8 <_Z23getFont_verdana_10_4bppv+0x64>)
 8004db6:	b00d      	add	sp, #52	; 0x34
 8004db8:	bd30      	pop	{r4, r5, pc}
 8004dba:	bf00      	nop
 8004dbc:	2000dbd8 	.word	0x2000dbd8
 8004dc0:	910e960c 	.word	0x910e960c
 8004dc4:	0802ac74 	.word	0x0802ac74
 8004dc8:	2000dbdc 	.word	0x2000dbdc
 8004dcc:	0802ac80 	.word	0x0802ac80
 8004dd0:	08004d61 	.word	0x08004d61

08004dd4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_20_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_20_4bpp()
{
    static touchgfx::GeneratedFont verdanab_20_4bpp(glyphs_verdanab_20_4bpp, 30, 20, 4, 4, 1, 0, 0, unicodes_verdanab_20_4bpp, kerning_verdanab_20_4bpp, 63, 0, 0, 0);
 8004dd4:	4770      	bx	lr
	...

08004dd8 <_Z24getFont_verdanab_20_4bppv>:
{
 8004dd8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdanab_20_4bpp(glyphs_verdanab_20_4bpp, 30, 20, 4, 4, 1, 0, 0, unicodes_verdanab_20_4bpp, kerning_verdanab_20_4bpp, 63, 0, 0, 0);
 8004dda:	4d15      	ldr	r5, [pc, #84]	; (8004e30 <_Z24getFont_verdanab_20_4bppv+0x58>)
{
 8004ddc:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdanab_20_4bpp(glyphs_verdanab_20_4bpp, 30, 20, 4, 4, 1, 0, 0, unicodes_verdanab_20_4bpp, kerning_verdanab_20_4bpp, 63, 0, 0, 0);
 8004dde:	782c      	ldrb	r4, [r5, #0]
 8004de0:	f3bf 8f5b 	dmb	ish
 8004de4:	f014 0401 	ands.w	r4, r4, #1
 8004de8:	d11f      	bne.n	8004e2a <_Z24getFont_verdanab_20_4bppv+0x52>
 8004dea:	4628      	mov	r0, r5
 8004dec:	f01f fdd7 	bl	802499e <__cxa_guard_acquire>
 8004df0:	b1d8      	cbz	r0, 8004e2a <_Z24getFont_verdanab_20_4bppv+0x52>
 8004df2:	233f      	movs	r3, #63	; 0x3f
 8004df4:	2201      	movs	r2, #1
 8004df6:	490f      	ldr	r1, [pc, #60]	; (8004e34 <_Z24getFont_verdanab_20_4bppv+0x5c>)
 8004df8:	9307      	str	r3, [sp, #28]
 8004dfa:	4b0f      	ldr	r3, [pc, #60]	; (8004e38 <_Z24getFont_verdanab_20_4bppv+0x60>)
 8004dfc:	480f      	ldr	r0, [pc, #60]	; (8004e3c <_Z24getFont_verdanab_20_4bppv+0x64>)
 8004dfe:	9306      	str	r3, [sp, #24]
 8004e00:	4b0f      	ldr	r3, [pc, #60]	; (8004e40 <_Z24getFont_verdanab_20_4bppv+0x68>)
 8004e02:	9408      	str	r4, [sp, #32]
 8004e04:	9403      	str	r4, [sp, #12]
 8004e06:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8004e0a:	2304      	movs	r3, #4
 8004e0c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8004e10:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	221e      	movs	r2, #30
 8004e18:	2314      	movs	r3, #20
 8004e1a:	f7fe fd05 	bl	8003828 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004e1e:	4809      	ldr	r0, [pc, #36]	; (8004e44 <_Z24getFont_verdanab_20_4bppv+0x6c>)
 8004e20:	f01f fe08 	bl	8024a34 <atexit>
 8004e24:	4628      	mov	r0, r5
 8004e26:	f01f fdc6 	bl	80249b6 <__cxa_guard_release>
    return verdanab_20_4bpp;
}
 8004e2a:	4804      	ldr	r0, [pc, #16]	; (8004e3c <_Z24getFont_verdanab_20_4bppv+0x64>)
 8004e2c:	b00d      	add	sp, #52	; 0x34
 8004e2e:	bd30      	pop	{r4, r5, pc}
 8004e30:	2000dc04 	.word	0x2000dc04
 8004e34:	910e961c 	.word	0x910e961c
 8004e38:	0802ac78 	.word	0x0802ac78
 8004e3c:	2000dc08 	.word	0x2000dc08
 8004e40:	0802ac84 	.word	0x0802ac84
 8004e44:	08004dd5 	.word	0x08004dd5

08004e48 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_40_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_40_4bpp()
{
    static touchgfx::GeneratedFont verdanab_40_4bpp(glyphs_verdanab_40_4bpp, 16, 40, 8, 4, 1, 0, 0, unicodes_verdanab_40_4bpp, kerning_verdanab_40_4bpp, 63, 0, 0, 0);
 8004e48:	4770      	bx	lr
	...

08004e4c <_Z24getFont_verdanab_40_4bppv>:
{
 8004e4c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdanab_40_4bpp(glyphs_verdanab_40_4bpp, 16, 40, 8, 4, 1, 0, 0, unicodes_verdanab_40_4bpp, kerning_verdanab_40_4bpp, 63, 0, 0, 0);
 8004e4e:	4d16      	ldr	r5, [pc, #88]	; (8004ea8 <_Z24getFont_verdanab_40_4bppv+0x5c>)
{
 8004e50:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdanab_40_4bpp(glyphs_verdanab_40_4bpp, 16, 40, 8, 4, 1, 0, 0, unicodes_verdanab_40_4bpp, kerning_verdanab_40_4bpp, 63, 0, 0, 0);
 8004e52:	782c      	ldrb	r4, [r5, #0]
 8004e54:	f3bf 8f5b 	dmb	ish
 8004e58:	f014 0401 	ands.w	r4, r4, #1
 8004e5c:	d120      	bne.n	8004ea0 <_Z24getFont_verdanab_40_4bppv+0x54>
 8004e5e:	4628      	mov	r0, r5
 8004e60:	f01f fd9d 	bl	802499e <__cxa_guard_acquire>
 8004e64:	b1e0      	cbz	r0, 8004ea0 <_Z24getFont_verdanab_40_4bppv+0x54>
 8004e66:	233f      	movs	r3, #63	; 0x3f
 8004e68:	2201      	movs	r2, #1
 8004e6a:	4910      	ldr	r1, [pc, #64]	; (8004eac <_Z24getFont_verdanab_40_4bppv+0x60>)
 8004e6c:	9307      	str	r3, [sp, #28]
 8004e6e:	4b10      	ldr	r3, [pc, #64]	; (8004eb0 <_Z24getFont_verdanab_40_4bppv+0x64>)
 8004e70:	4810      	ldr	r0, [pc, #64]	; (8004eb4 <_Z24getFont_verdanab_40_4bppv+0x68>)
 8004e72:	9306      	str	r3, [sp, #24]
 8004e74:	4b10      	ldr	r3, [pc, #64]	; (8004eb8 <_Z24getFont_verdanab_40_4bppv+0x6c>)
 8004e76:	9408      	str	r4, [sp, #32]
 8004e78:	9403      	str	r4, [sp, #12]
 8004e7a:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8004e7e:	2304      	movs	r3, #4
 8004e80:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004e84:	2308      	movs	r3, #8
 8004e86:	2210      	movs	r2, #16
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	2328      	movs	r3, #40	; 0x28
 8004e8c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8004e90:	f7fe fcca 	bl	8003828 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004e94:	4809      	ldr	r0, [pc, #36]	; (8004ebc <_Z24getFont_verdanab_40_4bppv+0x70>)
 8004e96:	f01f fdcd 	bl	8024a34 <atexit>
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	f01f fd8b 	bl	80249b6 <__cxa_guard_release>
    return verdanab_40_4bpp;
}
 8004ea0:	4804      	ldr	r0, [pc, #16]	; (8004eb4 <_Z24getFont_verdanab_40_4bppv+0x68>)
 8004ea2:	b00d      	add	sp, #52	; 0x34
 8004ea4:	bd30      	pop	{r4, r5, pc}
 8004ea6:	bf00      	nop
 8004ea8:	2000dc30 	.word	0x2000dc30
 8004eac:	910e97c0 	.word	0x910e97c0
 8004eb0:	0802ac7c 	.word	0x0802ac7c
 8004eb4:	2000dc34 	.word	0x2000dc34
 8004eb8:	0802ac88 	.word	0x0802ac88
 8004ebc:	08004e49 	.word	0x08004e49

08004ec0 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	4770      	bx	lr

08004ec4 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	4770      	bx	lr

08004ec8 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004ec8:	b40e      	push	{r1, r2, r3}
 8004eca:	b503      	push	{r0, r1, lr}
 8004ecc:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8004ece:	2100      	movs	r1, #0
{
 8004ed0:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8004ed4:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8004ed6:	f00f fd35 	bl	8014944 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004eda:	b002      	add	sp, #8
 8004edc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ee0:	b003      	add	sp, #12
 8004ee2:	4770      	bx	lr

08004ee4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004ee4:	b40c      	push	{r2, r3}
 8004ee6:	b507      	push	{r0, r1, r2, lr}
 8004ee8:	ab04      	add	r3, sp, #16
 8004eea:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8004eee:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8004ef0:	f00f fd28 	bl	8014944 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004ef4:	b003      	add	sp, #12
 8004ef6:	f85d eb04 	ldr.w	lr, [sp], #4
 8004efa:	b002      	add	sp, #8
 8004efc:	4770      	bx	lr
	...

08004f00 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8004f00:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8004f02:	b510      	push	{r4, lr}
 8004f04:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8004f06:	b373      	cbz	r3, 8004f66 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8004f08:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8004f0a:	b92b      	cbnz	r3, 8004f18 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8004f0c:	4b18      	ldr	r3, [pc, #96]	; (8004f70 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8004f0e:	21c0      	movs	r1, #192	; 0xc0
 8004f10:	4a18      	ldr	r2, [pc, #96]	; (8004f74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8004f12:	4819      	ldr	r0, [pc, #100]	; (8004f78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8004f14:	f01f fd70 	bl	80249f8 <__assert_func>
            return buffer[pos];
 8004f18:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8004f1a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004f1e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004f20:	b30b      	cbz	r3, 8004f66 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8004f22:	f011 f93f 	bl	80161a4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8004f26:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d803      	bhi.n	8004f34 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8004f2c:	4b13      	ldr	r3, [pc, #76]	; (8004f7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8004f2e:	21c5      	movs	r1, #197	; 0xc5
 8004f30:	4a13      	ldr	r2, [pc, #76]	; (8004f80 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8004f32:	e7ee      	b.n	8004f12 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8004f34:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8004f36:	f640 103f 	movw	r0, #2367	; 0x93f
 8004f3a:	1c53      	adds	r3, r2, #1
 8004f3c:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8004f3e:	2b09      	cmp	r3, #9
 8004f40:	4619      	mov	r1, r3
 8004f42:	bf88      	it	hi
 8004f44:	f1a3 010a 	subhi.w	r1, r3, #10
 8004f48:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8004f4c:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8004f4e:	4281      	cmp	r1, r0
 8004f50:	d109      	bne.n	8004f66 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8004f52:	2b0a      	cmp	r3, #10
 8004f54:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8004f58:	bf28      	it	cs
 8004f5a:	2300      	movcs	r3, #0
            return buffer[pos];
 8004f5c:	8c50      	ldrh	r0, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8004f5e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8004f62:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8004f64:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8004f66:	4620      	mov	r0, r4
}
 8004f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8004f6c:	f010 bffe 	b.w	8015f6c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8004f70:	08027294 	.word	0x08027294
 8004f74:	0802729d 	.word	0x0802729d
 8004f78:	08027348 	.word	0x08027348
 8004f7c:	08027392 	.word	0x08027392
 8004f80:	080273a0 	.word	0x080273a0

08004f84 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8004f84:	f010 bfaa 	b.w	8015edc <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08004f88 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8004f88:	b510      	push	{r4, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	ac02      	add	r4, sp, #8
 8004f8e:	e884 0006 	stmia.w	r4, {r1, r2}
 8004f92:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8004f94:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8004f96:	4621      	mov	r1, r4
    va_start(pArg, format);
 8004f98:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8004f9a:	9301      	str	r3, [sp, #4]
 8004f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	9b08      	ldr	r3, [sp, #32]
 8004fa2:	f00e f9d0 	bl	8013346 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8004fa6:	b006      	add	sp, #24
 8004fa8:	bd10      	pop	{r4, pc}
	...

08004fac <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8004fac:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8004fae:	bb18      	cbnz	r0, 8004ff8 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8004fb0:	4b12      	ldr	r3, [pc, #72]	; (8004ffc <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8004fb2:	4813      	ldr	r0, [pc, #76]	; (8005000 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4913      	ldr	r1, [pc, #76]	; (8005004 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8004fb8:	b1b3      	cbz	r3, 8004fe8 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8004fba:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8004fbc:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8004fbe:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8004fc0:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8004fc2:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	441a      	add	r2, r3
 8004fc8:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8004fca:	4b0f      	ldr	r3, [pc, #60]	; (8005008 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8004fd0:	f000 f838 	bl	8005044 <_ZN17TypedTextDatabase8getFontsEv>
 8004fd4:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8004fd6:	f000 f833 	bl	8005040 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8004fda:	4b0c      	ldr	r3, [pc, #48]	; (800500c <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8004fdc:	601c      	str	r4, [r3, #0]
        fonts = f;
 8004fde:	4b0c      	ldr	r3, [pc, #48]	; (8005010 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8004fe0:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8004fe2:	4b0c      	ldr	r3, [pc, #48]	; (8005014 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8004fe4:	8018      	strh	r0, [r3, #0]
    }
}
 8004fe6:	e007      	b.n	8004ff8 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8004fe8:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8004fea:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8004fec:	4b0b      	ldr	r3, [pc, #44]	; (800501c <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8004fee:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8004ff0:	4b0b      	ldr	r3, [pc, #44]	; (8005020 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8004ff2:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8004ff4:	2c00      	cmp	r4, #0
 8004ff6:	d1e8      	bne.n	8004fca <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8004ff8:	bd38      	pop	{r3, r4, r5, pc}
 8004ffa:	bf00      	nop
 8004ffc:	2000dc5c 	.word	0x2000dc5c
 8005000:	2000dc60 	.word	0x2000dc60
 8005004:	2000dc64 	.word	0x2000dc64
 8005008:	2000dc68 	.word	0x2000dc68
 800500c:	20021048 	.word	0x20021048
 8005010:	20021050 	.word	0x20021050
 8005014:	2002104c 	.word	0x2002104c
 8005018:	910e98bc 	.word	0x910e98bc
 800501c:	910e98a0 	.word	0x910e98a0
 8005020:	910e9938 	.word	0x910e9938

08005024 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8005024:	4b04      	ldr	r3, [pc, #16]	; (8005038 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800502c:	4b03      	ldr	r3, [pc, #12]	; (800503c <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 800502e:	681b      	ldr	r3, [r3, #0]
}
 8005030:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	2000dc64 	.word	0x2000dc64
 800503c:	2000dc60 	.word	0x2000dc60

08005040 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8005040:	2007      	movs	r0, #7
 8005042:	4770      	bx	lr

08005044 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8005044:	4800      	ldr	r0, [pc, #0]	; (8005048 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8005046:	4770      	bx	lr
 8005048:	2000dc6c 	.word	0x2000dc6c

0800504c <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800504c:	b510      	push	{r4, lr}
};
 800504e:	4c05      	ldr	r4, [pc, #20]	; (8005064 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdanab_20_4bpp()),
 8005050:	f7ff fec2 	bl	8004dd8 <_Z24getFont_verdanab_20_4bppv>
};
 8005054:	6020      	str	r0, [r4, #0]
    &(getFont_verdanab_40_4bpp()),
 8005056:	f7ff fef9 	bl	8004e4c <_Z24getFont_verdanab_40_4bppv>
};
 800505a:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 800505c:	f7ff fe82 	bl	8004d64 <_Z23getFont_verdana_10_4bppv>
};
 8005060:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8005062:	bd10      	pop	{r4, pc}
 8005064:	2000dc6c 	.word	0x2000dc6c

08005068 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8005068:	4770      	bx	lr

0800506a <_ZN19FrontendApplicationD0Ev>:
 800506a:	b510      	push	{r4, lr}
 800506c:	4604      	mov	r4, r0
 800506e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005072:	f01f fc92 	bl	802499a <_ZdlPvj>
 8005076:	4620      	mov	r0, r4
 8005078:	bd10      	pop	{r4, pc}

0800507a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800507a:	b510      	push	{r4, lr}
 800507c:	4604      	mov	r4, r0
    {
        model.tick();
 800507e:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 8005082:	f000 f81d 	bl	80050c0 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8005086:	4620      	mov	r0, r4
    }
 8005088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 800508c:	f00e bcd6 	b.w	8013a3c <_ZN8touchgfx11Application15handleTickEventEv>

08005090 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8005090:	b510      	push	{r4, lr}
 8005092:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8005094:	f7fe f9b2 	bl	80033fc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8005098:	4b01      	ldr	r3, [pc, #4]	; (80050a0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 800509a:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 800509c:	6023      	str	r3, [r4, #0]
}
 800509e:	bd10      	pop	{r4, pc}
 80050a0:	0802747c 	.word	0x0802747c

080050a4 <_ZN5ModelC1Ev>:

 extern "C"
 {
 	 xQueueHandle messageQ;//define a fila criada no main.c
 }
Model::Model() : modelListener(0)
 80050a4:	2200      	movs	r2, #0
{
	messageQ = xQueueCreate(50, sizeof (uint16_t)); //cria uma fila com 50 valores de espaço
 80050a6:	2102      	movs	r1, #2
Model::Model() : modelListener(0)
 80050a8:	b510      	push	{r4, lr}
 80050aa:	4604      	mov	r4, r0
 80050ac:	6002      	str	r2, [r0, #0]
	messageQ = xQueueCreate(50, sizeof (uint16_t)); //cria uma fila com 50 valores de espaço
 80050ae:	2032      	movs	r0, #50	; 0x32
 80050b0:	f006 fe00 	bl	800bcb4 <xQueueGenericCreate>
 80050b4:	4b01      	ldr	r3, [pc, #4]	; (80050bc <_ZN5ModelC1Ev+0x18>)
 80050b6:	6018      	str	r0, [r3, #0]
}
 80050b8:	4620      	mov	r0, r4
 80050ba:	bd10      	pop	{r4, pc}
 80050bc:	2000dc84 	.word	0x2000dc84

080050c0 <_ZN5Model4tickEv>:

void Model::tick()
{
 80050c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	espaco = uxQueueSpacesAvailable(messageQ);//cada atualização da tela pega o valor de espaço livre na fila
 80050c4:	4e13      	ldr	r6, [pc, #76]	; (8005114 <_ZN5Model4tickEv+0x54>)
{
 80050c6:	4605      	mov	r5, r0
	espaco = 50 - espaco; //tespaço usado na fila
 80050c8:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8005120 <_ZN5Model4tickEv+0x60>
	espaco = uxQueueSpacesAvailable(messageQ);//cada atualização da tela pega o valor de espaço livre na fila
 80050cc:	6830      	ldr	r0, [r6, #0]
 80050ce:	f007 f9a7 	bl	800c420 <uxQueueSpacesAvailable>

	for (count=0; count<espaco; count++){//repete até desocupar a fila
 80050d2:	4c11      	ldr	r4, [pc, #68]	; (8005118 <_ZN5Model4tickEv+0x58>)
	espaco = 50 - espaco; //tespaço usado na fila
 80050d4:	f1c0 0032 	rsb	r0, r0, #50	; 0x32
	for (count=0; count<espaco; count++){//repete até desocupar a fila
 80050d8:	2300      	movs	r3, #0

	xQueueReceive(messageQ, &dado, 0);//pega um dado da fila
 80050da:	4f10      	ldr	r7, [pc, #64]	; (800511c <_ZN5Model4tickEv+0x5c>)
	espaco = 50 - espaco; //tespaço usado na fila
 80050dc:	f8c8 0000 	str.w	r0, [r8]
	for (count=0; count<espaco; count++){//repete até desocupar a fila
 80050e0:	6023      	str	r3, [r4, #0]
 80050e2:	6822      	ldr	r2, [r4, #0]
 80050e4:	f8d8 3000 	ldr.w	r3, [r8]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	da10      	bge.n	800510e <_ZN5Model4tickEv+0x4e>
	xQueueReceive(messageQ, &dado, 0);//pega um dado da fila
 80050ec:	2200      	movs	r2, #0
 80050ee:	490b      	ldr	r1, [pc, #44]	; (800511c <_ZN5Model4tickEv+0x5c>)
 80050f0:	6830      	ldr	r0, [r6, #0]
 80050f2:	f006 ffd0 	bl	800c096 <xQueueReceive>
	modelListener->UpdateGraph(dado-870);//atualiza o grafico com o dado
 80050f6:	6828      	ldr	r0, [r5, #0]
 80050f8:	8839      	ldrh	r1, [r7, #0]
 80050fa:	6803      	ldr	r3, [r0, #0]
 80050fc:	f2a1 3166 	subw	r1, r1, #870	; 0x366
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	b289      	uxth	r1, r1
 8005104:	4798      	blx	r3
	for (count=0; count<espaco; count++){//repete até desocupar a fila
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	3301      	adds	r3, #1
 800510a:	6023      	str	r3, [r4, #0]
 800510c:	e7e9      	b.n	80050e2 <_ZN5Model4tickEv+0x22>

	}
}
 800510e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005112:	bf00      	nop
 8005114:	2000dc84 	.word	0x2000dc84
 8005118:	2000dc78 	.word	0x2000dc78
 800511c:	2000dc7c 	.word	0x2000dc7c
 8005120:	2000dc80 	.word	0x2000dc80

08005124 <_ZN13ModelListener11UpdateGraphEt>:
    }
    virtual void UpdateGraph(uint16_t value){}
 8005124:	4770      	bx	lr

08005126 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8005126:	4770      	bx	lr

08005128 <_ZThn4_N16Screen1PresenterD1Ev>:
 8005128:	3804      	subs	r0, #4
 800512a:	4770      	bx	lr

0800512c <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 800512c:	4770      	bx	lr

0800512e <_ZN16Screen1PresenterD0Ev>:
 800512e:	b510      	push	{r4, lr}
 8005130:	4604      	mov	r4, r0
 8005132:	2110      	movs	r1, #16
 8005134:	f01f fc31 	bl	802499a <_ZdlPvj>
 8005138:	4620      	mov	r0, r4
 800513a:	bd10      	pop	{r4, pc}

0800513c <_ZThn4_N16Screen1PresenterD0Ev>:
 800513c:	f1a0 0004 	sub.w	r0, r0, #4
 8005140:	e7f5      	b.n	800512e <_ZN16Screen1PresenterD0Ev>
	...

08005144 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8005144:	2200      	movs	r2, #0
    : view(v)
 8005146:	60c1      	str	r1, [r0, #12]
 8005148:	6082      	str	r2, [r0, #8]
 800514a:	4a04      	ldr	r2, [pc, #16]	; (800515c <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 800514c:	b510      	push	{r4, lr}
    : view(v)
 800514e:	f102 0408 	add.w	r4, r2, #8
 8005152:	3220      	adds	r2, #32
 8005154:	6004      	str	r4, [r0, #0]
 8005156:	6042      	str	r2, [r0, #4]
}
 8005158:	bd10      	pop	{r4, pc}
 800515a:	bf00      	nop
 800515c:	080274c0 	.word	0x080274c0

08005160 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8005160:	4770      	bx	lr

08005162 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8005162:	4770      	bx	lr

08005164 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8005164:	f7fe bbbd 	b.w	80038e2 <_ZN15Screen1ViewBase11setupScreenEv>

08005168 <_ZN11Screen1ViewD0Ev>:
 8005168:	b510      	push	{r4, lr}
 800516a:	4604      	mov	r4, r0
 800516c:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8005170:	f01f fc13 	bl	802499a <_ZdlPvj>
 8005174:	4620      	mov	r0, r4
 8005176:	bd10      	pop	{r4, pc}

08005178 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8005178:	b510      	push	{r4, lr}
 800517a:	4604      	mov	r4, r0
 800517c:	f7fe fc6c 	bl	8003a58 <_ZN15Screen1ViewBaseC1Ev>
 8005180:	4b01      	ldr	r3, [pc, #4]	; (8005188 <_ZN11Screen1ViewC1Ev+0x10>)
}
 8005182:	4620      	mov	r0, r4
Screen1View::Screen1View()
 8005184:	6023      	str	r3, [r4, #0]
}
 8005186:	bd10      	pop	{r4, pc}
 8005188:	080274f4 	.word	0x080274f4

0800518c <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 800518c:	4770      	bx	lr

0800518e <_ZThn4_N16Screen2PresenterD1Ev>:
 800518e:	3804      	subs	r0, #4
 8005190:	4770      	bx	lr

08005192 <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 8005192:	4770      	bx	lr

08005194 <_ZN16Screen2PresenterD0Ev>:
 8005194:	b510      	push	{r4, lr}
 8005196:	4604      	mov	r4, r0
 8005198:	2110      	movs	r1, #16
 800519a:	f01f fbfe 	bl	802499a <_ZdlPvj>
 800519e:	4620      	mov	r0, r4
 80051a0:	bd10      	pop	{r4, pc}

080051a2 <_ZThn4_N16Screen2PresenterD0Ev>:
 80051a2:	f1a0 0004 	sub.w	r0, r0, #4
 80051a6:	e7f5      	b.n	8005194 <_ZN16Screen2PresenterD0Ev>

080051a8 <_ZN16Screen2PresenterC1ER11Screen2View>:
 80051a8:	2200      	movs	r2, #0
    : view(v)
 80051aa:	60c1      	str	r1, [r0, #12]
 80051ac:	6082      	str	r2, [r0, #8]
 80051ae:	4a04      	ldr	r2, [pc, #16]	; (80051c0 <_ZN16Screen2PresenterC1ER11Screen2View+0x18>)
Screen2Presenter::Screen2Presenter(Screen2View& v)
 80051b0:	b510      	push	{r4, lr}
    : view(v)
 80051b2:	f102 0408 	add.w	r4, r2, #8
 80051b6:	3220      	adds	r2, #32
 80051b8:	6004      	str	r4, [r0, #0]
 80051ba:	6042      	str	r2, [r0, #4]
}
 80051bc:	bd10      	pop	{r4, pc}
 80051be:	bf00      	nop
 80051c0:	08027520 	.word	0x08027520

080051c4 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 80051c4:	4770      	bx	lr

080051c6 <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
}
 80051c6:	4770      	bx	lr

080051c8 <_ZN11Screen2View11setupScreenEv>:
    Screen2ViewBase::setupScreen();
 80051c8:	f7fe bd9b 	b.w	8003d02 <_ZN15Screen2ViewBase11setupScreenEv>

080051cc <_ZN11Screen2ViewD0Ev>:
 80051cc:	b510      	push	{r4, lr}
 80051ce:	4604      	mov	r4, r0
 80051d0:	f44f 719c 	mov.w	r1, #312	; 0x138
 80051d4:	f01f fbe1 	bl	802499a <_ZdlPvj>
 80051d8:	4620      	mov	r0, r4
 80051da:	bd10      	pop	{r4, pc}

080051dc <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
 80051dc:	b510      	push	{r4, lr}
 80051de:	4604      	mov	r4, r0
 80051e0:	f7fe fdc6 	bl	8003d70 <_ZN15Screen2ViewBaseC1Ev>
 80051e4:	4b01      	ldr	r3, [pc, #4]	; (80051ec <_ZN11Screen2ViewC1Ev+0x10>)
}
 80051e6:	4620      	mov	r0, r4
Screen2View::Screen2View()
 80051e8:	6023      	str	r3, [r4, #0]
}
 80051ea:	bd10      	pop	{r4, pc}
 80051ec:	08027554 	.word	0x08027554

080051f0 <_ZN16Screen3PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen3Presenter() {};
 80051f0:	4770      	bx	lr

080051f2 <_ZThn4_N16Screen3PresenterD1Ev>:
 80051f2:	3804      	subs	r0, #4
 80051f4:	4770      	bx	lr

080051f6 <_ZN16Screen3Presenter10deactivateEv>:
}

void Screen3Presenter::activate()
{

}
 80051f6:	4770      	bx	lr

080051f8 <_ZN16Screen3PresenterD0Ev>:
 80051f8:	b510      	push	{r4, lr}
 80051fa:	4604      	mov	r4, r0
 80051fc:	2110      	movs	r1, #16
 80051fe:	f01f fbcc 	bl	802499a <_ZdlPvj>
 8005202:	4620      	mov	r0, r4
 8005204:	bd10      	pop	{r4, pc}

08005206 <_ZThn4_N16Screen3PresenterD0Ev>:
 8005206:	f1a0 0004 	sub.w	r0, r0, #4
 800520a:	e7f5      	b.n	80051f8 <_ZN16Screen3PresenterD0Ev>

0800520c <_ZN16Screen3Presenter11UpdateGraphEt>:
{

}
void Screen3Presenter::UpdateGraph(uint16_t value)
{
	view.UpdateGraph(value); //atualiza o gráfico com o valor
 800520c:	68c0      	ldr	r0, [r0, #12]
 800520e:	f000 b829 	b.w	8005264 <_ZN11Screen3View11UpdateGraphEt>

08005212 <_ZThn4_N16Screen3Presenter11UpdateGraphEt>:
    void UpdateGraph(uint16_t value);
 8005212:	f1a0 0004 	sub.w	r0, r0, #4
 8005216:	f7ff bff9 	b.w	800520c <_ZN16Screen3Presenter11UpdateGraphEt>
	...

0800521c <_ZN16Screen3PresenterC1ER11Screen3View>:
 800521c:	2200      	movs	r2, #0
    : view(v)
 800521e:	60c1      	str	r1, [r0, #12]
 8005220:	6082      	str	r2, [r0, #8]
 8005222:	4a04      	ldr	r2, [pc, #16]	; (8005234 <_ZN16Screen3PresenterC1ER11Screen3View+0x18>)
Screen3Presenter::Screen3Presenter(Screen3View& v)
 8005224:	b510      	push	{r4, lr}
    : view(v)
 8005226:	f102 0408 	add.w	r4, r2, #8
 800522a:	3224      	adds	r2, #36	; 0x24
 800522c:	6004      	str	r4, [r0, #0]
 800522e:	6042      	str	r2, [r0, #4]
}
 8005230:	bd10      	pop	{r4, pc}
 8005232:	bf00      	nop
 8005234:	08027580 	.word	0x08027580

08005238 <_ZN11Screen3ViewD1Ev>:

class Screen3View : public Screen3ViewBase
{
public:
    Screen3View();
    virtual ~Screen3View() {}
 8005238:	4770      	bx	lr

0800523a <_ZN11Screen3View14tearDownScreenEv>:
}

void Screen3View::tearDownScreen()
{
    Screen3ViewBase::tearDownScreen();
}
 800523a:	4770      	bx	lr

0800523c <_ZN11Screen3View11setupScreenEv>:
    Screen3ViewBase::setupScreen();
 800523c:	f7ff ba12 	b.w	8004664 <_ZN15Screen3ViewBase11setupScreenEv>

08005240 <_ZN11Screen3ViewD0Ev>:
 8005240:	b510      	push	{r4, lr}
 8005242:	4604      	mov	r4, r0
 8005244:	f643 61f8 	movw	r1, #16120	; 0x3ef8
 8005248:	f01f fba7 	bl	802499a <_ZdlPvj>
 800524c:	4620      	mov	r0, r4
 800524e:	bd10      	pop	{r4, pc}

08005250 <_ZN11Screen3ViewC1Ev>:
Screen3View::Screen3View()
 8005250:	b510      	push	{r4, lr}
 8005252:	4604      	mov	r4, r0
 8005254:	f7ff fb6e 	bl	8004934 <_ZN15Screen3ViewBaseC1Ev>
 8005258:	4b01      	ldr	r3, [pc, #4]	; (8005260 <_ZN11Screen3ViewC1Ev+0x10>)
}
 800525a:	4620      	mov	r0, r4
Screen3View::Screen3View()
 800525c:	6023      	str	r3, [r4, #0]
}
 800525e:	bd10      	pop	{r4, pc}
 8005260:	080275b8 	.word	0x080275b8

08005264 <_ZN11Screen3View11UpdateGraphEt>:
        return i * scale;
 8005264:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
        return addDataPointScaled(int2scaledY(y));
 8005268:	3098      	adds	r0, #152	; 0x98
 800526a:	4359      	muls	r1, r3
 800526c:	f00a bb70 	b.w	800f950 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>

08005270 <ft6x06_Reset>:
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8005270:	4770      	bx	lr

08005272 <ft6x06_TS_ITStatus>:
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
}
 8005272:	2000      	movs	r0, #0
 8005274:	4770      	bx	lr

08005276 <ft6x06_ReadID>:
{
 8005276:	b510      	push	{r4, lr}
 8005278:	4604      	mov	r4, r0
  TS_IO_Init();
 800527a:	f7fb fc22 	bl	8000ac2 <TS_IO_Init>
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 800527e:	21a8      	movs	r1, #168	; 0xa8
 8005280:	b2e0      	uxtb	r0, r4
 8005282:	f7fb fc3b 	bl	8000afc <TS_IO_Read>
}
 8005286:	b280      	uxth	r0, r0
 8005288:	bd10      	pop	{r4, pc}
	...

0800528c <ft6x06_TS_DetectTouch>:
{
 800528c:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 800528e:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8005290:	2102      	movs	r1, #2
 8005292:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 8005294:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8005298:	f7fb fc30 	bl	8000afc <TS_IO_Read>
 800529c:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT6206_TD_STAT_MASK;
 80052a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80052a4:	f003 030f 	and.w	r3, r3, #15
 80052a8:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 80052ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d901      	bls.n	80052b8 <ft6x06_TS_DetectTouch+0x2c>
    nbTouch = 0;
 80052b4:	f88d 4007 	strb.w	r4, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80052b8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80052bc:	4b03      	ldr	r3, [pc, #12]	; (80052cc <ft6x06_TS_DetectTouch+0x40>)
  return(nbTouch);
 80052be:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80052c2:	705a      	strb	r2, [r3, #1]
  ft6x06_handle.currActiveTouchIdx = 0;
 80052c4:	2200      	movs	r2, #0
 80052c6:	709a      	strb	r2, [r3, #2]
}
 80052c8:	b002      	add	sp, #8
 80052ca:	bd10      	pop	{r4, pc}
 80052cc:	2000dc8a 	.word	0x2000dc8a

080052d0 <ft6x06_TS_GetXY>:
{
 80052d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 80052d2:	4c15      	ldr	r4, [pc, #84]	; (8005328 <ft6x06_TS_GetXY+0x58>)
{
 80052d4:	4615      	mov	r5, r2
 80052d6:	460e      	mov	r6, r1
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 80052d8:	78a3      	ldrb	r3, [r4, #2]
 80052da:	7862      	ldrb	r2, [r4, #1]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d91f      	bls.n	8005320 <ft6x06_TS_GetXY+0x50>
    switch(ft6x06_handle.currActiveTouchIdx)
 80052e0:	b303      	cbz	r3, 8005324 <ft6x06_TS_GetXY+0x54>
      regAddress = FT6206_P2_XH_REG; 
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	bf14      	ite	ne
 80052e6:	2100      	movne	r1, #0
 80052e8:	2109      	moveq	r1, #9
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 80052ea:	2304      	movs	r3, #4
 80052ec:	b2c0      	uxtb	r0, r0
 80052ee:	eb0d 0203 	add.w	r2, sp, r3
 80052f2:	f7fb fc21 	bl	8000b38 <TS_IO_ReadMultiple>
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 80052f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80052fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80052fe:	021b      	lsls	r3, r3, #8
 8005300:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005304:	4313      	orrs	r3, r2
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8005306:	f89d 2007 	ldrb.w	r2, [sp, #7]
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 800530a:	8033      	strh	r3, [r6, #0]
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 800530c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005310:	021b      	lsls	r3, r3, #8
 8005312:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005316:	4313      	orrs	r3, r2
 8005318:	802b      	strh	r3, [r5, #0]
    ft6x06_handle.currActiveTouchIdx++;
 800531a:	78a3      	ldrb	r3, [r4, #2]
 800531c:	3301      	adds	r3, #1
 800531e:	70a3      	strb	r3, [r4, #2]
}
 8005320:	b002      	add	sp, #8
 8005322:	bd70      	pop	{r4, r5, r6, pc}
    switch(ft6x06_handle.currActiveTouchIdx)
 8005324:	2103      	movs	r1, #3
 8005326:	e7e0      	b.n	80052ea <ft6x06_TS_GetXY+0x1a>
 8005328:	2000dc8a 	.word	0x2000dc8a

0800532c <ft6x06_TS_EnableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 800532c:	2201      	movs	r2, #1
 800532e:	21a4      	movs	r1, #164	; 0xa4
 8005330:	b2c0      	uxtb	r0, r0
 8005332:	f7fb bbc7 	b.w	8000ac4 <TS_IO_Write>

08005336 <ft6x06_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8005336:	2200      	movs	r2, #0
 8005338:	21a4      	movs	r1, #164	; 0xa4
 800533a:	b2c0      	uxtb	r0, r0
 800533c:	f7fb bbc2 	b.w	8000ac4 <TS_IO_Write>

08005340 <ft6x06_TS_Start>:
  ft6x06_TS_DisableIT(DeviceAddr);
 8005340:	f7ff bff9 	b.w	8005336 <ft6x06_TS_DisableIT>

08005344 <ft6x06_TS_ClearIT>:
 8005344:	4770      	bx	lr
	...

08005348 <ft6x06_Init>:
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
  {
    if(ft6x06[idx] == DeviceAddr)
 8005348:	4b09      	ldr	r3, [pc, #36]	; (8005370 <ft6x06_Init+0x28>)
{  
 800534a:	b410      	push	{r4}
    if(ft6x06[idx] == DeviceAddr)
 800534c:	781a      	ldrb	r2, [r3, #0]
 800534e:	4290      	cmp	r0, r2
 8005350:	d00a      	beq.n	8005368 <ft6x06_Init+0x20>
 8005352:	7859      	ldrb	r1, [r3, #1]
 8005354:	4288      	cmp	r0, r1
 8005356:	d007      	beq.n	8005368 <ft6x06_Init+0x20>
 8005358:	b10a      	cbz	r2, 800535e <ft6x06_Init+0x16>
 800535a:	b929      	cbnz	r1, 8005368 <ft6x06_Init+0x20>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800535c:	2201      	movs	r2, #1
      ft6x06[empty] = DeviceAddr;
 800535e:	5498      	strb	r0, [r3, r2]
}
 8005360:	f85d 4b04 	ldr.w	r4, [sp], #4
      TS_IO_Init(); 
 8005364:	f7fb bbad 	b.w	8000ac2 <TS_IO_Init>
}
 8005368:	f85d 4b04 	ldr.w	r4, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	2000dc88 	.word	0x2000dc88

08005374 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8005374:	b538      	push	{r3, r4, r5, lr}
 8005376:	4604      	mov	r4, r0
 8005378:	460d      	mov	r5, r1
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800537a:	2000      	movs	r0, #0
 800537c:	49c9      	ldr	r1, [pc, #804]	; (80056a4 <OTM8009A_Init+0x330>)
 800537e:	f7fb fee3 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8005382:	49c9      	ldr	r1, [pc, #804]	; (80056a8 <OTM8009A_Init+0x334>)
 8005384:	2003      	movs	r0, #3
 8005386:	f7fb fedf 	bl	8001148 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800538a:	49c8      	ldr	r1, [pc, #800]	; (80056ac <OTM8009A_Init+0x338>)
 800538c:	2000      	movs	r0, #0
 800538e:	f7fb fedb 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8005392:	49c7      	ldr	r1, [pc, #796]	; (80056b0 <OTM8009A_Init+0x33c>)
 8005394:	2002      	movs	r0, #2
 8005396:	f7fb fed7 	bl	8001148 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800539a:	49c4      	ldr	r1, [pc, #784]	; (80056ac <OTM8009A_Init+0x338>)
 800539c:	2000      	movs	r0, #0
 800539e:	f7fb fed3 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 80053a2:	49c4      	ldr	r1, [pc, #784]	; (80056b4 <OTM8009A_Init+0x340>)
 80053a4:	2000      	movs	r0, #0
 80053a6:	f7fb fecf 	bl	8001148 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80053aa:	200a      	movs	r0, #10
 80053ac:	f7fb feca 	bl	8001144 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 80053b0:	49c1      	ldr	r1, [pc, #772]	; (80056b8 <OTM8009A_Init+0x344>)
 80053b2:	2000      	movs	r0, #0
 80053b4:	f7fb fec8 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 80053b8:	49c0      	ldr	r1, [pc, #768]	; (80056bc <OTM8009A_Init+0x348>)
 80053ba:	2000      	movs	r0, #0
 80053bc:	f7fb fec4 	bl	8001148 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80053c0:	200a      	movs	r0, #10
 80053c2:	f7fb febf 	bl	8001144 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80053c6:	49be      	ldr	r1, [pc, #760]	; (80056c0 <OTM8009A_Init+0x34c>)
 80053c8:	2000      	movs	r0, #0
 80053ca:	f7fb febd 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 80053ce:	49bd      	ldr	r1, [pc, #756]	; (80056c4 <OTM8009A_Init+0x350>)
 80053d0:	2000      	movs	r0, #0
 80053d2:	f7fb feb9 	bl	8001148 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80053d6:	49bc      	ldr	r1, [pc, #752]	; (80056c8 <OTM8009A_Init+0x354>)
 80053d8:	2000      	movs	r0, #0
 80053da:	f7fb feb5 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80053de:	49bb      	ldr	r1, [pc, #748]	; (80056cc <OTM8009A_Init+0x358>)
 80053e0:	2000      	movs	r0, #0
 80053e2:	f7fb feb1 	bl	8001148 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80053e6:	49ba      	ldr	r1, [pc, #744]	; (80056d0 <OTM8009A_Init+0x35c>)
 80053e8:	2000      	movs	r0, #0
 80053ea:	f7fb fead 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80053ee:	49b9      	ldr	r1, [pc, #740]	; (80056d4 <OTM8009A_Init+0x360>)
 80053f0:	2000      	movs	r0, #0
 80053f2:	f7fb fea9 	bl	8001148 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80053f6:	49ab      	ldr	r1, [pc, #684]	; (80056a4 <OTM8009A_Init+0x330>)
 80053f8:	2000      	movs	r0, #0
 80053fa:	f7fb fea5 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80053fe:	49b6      	ldr	r1, [pc, #728]	; (80056d8 <OTM8009A_Init+0x364>)
 8005400:	2000      	movs	r0, #0
 8005402:	f7fb fea1 	bl	8001148 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8005406:	49b5      	ldr	r1, [pc, #724]	; (80056dc <OTM8009A_Init+0x368>)
 8005408:	2000      	movs	r0, #0
 800540a:	f7fb fe9d 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 800540e:	49b4      	ldr	r1, [pc, #720]	; (80056e0 <OTM8009A_Init+0x36c>)
 8005410:	2000      	movs	r0, #0
 8005412:	f7fb fe99 	bl	8001148 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8005416:	49b3      	ldr	r1, [pc, #716]	; (80056e4 <OTM8009A_Init+0x370>)
 8005418:	2000      	movs	r0, #0
 800541a:	f7fb fe95 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 800541e:	49b2      	ldr	r1, [pc, #712]	; (80056e8 <OTM8009A_Init+0x374>)
 8005420:	2000      	movs	r0, #0
 8005422:	f7fb fe91 	bl	8001148 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8005426:	49b1      	ldr	r1, [pc, #708]	; (80056ec <OTM8009A_Init+0x378>)
 8005428:	2000      	movs	r0, #0
 800542a:	f7fb fe8d 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 800542e:	49b0      	ldr	r1, [pc, #704]	; (80056f0 <OTM8009A_Init+0x37c>)
 8005430:	2000      	movs	r0, #0
 8005432:	f7fb fe89 	bl	8001148 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8005436:	49af      	ldr	r1, [pc, #700]	; (80056f4 <OTM8009A_Init+0x380>)
 8005438:	2000      	movs	r0, #0
 800543a:	f7fb fe85 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800543e:	49a3      	ldr	r1, [pc, #652]	; (80056cc <OTM8009A_Init+0x358>)
 8005440:	2000      	movs	r0, #0
 8005442:	f7fb fe81 	bl	8001148 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8005446:	4997      	ldr	r1, [pc, #604]	; (80056a4 <OTM8009A_Init+0x330>)
 8005448:	2000      	movs	r0, #0
 800544a:	f7fb fe7d 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 800544e:	49aa      	ldr	r1, [pc, #680]	; (80056f8 <OTM8009A_Init+0x384>)
 8005450:	2002      	movs	r0, #2
 8005452:	f7fb fe79 	bl	8001148 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8005456:	49a9      	ldr	r1, [pc, #676]	; (80056fc <OTM8009A_Init+0x388>)
 8005458:	2000      	movs	r0, #0
 800545a:	f7fb fe75 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 800545e:	49a8      	ldr	r1, [pc, #672]	; (8005700 <OTM8009A_Init+0x38c>)
 8005460:	2000      	movs	r0, #0
 8005462:	f7fb fe71 	bl	8001148 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8005466:	49a7      	ldr	r1, [pc, #668]	; (8005704 <OTM8009A_Init+0x390>)
 8005468:	2000      	movs	r0, #0
 800546a:	f7fb fe6d 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 800546e:	49a6      	ldr	r1, [pc, #664]	; (8005708 <OTM8009A_Init+0x394>)
 8005470:	2000      	movs	r0, #0
 8005472:	f7fb fe69 	bl	8001148 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8005476:	49a5      	ldr	r1, [pc, #660]	; (800570c <OTM8009A_Init+0x398>)
 8005478:	2000      	movs	r0, #0
 800547a:	f7fb fe65 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800547e:	49a4      	ldr	r1, [pc, #656]	; (8005710 <OTM8009A_Init+0x39c>)
 8005480:	2000      	movs	r0, #0
 8005482:	f7fb fe61 	bl	8001148 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8005486:	4995      	ldr	r1, [pc, #596]	; (80056dc <OTM8009A_Init+0x368>)
 8005488:	2000      	movs	r0, #0
 800548a:	f7fb fe5d 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800548e:	49a1      	ldr	r1, [pc, #644]	; (8005714 <OTM8009A_Init+0x3a0>)
 8005490:	2000      	movs	r0, #0
 8005492:	f7fb fe59 	bl	8001148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8005496:	4993      	ldr	r1, [pc, #588]	; (80056e4 <OTM8009A_Init+0x370>)
 8005498:	2000      	movs	r0, #0
 800549a:	f7fb fe55 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800549e:	499e      	ldr	r1, [pc, #632]	; (8005718 <OTM8009A_Init+0x3a4>)
 80054a0:	2000      	movs	r0, #0
 80054a2:	f7fb fe51 	bl	8001148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 80054a6:	499d      	ldr	r1, [pc, #628]	; (800571c <OTM8009A_Init+0x3a8>)
 80054a8:	2000      	movs	r0, #0
 80054aa:	f7fb fe4d 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 80054ae:	499c      	ldr	r1, [pc, #624]	; (8005720 <OTM8009A_Init+0x3ac>)
 80054b0:	2002      	movs	r0, #2
 80054b2:	f7fb fe49 	bl	8001148 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80054b6:	497d      	ldr	r1, [pc, #500]	; (80056ac <OTM8009A_Init+0x338>)
 80054b8:	2000      	movs	r0, #0
 80054ba:	f7fb fe45 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 80054be:	4999      	ldr	r1, [pc, #612]	; (8005724 <OTM8009A_Init+0x3b0>)
 80054c0:	2006      	movs	r0, #6
 80054c2:	f7fb fe41 	bl	8001148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80054c6:	4998      	ldr	r1, [pc, #608]	; (8005728 <OTM8009A_Init+0x3b4>)
 80054c8:	2000      	movs	r0, #0
 80054ca:	f7fb fe3d 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 80054ce:	4997      	ldr	r1, [pc, #604]	; (800572c <OTM8009A_Init+0x3b8>)
 80054d0:	200e      	movs	r0, #14
 80054d2:	f7fb fe39 	bl	8001148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80054d6:	4996      	ldr	r1, [pc, #600]	; (8005730 <OTM8009A_Init+0x3bc>)
 80054d8:	2000      	movs	r0, #0
 80054da:	f7fb fe35 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80054de:	4995      	ldr	r1, [pc, #596]	; (8005734 <OTM8009A_Init+0x3c0>)
 80054e0:	200e      	movs	r0, #14
 80054e2:	f7fb fe31 	bl	8001148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80054e6:	4994      	ldr	r1, [pc, #592]	; (8005738 <OTM8009A_Init+0x3c4>)
 80054e8:	2000      	movs	r0, #0
 80054ea:	f7fb fe2d 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80054ee:	4993      	ldr	r1, [pc, #588]	; (800573c <OTM8009A_Init+0x3c8>)
 80054f0:	200a      	movs	r0, #10
 80054f2:	f7fb fe29 	bl	8001148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80054f6:	4992      	ldr	r1, [pc, #584]	; (8005740 <OTM8009A_Init+0x3cc>)
 80054f8:	2000      	movs	r0, #0
 80054fa:	f7fb fe25 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80054fe:	4991      	ldr	r1, [pc, #580]	; (8005744 <OTM8009A_Init+0x3d0>)
 8005500:	2000      	movs	r0, #0
 8005502:	f7fb fe21 	bl	8001148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8005506:	4969      	ldr	r1, [pc, #420]	; (80056ac <OTM8009A_Init+0x338>)
 8005508:	2000      	movs	r0, #0
 800550a:	f7fb fe1d 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 800550e:	498e      	ldr	r1, [pc, #568]	; (8005748 <OTM8009A_Init+0x3d4>)
 8005510:	200a      	movs	r0, #10
 8005512:	f7fb fe19 	bl	8001148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8005516:	498d      	ldr	r1, [pc, #564]	; (800574c <OTM8009A_Init+0x3d8>)
 8005518:	2000      	movs	r0, #0
 800551a:	f7fb fe15 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 800551e:	498c      	ldr	r1, [pc, #560]	; (8005750 <OTM8009A_Init+0x3dc>)
 8005520:	200f      	movs	r0, #15
 8005522:	f7fb fe11 	bl	8001148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8005526:	4980      	ldr	r1, [pc, #512]	; (8005728 <OTM8009A_Init+0x3b4>)
 8005528:	2000      	movs	r0, #0
 800552a:	f7fb fe0d 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 800552e:	4989      	ldr	r1, [pc, #548]	; (8005754 <OTM8009A_Init+0x3e0>)
 8005530:	200f      	movs	r0, #15
 8005532:	f7fb fe09 	bl	8001148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8005536:	497e      	ldr	r1, [pc, #504]	; (8005730 <OTM8009A_Init+0x3bc>)
 8005538:	2000      	movs	r0, #0
 800553a:	f7fb fe05 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 800553e:	4986      	ldr	r1, [pc, #536]	; (8005758 <OTM8009A_Init+0x3e4>)
 8005540:	200a      	movs	r0, #10
 8005542:	f7fb fe01 	bl	8001148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8005546:	497c      	ldr	r1, [pc, #496]	; (8005738 <OTM8009A_Init+0x3c4>)
 8005548:	2000      	movs	r0, #0
 800554a:	f7fb fdfd 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 800554e:	4983      	ldr	r1, [pc, #524]	; (800575c <OTM8009A_Init+0x3e8>)
 8005550:	200f      	movs	r0, #15
 8005552:	f7fb fdf9 	bl	8001148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8005556:	497a      	ldr	r1, [pc, #488]	; (8005740 <OTM8009A_Init+0x3cc>)
 8005558:	2000      	movs	r0, #0
 800555a:	f7fb fdf5 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 800555e:	4980      	ldr	r1, [pc, #512]	; (8005760 <OTM8009A_Init+0x3ec>)
 8005560:	200f      	movs	r0, #15
 8005562:	f7fb fdf1 	bl	8001148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8005566:	497f      	ldr	r1, [pc, #508]	; (8005764 <OTM8009A_Init+0x3f0>)
 8005568:	2000      	movs	r0, #0
 800556a:	f7fb fded 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 800556e:	497e      	ldr	r1, [pc, #504]	; (8005768 <OTM8009A_Init+0x3f4>)
 8005570:	200a      	movs	r0, #10
 8005572:	f7fb fde9 	bl	8001148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8005576:	497d      	ldr	r1, [pc, #500]	; (800576c <OTM8009A_Init+0x3f8>)
 8005578:	2000      	movs	r0, #0
 800557a:	f7fb fde5 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 800557e:	497c      	ldr	r1, [pc, #496]	; (8005770 <OTM8009A_Init+0x3fc>)
 8005580:	200a      	movs	r0, #10
 8005582:	f7fb fde1 	bl	8001148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8005586:	4949      	ldr	r1, [pc, #292]	; (80056ac <OTM8009A_Init+0x338>)
 8005588:	2000      	movs	r0, #0
 800558a:	f7fb fddd 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 800558e:	4979      	ldr	r1, [pc, #484]	; (8005774 <OTM8009A_Init+0x400>)
 8005590:	200a      	movs	r0, #10
 8005592:	f7fb fdd9 	bl	8001148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8005596:	496d      	ldr	r1, [pc, #436]	; (800574c <OTM8009A_Init+0x3d8>)
 8005598:	2000      	movs	r0, #0
 800559a:	f7fb fdd5 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 800559e:	4976      	ldr	r1, [pc, #472]	; (8005778 <OTM8009A_Init+0x404>)
 80055a0:	200f      	movs	r0, #15
 80055a2:	f7fb fdd1 	bl	8001148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80055a6:	4960      	ldr	r1, [pc, #384]	; (8005728 <OTM8009A_Init+0x3b4>)
 80055a8:	2000      	movs	r0, #0
 80055aa:	f7fb fdcd 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 80055ae:	4973      	ldr	r1, [pc, #460]	; (800577c <OTM8009A_Init+0x408>)
 80055b0:	200f      	movs	r0, #15
 80055b2:	f7fb fdc9 	bl	8001148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80055b6:	495e      	ldr	r1, [pc, #376]	; (8005730 <OTM8009A_Init+0x3bc>)
 80055b8:	2000      	movs	r0, #0
 80055ba:	f7fb fdc5 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 80055be:	4970      	ldr	r1, [pc, #448]	; (8005780 <OTM8009A_Init+0x40c>)
 80055c0:	200a      	movs	r0, #10
 80055c2:	f7fb fdc1 	bl	8001148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80055c6:	495c      	ldr	r1, [pc, #368]	; (8005738 <OTM8009A_Init+0x3c4>)
 80055c8:	2000      	movs	r0, #0
 80055ca:	f7fb fdbd 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 80055ce:	496d      	ldr	r1, [pc, #436]	; (8005784 <OTM8009A_Init+0x410>)
 80055d0:	200f      	movs	r0, #15
 80055d2:	f7fb fdb9 	bl	8001148 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80055d6:	495a      	ldr	r1, [pc, #360]	; (8005740 <OTM8009A_Init+0x3cc>)
 80055d8:	2000      	movs	r0, #0
 80055da:	f7fb fdb5 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 80055de:	496a      	ldr	r1, [pc, #424]	; (8005788 <OTM8009A_Init+0x414>)
 80055e0:	200f      	movs	r0, #15
 80055e2:	f7fb fdb1 	bl	8001148 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80055e6:	493d      	ldr	r1, [pc, #244]	; (80056dc <OTM8009A_Init+0x368>)
 80055e8:	2000      	movs	r0, #0
 80055ea:	f7fb fdad 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 80055ee:	4967      	ldr	r1, [pc, #412]	; (800578c <OTM8009A_Init+0x418>)
 80055f0:	2000      	movs	r0, #0
 80055f2:	f7fb fda9 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 80055f6:	4966      	ldr	r1, [pc, #408]	; (8005790 <OTM8009A_Init+0x41c>)
 80055f8:	2000      	movs	r0, #0
 80055fa:	f7fb fda5 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 80055fe:	4965      	ldr	r1, [pc, #404]	; (8005794 <OTM8009A_Init+0x420>)
 8005600:	2000      	movs	r0, #0
 8005602:	f7fb fda1 	bl	8001148 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8005606:	4964      	ldr	r1, [pc, #400]	; (8005798 <OTM8009A_Init+0x424>)
 8005608:	2000      	movs	r0, #0
 800560a:	f7fb fd9d 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 800560e:	4963      	ldr	r1, [pc, #396]	; (800579c <OTM8009A_Init+0x428>)
 8005610:	2000      	movs	r0, #0
 8005612:	f7fb fd99 	bl	8001148 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8005616:	4923      	ldr	r1, [pc, #140]	; (80056a4 <OTM8009A_Init+0x330>)
 8005618:	2000      	movs	r0, #0
 800561a:	f7fb fd95 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 800561e:	4960      	ldr	r1, [pc, #384]	; (80057a0 <OTM8009A_Init+0x42c>)
 8005620:	2003      	movs	r0, #3
 8005622:	f7fb fd91 	bl	8001148 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8005626:	491f      	ldr	r1, [pc, #124]	; (80056a4 <OTM8009A_Init+0x330>)
 8005628:	2000      	movs	r0, #0
 800562a:	f7fb fd8d 	bl	8001148 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800562e:	491d      	ldr	r1, [pc, #116]	; (80056a4 <OTM8009A_Init+0x330>)
 8005630:	2000      	movs	r0, #0
 8005632:	f7fb fd89 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8005636:	495b      	ldr	r1, [pc, #364]	; (80057a4 <OTM8009A_Init+0x430>)
 8005638:	2010      	movs	r0, #16
 800563a:	f7fb fd85 	bl	8001148 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800563e:	4919      	ldr	r1, [pc, #100]	; (80056a4 <OTM8009A_Init+0x330>)
 8005640:	2000      	movs	r0, #0
 8005642:	f7fb fd81 	bl	8001148 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8005646:	4958      	ldr	r1, [pc, #352]	; (80057a8 <OTM8009A_Init+0x434>)
 8005648:	2010      	movs	r0, #16
 800564a:	f7fb fd7d 	bl	8001148 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 800564e:	2000      	movs	r0, #0
 8005650:	4956      	ldr	r1, [pc, #344]	; (80057ac <OTM8009A_Init+0x438>)
 8005652:	f7fb fd79 	bl	8001148 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8005656:	2078      	movs	r0, #120	; 0x78
 8005658:	f7fb fd74 	bl	8001144 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 800565c:	2c00      	cmp	r4, #0
 800565e:	f000 80c7 	beq.w	80057f0 <OTM8009A_Init+0x47c>
 8005662:	2c02      	cmp	r4, #2
 8005664:	d103      	bne.n	800566e <OTM8009A_Init+0x2fa>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8005666:	4952      	ldr	r1, [pc, #328]	; (80057b0 <OTM8009A_Init+0x43c>)
 8005668:	2000      	movs	r0, #0
    break;
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 800566a:	f7fb fd6d 	bl	8001148 <DSI_IO_WriteCmd>
    break;
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800566e:	2d01      	cmp	r5, #1
 8005670:	d10b      	bne.n	800568a <OTM8009A_Init+0x316>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8005672:	4950      	ldr	r1, [pc, #320]	; (80057b4 <OTM8009A_Init+0x440>)
 8005674:	2000      	movs	r0, #0
 8005676:	f7fb fd67 	bl	8001148 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 800567a:	494f      	ldr	r1, [pc, #316]	; (80057b8 <OTM8009A_Init+0x444>)
 800567c:	2004      	movs	r0, #4
 800567e:	f7fb fd63 	bl	8001148 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8005682:	494e      	ldr	r1, [pc, #312]	; (80057bc <OTM8009A_Init+0x448>)
 8005684:	2004      	movs	r0, #4
 8005686:	f7fb fd5f 	bl	8001148 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 800568a:	494d      	ldr	r1, [pc, #308]	; (80057c0 <OTM8009A_Init+0x44c>)
 800568c:	2000      	movs	r0, #0
 800568e:	f7fb fd5b 	bl	8001148 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8005692:	494c      	ldr	r1, [pc, #304]	; (80057c4 <OTM8009A_Init+0x450>)
 8005694:	2000      	movs	r0, #0
 8005696:	f7fb fd57 	bl	8001148 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 800569a:	494b      	ldr	r1, [pc, #300]	; (80057c8 <OTM8009A_Init+0x454>)
 800569c:	2000      	movs	r0, #0
 800569e:	f7fb fd53 	bl	8001148 <DSI_IO_WriteCmd>
 80056a2:	e093      	b.n	80057cc <OTM8009A_Init+0x458>
 80056a4:	080275e4 	.word	0x080275e4
 80056a8:	0802764a 	.word	0x0802764a
 80056ac:	080275fa 	.word	0x080275fa
 80056b0:	080276d0 	.word	0x080276d0
 80056b4:	08027610 	.word	0x08027610
 80056b8:	08027626 	.word	0x08027626
 80056bc:	0802763c 	.word	0x0802763c
 80056c0:	08027642 	.word	0x08027642
 80056c4:	08027644 	.word	0x08027644
 80056c8:	08027646 	.word	0x08027646
 80056cc:	08027648 	.word	0x08027648
 80056d0:	080275e6 	.word	0x080275e6
 80056d4:	080275e8 	.word	0x080275e8
 80056d8:	080275ea 	.word	0x080275ea
 80056dc:	080275ec 	.word	0x080275ec
 80056e0:	080275ee 	.word	0x080275ee
 80056e4:	080275f0 	.word	0x080275f0
 80056e8:	080275f2 	.word	0x080275f2
 80056ec:	080275f4 	.word	0x080275f4
 80056f0:	080275f6 	.word	0x080275f6
 80056f4:	080275f8 	.word	0x080275f8
 80056f8:	0802774e 	.word	0x0802774e
 80056fc:	080275fc 	.word	0x080275fc
 8005700:	080275fe 	.word	0x080275fe
 8005704:	08027600 	.word	0x08027600
 8005708:	08027602 	.word	0x08027602
 800570c:	08027604 	.word	0x08027604
 8005710:	08027606 	.word	0x08027606
 8005714:	08027608 	.word	0x08027608
 8005718:	0802760a 	.word	0x0802760a
 800571c:	0802760c 	.word	0x0802760c
 8005720:	08027751 	.word	0x08027751
 8005724:	08027754 	.word	0x08027754
 8005728:	0802760e 	.word	0x0802760e
 800572c:	0802775b 	.word	0x0802775b
 8005730:	08027612 	.word	0x08027612
 8005734:	0802776a 	.word	0x0802776a
 8005738:	08027614 	.word	0x08027614
 800573c:	0802764e 	.word	0x0802764e
 8005740:	08027616 	.word	0x08027616
 8005744:	08027634 	.word	0x08027634
 8005748:	08027659 	.word	0x08027659
 800574c:	08027618 	.word	0x08027618
 8005750:	08027664 	.word	0x08027664
 8005754:	08027674 	.word	0x08027674
 8005758:	08027684 	.word	0x08027684
 800575c:	0802768f 	.word	0x0802768f
 8005760:	0802769f 	.word	0x0802769f
 8005764:	0802761a 	.word	0x0802761a
 8005768:	080276af 	.word	0x080276af
 800576c:	0802761c 	.word	0x0802761c
 8005770:	080276ba 	.word	0x080276ba
 8005774:	080276c5 	.word	0x080276c5
 8005778:	080276d3 	.word	0x080276d3
 800577c:	080276e3 	.word	0x080276e3
 8005780:	080276f3 	.word	0x080276f3
 8005784:	080276fe 	.word	0x080276fe
 8005788:	0802770e 	.word	0x0802770e
 800578c:	08027636 	.word	0x08027636
 8005790:	08027638 	.word	0x08027638
 8005794:	0802763a 	.word	0x0802763a
 8005798:	0802763e 	.word	0x0802763e
 800579c:	08027640 	.word	0x08027640
 80057a0:	0802771e 	.word	0x0802771e
 80057a4:	0802772c 	.word	0x0802772c
 80057a8:	0802773d 	.word	0x0802773d
 80057ac:	0802761e 	.word	0x0802761e
 80057b0:	08027620 	.word	0x08027620
 80057b4:	08027624 	.word	0x08027624
 80057b8:	08027722 	.word	0x08027722
 80057bc:	08027727 	.word	0x08027727
 80057c0:	08027628 	.word	0x08027628
 80057c4:	0802762a 	.word	0x0802762a
 80057c8:	0802762c 	.word	0x0802762c

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 80057cc:	490a      	ldr	r1, [pc, #40]	; (80057f8 <OTM8009A_Init+0x484>)
 80057ce:	2000      	movs	r0, #0
 80057d0:	f7fb fcba 	bl	8001148 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 80057d4:	4909      	ldr	r1, [pc, #36]	; (80057fc <OTM8009A_Init+0x488>)
 80057d6:	2000      	movs	r0, #0
 80057d8:	f7fb fcb6 	bl	8001148 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80057dc:	4908      	ldr	r1, [pc, #32]	; (8005800 <OTM8009A_Init+0x48c>)
 80057de:	2000      	movs	r0, #0
 80057e0:	f7fb fcb2 	bl	8001148 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 80057e4:	4907      	ldr	r1, [pc, #28]	; (8005804 <OTM8009A_Init+0x490>)
 80057e6:	2000      	movs	r0, #0
 80057e8:	f7fb fcae 	bl	8001148 <DSI_IO_WriteCmd>

  return 0;
}
 80057ec:	2000      	movs	r0, #0
 80057ee:	bd38      	pop	{r3, r4, r5, pc}
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 80057f0:	4905      	ldr	r1, [pc, #20]	; (8005808 <OTM8009A_Init+0x494>)
 80057f2:	4620      	mov	r0, r4
 80057f4:	e739      	b.n	800566a <OTM8009A_Init+0x2f6>
 80057f6:	bf00      	nop
 80057f8:	0802762e 	.word	0x0802762e
 80057fc:	08027630 	.word	0x08027630
 8005800:	080275e4 	.word	0x080275e4
 8005804:	08027632 	.word	0x08027632
 8005808:	08027622 	.word	0x08027622

0800580c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800580c:	490f      	ldr	r1, [pc, #60]	; (800584c <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800580e:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005810:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 800581c:	4b0c      	ldr	r3, [pc, #48]	; (8005850 <SystemInit+0x44>)
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	f042 0201 	orr.w	r2, r2, #1
 8005824:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8005826:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800582e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005832:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005834:	4a07      	ldr	r2, [pc, #28]	; (8005854 <SystemInit+0x48>)
 8005836:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800583e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005840:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005842:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005846:	608b      	str	r3, [r1, #8]
#endif
}
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	e000ed00 	.word	0xe000ed00
 8005850:	40023800 	.word	0x40023800
 8005854:	24003010 	.word	0x24003010

08005858 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005858:	4a07      	ldr	r2, [pc, #28]	; (8005878 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800585a:	2003      	movs	r0, #3
{
 800585c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800585e:	6813      	ldr	r3, [r2, #0]
 8005860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005864:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005866:	f000 f82d 	bl	80058c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800586a:	2000      	movs	r0, #0
 800586c:	f7fd fadc 	bl	8002e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005870:	f7fc ffca 	bl	8002808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8005874:	2000      	movs	r0, #0
 8005876:	bd08      	pop	{r3, pc}
 8005878:	40023c00 	.word	0x40023c00

0800587c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800587c:	4a03      	ldr	r2, [pc, #12]	; (800588c <HAL_IncTick+0x10>)
 800587e:	4b04      	ldr	r3, [pc, #16]	; (8005890 <HAL_IncTick+0x14>)
 8005880:	6811      	ldr	r1, [r2, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	440b      	add	r3, r1
 8005886:	6013      	str	r3, [r2, #0]
}
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	2000dc90 	.word	0x2000dc90
 8005890:	2000004c 	.word	0x2000004c

08005894 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005894:	4b01      	ldr	r3, [pc, #4]	; (800589c <HAL_GetTick+0x8>)
 8005896:	6818      	ldr	r0, [r3, #0]
}
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	2000dc90 	.word	0x2000dc90

080058a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80058a0:	b538      	push	{r3, r4, r5, lr}
 80058a2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80058a4:	f7ff fff6 	bl	8005894 <HAL_GetTick>
 80058a8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058aa:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80058ac:	bf1e      	ittt	ne
 80058ae:	4b04      	ldrne	r3, [pc, #16]	; (80058c0 <HAL_Delay+0x20>)
 80058b0:	781b      	ldrbne	r3, [r3, #0]
 80058b2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80058b4:	f7ff ffee 	bl	8005894 <HAL_GetTick>
 80058b8:	1b43      	subs	r3, r0, r5
 80058ba:	42a3      	cmp	r3, r4
 80058bc:	d3fa      	bcc.n	80058b4 <HAL_Delay+0x14>
  {
  }
}
 80058be:	bd38      	pop	{r3, r4, r5, pc}
 80058c0:	2000004c 	.word	0x2000004c

080058c4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058c4:	4907      	ldr	r1, [pc, #28]	; (80058e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058c6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058c8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058d2:	0412      	lsls	r2, r2, #16
 80058d4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80058d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80058dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80058e0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80058e2:	4770      	bx	lr
 80058e4:	e000ed00 	.word	0xe000ed00

080058e8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058e8:	4b16      	ldr	r3, [pc, #88]	; (8005944 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058ea:	b530      	push	{r4, r5, lr}
 80058ec:	68dc      	ldr	r4, [r3, #12]
 80058ee:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058f2:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058f6:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058f8:	2d04      	cmp	r5, #4
 80058fa:	bf28      	it	cs
 80058fc:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058fe:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005900:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005904:	bf8c      	ite	hi
 8005906:	3c03      	subhi	r4, #3
 8005908:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800590a:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 800590e:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005910:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005914:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005918:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800591c:	fa01 f104 	lsl.w	r1, r1, r4
 8005920:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005924:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005928:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800592a:	db06      	blt.n	800593a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800592c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005930:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005934:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005938:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800593a:	f000 000f 	and.w	r0, r0, #15
 800593e:	4a02      	ldr	r2, [pc, #8]	; (8005948 <HAL_NVIC_SetPriority+0x60>)
 8005940:	5413      	strb	r3, [r2, r0]
 8005942:	e7f9      	b.n	8005938 <HAL_NVIC_SetPriority+0x50>
 8005944:	e000ed00 	.word	0xe000ed00
 8005948:	e000ed14 	.word	0xe000ed14

0800594c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800594c:	2800      	cmp	r0, #0
 800594e:	db08      	blt.n	8005962 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005950:	0942      	lsrs	r2, r0, #5
 8005952:	2301      	movs	r3, #1
 8005954:	f000 001f 	and.w	r0, r0, #31
 8005958:	fa03 f000 	lsl.w	r0, r3, r0
 800595c:	4b01      	ldr	r3, [pc, #4]	; (8005964 <HAL_NVIC_EnableIRQ+0x18>)
 800595e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005962:	4770      	bx	lr
 8005964:	e000e100 	.word	0xe000e100

08005968 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005968:	2800      	cmp	r0, #0
 800596a:	db0d      	blt.n	8005988 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800596c:	0943      	lsrs	r3, r0, #5
 800596e:	2201      	movs	r2, #1
 8005970:	f000 001f 	and.w	r0, r0, #31
 8005974:	3320      	adds	r3, #32
 8005976:	fa02 f000 	lsl.w	r0, r2, r0
 800597a:	4a04      	ldr	r2, [pc, #16]	; (800598c <HAL_NVIC_DisableIRQ+0x24>)
 800597c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005980:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005984:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	e000e100 	.word	0xe000e100

08005990 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8005990:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005994:	4b04      	ldr	r3, [pc, #16]	; (80059a8 <HAL_MPU_Disable+0x18>)
 8005996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005998:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800599c:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800599e:	2200      	movs	r2, #0
 80059a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	e000ed00 	.word	0xe000ed00

080059ac <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80059ac:	4b06      	ldr	r3, [pc, #24]	; (80059c8 <HAL_MPU_Enable+0x1c>)
 80059ae:	f040 0001 	orr.w	r0, r0, #1
 80059b2:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80059b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80059bc:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80059be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80059c2:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80059c6:	4770      	bx	lr
 80059c8:	e000ed00 	.word	0xe000ed00

080059cc <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80059cc:	7843      	ldrb	r3, [r0, #1]
 80059ce:	4a14      	ldr	r2, [pc, #80]	; (8005a20 <HAL_MPU_ConfigRegion+0x54>)
{
 80059d0:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 80059d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 80059d6:	7801      	ldrb	r1, [r0, #0]
 80059d8:	b1e9      	cbz	r1, 8005a16 <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80059da:	6843      	ldr	r3, [r0, #4]
 80059dc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80059e0:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80059e2:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80059e4:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80059e6:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80059ea:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80059ec:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80059ee:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80059f2:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80059f4:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80059f8:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80059fa:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80059fe:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005a00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005a04:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005a06:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005a0a:	7a01      	ldrb	r1, [r0, #8]
 8005a0c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005a10:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8005a14:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8005a16:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8005a1a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 8005a1e:	e7f9      	b.n	8005a14 <HAL_MPU_ConfigRegion+0x48>
 8005a20:	e000ed00 	.word	0xe000ed00

08005a24 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005a24:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005a26:	4604      	mov	r4, r0
 8005a28:	b908      	cbnz	r0, 8005a2e <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8005a2a:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8005a2c:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005a2e:	7f43      	ldrb	r3, [r0, #29]
 8005a30:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005a34:	b913      	cbnz	r3, 8005a3c <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8005a36:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8005a38:	f7fc ff04 	bl	8002844 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005a40:	7923      	ldrb	r3, [r4, #4]
 8005a42:	b9e3      	cbnz	r3, 8005a7e <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005a44:	6823      	ldr	r3, [r4, #0]
 8005a46:	4a13      	ldr	r2, [pc, #76]	; (8005a94 <HAL_CRC_Init+0x70>)
 8005a48:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	f022 0218 	bic.w	r2, r2, #24
 8005a50:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005a52:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005a54:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005a56:	b9d2      	cbnz	r2, 8005a8e <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005a58:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005a5c:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8005a5e:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005a60:	689a      	ldr	r2, [r3, #8]
 8005a62:	6961      	ldr	r1, [r4, #20]
 8005a64:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a68:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005a6a:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005a6c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a74:	430a      	orrs	r2, r1
 8005a76:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8005a7c:	e7d6      	b.n	8005a2c <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005a7e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8005a82:	4620      	mov	r0, r4
 8005a84:	f000 f808 	bl	8005a98 <HAL_CRCEx_Polynomial_Set>
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	d0e2      	beq.n	8005a52 <HAL_CRC_Init+0x2e>
 8005a8c:	e7cd      	b.n	8005a2a <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005a8e:	6922      	ldr	r2, [r4, #16]
 8005a90:	e7e4      	b.n	8005a5c <HAL_CRC_Init+0x38>
 8005a92:	bf00      	nop
 8005a94:	04c11db7 	.word	0x04c11db7

08005a98 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005a98:	231f      	movs	r3, #31
{
 8005a9a:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	d31c      	bcc.n	8005ada <HAL_CRCEx_Polynomial_Set+0x42>
 8005aa0:	fa21 f403 	lsr.w	r4, r1, r3
 8005aa4:	07e4      	lsls	r4, r4, #31
 8005aa6:	d5f9      	bpl.n	8005a9c <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8005aa8:	2a10      	cmp	r2, #16
 8005aaa:	d012      	beq.n	8005ad2 <HAL_CRCEx_Polynomial_Set+0x3a>
 8005aac:	d804      	bhi.n	8005ab8 <HAL_CRCEx_Polynomial_Set+0x20>
 8005aae:	b13a      	cbz	r2, 8005ac0 <HAL_CRCEx_Polynomial_Set+0x28>
 8005ab0:	2a08      	cmp	r2, #8
 8005ab2:	d010      	beq.n	8005ad6 <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8005ab4:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8005ab6:	e00b      	b.n	8005ad0 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8005ab8:	2a18      	cmp	r2, #24
 8005aba:	d1fb      	bne.n	8005ab4 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8005abc:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8005abe:	d8f9      	bhi.n	8005ab4 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005ac0:	6800      	ldr	r0, [r0, #0]
 8005ac2:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005ac4:	6883      	ldr	r3, [r0, #8]
 8005ac6:	f023 0318 	bic.w	r3, r3, #24
 8005aca:	431a      	orrs	r2, r3
 8005acc:	6082      	str	r2, [r0, #8]
 8005ace:	2000      	movs	r0, #0
}
 8005ad0:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8005ad2:	2b07      	cmp	r3, #7
 8005ad4:	e7f3      	b.n	8005abe <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8005ad6:	2b0f      	cmp	r3, #15
 8005ad8:	e7f1      	b.n	8005abe <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 8005ada:	2a00      	cmp	r2, #0
 8005adc:	d1ea      	bne.n	8005ab4 <HAL_CRCEx_Polynomial_Set+0x1c>
 8005ade:	e7ef      	b.n	8005ac0 <HAL_CRCEx_Polynomial_Set+0x28>

08005ae0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ae0:	6803      	ldr	r3, [r0, #0]
{
 8005ae2:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ae4:	2018      	movs	r0, #24
 8005ae6:	b2d9      	uxtb	r1, r3
 8005ae8:	3910      	subs	r1, #16
 8005aea:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8005aee:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005af0:	4c05      	ldr	r4, [pc, #20]	; (8005b08 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8005af2:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005af4:	5c20      	ldrb	r0, [r4, r0]
 8005af6:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005af8:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8005afc:	f020 0003 	bic.w	r0, r0, #3
 8005b00:	bf88      	it	hi
 8005b02:	3004      	addhi	r0, #4
 8005b04:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8005b06:	bd10      	pop	{r4, pc}
 8005b08:	08027791 	.word	0x08027791

08005b0c <HAL_DMA_Init>:
{
 8005b0c:	b570      	push	{r4, r5, r6, lr}
 8005b0e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005b10:	f7ff fec0 	bl	8005894 <HAL_GetTick>
 8005b14:	4605      	mov	r5, r0
  if(hdma == NULL)
 8005b16:	2c00      	cmp	r4, #0
 8005b18:	d073      	beq.n	8005c02 <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b1a:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 8005b1c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b1e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8005b22:	2300      	movs	r3, #0
 8005b24:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8005b28:	6813      	ldr	r3, [r2, #0]
 8005b2a:	f023 0301 	bic.w	r3, r3, #1
 8005b2e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b30:	6821      	ldr	r1, [r4, #0]
 8005b32:	680b      	ldr	r3, [r1, #0]
 8005b34:	07d8      	lsls	r0, r3, #31
 8005b36:	d42f      	bmi.n	8005b98 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8005b38:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b3a:	4d33      	ldr	r5, [pc, #204]	; (8005c08 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b3c:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b3e:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b40:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	68e2      	ldr	r2, [r4, #12]
 8005b48:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b4a:	6922      	ldr	r2, [r4, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	6962      	ldr	r2, [r4, #20]
 8005b50:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b52:	69e2      	ldr	r2, [r4, #28]
 8005b54:	4303      	orrs	r3, r0
 8005b56:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b58:	6a22      	ldr	r2, [r4, #32]
 8005b5a:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b5c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005b5e:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b60:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005b64:	bf02      	ittt	eq
 8005b66:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8005b6a:	4335      	orreq	r5, r6
 8005b6c:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b6e:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8005b70:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8005b72:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b74:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8005b78:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b7c:	d133      	bne.n	8005be6 <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8005b7e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b80:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8005b82:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b84:	b37d      	cbz	r5, 8005be6 <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b86:	b990      	cbnz	r0, 8005bae <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8005b88:	2a01      	cmp	r2, #1
 8005b8a:	d021      	beq.n	8005bd0 <HAL_DMA_Init+0xc4>
 8005b8c:	f032 0202 	bics.w	r2, r2, #2
 8005b90:	d129      	bne.n	8005be6 <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b92:	01ea      	lsls	r2, r5, #7
 8005b94:	d527      	bpl.n	8005be6 <HAL_DMA_Init+0xda>
 8005b96:	e01e      	b.n	8005bd6 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b98:	f7ff fe7c 	bl	8005894 <HAL_GetTick>
 8005b9c:	1b40      	subs	r0, r0, r5
 8005b9e:	2805      	cmp	r0, #5
 8005ba0:	d9c6      	bls.n	8005b30 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ba2:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ba4:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ba6:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8005ba8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8005bac:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005bae:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8005bb2:	d114      	bne.n	8005bde <HAL_DMA_Init+0xd2>
    switch (tmp)
 8005bb4:	2a03      	cmp	r2, #3
 8005bb6:	d816      	bhi.n	8005be6 <HAL_DMA_Init+0xda>
 8005bb8:	a001      	add	r0, pc, #4	; (adr r0, 8005bc0 <HAL_DMA_Init+0xb4>)
 8005bba:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8005bbe:	bf00      	nop
 8005bc0:	08005bd7 	.word	0x08005bd7
 8005bc4:	08005b93 	.word	0x08005b93
 8005bc8:	08005bd7 	.word	0x08005bd7
 8005bcc:	08005bd1 	.word	0x08005bd1
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bd0:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8005bd4:	d107      	bne.n	8005be6 <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005bd6:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8005bd8:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005bda:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8005bdc:	e7e4      	b.n	8005ba8 <HAL_DMA_Init+0x9c>
    switch (tmp)
 8005bde:	2a02      	cmp	r2, #2
 8005be0:	d9f9      	bls.n	8005bd6 <HAL_DMA_Init+0xca>
 8005be2:	2a03      	cmp	r2, #3
 8005be4:	d0d5      	beq.n	8005b92 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8005be6:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005be8:	4620      	mov	r0, r4
 8005bea:	f7ff ff79 	bl	8005ae0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005bf0:	233f      	movs	r3, #63	; 0x3f
 8005bf2:	4093      	lsls	r3, r2
 8005bf4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bf6:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8005bf8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bfa:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8005bfc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8005c00:	e7d4      	b.n	8005bac <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 8005c02:	2001      	movs	r0, #1
 8005c04:	e7d2      	b.n	8005bac <HAL_DMA_Init+0xa0>
 8005c06:	bf00      	nop
 8005c08:	e010803f 	.word	0xe010803f

08005c0c <HAL_DMA_Start_IT>:
{
 8005c0c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8005c0e:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c12:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8005c14:	2c01      	cmp	r4, #1
 8005c16:	d034      	beq.n	8005c82 <HAL_DMA_Start_IT+0x76>
 8005c18:	2401      	movs	r4, #1
 8005c1a:	2500      	movs	r5, #0
 8005c1c:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c20:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8005c24:	2c01      	cmp	r4, #1
 8005c26:	f04f 0402 	mov.w	r4, #2
 8005c2a:	d128      	bne.n	8005c7e <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c2c:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c30:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c32:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c34:	6825      	ldr	r5, [r4, #0]
 8005c36:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8005c3a:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8005c3c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c3e:	6883      	ldr	r3, [r0, #8]
 8005c40:	2b40      	cmp	r3, #64	; 0x40
 8005c42:	d119      	bne.n	8005c78 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8005c44:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8005c46:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c48:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005c4a:	233f      	movs	r3, #63	; 0x3f
 8005c4c:	4093      	lsls	r3, r2
 8005c4e:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	f043 0316 	orr.w	r3, r3, #22
 8005c56:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005c58:	6963      	ldr	r3, [r4, #20]
 8005c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c5e:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8005c60:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005c62:	b11b      	cbz	r3, 8005c6c <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8005c64:	6823      	ldr	r3, [r4, #0]
 8005c66:	f043 0308 	orr.w	r3, r3, #8
 8005c6a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8005c6c:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c6e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8005c70:	f043 0301 	orr.w	r3, r3, #1
 8005c74:	6023      	str	r3, [r4, #0]
}
 8005c76:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8005c78:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8005c7a:	60e2      	str	r2, [r4, #12]
 8005c7c:	e7e4      	b.n	8005c48 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8005c7e:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8005c82:	2002      	movs	r0, #2
 8005c84:	e7f7      	b.n	8005c76 <HAL_DMA_Start_IT+0x6a>

08005c86 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c86:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d003      	beq.n	8005c96 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c8e:	2380      	movs	r3, #128	; 0x80
 8005c90:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8005c92:	2001      	movs	r0, #1
 8005c94:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8005c96:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8005c98:	2305      	movs	r3, #5
 8005c9a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 8005c9e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8005ca0:	6813      	ldr	r3, [r2, #0]
 8005ca2:	f023 0301 	bic.w	r3, r3, #1
 8005ca6:	6013      	str	r3, [r2, #0]
}
 8005ca8:	4770      	bx	lr
	...

08005cac <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8005cac:	2300      	movs	r3, #0
{
 8005cae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8005cb0:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cb2:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8005cb4:	4b5b      	ldr	r3, [pc, #364]	; (8005e24 <HAL_DMA_IRQHandler+0x178>)
{
 8005cb6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cb8:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8005cba:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cbc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8005cbe:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cc0:	409a      	lsls	r2, r3
 8005cc2:	4232      	tst	r2, r6
 8005cc4:	d00c      	beq.n	8005ce0 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005cc6:	6801      	ldr	r1, [r0, #0]
 8005cc8:	6808      	ldr	r0, [r1, #0]
 8005cca:	0740      	lsls	r0, r0, #29
 8005ccc:	d508      	bpl.n	8005ce0 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005cce:	6808      	ldr	r0, [r1, #0]
 8005cd0:	f020 0004 	bic.w	r0, r0, #4
 8005cd4:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005cd6:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005cd8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005cda:	f042 0201 	orr.w	r2, r2, #1
 8005cde:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	409a      	lsls	r2, r3
 8005ce4:	4232      	tst	r2, r6
 8005ce6:	d008      	beq.n	8005cfa <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005ce8:	6821      	ldr	r1, [r4, #0]
 8005cea:	6949      	ldr	r1, [r1, #20]
 8005cec:	0609      	lsls	r1, r1, #24
 8005cee:	d504      	bpl.n	8005cfa <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005cf0:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005cf2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005cf4:	f042 0202 	orr.w	r2, r2, #2
 8005cf8:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cfa:	2204      	movs	r2, #4
 8005cfc:	409a      	lsls	r2, r3
 8005cfe:	4232      	tst	r2, r6
 8005d00:	d008      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005d02:	6821      	ldr	r1, [r4, #0]
 8005d04:	6809      	ldr	r1, [r1, #0]
 8005d06:	0788      	lsls	r0, r1, #30
 8005d08:	d504      	bpl.n	8005d14 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005d0a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d0c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005d0e:	f042 0204 	orr.w	r2, r2, #4
 8005d12:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005d14:	2210      	movs	r2, #16
 8005d16:	409a      	lsls	r2, r3
 8005d18:	4232      	tst	r2, r6
 8005d1a:	d010      	beq.n	8005d3e <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	6819      	ldr	r1, [r3, #0]
 8005d20:	0709      	lsls	r1, r1, #28
 8005d22:	d50c      	bpl.n	8005d3e <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005d24:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	0350      	lsls	r0, r2, #13
 8005d2a:	d537      	bpl.n	8005d9c <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	0319      	lsls	r1, r3, #12
 8005d30:	d401      	bmi.n	8005d36 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8005d32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d34:	e000      	b.n	8005d38 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d36:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8005d38:	b10b      	cbz	r3, 8005d3e <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005d3e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005d40:	2220      	movs	r2, #32
 8005d42:	408a      	lsls	r2, r1
 8005d44:	4232      	tst	r2, r6
 8005d46:	d03a      	beq.n	8005dbe <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005d48:	6823      	ldr	r3, [r4, #0]
 8005d4a:	6818      	ldr	r0, [r3, #0]
 8005d4c:	06c6      	lsls	r6, r0, #27
 8005d4e:	d536      	bpl.n	8005dbe <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005d50:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d52:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8005d56:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d58:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d5a:	d127      	bne.n	8005dac <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d5c:	f022 0216 	bic.w	r2, r2, #22
 8005d60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d62:	695a      	ldr	r2, [r3, #20]
 8005d64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d68:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d6a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005d6c:	b90a      	cbnz	r2, 8005d72 <HAL_DMA_IRQHandler+0xc6>
 8005d6e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005d70:	b11a      	cbz	r2, 8005d7a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	f022 0208 	bic.w	r2, r2, #8
 8005d78:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d7a:	233f      	movs	r3, #63	; 0x3f
 8005d7c:	408b      	lsls	r3, r1
 8005d7e:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8005d80:	2301      	movs	r3, #1
 8005d82:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8005d86:	2300      	movs	r3, #0
 8005d88:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8005d8c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d045      	beq.n	8005e1e <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8005d92:	4620      	mov	r0, r4
}
 8005d94:	b003      	add	sp, #12
 8005d96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8005d9a:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	05d2      	lsls	r2, r2, #23
 8005da0:	d4c7      	bmi.n	8005d32 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	f022 0208 	bic.w	r2, r2, #8
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	e7c2      	b.n	8005d32 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005dac:	0350      	lsls	r0, r2, #13
 8005dae:	d527      	bpl.n	8005e00 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	0319      	lsls	r1, r3, #12
 8005db4:	d431      	bmi.n	8005e1a <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8005db6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8005db8:	b10b      	cbz	r3, 8005dbe <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8005dba:	4620      	mov	r0, r4
 8005dbc:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005dbe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005dc0:	b36b      	cbz	r3, 8005e1e <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005dc2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005dc4:	07da      	lsls	r2, r3, #31
 8005dc6:	d519      	bpl.n	8005dfc <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 8005dc8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
 8005dcc:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8005dce:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8005dd2:	2305      	movs	r3, #5
 8005dd4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8005dd8:	6813      	ldr	r3, [r2, #0]
 8005dda:	f023 0301 	bic.w	r3, r3, #1
 8005dde:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8005de0:	9b01      	ldr	r3, [sp, #4]
 8005de2:	3301      	adds	r3, #1
 8005de4:	42bb      	cmp	r3, r7
 8005de6:	9301      	str	r3, [sp, #4]
 8005de8:	d802      	bhi.n	8005df0 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005dea:	6813      	ldr	r3, [r2, #0]
 8005dec:	07db      	lsls	r3, r3, #31
 8005dee:	d4f7      	bmi.n	8005de0 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8005df0:	2301      	movs	r3, #1
 8005df2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8005df6:	2300      	movs	r3, #0
 8005df8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8005dfc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005dfe:	e7c6      	b.n	8005d8e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8005e06:	d108      	bne.n	8005e1a <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005e08:	6819      	ldr	r1, [r3, #0]
 8005e0a:	f021 0110 	bic.w	r1, r1, #16
 8005e0e:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005e10:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8005e12:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8005e16:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8005e1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005e1c:	e7cc      	b.n	8005db8 <HAL_DMA_IRQHandler+0x10c>
}
 8005e1e:	b003      	add	sp, #12
 8005e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20000048 	.word	0x20000048

08005e28 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8005e28:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8005e2a:	4770      	bx	lr

08005e2c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005e2c:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005e2e:	4604      	mov	r4, r0
 8005e30:	b380      	cbz	r0, 8005e94 <HAL_DMA2D_Init+0x68>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005e32:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8005e36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005e3a:	b91b      	cbnz	r3, 8005e44 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005e3c:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005e40:	f7fc fd16 	bl	8002870 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005e44:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005e46:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005e48:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005e4c:	6823      	ldr	r3, [r4, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005e54:	430a      	orrs	r2, r1

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005e56:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005e58:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005e5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e5c:	f022 0207 	bic.w	r2, r2, #7
 8005e60:	430a      	orrs	r2, r1

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005e62:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005e64:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005e66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e68:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8005e6c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005e70:	430a      	orrs	r2, r1
 8005e72:	641a      	str	r2, [r3, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005e74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005e76:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8005e7a:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8005e7e:	0552      	lsls	r2, r2, #21
 8005e80:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005e84:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005e86:	430a      	orrs	r2, r1
 8005e88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005e8a:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005e8c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005e8e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8005e92:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005e94:	2001      	movs	r0, #1
 8005e96:	e7fc      	b.n	8005e92 <HAL_DMA2D_Init+0x66>

08005e98 <HAL_DMA2D_LineEventCallback>:
 8005e98:	4770      	bx	lr

08005e9a <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8005e9a:	4770      	bx	lr

08005e9c <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005e9c:	6803      	ldr	r3, [r0, #0]
{
 8005e9e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005ea0:	685e      	ldr	r6, [r3, #4]
{
 8005ea2:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005ea4:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005ea6:	07f2      	lsls	r2, r6, #31
 8005ea8:	d514      	bpl.n	8005ed4 <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005eaa:	05e9      	lsls	r1, r5, #23
 8005eac:	d512      	bpl.n	8005ed4 <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005eb4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005eb6:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005eb8:	f042 0201 	orr.w	r2, r2, #1
 8005ebc:	6542      	str	r2, [r0, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005ec2:	2304      	movs	r3, #4
 8005ec4:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005ec8:	2300      	movs	r3, #0
 8005eca:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8005ece:	69c3      	ldr	r3, [r0, #28]
 8005ed0:	b103      	cbz	r3, 8005ed4 <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005ed2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005ed4:	06b2      	lsls	r2, r6, #26
 8005ed6:	d516      	bpl.n	8005f06 <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005ed8:	04ab      	lsls	r3, r5, #18
 8005eda:	d514      	bpl.n	8005f06 <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ee4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005eea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005eec:	f043 0302 	orr.w	r3, r3, #2
 8005ef0:	6563      	str	r3, [r4, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005ef2:	2304      	movs	r3, #4
 8005ef4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8005efe:	69e3      	ldr	r3, [r4, #28]
 8005f00:	b10b      	cbz	r3, 8005f06 <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005f02:	4620      	mov	r0, r4
 8005f04:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005f06:	0730      	lsls	r0, r6, #28
 8005f08:	d516      	bpl.n	8005f38 <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005f0a:	0529      	lsls	r1, r5, #20
 8005f0c:	d514      	bpl.n	8005f38 <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005f0e:	6823      	ldr	r3, [r4, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f16:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005f18:	2208      	movs	r2, #8
 8005f1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005f1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005f1e:	f043 0304 	orr.w	r3, r3, #4
 8005f22:	6563      	str	r3, [r4, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005f24:	2304      	movs	r3, #4
 8005f26:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8005f30:	69e3      	ldr	r3, [r4, #28]
 8005f32:	b10b      	cbz	r3, 8005f38 <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005f34:	4620      	mov	r0, r4
 8005f36:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005f38:	0772      	lsls	r2, r6, #29
 8005f3a:	d50b      	bpl.n	8005f54 <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005f3c:	056b      	lsls	r3, r5, #21
 8005f3e:	d509      	bpl.n	8005f54 <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005f40:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005f42:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f4a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005f4c:	2204      	movs	r2, #4
 8005f4e:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005f50:	f7ff ffa2 	bl	8005e98 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005f54:	07b0      	lsls	r0, r6, #30
 8005f56:	d514      	bpl.n	8005f82 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005f58:	05a9      	lsls	r1, r5, #22
 8005f5a:	d512      	bpl.n	8005f82 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005f64:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005f66:	2202      	movs	r2, #2
 8005f68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005f6a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005f6c:	6563      	str	r3, [r4, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005f74:	2300      	movs	r3, #0
 8005f76:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 8005f7a:	69a3      	ldr	r3, [r4, #24]
 8005f7c:	b10b      	cbz	r3, 8005f82 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005f7e:	4620      	mov	r0, r4
 8005f80:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005f82:	06f2      	lsls	r2, r6, #27
 8005f84:	d513      	bpl.n	8005fae <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005f86:	04eb      	lsls	r3, r5, #19
 8005f88:	d511      	bpl.n	8005fae <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005f8a:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005f8c:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f94:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005f96:	2210      	movs	r2, #16
 8005f98:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005f9a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005f9c:	6563      	str	r3, [r4, #84]	; 0x54
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      __HAL_UNLOCK(hdma2d);
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005faa:	f7ff ff76 	bl	8005e9a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005fae:	bd70      	pop	{r4, r5, r6, pc}

08005fb0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005fb0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005fb2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	f04f 0302 	mov.w	r3, #2
 8005fbc:	d031      	beq.n	8006022 <HAL_DMA2D_ConfigLayer+0x72>

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005fbe:	2418      	movs	r4, #24
  __HAL_LOCK(hdma2d);
 8005fc0:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005fc2:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005fc6:	fb04 0401 	mla	r4, r4, r1, r0
  __HAL_LOCK(hdma2d);
 8005fca:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005fce:	6b22      	ldr	r2, [r4, #48]	; 0x30
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005fd0:	e9d4 5609 	ldrd	r5, r6, [r4, #36]	; 0x24
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005fd4:	0513      	lsls	r3, r2, #20
 8005fd6:	6b62      	ldr	r2, [r4, #52]	; 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005fd8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8005fdc:	4e1b      	ldr	r6, [pc, #108]	; (800604c <HAL_DMA2D_ConfigLayer+0x9c>)
 8005fde:	432b      	orrs	r3, r5
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005fe0:	3d09      	subs	r5, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005fe2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005fe6:	2d01      	cmp	r5, #1
 8005fe8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005fea:	bf96      	itet	ls
 8005fec:	f002 427f 	andls.w	r2, r2, #4278190080	; 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005ff0:	ea43 6302 	orrhi.w	r3, r3, r2, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005ff4:	4313      	orrls	r3, r2

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005ff6:	6802      	ldr	r2, [r0, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005ff8:	b9a9      	cbnz	r1, 8006026 <HAL_DMA2D_ConfigLayer+0x76>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005ffa:	6a54      	ldr	r4, [r2, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005ffc:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005ffe:	ea04 0406 	and.w	r4, r4, r6
 8006002:	ea43 0304 	orr.w	r3, r3, r4
 8006006:	6253      	str	r3, [r2, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006008:	6a03      	ldr	r3, [r0, #32]
 800600a:	6193      	str	r3, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800600c:	d803      	bhi.n	8006016 <HAL_DMA2D_ConfigLayer+0x66>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800600e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006010:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006014:	6293      	str	r3, [r2, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006016:	2301      	movs	r3, #1
 8006018:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800601c:	2300      	movs	r3, #0
 800601e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  __HAL_LOCK(hdma2d);
 8006022:	4618      	mov	r0, r3

  return HAL_OK;
}
 8006024:	bd70      	pop	{r4, r5, r6, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006026:	69d4      	ldr	r4, [r2, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006028:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800602a:	ea04 0406 	and.w	r4, r4, r6
 800602e:	ea43 0304 	orr.w	r3, r3, r4
 8006032:	61d3      	str	r3, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006034:	f04f 0318 	mov.w	r3, #24
 8006038:	fb03 0101 	mla	r1, r3, r1, r0
 800603c:	6a0b      	ldr	r3, [r1, #32]
 800603e:	6113      	str	r3, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006040:	d8e9      	bhi.n	8006016 <HAL_DMA2D_ConfigLayer+0x66>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006042:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8006044:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006048:	6213      	str	r3, [r2, #32]
 800604a:	e7e4      	b.n	8006016 <HAL_DMA2D_ConfigLayer+0x66>
 800604c:	00ccfff0 	.word	0x00ccfff0

08006050 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8006050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006054:	4607      	mov	r7, r0
 8006056:	460d      	mov	r5, r1
 8006058:	4614      	mov	r4, r2
 800605a:	461e      	mov	r6, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800605c:	f7ff fc1a 	bl	8005894 <HAL_GetTick>
 8006060:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006066:	07d2      	lsls	r2, r2, #31
 8006068:	d50a      	bpl.n	8006080 <DSI_ShortWrite+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800606a:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 800606e:	9906      	ldr	r1, [sp, #24]

  return HAL_OK;
 8006070:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8006072:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8006076:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800607a:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 800607c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006080:	f7ff fc08 	bl	8005894 <HAL_GetTick>
 8006084:	eba0 0008 	sub.w	r0, r0, r8
 8006088:	2864      	cmp	r0, #100	; 0x64
 800608a:	d9ea      	bls.n	8006062 <DSI_ShortWrite+0x12>
      return HAL_TIMEOUT;
 800608c:	2003      	movs	r0, #3
 800608e:	e7f5      	b.n	800607c <DSI_ShortWrite+0x2c>

08006090 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006090:	7c03      	ldrb	r3, [r0, #16]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d05c      	beq.n	8006150 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 8006096:	2200      	movs	r2, #0
 8006098:	6803      	ldr	r3, [r0, #0]
 800609a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800609e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80060a2:	07ca      	lsls	r2, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 80060a4:	6181      	str	r1, [r0, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80060a6:	d507      	bpl.n	80060b8 <HAL_DSI_ConfigErrorMonitor+0x28>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80060a8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80060ac:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 80060b0:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 80060b4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80060b8:	078a      	lsls	r2, r1, #30
 80060ba:	d505      	bpl.n	80060c8 <HAL_DSI_ConfigErrorMonitor+0x38>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80060bc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80060c0:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80060c4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80060c8:	074a      	lsls	r2, r1, #29
 80060ca:	d505      	bpl.n	80060d8 <HAL_DSI_ConfigErrorMonitor+0x48>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80060cc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80060d0:	f042 0201 	orr.w	r2, r2, #1
 80060d4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80060d8:	070a      	lsls	r2, r1, #28
 80060da:	d505      	bpl.n	80060e8 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80060dc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80060e0:	f042 0202 	orr.w	r2, r2, #2
 80060e4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80060e8:	06ca      	lsls	r2, r1, #27
 80060ea:	d505      	bpl.n	80060f8 <HAL_DSI_ConfigErrorMonitor+0x68>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80060ec:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80060f0:	f042 020c 	orr.w	r2, r2, #12
 80060f4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80060f8:	068a      	lsls	r2, r1, #26
 80060fa:	d505      	bpl.n	8006108 <HAL_DSI_ConfigErrorMonitor+0x78>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80060fc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006100:	f042 0210 	orr.w	r2, r2, #16
 8006104:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8006108:	064a      	lsls	r2, r1, #25
 800610a:	d505      	bpl.n	8006118 <HAL_DSI_ConfigErrorMonitor+0x88>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800610c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006110:	f042 0220 	orr.w	r2, r2, #32
 8006114:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8006118:	060a      	lsls	r2, r1, #24
 800611a:	d505      	bpl.n	8006128 <HAL_DSI_ConfigErrorMonitor+0x98>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800611c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006124:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8006128:	05ca      	lsls	r2, r1, #23
 800612a:	d505      	bpl.n	8006138 <HAL_DSI_ConfigErrorMonitor+0xa8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800612c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006130:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006134:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8006138:	058a      	lsls	r2, r1, #22
 800613a:	d505      	bpl.n	8006148 <HAL_DSI_ConfigErrorMonitor+0xb8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800613c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006140:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8006144:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8006148:	2300      	movs	r3, #0
 800614a:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800614c:	4618      	mov	r0, r3
 800614e:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006150:	2002      	movs	r0, #2
}
 8006152:	4770      	bx	lr

08006154 <HAL_DSI_Init>:
{
 8006154:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006156:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8006158:	4604      	mov	r4, r0
 800615a:	2800      	cmp	r0, #0
 800615c:	f000 80a7 	beq.w	80062ae <HAL_DSI_Init+0x15a>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8006160:	7c43      	ldrb	r3, [r0, #17]
 8006162:	b90b      	cbnz	r3, 8006168 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8006164:	f7fc fba4 	bl	80028b0 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8006168:	2303      	movs	r3, #3
 800616a:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800616c:	2300      	movs	r3, #0
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	6823      	ldr	r3, [r4, #0]
 8006172:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8006176:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800617a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800617e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8006182:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800618a:	f7ff fb83 	bl	8005894 <HAL_GetTick>
 800618e:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8006190:	6822      	ldr	r2, [r4, #0]
 8006192:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8006196:	04d9      	lsls	r1, r3, #19
 8006198:	d57a      	bpl.n	8006290 <HAL_DSI_Init+0x13c>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800619a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 800619e:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 80061a2:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 80061a6:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80061aa:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80061ae:	e9d5 0300 	ldrd	r0, r3, [r5]
 80061b2:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80061b4:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80061b8:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80061ba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 80061be:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80061c0:	430b      	orrs	r3, r1
 80061c2:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 80061c6:	2300      	movs	r3, #0
 80061c8:	9301      	str	r3, [sp, #4]
 80061ca:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 80061ce:	f043 0301 	orr.w	r3, r3, #1
 80061d2:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 80061d6:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	9301      	str	r3, [sp, #4]
 80061e0:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 80061e2:	f7ff fb5d 	bl	80058a0 <HAL_Delay>
  tickstart = HAL_GetTick();
 80061e6:	f7ff fb55 	bl	8005894 <HAL_GetTick>
 80061ea:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80061ec:	6823      	ldr	r3, [r4, #0]
 80061ee:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80061f2:	05d2      	lsls	r2, r2, #23
 80061f4:	d555      	bpl.n	80062a2 <HAL_DSI_Init+0x14e>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80061f6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80061fa:	f246 10a8 	movw	r0, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80061fe:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8006200:	f042 0206 	orr.w	r2, r2, #6
 8006204:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8006208:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800620c:	f022 0203 	bic.w	r2, r2, #3
 8006210:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8006214:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8006218:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800621a:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800621c:	f042 0201 	orr.w	r2, r2, #1
 8006220:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8006224:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8006228:	f022 0203 	bic.w	r2, r2, #3
 800622c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006230:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8006234:	430a      	orrs	r2, r1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006236:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006238:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800623c:	689a      	ldr	r2, [r3, #8]
 800623e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006242:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006244:	689a      	ldr	r2, [r3, #8]
 8006246:	430a      	orrs	r2, r1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006248:	491a      	ldr	r1, [pc, #104]	; (80062b4 <HAL_DSI_Init+0x160>)
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800624a:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800624c:	686a      	ldr	r2, [r5, #4]
 800624e:	2a01      	cmp	r2, #1
 8006250:	bf38      	it	cc
 8006252:	2201      	movcc	r2, #1
 8006254:	434a      	muls	r2, r1
 8006256:	68a9      	ldr	r1, [r5, #8]
 8006258:	f001 0103 	and.w	r1, r1, #3
 800625c:	408a      	lsls	r2, r1
 800625e:	6829      	ldr	r1, [r5, #0]
 8006260:	4341      	muls	r1, r0
  hdsi->Instance->IER[0U] = 0U;
 8006262:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006264:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8006268:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800626c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8006270:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8006274:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8006278:	430a      	orrs	r2, r1
 800627a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 800627e:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8006282:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 8006286:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8006288:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 800628a:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 800628c:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 800628e:	e006      	b.n	800629e <HAL_DSI_Init+0x14a>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006290:	f7ff fb00 	bl	8005894 <HAL_GetTick>
 8006294:	1b80      	subs	r0, r0, r6
 8006296:	2864      	cmp	r0, #100	; 0x64
 8006298:	f67f af7a 	bls.w	8006190 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 800629c:	2003      	movs	r0, #3
}
 800629e:	b002      	add	sp, #8
 80062a0:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80062a2:	f7ff faf7 	bl	8005894 <HAL_GetTick>
 80062a6:	1b80      	subs	r0, r0, r6
 80062a8:	2864      	cmp	r0, #100	; 0x64
 80062aa:	d99f      	bls.n	80061ec <HAL_DSI_Init+0x98>
 80062ac:	e7f6      	b.n	800629c <HAL_DSI_Init+0x148>
    return HAL_ERROR;
 80062ae:	2001      	movs	r0, #1
 80062b0:	e7f5      	b.n	800629e <HAL_DSI_Init+0x14a>
 80062b2:	bf00      	nop
 80062b4:	003d0900 	.word	0x003d0900

080062b8 <HAL_DSI_ErrorCallback>:
 80062b8:	4770      	bx	lr

080062ba <HAL_DSI_IRQHandler>:
{
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80062ba:	6803      	ldr	r3, [r0, #0]
 80062bc:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80062c0:	07d1      	lsls	r1, r2, #31
{
 80062c2:	b510      	push	{r4, lr}
 80062c4:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80062c6:	d508      	bpl.n	80062da <HAL_DSI_IRQHandler+0x20>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80062c8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80062cc:	07d2      	lsls	r2, r2, #31
 80062ce:	d504      	bpl.n	80062da <HAL_DSI_IRQHandler+0x20>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80062d0:	2201      	movs	r2, #1
 80062d2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 80062d6:	f7fa ffa9 	bl	800122c <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80062da:	6823      	ldr	r3, [r4, #0]
 80062dc:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80062e0:	0791      	lsls	r1, r2, #30
 80062e2:	d509      	bpl.n	80062f8 <HAL_DSI_IRQHandler+0x3e>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80062e4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80062e8:	0792      	lsls	r2, r2, #30
 80062ea:	d505      	bpl.n	80062f8 <HAL_DSI_IRQHandler+0x3e>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80062ec:	2202      	movs	r2, #2
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80062ee:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80062f0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80062f4:	f7fa ffce 	bl	8001294 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80062f8:	69a3      	ldr	r3, [r4, #24]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d04e      	beq.n	800639c <HAL_DSI_IRQHandler+0xe2>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80062fe:	6821      	ldr	r1, [r4, #0]
 8006300:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8006304:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8006308:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800630c:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800630e:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8006312:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8006314:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8006316:	b119      	cbz	r1, 8006320 <HAL_DSI_IRQHandler+0x66>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8006318:	6961      	ldr	r1, [r4, #20]
 800631a:	f041 0101 	orr.w	r1, r1, #1
 800631e:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8006320:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 8006324:	d003      	beq.n	800632e <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8006326:	6962      	ldr	r2, [r4, #20]
 8006328:	f042 0202 	orr.w	r2, r2, #2
 800632c:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800632e:	07d8      	lsls	r0, r3, #31
 8006330:	d503      	bpl.n	800633a <HAL_DSI_IRQHandler+0x80>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8006332:	6962      	ldr	r2, [r4, #20]
 8006334:	f042 0204 	orr.w	r2, r2, #4
 8006338:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800633a:	0799      	lsls	r1, r3, #30
 800633c:	d503      	bpl.n	8006346 <HAL_DSI_IRQHandler+0x8c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800633e:	6962      	ldr	r2, [r4, #20]
 8006340:	f042 0208 	orr.w	r2, r2, #8
 8006344:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8006346:	f013 0f0c 	tst.w	r3, #12
 800634a:	d003      	beq.n	8006354 <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800634c:	6962      	ldr	r2, [r4, #20]
 800634e:	f042 0210 	orr.w	r2, r2, #16
 8006352:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8006354:	06da      	lsls	r2, r3, #27
 8006356:	d503      	bpl.n	8006360 <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8006358:	6962      	ldr	r2, [r4, #20]
 800635a:	f042 0220 	orr.w	r2, r2, #32
 800635e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8006360:	0698      	lsls	r0, r3, #26
 8006362:	d503      	bpl.n	800636c <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8006364:	6962      	ldr	r2, [r4, #20]
 8006366:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800636a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800636c:	0659      	lsls	r1, r3, #25
 800636e:	d503      	bpl.n	8006378 <HAL_DSI_IRQHandler+0xbe>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8006370:	6962      	ldr	r2, [r4, #20]
 8006372:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006376:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8006378:	061a      	lsls	r2, r3, #24
 800637a:	d503      	bpl.n	8006384 <HAL_DSI_IRQHandler+0xca>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800637c:	6962      	ldr	r2, [r4, #20]
 800637e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006382:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8006384:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 8006388:	d003      	beq.n	8006392 <HAL_DSI_IRQHandler+0xd8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800638a:	6963      	ldr	r3, [r4, #20]
 800638c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006390:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8006392:	6963      	ldr	r3, [r4, #20]
 8006394:	b113      	cbz	r3, 800639c <HAL_DSI_IRQHandler+0xe2>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8006396:	4620      	mov	r0, r4
 8006398:	f7ff ff8e 	bl	80062b8 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800639c:	bd10      	pop	{r4, pc}

0800639e <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800639e:	7c03      	ldrb	r3, [r0, #16]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d00b      	beq.n	80063bc <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80063a4:	6803      	ldr	r3, [r0, #0]
 80063a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063a8:	f022 0203 	bic.w	r2, r2, #3
 80063ac:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80063ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063b0:	4311      	orrs	r1, r2
 80063b2:	6319      	str	r1, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80063b4:	2300      	movs	r3, #0
 80063b6:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80063b8:	4618      	mov	r0, r3
 80063ba:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80063bc:	2002      	movs	r0, #2
}
 80063be:	4770      	bx	lr

080063c0 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80063c0:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80063c2:	7c03      	ldrb	r3, [r0, #16]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d06a      	beq.n	800649e <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80063c8:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80063ca:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80063cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063ce:	f042 0201 	orr.w	r2, r2, #1
 80063d2:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80063d4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80063d8:	f022 0201 	bic.w	r2, r2, #1
 80063dc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80063e0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80063e4:	f042 0201 	orr.w	r2, r2, #1
 80063e8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	f022 0203 	bic.w	r2, r2, #3
 80063f2:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80063f4:	68da      	ldr	r2, [r3, #12]
 80063f6:	4322      	orrs	r2, r4
 80063f8:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80063fa:	695a      	ldr	r2, [r3, #20]
 80063fc:	f022 0207 	bic.w	r2, r2, #7
 8006400:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8006402:	695c      	ldr	r4, [r3, #20]
 8006404:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 8006408:	432a      	orrs	r2, r5
 800640a:	694d      	ldr	r5, [r1, #20]
 800640c:	432a      	orrs	r2, r5

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800640e:	684d      	ldr	r5, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8006410:	4322      	orrs	r2, r4
 8006412:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8006414:	691a      	ldr	r2, [r3, #16]
 8006416:	f022 020f 	bic.w	r2, r2, #15
 800641a:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800641c:	691c      	ldr	r4, [r3, #16]
 800641e:	432c      	orrs	r4, r5
 8006420:	611c      	str	r4, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8006422:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8006426:	f024 040e 	bic.w	r4, r4, #14
 800642a:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800642e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8006432:	688c      	ldr	r4, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8006434:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8006438:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800643c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800643e:	0c12      	lsrs	r2, r2, #16
 8006440:	0412      	lsls	r2, r2, #16
 8006442:	665a      	str	r2, [r3, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8006444:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006446:	4322      	orrs	r2, r4
 8006448:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 800644a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800644e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006452:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006456:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 800645a:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 800645e:	432a      	orrs	r2, r5
 8006460:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8006462:	432a      	orrs	r2, r5
 8006464:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8006466:	6a89      	ldr	r1, [r1, #40]	; 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006468:	432a      	orrs	r2, r5
 800646a:	4322      	orrs	r2, r4
 800646c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8006470:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006472:	f022 0201 	bic.w	r2, r2, #1
 8006476:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8006478:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800647a:	430a      	orrs	r2, r1
 800647c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800647e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8006482:	f042 0201 	orr.w	r2, r2, #1
 8006486:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800648a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800648e:	f042 0202 	orr.w	r2, r2, #2
 8006492:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006496:	2300      	movs	r3, #0
 8006498:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800649a:	4618      	mov	r0, r3
}
 800649c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800649e:	2002      	movs	r0, #2
 80064a0:	e7fc      	b.n	800649c <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

080064a4 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80064a4:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80064a6:	7c03      	ldrb	r3, [r0, #16]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d02a      	beq.n	8006502 <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80064ac:	6802      	ldr	r2, [r0, #0]
 80064ae:	4b16      	ldr	r3, [pc, #88]	; (8006508 <HAL_DSI_ConfigCommand+0x64>)
 80064b0:	6e94      	ldr	r4, [r2, #104]	; 0x68
 80064b2:	4023      	ands	r3, r4
 80064b4:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80064b6:	6e94      	ldr	r4, [r2, #104]	; 0x68
 80064b8:	e9d1 3500 	ldrd	r3, r5, [r1]
 80064bc:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 80064be:	688d      	ldr	r5, [r1, #8]
 80064c0:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 80064c2:	68cd      	ldr	r5, [r1, #12]
 80064c4:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 80064c6:	690d      	ldr	r5, [r1, #16]
 80064c8:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 80064ca:	694d      	ldr	r5, [r1, #20]
 80064cc:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 80064ce:	698d      	ldr	r5, [r1, #24]
 80064d0:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 80064d2:	69cd      	ldr	r5, [r1, #28]
 80064d4:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 80064d6:	6a0d      	ldr	r5, [r1, #32]
 80064d8:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 80064da:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 80064dc:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 80064de:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80064e0:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 80064e2:	6acd      	ldr	r5, [r1, #44]	; 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80064e4:	6b09      	ldr	r1, [r1, #48]	; 0x30
                           LPCmd->LPDcsLongWrite      | \
 80064e6:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80064e8:	4323      	orrs	r3, r4
 80064ea:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80064ec:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80064ee:	f023 0302 	bic.w	r3, r3, #2
 80064f2:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80064f4:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80064f6:	430b      	orrs	r3, r1
 80064f8:	6693      	str	r3, [r2, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80064fa:	2300      	movs	r3, #0
 80064fc:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80064fe:	4618      	mov	r0, r3
}
 8006500:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006502:	2002      	movs	r0, #2
 8006504:	e7fc      	b.n	8006500 <HAL_DSI_ConfigCommand+0x5c>
 8006506:	bf00      	nop
 8006508:	fef080ff 	.word	0xfef080ff

0800650c <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800650c:	7c03      	ldrb	r3, [r0, #16]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d00b      	beq.n	800652a <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8006512:	6803      	ldr	r3, [r0, #0]
 8006514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006516:	f022 021f 	bic.w	r2, r2, #31
 800651a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800651c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800651e:	4311      	orrs	r1, r2
 8006520:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006522:	2300      	movs	r3, #0
 8006524:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006526:	4618      	mov	r0, r3
 8006528:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800652a:	2002      	movs	r0, #2
}
 800652c:	4770      	bx	lr

0800652e <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800652e:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006530:	7c03      	ldrb	r3, [r0, #16]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d035      	beq.n	80065a2 <HAL_DSI_ConfigPhyTimer+0x74>
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8006536:	6803      	ldr	r3, [r0, #0]
  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8006538:	e9d1 2400 	ldrd	r2, r4, [r1]
 800653c:	4294      	cmp	r4, r2
 800653e:	bf38      	it	cc
 8006540:	4614      	movcc	r4, r2
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8006542:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8006546:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800654a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800654e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8006552:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006556:	4322      	orrs	r2, r4
 8006558:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800655c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006560:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8006564:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006568:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800656c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8006570:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006572:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8006576:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8006578:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800657a:	432a      	orrs	r2, r5
 800657c:	4322      	orrs	r2, r4
 800657e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8006582:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8006586:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800658a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800658e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8006592:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006596:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800659a:	2300      	movs	r3, #0
 800659c:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800659e:	4618      	mov	r0, r3
}
 80065a0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80065a2:	2002      	movs	r0, #2
 80065a4:	e7fc      	b.n	80065a0 <HAL_DSI_ConfigPhyTimer+0x72>
	...

080065a8 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80065a8:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80065aa:	7c03      	ldrb	r3, [r0, #16]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d05c      	beq.n	800666a <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80065b0:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80065b2:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80065b4:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80065b6:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80065b8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80065bc:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80065be:	689a      	ldr	r2, [r3, #8]
 80065c0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80065c4:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80065c6:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80065c8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80065ca:	b292      	uxth	r2, r2
 80065cc:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80065ce:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80065d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80065d4:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80065d6:	4a26      	ldr	r2, [pc, #152]	; (8006670 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 80065d8:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 80065da:	4014      	ands	r4, r2
 80065dc:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80065de:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 80065e0:	432c      	orrs	r4, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80065e2:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80065e4:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80065e6:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 80065e8:	4014      	ands	r4, r2
 80065ea:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80065ec:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 80065ee:	432c      	orrs	r4, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80065f0:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80065f2:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80065f4:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80065f8:	4014      	ands	r4, r2
 80065fa:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80065fe:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006602:	432c      	orrs	r4, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8006604:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006606:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800660a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800660e:	4014      	ands	r4, r2
 8006610:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8006614:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006618:	432c      	orrs	r4, r5
 800661a:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800661e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006622:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8006626:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800662a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800662e:	698d      	ldr	r5, [r1, #24]
 8006630:	432c      	orrs	r4, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8006632:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8006634:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8006636:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 800663a:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 800663e:	4014      	ands	r4, r2
 8006640:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8006644:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8006648:	432c      	orrs	r4, r5
 800664a:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800664e:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8006652:	4022      	ands	r2, r4
 8006654:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8006658:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800665c:	430a      	orrs	r2, r1
 800665e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006662:	2300      	movs	r3, #0
 8006664:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006666:	4618      	mov	r0, r3
}
 8006668:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800666a:	2002      	movs	r0, #2
 800666c:	e7fc      	b.n	8006668 <HAL_DSI_ConfigHostTimeouts+0xc0>
 800666e:	bf00      	nop
 8006670:	ffff0000 	.word	0xffff0000

08006674 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006674:	7c03      	ldrb	r3, [r0, #16]
{
 8006676:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8006678:	2b01      	cmp	r3, #1
 800667a:	d01c      	beq.n	80066b6 <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800667c:	6802      	ldr	r2, [r0, #0]
 800667e:	2300      	movs	r3, #0
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	6851      	ldr	r1, [r2, #4]
 8006684:	f041 0101 	orr.w	r1, r1, #1
 8006688:	6051      	str	r1, [r2, #4]
 800668a:	6851      	ldr	r1, [r2, #4]
 800668c:	f001 0101 	and.w	r1, r1, #1
 8006690:	9100      	str	r1, [sp, #0]
 8006692:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8006694:	9301      	str	r3, [sp, #4]
 8006696:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 800669a:	f041 0108 	orr.w	r1, r1, #8
 800669e:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 80066a2:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80066a6:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80066a8:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80066aa:	f002 0208 	and.w	r2, r2, #8
 80066ae:	9201      	str	r2, [sp, #4]
 80066b0:	9a01      	ldr	r2, [sp, #4]
}
 80066b2:	b002      	add	sp, #8
 80066b4:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80066b6:	2002      	movs	r0, #2
 80066b8:	e7fb      	b.n	80066b2 <HAL_DSI_Start+0x3e>

080066ba <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80066ba:	7c03      	ldrb	r3, [r0, #16]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d00a      	beq.n	80066d6 <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 80066c0:	6802      	ldr	r2, [r0, #0]
 80066c2:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 80066c6:	f043 0304 	orr.w	r3, r3, #4
 80066ca:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80066ce:	2300      	movs	r3, #0
 80066d0:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80066d2:	4618      	mov	r0, r3
 80066d4:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80066d6:	2002      	movs	r0, #2
}
 80066d8:	4770      	bx	lr

080066da <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80066da:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80066dc:	7c05      	ldrb	r5, [r0, #16]
{
 80066de:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 80066e0:	2d01      	cmp	r5, #1
 80066e2:	d009      	beq.n	80066f8 <HAL_DSI_ShortWrite+0x1e>
 80066e4:	2501      	movs	r5, #1
 80066e6:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80066e8:	9d06      	ldr	r5, [sp, #24]
 80066ea:	9500      	str	r5, [sp, #0]
 80066ec:	f7ff fcb0 	bl	8006050 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80066f0:	2300      	movs	r3, #0
 80066f2:	7423      	strb	r3, [r4, #16]

  return status;
}
 80066f4:	b003      	add	sp, #12
 80066f6:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80066f8:	2002      	movs	r0, #2
 80066fa:	e7fb      	b.n	80066f4 <HAL_DSI_ShortWrite+0x1a>

080066fc <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 80066fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006700:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006702:	7c03      	ldrb	r3, [r0, #16]
{
 8006704:	4606      	mov	r6, r0
 8006706:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8006708:	2b01      	cmp	r3, #1
{
 800670a:	4615      	mov	r5, r2
 800670c:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
  __HAL_LOCK(hdsi);
 8006710:	d052      	beq.n	80067b8 <HAL_DSI_LongWrite+0xbc>
 8006712:	2301      	movs	r3, #1
 8006714:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8006716:	f7ff f8bd 	bl	8005894 <HAL_GetTick>
 800671a:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800671c:	6831      	ldr	r1, [r6, #0]
 800671e:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 8006720:	f013 0a01 	ands.w	sl, r3, #1
 8006724:	d01a      	beq.n	800675c <HAL_DSI_LongWrite+0x60>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8006726:	2c03      	cmp	r4, #3
 8006728:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 800672a:	f04f 0200 	mov.w	r2, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800672e:	bf28      	it	cs
 8006730:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 8006732:	4282      	cmp	r2, r0
 8006734:	d11d      	bne.n	8006772 <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 8006736:	1aa3      	subs	r3, r4, r2
  pparams += nbBytes;
 8006738:	4442      	add	r2, r8
  hdsi->Instance->GPDR = fifoword;
 800673a:	f8c1 9070 	str.w	r9, [r1, #112]	; 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800673e:	bb13      	cbnz	r3, 8006786 <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8006740:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006742:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 8006746:	4618      	mov	r0, r3
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006748:	0222      	lsls	r2, r4, #8
 800674a:	0224      	lsls	r4, r4, #8
 800674c:	b292      	uxth	r2, r2
 800674e:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 8006752:	4315      	orrs	r5, r2
 8006754:	432c      	orrs	r4, r5
 8006756:	66cc      	str	r4, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 8006758:	7433      	strb	r3, [r6, #16]
  return HAL_OK;
 800675a:	e008      	b.n	800676e <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800675c:	f7ff f89a 	bl	8005894 <HAL_GetTick>
 8006760:	eba0 000b 	sub.w	r0, r0, fp
 8006764:	2864      	cmp	r0, #100	; 0x64
 8006766:	d9d9      	bls.n	800671c <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 8006768:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800676a:	f886 a010 	strb.w	sl, [r6, #16]
}
 800676e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8006772:	f818 3002 	ldrb.w	r3, [r8, r2]
 8006776:	3201      	adds	r2, #1
 8006778:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 800677c:	fa03 f30c 	lsl.w	r3, r3, ip
 8006780:	ea49 0903 	orr.w	r9, r9, r3
  for (count = 0U; count < nbBytes; count++)
 8006784:	e7d5      	b.n	8006732 <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006786:	2b04      	cmp	r3, #4
    fifoword = 0U;
 8006788:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800678c:	469e      	mov	lr, r3
    for (count = 0U; count < nbBytes; count++)
 800678e:	4660      	mov	r0, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006790:	bf28      	it	cs
 8006792:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006796:	f812 8000 	ldrb.w	r8, [r2, r0]
 800679a:	ea4f 09c0 	mov.w	r9, r0, lsl #3
    for (count = 0U; count < nbBytes; count++)
 800679e:	3001      	adds	r0, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80067a0:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 80067a4:	4586      	cmp	lr, r0
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80067a6:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 80067aa:	d1f4      	bne.n	8006796 <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 80067ac:	eba3 030e 	sub.w	r3, r3, lr
    pparams += nbBytes;
 80067b0:	4472      	add	r2, lr
    hdsi->Instance->GPDR = fifoword;
 80067b2:	f8c1 c070 	str.w	ip, [r1, #112]	; 0x70
    pparams += nbBytes;
 80067b6:	e7c2      	b.n	800673e <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 80067b8:	2002      	movs	r0, #2
 80067ba:	e7d8      	b.n	800676e <HAL_DSI_LongWrite+0x72>

080067bc <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80067bc:	7c03      	ldrb	r3, [r0, #16]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d010      	beq.n	80067e4 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80067c2:	6803      	ldr	r3, [r0, #0]
 80067c4:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80067c8:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80067cc:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80067d0:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80067d4:	ea42 6141 	orr.w	r1, r2, r1, lsl #25
 80067d8:	f8c3 141c 	str.w	r1, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80067dc:	2300      	movs	r3, #0
 80067de:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80067e0:	4618      	mov	r0, r3
 80067e2:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80067e4:	2002      	movs	r0, #2
}
 80067e6:	4770      	bx	lr

080067e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80067e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80067ec:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067ee:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80069ac <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80067f2:	4a6c      	ldr	r2, [pc, #432]	; (80069a4 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 80067f4:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80067f6:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 80067f8:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80067fa:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 80067fe:	43ac      	bics	r4, r5
 8006800:	f040 80b6 	bne.w	8006970 <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006804:	684d      	ldr	r5, [r1, #4]
 8006806:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800680a:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800680c:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006810:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006814:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006816:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006818:	2f01      	cmp	r7, #1
 800681a:	d834      	bhi.n	8006886 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 800681c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800681e:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8006822:	68cf      	ldr	r7, [r1, #12]
 8006824:	fa07 f708 	lsl.w	r7, r7, r8
 8006828:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800682c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800682e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006830:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006834:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8006838:	409f      	lsls	r7, r3
 800683a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800683e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8006840:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006842:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006844:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006848:	688f      	ldr	r7, [r1, #8]
 800684a:	fa07 f708 	lsl.w	r7, r7, r8
 800684e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8006852:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006854:	d119      	bne.n	800688a <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 8006856:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800685a:	f003 0b07 	and.w	fp, r3, #7
 800685e:	f04f 0e0f 	mov.w	lr, #15
 8006862:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8006866:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800686a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800686e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8006872:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006876:	690f      	ldr	r7, [r1, #16]
 8006878:	fa07 f70b 	lsl.w	r7, r7, fp
 800687c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8006880:	f8ca 7020 	str.w	r7, [sl, #32]
 8006884:	e001      	b.n	800688a <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006886:	2c03      	cmp	r4, #3
 8006888:	d1da      	bne.n	8006840 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 800688a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800688c:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006890:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006894:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006898:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 800689c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800689e:	d067      	beq.n	8006970 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068a0:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 80068a4:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80068a8:	f003 0703 	and.w	r7, r3, #3
 80068ac:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068b0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80068b4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80068b8:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068ba:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 80068be:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 80068c2:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 80068c6:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 80068ca:	9401      	str	r4, [sp, #4]
 80068cc:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80068ce:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 80068d2:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80068d6:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80068da:	4c33      	ldr	r4, [pc, #204]	; (80069a8 <HAL_GPIO_Init+0x1c0>)
 80068dc:	42a0      	cmp	r0, r4
 80068de:	d04e      	beq.n	800697e <HAL_GPIO_Init+0x196>
 80068e0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80068e4:	42a0      	cmp	r0, r4
 80068e6:	d04c      	beq.n	8006982 <HAL_GPIO_Init+0x19a>
 80068e8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80068ec:	42a0      	cmp	r0, r4
 80068ee:	d04a      	beq.n	8006986 <HAL_GPIO_Init+0x19e>
 80068f0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80068f4:	42a0      	cmp	r0, r4
 80068f6:	d048      	beq.n	800698a <HAL_GPIO_Init+0x1a2>
 80068f8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80068fc:	42a0      	cmp	r0, r4
 80068fe:	d046      	beq.n	800698e <HAL_GPIO_Init+0x1a6>
 8006900:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006904:	42a0      	cmp	r0, r4
 8006906:	d044      	beq.n	8006992 <HAL_GPIO_Init+0x1aa>
 8006908:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800690c:	42a0      	cmp	r0, r4
 800690e:	d042      	beq.n	8006996 <HAL_GPIO_Init+0x1ae>
 8006910:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006914:	42a0      	cmp	r0, r4
 8006916:	d040      	beq.n	800699a <HAL_GPIO_Init+0x1b2>
 8006918:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800691c:	42a0      	cmp	r0, r4
 800691e:	d03e      	beq.n	800699e <HAL_GPIO_Init+0x1b6>
 8006920:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006924:	42a0      	cmp	r0, r4
 8006926:	bf0c      	ite	eq
 8006928:	2409      	moveq	r4, #9
 800692a:	240a      	movne	r4, #10
 800692c:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800692e:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006930:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8006934:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8006936:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 800693a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800693c:	bf54      	ite	pl
 800693e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8006940:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006944:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 8006946:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8006948:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800694a:	bf54      	ite	pl
 800694c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800694e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006952:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8006954:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8006956:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8006958:	bf54      	ite	pl
 800695a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800695c:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006960:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8006962:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8006964:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8006966:	bf54      	ite	pl
 8006968:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800696a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 800696e:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006970:	3301      	adds	r3, #1
 8006972:	2b10      	cmp	r3, #16
 8006974:	f47f af3e 	bne.w	80067f4 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8006978:	b003      	add	sp, #12
 800697a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800697e:	2400      	movs	r4, #0
 8006980:	e7d4      	b.n	800692c <HAL_GPIO_Init+0x144>
 8006982:	2401      	movs	r4, #1
 8006984:	e7d2      	b.n	800692c <HAL_GPIO_Init+0x144>
 8006986:	2402      	movs	r4, #2
 8006988:	e7d0      	b.n	800692c <HAL_GPIO_Init+0x144>
 800698a:	2403      	movs	r4, #3
 800698c:	e7ce      	b.n	800692c <HAL_GPIO_Init+0x144>
 800698e:	2404      	movs	r4, #4
 8006990:	e7cc      	b.n	800692c <HAL_GPIO_Init+0x144>
 8006992:	2405      	movs	r4, #5
 8006994:	e7ca      	b.n	800692c <HAL_GPIO_Init+0x144>
 8006996:	2406      	movs	r4, #6
 8006998:	e7c8      	b.n	800692c <HAL_GPIO_Init+0x144>
 800699a:	2407      	movs	r4, #7
 800699c:	e7c6      	b.n	800692c <HAL_GPIO_Init+0x144>
 800699e:	2408      	movs	r4, #8
 80069a0:	e7c4      	b.n	800692c <HAL_GPIO_Init+0x144>
 80069a2:	bf00      	nop
 80069a4:	40013c00 	.word	0x40013c00
 80069a8:	40020000 	.word	0x40020000
 80069ac:	40023800 	.word	0x40023800

080069b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80069b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80069b4:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80069b6:	4c4a      	ldr	r4, [pc, #296]	; (8006ae0 <HAL_GPIO_DeInit+0x130>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80069b8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8006ae8 <HAL_GPIO_DeInit+0x138>
 80069bc:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8006aec <HAL_GPIO_DeInit+0x13c>
 80069c0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8006af0 <HAL_GPIO_DeInit+0x140>
    ioposition = ((uint32_t)0x01) << position;
 80069c4:	2301      	movs	r3, #1
 80069c6:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 80069ca:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 80069ce:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 80069d2:	d16e      	bne.n	8006ab2 <HAL_GPIO_DeInit+0x102>
      tmp = SYSCFG->EXTICR[position >> 2];
 80069d4:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80069d8:	f002 0c03 	and.w	ip, r2, #3
 80069dc:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80069de:	4b41      	ldr	r3, [pc, #260]	; (8006ae4 <HAL_GPIO_DeInit+0x134>)
 80069e0:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80069e4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80069e8:	4298      	cmp	r0, r3
 80069ea:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80069ee:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
 80069f2:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80069f6:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80069fa:	d05f      	beq.n	8006abc <HAL_GPIO_DeInit+0x10c>
 80069fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a00:	4298      	cmp	r0, r3
 8006a02:	d05d      	beq.n	8006ac0 <HAL_GPIO_DeInit+0x110>
 8006a04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a08:	4298      	cmp	r0, r3
 8006a0a:	d05b      	beq.n	8006ac4 <HAL_GPIO_DeInit+0x114>
 8006a0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a10:	4298      	cmp	r0, r3
 8006a12:	d059      	beq.n	8006ac8 <HAL_GPIO_DeInit+0x118>
 8006a14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a18:	4298      	cmp	r0, r3
 8006a1a:	d057      	beq.n	8006acc <HAL_GPIO_DeInit+0x11c>
 8006a1c:	4548      	cmp	r0, r9
 8006a1e:	d057      	beq.n	8006ad0 <HAL_GPIO_DeInit+0x120>
 8006a20:	4550      	cmp	r0, sl
 8006a22:	d057      	beq.n	8006ad4 <HAL_GPIO_DeInit+0x124>
 8006a24:	4558      	cmp	r0, fp
 8006a26:	d057      	beq.n	8006ad8 <HAL_GPIO_DeInit+0x128>
 8006a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a2c:	4298      	cmp	r0, r3
 8006a2e:	d055      	beq.n	8006adc <HAL_GPIO_DeInit+0x12c>
 8006a30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a34:	4298      	cmp	r0, r3
 8006a36:	bf0c      	ite	eq
 8006a38:	2309      	moveq	r3, #9
 8006a3a:	230a      	movne	r3, #10
 8006a3c:	fa03 f30c 	lsl.w	r3, r3, ip
 8006a40:	4543      	cmp	r3, r8
 8006a42:	d113      	bne.n	8006a6c <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	ea23 0307 	bic.w	r3, r3, r7
 8006a4a:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006a4c:	6863      	ldr	r3, [r4, #4]
 8006a4e:	ea23 0307 	bic.w	r3, r3, r7
 8006a52:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006a54:	68e3      	ldr	r3, [r4, #12]
 8006a56:	ea23 0307 	bic.w	r3, r3, r7
 8006a5a:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006a5c:	68a3      	ldr	r3, [r4, #8]
 8006a5e:	ea23 0307 	bic.w	r3, r3, r7
 8006a62:	60a3      	str	r3, [r4, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006a64:	68ab      	ldr	r3, [r5, #8]
 8006a66:	ea23 0306 	bic.w	r3, r3, r6
 8006a6a:	60ab      	str	r3, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006a6c:	2603      	movs	r6, #3
 8006a6e:	0053      	lsls	r3, r2, #1
 8006a70:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006a72:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006a76:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006a7a:	270f      	movs	r7, #15
 8006a7c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006a80:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006a84:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006a88:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006a8a:	fa22 f506 	lsr.w	r5, r2, r6
 8006a8e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8006a92:	6a2e      	ldr	r6, [r5, #32]
 8006a94:	ea26 0707 	bic.w	r7, r6, r7
 8006a98:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006a9a:	68c5      	ldr	r5, [r0, #12]
 8006a9c:	ea25 0503 	bic.w	r5, r5, r3
 8006aa0:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006aa2:	6845      	ldr	r5, [r0, #4]
 8006aa4:	ea25 050e 	bic.w	r5, r5, lr
 8006aa8:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006aaa:	6885      	ldr	r5, [r0, #8]
 8006aac:	ea25 0303 	bic.w	r3, r5, r3
 8006ab0:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006ab2:	3201      	adds	r2, #1
 8006ab4:	2a10      	cmp	r2, #16
 8006ab6:	d185      	bne.n	80069c4 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8006ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006abc:	2300      	movs	r3, #0
 8006abe:	e7bd      	b.n	8006a3c <HAL_GPIO_DeInit+0x8c>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e7bb      	b.n	8006a3c <HAL_GPIO_DeInit+0x8c>
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	e7b9      	b.n	8006a3c <HAL_GPIO_DeInit+0x8c>
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e7b7      	b.n	8006a3c <HAL_GPIO_DeInit+0x8c>
 8006acc:	2304      	movs	r3, #4
 8006ace:	e7b5      	b.n	8006a3c <HAL_GPIO_DeInit+0x8c>
 8006ad0:	2305      	movs	r3, #5
 8006ad2:	e7b3      	b.n	8006a3c <HAL_GPIO_DeInit+0x8c>
 8006ad4:	2306      	movs	r3, #6
 8006ad6:	e7b1      	b.n	8006a3c <HAL_GPIO_DeInit+0x8c>
 8006ad8:	2307      	movs	r3, #7
 8006ada:	e7af      	b.n	8006a3c <HAL_GPIO_DeInit+0x8c>
 8006adc:	2308      	movs	r3, #8
 8006ade:	e7ad      	b.n	8006a3c <HAL_GPIO_DeInit+0x8c>
 8006ae0:	40013c00 	.word	0x40013c00
 8006ae4:	40020000 	.word	0x40020000
 8006ae8:	40021400 	.word	0x40021400
 8006aec:	40021800 	.word	0x40021800
 8006af0:	40021c00 	.word	0x40021c00

08006af4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006af4:	6903      	ldr	r3, [r0, #16]
 8006af6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8006af8:	bf14      	ite	ne
 8006afa:	2001      	movne	r0, #1
 8006afc:	2000      	moveq	r0, #0
 8006afe:	4770      	bx	lr

08006b00 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006b00:	b10a      	cbz	r2, 8006b06 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006b02:	6181      	str	r1, [r0, #24]
  }
}
 8006b04:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006b06:	0409      	lsls	r1, r1, #16
 8006b08:	e7fb      	b.n	8006b02 <HAL_GPIO_WritePin+0x2>

08006b0a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006b0a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006b0c:	ea01 0203 	and.w	r2, r1, r3
 8006b10:	ea21 0103 	bic.w	r1, r1, r3
 8006b14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b18:	6181      	str	r1, [r0, #24]
}
 8006b1a:	4770      	bx	lr

08006b1c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006b1c:	6803      	ldr	r3, [r0, #0]
 8006b1e:	699a      	ldr	r2, [r3, #24]
 8006b20:	0791      	lsls	r1, r2, #30
 8006b22:	d501      	bpl.n	8006b28 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006b24:	2200      	movs	r2, #0
 8006b26:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b28:	699a      	ldr	r2, [r3, #24]
 8006b2a:	07d2      	lsls	r2, r2, #31
 8006b2c:	d403      	bmi.n	8006b36 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006b2e:	699a      	ldr	r2, [r3, #24]
 8006b30:	f042 0201 	orr.w	r2, r2, #1
 8006b34:	619a      	str	r2, [r3, #24]
  }
}
 8006b36:	4770      	bx	lr

08006b38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b38:	b530      	push	{r4, r5, lr}
 8006b3a:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b3c:	f3c1 0109 	ubfx	r1, r1, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b40:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b42:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b44:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b4a:	4a05      	ldr	r2, [pc, #20]	; (8006b60 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b4c:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b4e:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b56:	ea20 0002 	bic.w	r0, r0, r2
 8006b5a:	4303      	orrs	r3, r0
 8006b5c:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006b5e:	bd30      	pop	{r4, r5, pc}
 8006b60:	03ff63ff 	.word	0x03ff63ff

08006b64 <I2C_IsErrorOccurred>:
{
 8006b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8006b68:	6803      	ldr	r3, [r0, #0]
{
 8006b6a:	4605      	mov	r5, r0
 8006b6c:	4688      	mov	r8, r1
 8006b6e:	4617      	mov	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8006b70:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006b72:	f014 0410 	ands.w	r4, r4, #16
 8006b76:	d079      	beq.n	8006c6c <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b78:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8006b7a:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8006b7c:	f04f 0920 	mov.w	r9, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b80:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b82:	682b      	ldr	r3, [r5, #0]
 8006b84:	699a      	ldr	r2, [r3, #24]
 8006b86:	0694      	lsls	r4, r2, #26
 8006b88:	d436      	bmi.n	8006bf8 <I2C_IsErrorOccurred+0x94>
 8006b8a:	b10e      	cbz	r6, 8006b90 <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8006b8c:	2404      	movs	r4, #4
 8006b8e:	e039      	b.n	8006c04 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8006b90:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006b94:	d0f6      	beq.n	8006b84 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006b96:	f7fe fe7d 	bl	8005894 <HAL_GetTick>
 8006b9a:	1bc0      	subs	r0, r0, r7
 8006b9c:	4540      	cmp	r0, r8
 8006b9e:	d802      	bhi.n	8006ba6 <I2C_IsErrorOccurred+0x42>
 8006ba0:	f1b8 0f00 	cmp.w	r8, #0
 8006ba4:	d1ed      	bne.n	8006b82 <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006ba6:	682b      	ldr	r3, [r5, #0]
 8006ba8:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8006baa:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006bae:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8006bb0:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006bb2:	0400      	lsls	r0, r0, #16
 8006bb4:	d50a      	bpl.n	8006bcc <I2C_IsErrorOccurred+0x68>
 8006bb6:	0449      	lsls	r1, r1, #17
 8006bb8:	d408      	bmi.n	8006bcc <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 8006bba:	2a20      	cmp	r2, #32
 8006bbc:	d006      	beq.n	8006bcc <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bc4:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8006bc6:	f7fe fe65 	bl	8005894 <HAL_GetTick>
 8006bca:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006bcc:	682b      	ldr	r3, [r5, #0]
 8006bce:	699c      	ldr	r4, [r3, #24]
 8006bd0:	f014 0420 	ands.w	r4, r4, #32
 8006bd4:	d1d5      	bne.n	8006b82 <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006bd6:	f7fe fe5d 	bl	8005894 <HAL_GetTick>
 8006bda:	1bc0      	subs	r0, r0, r7
 8006bdc:	2819      	cmp	r0, #25
 8006bde:	d9f5      	bls.n	8006bcc <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006be0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 8006be2:	2601      	movs	r6, #1
              __HAL_UNLOCK(hi2c);
 8006be4:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006be8:	f043 0320 	orr.w	r3, r3, #32
 8006bec:	646b      	str	r3, [r5, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006bee:	f885 9041 	strb.w	r9, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bf2:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 8006bf6:	e7e9      	b.n	8006bcc <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8006bf8:	2e00      	cmp	r6, #0
 8006bfa:	d1c7      	bne.n	8006b8c <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bfc:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 8006bfe:	2404      	movs	r4, #4
    status = HAL_ERROR;
 8006c00:	2601      	movs	r6, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c02:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 8006c04:	682b      	ldr	r3, [r5, #0]
 8006c06:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006c08:	05d0      	lsls	r0, r2, #23
 8006c0a:	d505      	bpl.n	8006c18 <I2C_IsErrorOccurred+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006c0c:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8006c10:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8006c14:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006c16:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006c18:	0551      	lsls	r1, r2, #21
 8006c1a:	d505      	bpl.n	8006c28 <I2C_IsErrorOccurred+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006c1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8006c20:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8006c24:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006c26:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006c28:	0592      	lsls	r2, r2, #22
 8006c2a:	d521      	bpl.n	8006c70 <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8006c30:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006c34:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8006c36:	4628      	mov	r0, r5
    __HAL_UNLOCK(hi2c);
 8006c38:	2601      	movs	r6, #1
    I2C_Flush_TXDR(hi2c);
 8006c3a:	f7ff ff6f 	bl	8006b1c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8006c3e:	682a      	ldr	r2, [r5, #0]
 8006c40:	6853      	ldr	r3, [r2, #4]
 8006c42:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8006c46:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8006c4a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8006c4e:	f023 0301 	bic.w	r3, r3, #1
 8006c52:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8006c54:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8006c56:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8006c58:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8006c5a:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006c5c:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c60:	2300      	movs	r3, #0
 8006c62:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8006c66:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8006c6a:	e003      	b.n	8006c74 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8006c6c:	4626      	mov	r6, r4
 8006c6e:	e7c9      	b.n	8006c04 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 8006c70:	2e00      	cmp	r6, #0
 8006c72:	d1e0      	bne.n	8006c36 <I2C_IsErrorOccurred+0xd2>
}
 8006c74:	4630      	mov	r0, r6
 8006c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006c7a <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8006c7a:	b570      	push	{r4, r5, r6, lr}
 8006c7c:	4604      	mov	r4, r0
 8006c7e:	460d      	mov	r5, r1
 8006c80:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c82:	6823      	ldr	r3, [r4, #0]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	079b      	lsls	r3, r3, #30
 8006c88:	d501      	bpl.n	8006c8e <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8006c8a:	2000      	movs	r0, #0
}
 8006c8c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c8e:	4632      	mov	r2, r6
 8006c90:	4629      	mov	r1, r5
 8006c92:	4620      	mov	r0, r4
 8006c94:	f7ff ff66 	bl	8006b64 <I2C_IsErrorOccurred>
 8006c98:	b9a0      	cbnz	r0, 8006cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8006c9a:	1c6a      	adds	r2, r5, #1
 8006c9c:	d0f1      	beq.n	8006c82 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c9e:	f7fe fdf9 	bl	8005894 <HAL_GetTick>
 8006ca2:	1b80      	subs	r0, r0, r6
 8006ca4:	42a8      	cmp	r0, r5
 8006ca6:	d801      	bhi.n	8006cac <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8006ca8:	2d00      	cmp	r5, #0
 8006caa:	d1ea      	bne.n	8006c82 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006cae:	f043 0320 	orr.w	r3, r3, #32
 8006cb2:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006cb4:	2320      	movs	r3, #32
 8006cb6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8006cc0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006cc4:	2001      	movs	r0, #1
 8006cc6:	e7e1      	b.n	8006c8c <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08006cc8 <I2C_WaitOnFlagUntilTimeout>:
{
 8006cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ccc:	9f06      	ldr	r7, [sp, #24]
 8006cce:	4604      	mov	r4, r0
 8006cd0:	4688      	mov	r8, r1
 8006cd2:	4616      	mov	r6, r2
 8006cd4:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cd6:	6822      	ldr	r2, [r4, #0]
 8006cd8:	6993      	ldr	r3, [r2, #24]
 8006cda:	ea38 0303 	bics.w	r3, r8, r3
 8006cde:	bf0c      	ite	eq
 8006ce0:	2301      	moveq	r3, #1
 8006ce2:	2300      	movne	r3, #0
 8006ce4:	42b3      	cmp	r3, r6
 8006ce6:	d001      	beq.n	8006cec <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8006ce8:	2000      	movs	r0, #0
 8006cea:	e015      	b.n	8006d18 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8006cec:	1c6b      	adds	r3, r5, #1
 8006cee:	d0f3      	beq.n	8006cd8 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cf0:	f7fe fdd0 	bl	8005894 <HAL_GetTick>
 8006cf4:	1bc0      	subs	r0, r0, r7
 8006cf6:	42a8      	cmp	r0, r5
 8006cf8:	d801      	bhi.n	8006cfe <I2C_WaitOnFlagUntilTimeout+0x36>
 8006cfa:	2d00      	cmp	r5, #0
 8006cfc:	d1eb      	bne.n	8006cd6 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cfe:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8006d00:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d02:	f043 0320 	orr.w	r3, r3, #32
 8006d06:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d08:	2320      	movs	r3, #32
 8006d0a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8006d14:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006d1c <I2C_RequestMemoryWrite>:
{
 8006d1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006d20:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006d22:	4b18      	ldr	r3, [pc, #96]	; (8006d84 <I2C_RequestMemoryWrite+0x68>)
{
 8006d24:	4605      	mov	r5, r0
 8006d26:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	b2f2      	uxtb	r2, r6
 8006d2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 8006d30:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006d34:	f7ff ff00 	bl	8006b38 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d38:	4628      	mov	r0, r5
 8006d3a:	4642      	mov	r2, r8
 8006d3c:	4639      	mov	r1, r7
 8006d3e:	f7ff ff9c 	bl	8006c7a <I2C_WaitOnTXISFlagUntilTimeout>
 8006d42:	b118      	cbz	r0, 8006d4c <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 8006d44:	2001      	movs	r0, #1
}
 8006d46:	b002      	add	sp, #8
 8006d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d4c:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d4e:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d50:	d10d      	bne.n	8006d6e <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d52:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006d54:	2200      	movs	r2, #0
 8006d56:	2180      	movs	r1, #128	; 0x80
 8006d58:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d5a:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006d5c:	463b      	mov	r3, r7
 8006d5e:	f8cd 8000 	str.w	r8, [sp]
 8006d62:	f7ff ffb1 	bl	8006cc8 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8006d66:	3800      	subs	r0, #0
 8006d68:	bf18      	it	ne
 8006d6a:	2001      	movne	r0, #1
 8006d6c:	e7eb      	b.n	8006d46 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006d6e:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d70:	4639      	mov	r1, r7
 8006d72:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006d74:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d76:	4642      	mov	r2, r8
 8006d78:	f7ff ff7f 	bl	8006c7a <I2C_WaitOnTXISFlagUntilTimeout>
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	d1e1      	bne.n	8006d44 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	e7e6      	b.n	8006d52 <I2C_RequestMemoryWrite+0x36>
 8006d84:	80002000 	.word	0x80002000

08006d88 <I2C_RequestMemoryRead>:
{
 8006d88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006d8c:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006d8e:	4b18      	ldr	r3, [pc, #96]	; (8006df0 <I2C_RequestMemoryRead+0x68>)
{
 8006d90:	4605      	mov	r5, r0
 8006d92:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	b2f2      	uxtb	r2, r6
 8006d98:	2300      	movs	r3, #0
{
 8006d9a:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006d9e:	f7ff fecb 	bl	8006b38 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006da2:	4628      	mov	r0, r5
 8006da4:	4642      	mov	r2, r8
 8006da6:	4639      	mov	r1, r7
 8006da8:	f7ff ff67 	bl	8006c7a <I2C_WaitOnTXISFlagUntilTimeout>
 8006dac:	b118      	cbz	r0, 8006db6 <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8006dae:	2001      	movs	r0, #1
}
 8006db0:	b002      	add	sp, #8
 8006db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006db6:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006db8:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006dba:	d10d      	bne.n	8006dd8 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006dbc:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	2140      	movs	r1, #64	; 0x40
 8006dc2:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006dc4:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006dc6:	463b      	mov	r3, r7
 8006dc8:	f8cd 8000 	str.w	r8, [sp]
 8006dcc:	f7ff ff7c 	bl	8006cc8 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8006dd0:	3800      	subs	r0, #0
 8006dd2:	bf18      	it	ne
 8006dd4:	2001      	movne	r0, #1
 8006dd6:	e7eb      	b.n	8006db0 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006dd8:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dda:	4639      	mov	r1, r7
 8006ddc:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006dde:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006de0:	4642      	mov	r2, r8
 8006de2:	f7ff ff4a 	bl	8006c7a <I2C_WaitOnTXISFlagUntilTimeout>
 8006de6:	2800      	cmp	r0, #0
 8006de8:	d1e1      	bne.n	8006dae <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006dea:	682b      	ldr	r3, [r5, #0]
 8006dec:	e7e6      	b.n	8006dbc <I2C_RequestMemoryRead+0x34>
 8006dee:	bf00      	nop
 8006df0:	80002000 	.word	0x80002000

08006df4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8006df4:	b570      	push	{r4, r5, r6, lr}
 8006df6:	4604      	mov	r4, r0
 8006df8:	460d      	mov	r5, r1
 8006dfa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006dfc:	6823      	ldr	r3, [r4, #0]
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	069b      	lsls	r3, r3, #26
 8006e02:	d501      	bpl.n	8006e08 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8006e04:	2000      	movs	r0, #0
}
 8006e06:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e08:	4632      	mov	r2, r6
 8006e0a:	4629      	mov	r1, r5
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f7ff fea9 	bl	8006b64 <I2C_IsErrorOccurred>
 8006e12:	b990      	cbnz	r0, 8006e3a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e14:	f7fe fd3e 	bl	8005894 <HAL_GetTick>
 8006e18:	1b80      	subs	r0, r0, r6
 8006e1a:	42a8      	cmp	r0, r5
 8006e1c:	d801      	bhi.n	8006e22 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8006e1e:	2d00      	cmp	r5, #0
 8006e20:	d1ec      	bne.n	8006dfc <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006e24:	f043 0320 	orr.w	r3, r3, #32
 8006e28:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006e2a:	2320      	movs	r3, #32
 8006e2c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e30:	2300      	movs	r3, #0
 8006e32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8006e36:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006e3a:	2001      	movs	r0, #1
 8006e3c:	e7e3      	b.n	8006e06 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08006e3e <HAL_I2C_Init>:
{
 8006e3e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8006e40:	4604      	mov	r4, r0
 8006e42:	2800      	cmp	r0, #0
 8006e44:	d04a      	beq.n	8006edc <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e46:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006e4a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006e4e:	b91b      	cbnz	r3, 8006e58 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8006e50:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8006e54:	f7fb fd64 	bl	8002920 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e58:	2324      	movs	r3, #36	; 0x24
 8006e5a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	f022 0201 	bic.w	r2, r2, #1
 8006e66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006e68:	6862      	ldr	r2, [r4, #4]
 8006e6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006e6e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006e70:	689a      	ldr	r2, [r3, #8]
 8006e72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e76:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006e78:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e7c:	2901      	cmp	r1, #1
 8006e7e:	d124      	bne.n	8006eca <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006e80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e84:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006e86:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e88:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006e8a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8006e8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e92:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006e94:	68da      	ldr	r2, [r3, #12]
 8006e96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e9a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006e9c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8006ea0:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006ea2:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ea4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006ea8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006eaa:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	f042 0201 	orr.w	r2, r2, #1
 8006eb8:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8006eba:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ebc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006ebe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ec2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ec4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8006ec8:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006eca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ece:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006ed0:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ed2:	d1d8      	bne.n	8006e86 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ed8:	605a      	str	r2, [r3, #4]
 8006eda:	e7d4      	b.n	8006e86 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8006edc:	2001      	movs	r0, #1
 8006ede:	e7f3      	b.n	8006ec8 <HAL_I2C_Init+0x8a>

08006ee0 <HAL_I2C_DeInit>:
{
 8006ee0:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	b198      	cbz	r0, 8006f0e <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8006ee6:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ee8:	2324      	movs	r3, #36	; 0x24
 8006eea:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006eee:	6813      	ldr	r3, [r2, #0]
 8006ef0:	f023 0301 	bic.w	r3, r3, #1
 8006ef4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8006ef6:	f7fb fd75 	bl	80029e4 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006efa:	2000      	movs	r0, #0
 8006efc:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8006efe:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8006f02:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f06:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f08:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8006f0c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006f0e:	2001      	movs	r0, #1
 8006f10:	e7fc      	b.n	8006f0c <HAL_I2C_DeInit+0x2c>

08006f12 <HAL_I2C_Mem_Write>:
{
 8006f12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f16:	b085      	sub	sp, #20
 8006f18:	469b      	mov	fp, r3
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	460f      	mov	r7, r1
 8006f1e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8006f22:	4692      	mov	sl, r2
 8006f24:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8006f28:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f2a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006f2e:	2b20      	cmp	r3, #32
 8006f30:	f040 80a3 	bne.w	800707a <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 8006f34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f36:	b10b      	cbz	r3, 8006f3c <HAL_I2C_Mem_Write+0x2a>
 8006f38:	9b03      	ldr	r3, [sp, #12]
 8006f3a:	b933      	cbnz	r3, 8006f4a <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f40:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8006f42:	2001      	movs	r0, #1
}
 8006f44:	b005      	add	sp, #20
 8006f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8006f4a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	f000 8093 	beq.w	800707a <HAL_I2C_Mem_Write+0x168>
 8006f54:	2501      	movs	r5, #1
 8006f56:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8006f5a:	f7fe fc9b 	bl	8005894 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006f5e:	2319      	movs	r3, #25
 8006f60:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8006f62:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006f64:	462a      	mov	r2, r5
 8006f66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f7ff feac 	bl	8006cc8 <I2C_WaitOnFlagUntilTimeout>
 8006f70:	4680      	mov	r8, r0
 8006f72:	2800      	cmp	r0, #0
 8006f74:	d1e5      	bne.n	8006f42 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006f76:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8006f78:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f7a:	4652      	mov	r2, sl
 8006f7c:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006f7e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f82:	2340      	movs	r3, #64	; 0x40
 8006f84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8006f88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f8a:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f8c:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8006f8e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8006f90:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f92:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8006f96:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f98:	465b      	mov	r3, fp
 8006f9a:	f7ff febf 	bl	8006d1c <I2C_RequestMemoryWrite>
 8006f9e:	b110      	cbz	r0, 8006fa6 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 8006fa0:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006fa4:	e7cd      	b.n	8006f42 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fa6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	2bff      	cmp	r3, #255	; 0xff
 8006fac:	d955      	bls.n	800705a <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fae:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006fb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006fb4:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fb6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006fb8:	4639      	mov	r1, r7
 8006fba:	4620      	mov	r0, r4
 8006fbc:	f7ff fdbc 	bl	8006b38 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fc0:	4632      	mov	r2, r6
 8006fc2:	4649      	mov	r1, r9
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	f7ff fe58 	bl	8006c7a <I2C_WaitOnTXISFlagUntilTimeout>
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	d1b9      	bne.n	8006f42 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006fce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fd0:	6822      	ldr	r2, [r4, #0]
 8006fd2:	f813 1b01 	ldrb.w	r1, [r3], #1
 8006fd6:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8006fd8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006fda:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006fdc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006fde:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8006fe0:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8006fe2:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8006fe4:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8006fe6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006fe8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006fea:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	b1ab      	cbz	r3, 800701c <HAL_I2C_Mem_Write+0x10a>
 8006ff0:	b9a2      	cbnz	r2, 800701c <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006ff2:	464b      	mov	r3, r9
 8006ff4:	2180      	movs	r1, #128	; 0x80
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	9600      	str	r6, [sp, #0]
 8006ffa:	f7ff fe65 	bl	8006cc8 <I2C_WaitOnFlagUntilTimeout>
 8006ffe:	2800      	cmp	r0, #0
 8007000:	d19f      	bne.n	8006f42 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007002:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007004:	b29b      	uxth	r3, r3
 8007006:	2bff      	cmp	r3, #255	; 0xff
 8007008:	d92f      	bls.n	800706a <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800700a:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800700c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007010:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007012:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007014:	4639      	mov	r1, r7
 8007016:	4620      	mov	r0, r4
 8007018:	f7ff fd8e 	bl	8006b38 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800701c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800701e:	b29b      	uxth	r3, r3
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1cd      	bne.n	8006fc0 <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007024:	4632      	mov	r2, r6
 8007026:	4649      	mov	r1, r9
 8007028:	4620      	mov	r0, r4
 800702a:	f7ff fee3 	bl	8006df4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800702e:	2800      	cmp	r0, #0
 8007030:	d187      	bne.n	8006f42 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	2120      	movs	r1, #32
 8007036:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800703e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8007042:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8007046:	f022 0201 	bic.w	r2, r2, #1
 800704a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800704c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007050:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007054:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8007058:	e774      	b.n	8006f44 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 800705a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800705c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007060:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8007062:	b292      	uxth	r2, r2
 8007064:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007066:	b2d2      	uxtb	r2, r2
 8007068:	e7a6      	b.n	8006fb8 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 800706a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800706c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007070:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8007072:	b292      	uxth	r2, r2
 8007074:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007076:	b2d2      	uxtb	r2, r2
 8007078:	e7cc      	b.n	8007014 <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 800707a:	2002      	movs	r0, #2
 800707c:	e762      	b.n	8006f44 <HAL_I2C_Mem_Write+0x32>
	...

08007080 <HAL_I2C_Mem_Read>:
{
 8007080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007084:	b085      	sub	sp, #20
 8007086:	469b      	mov	fp, r3
 8007088:	4604      	mov	r4, r0
 800708a:	460f      	mov	r7, r1
 800708c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8007090:	4692      	mov	sl, r2
 8007092:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8007096:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007098:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800709c:	2b20      	cmp	r3, #32
 800709e:	f040 80a7 	bne.w	80071f0 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 80070a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070a4:	b10b      	cbz	r3, 80070aa <HAL_I2C_Mem_Read+0x2a>
 80070a6:	9b03      	ldr	r3, [sp, #12]
 80070a8:	b933      	cbnz	r3, 80070b8 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80070aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070ae:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80070b0:	2001      	movs	r0, #1
}
 80070b2:	b005      	add	sp, #20
 80070b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80070b8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80070bc:	2b01      	cmp	r3, #1
 80070be:	f000 8097 	beq.w	80071f0 <HAL_I2C_Mem_Read+0x170>
 80070c2:	2501      	movs	r5, #1
 80070c4:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80070c8:	f7fe fbe4 	bl	8005894 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80070cc:	2319      	movs	r3, #25
 80070ce:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80070d0:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80070d2:	462a      	mov	r2, r5
 80070d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80070d8:	4620      	mov	r0, r4
 80070da:	f7ff fdf5 	bl	8006cc8 <I2C_WaitOnFlagUntilTimeout>
 80070de:	4680      	mov	r8, r0
 80070e0:	2800      	cmp	r0, #0
 80070e2:	d1e5      	bne.n	80070b0 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80070e4:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 80070e6:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070e8:	4652      	mov	r2, sl
 80070ea:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80070ec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80070f0:	2340      	movs	r3, #64	; 0x40
 80070f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80070f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070f8:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070fa:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80070fc:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80070fe:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007100:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8007104:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007106:	465b      	mov	r3, fp
 8007108:	f7ff fe3e 	bl	8006d88 <I2C_RequestMemoryRead>
 800710c:	b110      	cbz	r0, 8007114 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 800710e:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8007112:	e7cd      	b.n	80070b0 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007114:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007116:	b29b      	uxth	r3, r3
 8007118:	2bff      	cmp	r3, #255	; 0xff
 800711a:	4b36      	ldr	r3, [pc, #216]	; (80071f4 <HAL_I2C_Mem_Read+0x174>)
 800711c:	d958      	bls.n	80071d0 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800711e:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007126:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007128:	4639      	mov	r1, r7
 800712a:	4620      	mov	r0, r4
 800712c:	f7ff fd04 	bl	8006b38 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007130:	464b      	mov	r3, r9
 8007132:	2200      	movs	r2, #0
 8007134:	2104      	movs	r1, #4
 8007136:	4620      	mov	r0, r4
 8007138:	9600      	str	r6, [sp, #0]
 800713a:	f7ff fdc5 	bl	8006cc8 <I2C_WaitOnFlagUntilTimeout>
 800713e:	2800      	cmp	r0, #0
 8007140:	d1b6      	bne.n	80070b0 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007148:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800714a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800714c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800714e:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8007150:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8007152:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8007154:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007156:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8007158:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800715a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800715c:	b29b      	uxth	r3, r3
 800715e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007160:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007162:	b29b      	uxth	r3, r3
 8007164:	b1ab      	cbz	r3, 8007192 <HAL_I2C_Mem_Read+0x112>
 8007166:	b9a2      	cbnz	r2, 8007192 <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007168:	464b      	mov	r3, r9
 800716a:	2180      	movs	r1, #128	; 0x80
 800716c:	4620      	mov	r0, r4
 800716e:	9600      	str	r6, [sp, #0]
 8007170:	f7ff fdaa 	bl	8006cc8 <I2C_WaitOnFlagUntilTimeout>
 8007174:	2800      	cmp	r0, #0
 8007176:	d19b      	bne.n	80070b0 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007178:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800717a:	b29b      	uxth	r3, r3
 800717c:	2bff      	cmp	r3, #255	; 0xff
 800717e:	d92f      	bls.n	80071e0 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007180:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007182:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007186:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007188:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800718a:	4639      	mov	r1, r7
 800718c:	4620      	mov	r0, r4
 800718e:	f7ff fcd3 	bl	8006b38 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8007192:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007194:	b29b      	uxth	r3, r3
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1ca      	bne.n	8007130 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800719a:	4632      	mov	r2, r6
 800719c:	4649      	mov	r1, r9
 800719e:	4620      	mov	r0, r4
 80071a0:	f7ff fe28 	bl	8006df4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	d183      	bne.n	80070b0 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	2120      	movs	r1, #32
 80071ac:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80071b4:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80071b8:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80071bc:	f022 0201 	bic.w	r2, r2, #1
 80071c0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80071c2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80071c6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80071ca:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80071ce:	e770      	b.n	80070b2 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80071d0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80071d8:	b292      	uxth	r2, r2
 80071da:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80071dc:	b2d2      	uxtb	r2, r2
 80071de:	e7a3      	b.n	8007128 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 80071e0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80071e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071e6:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80071e8:	b292      	uxth	r2, r2
 80071ea:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80071ec:	b2d2      	uxtb	r2, r2
 80071ee:	e7cc      	b.n	800718a <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 80071f0:	2002      	movs	r0, #2
 80071f2:	e75e      	b.n	80070b2 <HAL_I2C_Mem_Read+0x32>
 80071f4:	80002400 	.word	0x80002400

080071f8 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80071f8:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 80071fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80071fc:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80071fe:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8007200:	b103      	cbz	r3, 8007204 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8007202:	4718      	bx	r3
}
 8007204:	4770      	bx	lr

08007206 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007206:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007208:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800720c:	2b20      	cmp	r3, #32
 800720e:	b2dc      	uxtb	r4, r3
 8007210:	d11d      	bne.n	800724e <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007212:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007216:	2b01      	cmp	r3, #1
 8007218:	d019      	beq.n	800724e <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800721a:	2324      	movs	r3, #36	; 0x24
 800721c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007220:	6803      	ldr	r3, [r0, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	f022 0201 	bic.w	r2, r2, #1
 8007228:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007230:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	4311      	orrs	r1, r2
 8007236:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	f042 0201 	orr.w	r2, r2, #1
 800723e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007240:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8007242:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007246:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800724a:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800724c:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800724e:	2002      	movs	r0, #2
 8007250:	e7fc      	b.n	800724c <HAL_I2CEx_ConfigAnalogFilter+0x46>

08007252 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007252:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007254:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007258:	2b20      	cmp	r3, #32
 800725a:	b2dc      	uxtb	r4, r3
 800725c:	d11c      	bne.n	8007298 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800725e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007262:	2b01      	cmp	r3, #1
 8007264:	d018      	beq.n	8007298 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007266:	2324      	movs	r3, #36	; 0x24
 8007268:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800726c:	6803      	ldr	r3, [r0, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	f022 0201 	bic.w	r2, r2, #1
 8007274:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007276:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007278:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800727c:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007280:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	f042 0201 	orr.w	r2, r2, #1
 8007288:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800728a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800728c:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007290:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8007294:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8007296:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8007298:	2002      	movs	r0, #2
 800729a:	e7fc      	b.n	8007296 <HAL_I2CEx_ConfigDigitalFilter+0x44>

0800729c <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800729c:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800729e:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80072a0:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80072a4:	3284      	adds	r2, #132	; 0x84
 80072a6:	1883      	adds	r3, r0, r2
{
 80072a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80072ac:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80072ae:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80072b2:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80072b4:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80072b8:	684c      	ldr	r4, [r1, #4]
 80072ba:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80072be:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80072c2:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80072c6:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80072c8:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80072ca:	68c5      	ldr	r5, [r0, #12]
 80072cc:	f3c5 450b 	ubfx	r5, r5, #16, #12
 80072d0:	443d      	add	r5, r7
 80072d2:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80072d6:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80072d8:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80072da:	68c5      	ldr	r5, [r0, #12]
 80072dc:	f3c5 050a 	ubfx	r5, r5, #0, #11
 80072e0:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80072e2:	689d      	ldr	r5, [r3, #8]
 80072e4:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 80072e8:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80072ea:	688d      	ldr	r5, [r1, #8]
 80072ec:	68c7      	ldr	r7, [r0, #12]
 80072ee:	3501      	adds	r5, #1
 80072f0:	f3c7 070a 	ubfx	r7, r7, #0, #11
 80072f4:	443d      	add	r5, r7
 80072f6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80072fa:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80072fc:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80072fe:	691d      	ldr	r5, [r3, #16]
 8007300:	f025 0507 	bic.w	r5, r5, #7
 8007304:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007306:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007308:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800730a:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800730e:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007312:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007316:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800731a:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800731e:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8007322:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8007326:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007328:	695d      	ldr	r5, [r3, #20]
 800732a:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800732e:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007330:	694d      	ldr	r5, [r1, #20]
 8007332:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007334:	69dd      	ldr	r5, [r3, #28]
 8007336:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 800733a:	f025 0507 	bic.w	r5, r5, #7
 800733e:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007340:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8007344:	433d      	orrs	r5, r7
 8007346:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007348:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800734a:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800734c:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007350:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007352:	b31e      	cbz	r6, 800739c <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007354:	2e01      	cmp	r6, #1
 8007356:	d023      	beq.n	80073a0 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007358:	1eb5      	subs	r5, r6, #2
 800735a:	2d02      	cmp	r5, #2
 800735c:	d922      	bls.n	80073a4 <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 800735e:	2e07      	cmp	r6, #7
 8007360:	bf0c      	ite	eq
 8007362:	2502      	moveq	r5, #2
 8007364:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007366:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007368:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800736c:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007370:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007372:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007374:	3403      	adds	r4, #3
 8007376:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007378:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800737a:	436e      	muls	r6, r5
 800737c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8007380:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007382:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8007384:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8007388:	f024 0407 	bic.w	r4, r4, #7
 800738c:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800738e:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007390:	5883      	ldr	r3, [r0, r2]
 8007392:	f043 0301 	orr.w	r3, r3, #1
 8007396:	5083      	str	r3, [r0, r2]
}
 8007398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800739c:	2504      	movs	r5, #4
 800739e:	e7e2      	b.n	8007366 <LTDC_SetConfig+0xca>
    tmp = 3U;
 80073a0:	2503      	movs	r5, #3
 80073a2:	e7e0      	b.n	8007366 <LTDC_SetConfig+0xca>
    tmp = 2U;
 80073a4:	2502      	movs	r5, #2
 80073a6:	e7de      	b.n	8007366 <LTDC_SetConfig+0xca>

080073a8 <HAL_LTDC_Init>:
{
 80073a8:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 80073aa:	4604      	mov	r4, r0
 80073ac:	2800      	cmp	r0, #0
 80073ae:	d063      	beq.n	8007478 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80073b0:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80073b4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80073b8:	b91b      	cbnz	r3, 80073c2 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80073ba:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80073be:	f7fb fb33 	bl	8002a28 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80073c2:	2302      	movs	r3, #2
 80073c4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80073c8:	6823      	ldr	r3, [r4, #0]
 80073ca:	699a      	ldr	r2, [r3, #24]
 80073cc:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80073d0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80073d2:	6999      	ldr	r1, [r3, #24]
 80073d4:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80073d8:	4302      	orrs	r2, r0
 80073da:	68e0      	ldr	r0, [r4, #12]
 80073dc:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80073de:	6920      	ldr	r0, [r4, #16]
 80073e0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80073e2:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80073e4:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80073e6:	4925      	ldr	r1, [pc, #148]	; (800747c <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80073e8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80073ea:	689a      	ldr	r2, [r3, #8]
 80073ec:	400a      	ands	r2, r1
 80073ee:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80073f0:	689a      	ldr	r2, [r3, #8]
 80073f2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80073f6:	69a0      	ldr	r0, [r4, #24]
 80073f8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80073fa:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80073fc:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80073fe:	68da      	ldr	r2, [r3, #12]
 8007400:	400a      	ands	r2, r1
 8007402:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007404:	68da      	ldr	r2, [r3, #12]
 8007406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800740a:	6a20      	ldr	r0, [r4, #32]
 800740c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800740e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007410:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007412:	691a      	ldr	r2, [r3, #16]
 8007414:	400a      	ands	r2, r1
 8007416:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007418:	691a      	ldr	r2, [r3, #16]
 800741a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800741e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007420:	4302      	orrs	r2, r0
 8007422:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007424:	695a      	ldr	r2, [r3, #20]
 8007426:	4011      	ands	r1, r2
 8007428:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800742a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800742c:	695a      	ldr	r2, [r3, #20]
 800742e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007432:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007434:	430a      	orrs	r2, r1
 8007436:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007438:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800743a:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800743e:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007442:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007446:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007448:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800744a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800744e:	430a      	orrs	r2, r1
 8007450:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8007454:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007458:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800745a:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800745c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800745e:	f042 0206 	orr.w	r2, r2, #6
 8007462:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8007464:	699a      	ldr	r2, [r3, #24]
 8007466:	f042 0201 	orr.w	r2, r2, #1
 800746a:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800746c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800746e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8007472:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8007476:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007478:	2001      	movs	r0, #1
 800747a:	e7fc      	b.n	8007476 <HAL_LTDC_Init+0xce>
 800747c:	f000f800 	.word	0xf000f800

08007480 <HAL_LTDC_ErrorCallback>:
 8007480:	4770      	bx	lr

08007482 <HAL_LTDC_LineEventCallback>:
 8007482:	4770      	bx	lr

08007484 <HAL_LTDC_ReloadEventCallback>:
 8007484:	4770      	bx	lr

08007486 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007486:	6803      	ldr	r3, [r0, #0]
{
 8007488:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800748a:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 800748c:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800748e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007490:	0772      	lsls	r2, r6, #29
 8007492:	d514      	bpl.n	80074be <HAL_LTDC_IRQHandler+0x38>
 8007494:	0769      	lsls	r1, r5, #29
 8007496:	d512      	bpl.n	80074be <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800749a:	f022 0204 	bic.w	r2, r2, #4
 800749e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80074a0:	2204      	movs	r2, #4
 80074a2:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80074a4:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80074a8:	f043 0301 	orr.w	r3, r3, #1
 80074ac:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 80074b0:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80074b2:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80074b6:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80074ba:	f7ff ffe1 	bl	8007480 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80074be:	07b2      	lsls	r2, r6, #30
 80074c0:	d516      	bpl.n	80074f0 <HAL_LTDC_IRQHandler+0x6a>
 80074c2:	07ab      	lsls	r3, r5, #30
 80074c4:	d514      	bpl.n	80074f0 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80074c6:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 80074c8:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80074ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074cc:	f022 0202 	bic.w	r2, r2, #2
 80074d0:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80074d2:	2202      	movs	r2, #2
 80074d4:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80074d6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80074da:	4313      	orrs	r3, r2
 80074dc:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80074e0:	2304      	movs	r3, #4
 80074e2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80074e6:	2300      	movs	r3, #0
 80074e8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80074ec:	f7ff ffc8 	bl	8007480 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80074f0:	07f0      	lsls	r0, r6, #31
 80074f2:	d510      	bpl.n	8007516 <HAL_LTDC_IRQHandler+0x90>
 80074f4:	07e9      	lsls	r1, r5, #31
 80074f6:	d50e      	bpl.n	8007516 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80074f8:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 80074fa:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80074fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074fe:	f022 0201 	bic.w	r2, r2, #1
 8007502:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007504:	2201      	movs	r2, #1
 8007506:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8007508:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800750a:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800750e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8007512:	f7ff ffb6 	bl	8007482 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007516:	0732      	lsls	r2, r6, #28
 8007518:	d511      	bpl.n	800753e <HAL_LTDC_IRQHandler+0xb8>
 800751a:	072b      	lsls	r3, r5, #28
 800751c:	d50f      	bpl.n	800753e <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800751e:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007520:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007524:	f022 0208 	bic.w	r2, r2, #8
 8007528:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800752a:	2208      	movs	r2, #8
 800752c:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800752e:	2301      	movs	r3, #1
 8007530:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007534:	2300      	movs	r3, #0
 8007536:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800753a:	f7ff ffa3 	bl	8007484 <HAL_LTDC_ReloadEventCallback>
}
 800753e:	bd70      	pop	{r4, r5, r6, pc}

08007540 <HAL_LTDC_ConfigLayer>:
{
 8007540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8007544:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8007548:	4606      	mov	r6, r0
 800754a:	460f      	mov	r7, r1
 800754c:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800754e:	2b01      	cmp	r3, #1
 8007550:	f04f 0002 	mov.w	r0, #2
 8007554:	d01f      	beq.n	8007596 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007556:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8007558:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800755c:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800755e:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007562:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8007566:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800756a:	3438      	adds	r4, #56	; 0x38
 800756c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800756e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007578:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800757a:	4630      	mov	r0, r6
 800757c:	4662      	mov	r2, ip
 800757e:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007580:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007582:	f7ff fe8b 	bl	800729c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007586:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8007588:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800758a:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800758e:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007592:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8007596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800759c <HAL_LTDC_SetPitch>:
{
 800759c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 800759e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	f04f 0302 	mov.w	r3, #2
 80075a8:	d02c      	beq.n	8007604 <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 80075aa:	2434      	movs	r4, #52	; 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80075ac:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 80075b0:	fb04 0402 	mla	r4, r4, r2, r0
 80075b4:	6ca4      	ldr	r4, [r4, #72]	; 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80075b6:	b33c      	cbz	r4, 8007608 <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80075b8:	2c01      	cmp	r4, #1
 80075ba:	d027      	beq.n	800760c <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80075bc:	1ea5      	subs	r5, r4, #2
 80075be:	429d      	cmp	r5, r3
 80075c0:	d902      	bls.n	80075c8 <HAL_LTDC_SetPitch+0x2c>
    tmp = 1U;
 80075c2:	2c07      	cmp	r4, #7
 80075c4:	bf18      	it	ne
 80075c6:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 80075c8:	01d2      	lsls	r2, r2, #7
 80075ca:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 80075cc:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 80075ce:	3284      	adds	r2, #132	; 0x84
 80075d0:	4422      	add	r2, r4
 80075d2:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80075d4:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 80075d8:	f424 14f8 	bic.w	r4, r4, #2031616	; 0x1f0000
 80075dc:	62d4      	str	r4, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 80075de:	4c0c      	ldr	r4, [pc, #48]	; (8007610 <HAL_LTDC_SetPitch+0x74>)
 80075e0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80075e2:	f045 0501 	orr.w	r5, r5, #1
 80075e6:	6265      	str	r5, [r4, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 80075e8:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 80075ea:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80075ee:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 80075f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075f2:	f043 0301 	orr.w	r3, r3, #1
 80075f6:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80075f8:	2301      	movs	r3, #1
 80075fa:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80075fe:	2300      	movs	r3, #0
 8007600:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
}
 8007604:	4618      	mov	r0, r3
 8007606:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 8007608:	2304      	movs	r3, #4
 800760a:	e7dd      	b.n	80075c8 <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 800760c:	2303      	movs	r3, #3
 800760e:	e7db      	b.n	80075c8 <HAL_LTDC_SetPitch+0x2c>
 8007610:	40016800 	.word	0x40016800

08007614 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8007614:	4b19      	ldr	r3, [pc, #100]	; (800767c <HAL_PWREx_EnableOverDrive+0x68>)
{
 8007616:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8007618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800761a:	4c19      	ldr	r4, [pc, #100]	; (8007680 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800761c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007620:	641a      	str	r2, [r3, #64]	; 0x40
 8007622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007628:	9301      	str	r3, [sp, #4]
 800762a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800762c:	6823      	ldr	r3, [r4, #0]
 800762e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007632:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007634:	f7fe f92e 	bl	8005894 <HAL_GetTick>
 8007638:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800763a:	6863      	ldr	r3, [r4, #4]
 800763c:	03da      	lsls	r2, r3, #15
 800763e:	d50c      	bpl.n	800765a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007640:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007642:	4d0f      	ldr	r5, [pc, #60]	; (8007680 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007648:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800764a:	f7fe f923 	bl	8005894 <HAL_GetTick>
 800764e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007650:	686b      	ldr	r3, [r5, #4]
 8007652:	039b      	lsls	r3, r3, #14
 8007654:	d50a      	bpl.n	800766c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8007656:	2000      	movs	r0, #0
 8007658:	e006      	b.n	8007668 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800765a:	f7fe f91b 	bl	8005894 <HAL_GetTick>
 800765e:	1b40      	subs	r0, r0, r5
 8007660:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007664:	d9e9      	bls.n	800763a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8007666:	2003      	movs	r0, #3
}
 8007668:	b003      	add	sp, #12
 800766a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800766c:	f7fe f912 	bl	8005894 <HAL_GetTick>
 8007670:	1b00      	subs	r0, r0, r4
 8007672:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007676:	d9eb      	bls.n	8007650 <HAL_PWREx_EnableOverDrive+0x3c>
 8007678:	e7f5      	b.n	8007666 <HAL_PWREx_EnableOverDrive+0x52>
 800767a:	bf00      	nop
 800767c:	40023800 	.word	0x40023800
 8007680:	40007000 	.word	0x40007000

08007684 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8007684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8007688:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800768a:	b136      	cbz	r6, 800769a <QSPI_Config+0x16>
 800768c:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8007690:	d003      	beq.n	800769a <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8007692:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8007694:	6804      	ldr	r4, [r0, #0]
 8007696:	3b01      	subs	r3, #1
 8007698:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800769a:	f8d1 9018 	ldr.w	r9, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800769e:	e9d1 7507 	ldrd	r7, r5, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80076a2:	f1b9 0f00 	cmp.w	r9, #0
 80076a6:	d04f      	beq.n	8007748 <QSPI_Config+0xc4>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80076a8:	694b      	ldr	r3, [r1, #20]
 80076aa:	ea46 0909 	orr.w	r9, r6, r9
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80076ae:	6800      	ldr	r0, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80076b0:	f8d1 a000 	ldr.w	sl, [r1]
 80076b4:	ea4f 4c83 	mov.w	ip, r3, lsl #18
 80076b8:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 80076bc:	ea49 0902 	orr.w	r9, r9, r2
 80076c0:	e9d1 480b 	ldrd	r4, r8, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80076c4:	b335      	cbz	r5, 8007714 <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80076c6:	688b      	ldr	r3, [r1, #8]
 80076c8:	ea49 0505 	orr.w	r5, r9, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80076cc:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80076ce:	61c3      	str	r3, [r0, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80076d0:	b19f      	cbz	r7, 80076fa <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80076d2:	ea4a 0307 	orr.w	r3, sl, r7
 80076d6:	4323      	orrs	r3, r4
 80076d8:	68cc      	ldr	r4, [r1, #12]
 80076da:	ea43 0308 	orr.w	r3, r3, r8
 80076de:	ea43 030e 	orr.w	r3, r3, lr
 80076e2:	4333      	orrs	r3, r6
 80076e4:	4323      	orrs	r3, r4
 80076e6:	ea43 030c 	orr.w	r3, r3, ip
 80076ea:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize |
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80076ec:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80076f0:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80076f2:	d00d      	beq.n	8007710 <QSPI_Config+0x8c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80076f4:	684b      	ldr	r3, [r1, #4]
 80076f6:	6183      	str	r3, [r0, #24]
 80076f8:	e00a      	b.n	8007710 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80076fa:	ea4a 0304 	orr.w	r3, sl, r4
 80076fe:	ea43 0308 	orr.w	r3, r3, r8
 8007702:	ea43 030e 	orr.w	r3, r3, lr
 8007706:	4333      	orrs	r3, r6
 8007708:	ea43 030c 	orr.w	r3, r3, ip
 800770c:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800770e:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8007710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007714:	b16f      	cbz	r7, 8007732 <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007716:	ea4a 0307 	orr.w	r3, sl, r7
 800771a:	4323      	orrs	r3, r4
 800771c:	68cc      	ldr	r4, [r1, #12]
 800771e:	ea43 0308 	orr.w	r3, r3, r8
 8007722:	ea43 030e 	orr.w	r3, r3, lr
 8007726:	4323      	orrs	r3, r4
 8007728:	ea43 030c 	orr.w	r3, r3, ip
 800772c:	ea43 0309 	orr.w	r3, r3, r9
 8007730:	e7dc      	b.n	80076ec <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007732:	ea4a 0304 	orr.w	r3, sl, r4
 8007736:	ea43 0308 	orr.w	r3, r3, r8
 800773a:	ea43 030e 	orr.w	r3, r3, lr
 800773e:	ea43 030c 	orr.w	r3, r3, ip
 8007742:	ea43 0309 	orr.w	r3, r3, r9
 8007746:	e7e2      	b.n	800770e <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8007748:	b365      	cbz	r5, 80077a4 <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800774a:	6804      	ldr	r4, [r0, #0]
 800774c:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800774e:	6908      	ldr	r0, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8007750:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007752:	ea46 0305 	orr.w	r3, r6, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007756:	694e      	ldr	r6, [r1, #20]
 8007758:	ea43 0502 	orr.w	r5, r3, r2
 800775c:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 8007760:	04b6      	lsls	r6, r6, #18
 8007762:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007766:	b1a7      	cbz	r7, 8007792 <QSPI_Config+0x10e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007768:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800776a:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800776e:	ea40 0008 	orr.w	r0, r0, r8
 8007772:	ea43 0300 	orr.w	r3, r3, r0
 8007776:	68c8      	ldr	r0, [r1, #12]
 8007778:	ea43 030c 	orr.w	r3, r3, ip
 800777c:	ea43 0300 	orr.w	r3, r3, r0
 8007780:	ea43 0306 	orr.w	r3, r3, r6
 8007784:	ea43 0305 	orr.w	r3, r3, r5
 8007788:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800778a:	d0c1      	beq.n	8007710 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800778c:	684b      	ldr	r3, [r1, #4]
 800778e:	61a3      	str	r3, [r4, #24]
 8007790:	e7be      	b.n	8007710 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007792:	ea40 0008 	orr.w	r0, r0, r8
 8007796:	4303      	orrs	r3, r0
 8007798:	ea43 030c 	orr.w	r3, r3, ip
 800779c:	4333      	orrs	r3, r6
 800779e:	432b      	orrs	r3, r5
 80077a0:	6163      	str	r3, [r4, #20]
 80077a2:	e7b5      	b.n	8007710 <QSPI_Config+0x8c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80077a4:	b17f      	cbz	r7, 80077c6 <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80077a6:	ea46 0307 	orr.w	r3, r6, r7
 80077aa:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80077ac:	6800      	ldr	r0, [r0, #0]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	4323      	orrs	r3, r4
 80077b2:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 80077b4:	4323      	orrs	r3, r4
 80077b6:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80077b8:	4323      	orrs	r3, r4
 80077ba:	68cc      	ldr	r4, [r1, #12]
 80077bc:	4323      	orrs	r3, r4
 80077be:	694c      	ldr	r4, [r1, #20]
 80077c0:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 80077c4:	e792      	b.n	80076ec <QSPI_Config+0x68>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80077c6:	2e00      	cmp	r6, #0
 80077c8:	d0a2      	beq.n	8007710 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80077ca:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80077cc:	6800      	ldr	r0, [r0, #0]
 80077ce:	4333      	orrs	r3, r6
 80077d0:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 80077d2:	431a      	orrs	r2, r3
 80077d4:	694b      	ldr	r3, [r1, #20]
 80077d6:	4332      	orrs	r2, r6
 80077d8:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 80077da:	4332      	orrs	r2, r6
 80077dc:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 80077e0:	6142      	str	r2, [r0, #20]
}
 80077e2:	e795      	b.n	8007710 <QSPI_Config+0x8c>

080077e4 <QSPI_WaitFlagStateUntilTimeout>:
{
 80077e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077e8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80077ec:	4604      	mov	r4, r0
 80077ee:	460e      	mov	r6, r1
 80077f0:	4615      	mov	r5, r2
 80077f2:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80077f4:	6822      	ldr	r2, [r4, #0]
 80077f6:	6893      	ldr	r3, [r2, #8]
 80077f8:	4233      	tst	r3, r6
 80077fa:	bf14      	ite	ne
 80077fc:	2301      	movne	r3, #1
 80077fe:	2300      	moveq	r3, #0
 8007800:	42ab      	cmp	r3, r5
 8007802:	d101      	bne.n	8007808 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8007804:	2000      	movs	r0, #0
 8007806:	e012      	b.n	800782e <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8007808:	f1b8 3fff 	cmp.w	r8, #4294967295
 800780c:	d0f3      	beq.n	80077f6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800780e:	f7fe f841 	bl	8005894 <HAL_GetTick>
 8007812:	1bc0      	subs	r0, r0, r7
 8007814:	4540      	cmp	r0, r8
 8007816:	d802      	bhi.n	800781e <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8007818:	f1b8 0f00 	cmp.w	r8, #0
 800781c:	d1ea      	bne.n	80077f4 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800781e:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007820:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007822:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007826:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007828:	f043 0301 	orr.w	r3, r3, #1
 800782c:	6463      	str	r3, [r4, #68]	; 0x44
}
 800782e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007834 <HAL_QSPI_Init>:
{
 8007834:	b530      	push	{r4, r5, lr}
 8007836:	4604      	mov	r4, r0
 8007838:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 800783a:	f7fe f82b 	bl	8005894 <HAL_GetTick>
 800783e:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8007840:	2c00      	cmp	r4, #0
 8007842:	d047      	beq.n	80078d4 <HAL_QSPI_Init+0xa0>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007844:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007848:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800784c:	b94a      	cbnz	r2, 8007862 <HAL_QSPI_Init+0x2e>
 800784e:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8007850:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 8007852:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8007856:	f7fb f91d 	bl	8002a94 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800785a:	f241 3288 	movw	r2, #5000	; 0x1388
 800785e:	9b03      	ldr	r3, [sp, #12]
 8007860:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007862:	6820      	ldr	r0, [r4, #0]
 8007864:	68a1      	ldr	r1, [r4, #8]
 8007866:	6802      	ldr	r2, [r0, #0]
 8007868:	3901      	subs	r1, #1
 800786a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800786e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007872:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007874:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007876:	4620      	mov	r0, r4
 8007878:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800787a:	9200      	str	r2, [sp, #0]
 800787c:	2200      	movs	r2, #0
 800787e:	f7ff ffb1 	bl	80077e4 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8007882:	bb10      	cbnz	r0, 80078ca <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007884:	6822      	ldr	r2, [r4, #0]
 8007886:	69e5      	ldr	r5, [r4, #28]
 8007888:	68e3      	ldr	r3, [r4, #12]
 800788a:	6811      	ldr	r1, [r2, #0]
 800788c:	432b      	orrs	r3, r5
 800788e:	6a25      	ldr	r5, [r4, #32]
 8007890:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8007894:	432b      	orrs	r3, r5
 8007896:	6865      	ldr	r5, [r4, #4]
 8007898:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 800789c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80078a0:	430b      	orrs	r3, r1
 80078a2:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80078a4:	6855      	ldr	r5, [r2, #4]
 80078a6:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80078aa:	430b      	orrs	r3, r1
 80078ac:	6921      	ldr	r1, [r4, #16]
 80078ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80078b2:	4909      	ldr	r1, [pc, #36]	; (80078d8 <HAL_QSPI_Init+0xa4>)
 80078b4:	4029      	ands	r1, r5
 80078b6:	430b      	orrs	r3, r1
 80078b8:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80078ba:	6813      	ldr	r3, [r2, #0]
 80078bc:	f043 0301 	orr.w	r3, r3, #1
 80078c0:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 80078c2:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80078c4:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 80078c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80078ca:	2300      	movs	r3, #0
 80078cc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80078d0:	b005      	add	sp, #20
 80078d2:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80078d4:	2001      	movs	r0, #1
 80078d6:	e7fb      	b.n	80078d0 <HAL_QSPI_Init+0x9c>
 80078d8:	ffe0f8fe 	.word	0xffe0f8fe

080078dc <HAL_QSPI_Command>:
{
 80078dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078e0:	4604      	mov	r4, r0
 80078e2:	b085      	sub	sp, #20
 80078e4:	4617      	mov	r7, r2
 80078e6:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 80078e8:	f7fd ffd4 	bl	8005894 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80078ec:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80078f0:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 80078f2:	2a01      	cmp	r2, #1
 80078f4:	d033      	beq.n	800795e <HAL_QSPI_Command+0x82>
 80078f6:	2201      	movs	r2, #1
 80078f8:	2602      	movs	r6, #2
 80078fa:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80078fe:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007902:	2a01      	cmp	r2, #1
 8007904:	fa5f f882 	uxtb.w	r8, r2
 8007908:	d127      	bne.n	800795a <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800790a:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800790c:	9003      	str	r0, [sp, #12]
 800790e:	2120      	movs	r1, #32
 8007910:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007912:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007914:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8007916:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800791a:	f7ff ff63 	bl	80077e4 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800791e:	4605      	mov	r5, r0
 8007920:	b9a0      	cbnz	r0, 800794c <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007922:	4602      	mov	r2, r0
 8007924:	4649      	mov	r1, r9
 8007926:	4620      	mov	r0, r4
 8007928:	f7ff feac 	bl	8007684 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800792c:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8007930:	9b03      	ldr	r3, [sp, #12]
 8007932:	b94a      	cbnz	r2, 8007948 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007934:	4642      	mov	r2, r8
 8007936:	4631      	mov	r1, r6
 8007938:	4620      	mov	r0, r4
 800793a:	9700      	str	r7, [sp, #0]
 800793c:	f7ff ff52 	bl	80077e4 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8007940:	4605      	mov	r5, r0
 8007942:	b918      	cbnz	r0, 800794c <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007944:	6823      	ldr	r3, [r4, #0]
 8007946:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8007948:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800794c:	2300      	movs	r3, #0
 800794e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8007952:	4628      	mov	r0, r5
 8007954:	b005      	add	sp, #20
 8007956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800795a:	4635      	mov	r5, r6
 800795c:	e7f6      	b.n	800794c <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800795e:	2502      	movs	r5, #2
 8007960:	e7f7      	b.n	8007952 <HAL_QSPI_Command+0x76>

08007962 <HAL_QSPI_Transmit>:
{
 8007962:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007964:	4604      	mov	r4, r0
 8007966:	b085      	sub	sp, #20
 8007968:	4616      	mov	r6, r2
 800796a:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800796c:	f7fd ff92 	bl	8005894 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8007970:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8007974:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8007976:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8007978:	2a01      	cmp	r2, #1
 800797a:	d049      	beq.n	8007a10 <HAL_QSPI_Transmit+0xae>
 800797c:	2201      	movs	r2, #1
 800797e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007982:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007986:	2a01      	cmp	r2, #1
 8007988:	b2d0      	uxtb	r0, r2
 800798a:	d13f      	bne.n	8007a0c <HAL_QSPI_Transmit+0xaa>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800798c:	2200      	movs	r2, #0
 800798e:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8007990:	2f00      	cmp	r7, #0
 8007992:	d036      	beq.n	8007a02 <HAL_QSPI_Transmit+0xa0>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8007994:	2212      	movs	r2, #18
 8007996:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800799a:	692a      	ldr	r2, [r5, #16]
 800799c:	3201      	adds	r2, #1
 800799e:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80079a0:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 80079a2:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80079a4:	3201      	adds	r2, #1
 80079a6:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80079a8:	696a      	ldr	r2, [r5, #20]
 80079aa:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80079ae:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 80079b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80079b2:	b98a      	cbnz	r2, 80079d8 <HAL_QSPI_Transmit+0x76>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80079b4:	2201      	movs	r2, #1
 80079b6:	2102      	movs	r1, #2
 80079b8:	4620      	mov	r0, r4
 80079ba:	9600      	str	r6, [sp, #0]
 80079bc:	f7ff ff12 	bl	80077e4 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80079c0:	b910      	cbnz	r0, 80079c8 <HAL_QSPI_Transmit+0x66>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80079c2:	6823      	ldr	r3, [r4, #0]
 80079c4:	2202      	movs	r2, #2
 80079c6:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 80079c8:	2301      	movs	r3, #1
 80079ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80079ce:	2300      	movs	r3, #0
 80079d0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80079d4:	b005      	add	sp, #20
 80079d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80079d8:	2201      	movs	r2, #1
 80079da:	2104      	movs	r1, #4
 80079dc:	4620      	mov	r0, r4
 80079de:	9600      	str	r6, [sp, #0]
 80079e0:	9303      	str	r3, [sp, #12]
 80079e2:	f7ff feff 	bl	80077e4 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 80079e6:	2800      	cmp	r0, #0
 80079e8:	d1ee      	bne.n	80079c8 <HAL_QSPI_Transmit+0x66>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80079ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 80079ec:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80079ee:	7812      	ldrb	r2, [r2, #0]
 80079f0:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 80079f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80079f6:	3201      	adds	r2, #1
 80079f8:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 80079fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80079fc:	3a01      	subs	r2, #1
 80079fe:	62e2      	str	r2, [r4, #44]	; 0x2c
 8007a00:	e7d6      	b.n	80079b0 <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8007a02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007a04:	f043 0308 	orr.w	r3, r3, #8
 8007a08:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8007a0a:	e7e0      	b.n	80079ce <HAL_QSPI_Transmit+0x6c>
    status = HAL_BUSY;
 8007a0c:	2002      	movs	r0, #2
 8007a0e:	e7de      	b.n	80079ce <HAL_QSPI_Transmit+0x6c>
  __HAL_LOCK(hqspi);
 8007a10:	2002      	movs	r0, #2
 8007a12:	e7df      	b.n	80079d4 <HAL_QSPI_Transmit+0x72>

08007a14 <HAL_QSPI_Receive>:
{
 8007a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a16:	4604      	mov	r4, r0
 8007a18:	b085      	sub	sp, #20
 8007a1a:	4616      	mov	r6, r2
 8007a1c:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8007a1e:	f7fd ff39 	bl	8005894 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8007a22:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8007a24:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8007a26:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 8007a2a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8007a2e:	2a01      	cmp	r2, #1
 8007a30:	d04d      	beq.n	8007ace <HAL_QSPI_Receive+0xba>
 8007a32:	2201      	movs	r2, #1
 8007a34:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007a38:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007a3c:	2a01      	cmp	r2, #1
 8007a3e:	b2d0      	uxtb	r0, r2
 8007a40:	d143      	bne.n	8007aca <HAL_QSPI_Receive+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007a42:	2200      	movs	r2, #0
 8007a44:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8007a46:	2f00      	cmp	r7, #0
 8007a48:	d03a      	beq.n	8007ac0 <HAL_QSPI_Receive+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8007a4a:	2222      	movs	r2, #34	; 0x22
 8007a4c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8007a50:	692a      	ldr	r2, [r5, #16]
 8007a52:	3201      	adds	r2, #1
 8007a54:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007a56:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8007a58:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007a5a:	3201      	adds	r2, #1
 8007a5c:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007a5e:	6969      	ldr	r1, [r5, #20]
 8007a60:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8007a64:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8007a68:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8007a6a:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 8007a6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007a70:	b98a      	cbnz	r2, 8007a96 <HAL_QSPI_Receive+0x82>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007a72:	2201      	movs	r2, #1
 8007a74:	2102      	movs	r1, #2
 8007a76:	4620      	mov	r0, r4
 8007a78:	9600      	str	r6, [sp, #0]
 8007a7a:	f7ff feb3 	bl	80077e4 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 8007a7e:	b910      	cbnz	r0, 8007a86 <HAL_QSPI_Receive+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007a80:	6823      	ldr	r3, [r4, #0]
 8007a82:	2202      	movs	r2, #2
 8007a84:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8007a86:	2301      	movs	r3, #1
 8007a88:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8007a92:	b005      	add	sp, #20
 8007a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8007a96:	2201      	movs	r2, #1
 8007a98:	2106      	movs	r1, #6
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	9600      	str	r6, [sp, #0]
 8007a9e:	9303      	str	r3, [sp, #12]
 8007aa0:	f7ff fea0 	bl	80077e4 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	d1ee      	bne.n	8007a86 <HAL_QSPI_Receive+0x72>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8007aa8:	f895 1020 	ldrb.w	r1, [r5, #32]
 8007aac:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8007aae:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8007ab0:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 8007ab2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007ab4:	3201      	adds	r2, #1
 8007ab6:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8007ab8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007aba:	3a01      	subs	r2, #1
 8007abc:	63a2      	str	r2, [r4, #56]	; 0x38
 8007abe:	e7d6      	b.n	8007a6e <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8007ac0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007ac2:	f043 0308 	orr.w	r3, r3, #8
 8007ac6:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8007ac8:	e7e0      	b.n	8007a8c <HAL_QSPI_Receive+0x78>
    status = HAL_BUSY;
 8007aca:	2002      	movs	r0, #2
 8007acc:	e7de      	b.n	8007a8c <HAL_QSPI_Receive+0x78>
  __HAL_LOCK(hqspi);
 8007ace:	2002      	movs	r0, #2
 8007ad0:	e7df      	b.n	8007a92 <HAL_QSPI_Receive+0x7e>

08007ad2 <HAL_QSPI_AutoPolling>:
{
 8007ad2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007ad6:	4604      	mov	r4, r0
 8007ad8:	4615      	mov	r5, r2
 8007ada:	461e      	mov	r6, r3
 8007adc:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8007ade:	f7fd fed9 	bl	8005894 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8007ae2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8007ae6:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8007ae8:	2a01      	cmp	r2, #1
 8007aea:	d040      	beq.n	8007b6e <HAL_QSPI_AutoPolling+0x9c>
 8007aec:	2201      	movs	r2, #1
 8007aee:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007af2:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007af6:	2a01      	cmp	r2, #1
 8007af8:	b2d7      	uxtb	r7, r2
 8007afa:	d136      	bne.n	8007b6a <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8007afc:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007afe:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007b00:	9003      	str	r0, [sp, #12]
 8007b02:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007b04:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007b06:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8007b08:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007b0c:	2120      	movs	r1, #32
 8007b0e:	f7ff fe69 	bl	80077e4 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8007b12:	bb20      	cbnz	r0, 8007b5e <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8007b14:	6821      	ldr	r1, [r4, #0]
 8007b16:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8007b18:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8007b1a:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8007b1c:	686a      	ldr	r2, [r5, #4]
 8007b1e:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8007b20:	68aa      	ldr	r2, [r5, #8]
 8007b22:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8007b24:	680a      	ldr	r2, [r1, #0]
 8007b26:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8007b2a:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8007b2c:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8007b2e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007b32:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8007b34:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 8007b36:	68ea      	ldr	r2, [r5, #12]
 8007b38:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8007b3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007b40:	f7ff fda0 	bl	8007684 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8007b44:	9b03      	ldr	r3, [sp, #12]
 8007b46:	463a      	mov	r2, r7
 8007b48:	2108      	movs	r1, #8
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	9600      	str	r6, [sp, #0]
 8007b4e:	f7ff fe49 	bl	80077e4 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8007b52:	b920      	cbnz	r0, 8007b5e <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	2208      	movs	r2, #8
 8007b58:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8007b5a:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8007b5e:	2300      	movs	r3, #0
 8007b60:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8007b64:	b004      	add	sp, #16
 8007b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 8007b6a:	2002      	movs	r0, #2
 8007b6c:	e7f7      	b.n	8007b5e <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 8007b6e:	2002      	movs	r0, #2
 8007b70:	e7f8      	b.n	8007b64 <HAL_QSPI_AutoPolling+0x92>

08007b72 <HAL_QSPI_MemoryMapped>:
{
 8007b72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b74:	4604      	mov	r4, r0
 8007b76:	4616      	mov	r6, r2
 8007b78:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8007b7a:	f7fd fe8b 	bl	8005894 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8007b7e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8007b82:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8007b84:	2a01      	cmp	r2, #1
 8007b86:	d033      	beq.n	8007bf0 <HAL_QSPI_MemoryMapped+0x7e>
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007b8e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007b92:	2a01      	cmp	r2, #1
 8007b94:	d12a      	bne.n	8007bec <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007b96:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8007b98:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007b9a:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007b9c:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8007b9e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007ba2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007ba4:	9100      	str	r1, [sp, #0]
 8007ba6:	2120      	movs	r1, #32
 8007ba8:	f7ff fe1c 	bl	80077e4 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8007bac:	4605      	mov	r5, r0
 8007bae:	b9b8      	cbnz	r0, 8007be0 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8007bb0:	6823      	ldr	r3, [r4, #0]
 8007bb2:	6872      	ldr	r2, [r6, #4]
 8007bb4:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8007bb6:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8007bb8:	f020 0008 	bic.w	r0, r0, #8
 8007bbc:	ea40 0002 	orr.w	r0, r0, r2
 8007bc0:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8007bc2:	d107      	bne.n	8007bd4 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8007bc4:	6832      	ldr	r2, [r6, #0]
 8007bc6:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8007bc8:	2210      	movs	r2, #16
 8007bca:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007bd2:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8007bd4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8007bd8:	4639      	mov	r1, r7
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f7ff fd52 	bl	8007684 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 8007be0:	2300      	movs	r3, #0
 8007be2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8007be6:	4628      	mov	r0, r5
 8007be8:	b003      	add	sp, #12
 8007bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 8007bec:	2502      	movs	r5, #2
 8007bee:	e7f7      	b.n	8007be0 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 8007bf0:	2502      	movs	r5, #2
 8007bf2:	e7f8      	b.n	8007be6 <HAL_QSPI_MemoryMapped+0x74>

08007bf4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007bf4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	b340      	cbz	r0, 8007c4e <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bfc:	6803      	ldr	r3, [r0, #0]
 8007bfe:	07db      	lsls	r3, r3, #31
 8007c00:	d410      	bmi.n	8007c24 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c02:	6823      	ldr	r3, [r4, #0]
 8007c04:	079f      	lsls	r7, r3, #30
 8007c06:	d464      	bmi.n	8007cd2 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c08:	6823      	ldr	r3, [r4, #0]
 8007c0a:	0719      	lsls	r1, r3, #28
 8007c0c:	f100 80aa 	bmi.w	8007d64 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c10:	6823      	ldr	r3, [r4, #0]
 8007c12:	075a      	lsls	r2, r3, #29
 8007c14:	f100 80cb 	bmi.w	8007dae <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c18:	69a2      	ldr	r2, [r4, #24]
 8007c1a:	2a00      	cmp	r2, #0
 8007c1c:	f040 8134 	bne.w	8007e88 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8007c20:	2000      	movs	r0, #0
 8007c22:	e02b      	b.n	8007c7c <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007c24:	4b96      	ldr	r3, [pc, #600]	; (8007e80 <HAL_RCC_OscConfig+0x28c>)
 8007c26:	689a      	ldr	r2, [r3, #8]
 8007c28:	f002 020c 	and.w	r2, r2, #12
 8007c2c:	2a04      	cmp	r2, #4
 8007c2e:	d007      	beq.n	8007c40 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c30:	689a      	ldr	r2, [r3, #8]
 8007c32:	f002 020c 	and.w	r2, r2, #12
 8007c36:	2a08      	cmp	r2, #8
 8007c38:	d10b      	bne.n	8007c52 <HAL_RCC_OscConfig+0x5e>
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	0256      	lsls	r6, r2, #9
 8007c3e:	d508      	bpl.n	8007c52 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c40:	4b8f      	ldr	r3, [pc, #572]	; (8007e80 <HAL_RCC_OscConfig+0x28c>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	039d      	lsls	r5, r3, #14
 8007c46:	d5dc      	bpl.n	8007c02 <HAL_RCC_OscConfig+0xe>
 8007c48:	6863      	ldr	r3, [r4, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1d9      	bne.n	8007c02 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8007c4e:	2001      	movs	r0, #1
 8007c50:	e014      	b.n	8007c7c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c52:	6862      	ldr	r2, [r4, #4]
 8007c54:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007c58:	d113      	bne.n	8007c82 <HAL_RCC_OscConfig+0x8e>
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007c60:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007c62:	f7fd fe17 	bl	8005894 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c66:	4e86      	ldr	r6, [pc, #536]	; (8007e80 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8007c68:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c6a:	6833      	ldr	r3, [r6, #0]
 8007c6c:	0398      	lsls	r0, r3, #14
 8007c6e:	d4c8      	bmi.n	8007c02 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c70:	f7fd fe10 	bl	8005894 <HAL_GetTick>
 8007c74:	1b40      	subs	r0, r0, r5
 8007c76:	2864      	cmp	r0, #100	; 0x64
 8007c78:	d9f7      	bls.n	8007c6a <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8007c7a:	2003      	movs	r0, #3
}
 8007c7c:	b002      	add	sp, #8
 8007c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c82:	4d7f      	ldr	r5, [pc, #508]	; (8007e80 <HAL_RCC_OscConfig+0x28c>)
 8007c84:	682b      	ldr	r3, [r5, #0]
 8007c86:	b992      	cbnz	r2, 8007cae <HAL_RCC_OscConfig+0xba>
 8007c88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c8c:	602b      	str	r3, [r5, #0]
 8007c8e:	682b      	ldr	r3, [r5, #0]
 8007c90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c94:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007c96:	f7fd fdfd 	bl	8005894 <HAL_GetTick>
 8007c9a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c9c:	682b      	ldr	r3, [r5, #0]
 8007c9e:	0399      	lsls	r1, r3, #14
 8007ca0:	d5af      	bpl.n	8007c02 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ca2:	f7fd fdf7 	bl	8005894 <HAL_GetTick>
 8007ca6:	1b80      	subs	r0, r0, r6
 8007ca8:	2864      	cmp	r0, #100	; 0x64
 8007caa:	d9f7      	bls.n	8007c9c <HAL_RCC_OscConfig+0xa8>
 8007cac:	e7e5      	b.n	8007c7a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cae:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8007cb2:	d107      	bne.n	8007cc4 <HAL_RCC_OscConfig+0xd0>
 8007cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007cb8:	602b      	str	r3, [r5, #0]
 8007cba:	682b      	ldr	r3, [r5, #0]
 8007cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cc0:	602b      	str	r3, [r5, #0]
 8007cc2:	e7ce      	b.n	8007c62 <HAL_RCC_OscConfig+0x6e>
 8007cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cc8:	602b      	str	r3, [r5, #0]
 8007cca:	682b      	ldr	r3, [r5, #0]
 8007ccc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cd0:	e7f6      	b.n	8007cc0 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007cd2:	4b6b      	ldr	r3, [pc, #428]	; (8007e80 <HAL_RCC_OscConfig+0x28c>)
 8007cd4:	689a      	ldr	r2, [r3, #8]
 8007cd6:	f012 0f0c 	tst.w	r2, #12
 8007cda:	d007      	beq.n	8007cec <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007cdc:	689a      	ldr	r2, [r3, #8]
 8007cde:	f002 020c 	and.w	r2, r2, #12
 8007ce2:	2a08      	cmp	r2, #8
 8007ce4:	d111      	bne.n	8007d0a <HAL_RCC_OscConfig+0x116>
 8007ce6:	685a      	ldr	r2, [r3, #4]
 8007ce8:	0252      	lsls	r2, r2, #9
 8007cea:	d40e      	bmi.n	8007d0a <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cec:	4a64      	ldr	r2, [pc, #400]	; (8007e80 <HAL_RCC_OscConfig+0x28c>)
 8007cee:	6813      	ldr	r3, [r2, #0]
 8007cf0:	079b      	lsls	r3, r3, #30
 8007cf2:	d502      	bpl.n	8007cfa <HAL_RCC_OscConfig+0x106>
 8007cf4:	68e3      	ldr	r3, [r4, #12]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d1a9      	bne.n	8007c4e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cfa:	6813      	ldr	r3, [r2, #0]
 8007cfc:	6921      	ldr	r1, [r4, #16]
 8007cfe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007d02:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007d06:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d08:	e77e      	b.n	8007c08 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007d0a:	68e2      	ldr	r2, [r4, #12]
 8007d0c:	b1c2      	cbz	r2, 8007d40 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 8007d0e:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d10:	4d5b      	ldr	r5, [pc, #364]	; (8007e80 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8007d12:	f042 0201 	orr.w	r2, r2, #1
 8007d16:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007d18:	f7fd fdbc 	bl	8005894 <HAL_GetTick>
 8007d1c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d1e:	682b      	ldr	r3, [r5, #0]
 8007d20:	079f      	lsls	r7, r3, #30
 8007d22:	d507      	bpl.n	8007d34 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d24:	682b      	ldr	r3, [r5, #0]
 8007d26:	6922      	ldr	r2, [r4, #16]
 8007d28:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007d2c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007d30:	602b      	str	r3, [r5, #0]
 8007d32:	e769      	b.n	8007c08 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d34:	f7fd fdae 	bl	8005894 <HAL_GetTick>
 8007d38:	1b80      	subs	r0, r0, r6
 8007d3a:	2802      	cmp	r0, #2
 8007d3c:	d9ef      	bls.n	8007d1e <HAL_RCC_OscConfig+0x12a>
 8007d3e:	e79c      	b.n	8007c7a <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8007d40:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d42:	4e4f      	ldr	r6, [pc, #316]	; (8007e80 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 8007d44:	f022 0201 	bic.w	r2, r2, #1
 8007d48:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007d4a:	f7fd fda3 	bl	8005894 <HAL_GetTick>
 8007d4e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d50:	6833      	ldr	r3, [r6, #0]
 8007d52:	0798      	lsls	r0, r3, #30
 8007d54:	f57f af58 	bpl.w	8007c08 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d58:	f7fd fd9c 	bl	8005894 <HAL_GetTick>
 8007d5c:	1b40      	subs	r0, r0, r5
 8007d5e:	2802      	cmp	r0, #2
 8007d60:	d9f6      	bls.n	8007d50 <HAL_RCC_OscConfig+0x15c>
 8007d62:	e78a      	b.n	8007c7a <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007d64:	6963      	ldr	r3, [r4, #20]
 8007d66:	4d46      	ldr	r5, [pc, #280]	; (8007e80 <HAL_RCC_OscConfig+0x28c>)
 8007d68:	b183      	cbz	r3, 8007d8c <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 8007d6a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007d6c:	f043 0301 	orr.w	r3, r3, #1
 8007d70:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8007d72:	f7fd fd8f 	bl	8005894 <HAL_GetTick>
 8007d76:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d78:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007d7a:	079b      	lsls	r3, r3, #30
 8007d7c:	f53f af48 	bmi.w	8007c10 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d80:	f7fd fd88 	bl	8005894 <HAL_GetTick>
 8007d84:	1b80      	subs	r0, r0, r6
 8007d86:	2802      	cmp	r0, #2
 8007d88:	d9f6      	bls.n	8007d78 <HAL_RCC_OscConfig+0x184>
 8007d8a:	e776      	b.n	8007c7a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8007d8c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007d8e:	f023 0301 	bic.w	r3, r3, #1
 8007d92:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8007d94:	f7fd fd7e 	bl	8005894 <HAL_GetTick>
 8007d98:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d9a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007d9c:	079f      	lsls	r7, r3, #30
 8007d9e:	f57f af37 	bpl.w	8007c10 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007da2:	f7fd fd77 	bl	8005894 <HAL_GetTick>
 8007da6:	1b80      	subs	r0, r0, r6
 8007da8:	2802      	cmp	r0, #2
 8007daa:	d9f6      	bls.n	8007d9a <HAL_RCC_OscConfig+0x1a6>
 8007dac:	e765      	b.n	8007c7a <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007dae:	4b34      	ldr	r3, [pc, #208]	; (8007e80 <HAL_RCC_OscConfig+0x28c>)
 8007db0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007db2:	00d0      	lsls	r0, r2, #3
 8007db4:	d427      	bmi.n	8007e06 <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 8007db6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8007db8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8007dba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007dbe:	641a      	str	r2, [r3, #64]	; 0x40
 8007dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dc6:	9301      	str	r3, [sp, #4]
 8007dc8:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007dca:	4d2e      	ldr	r5, [pc, #184]	; (8007e84 <HAL_RCC_OscConfig+0x290>)
 8007dcc:	682b      	ldr	r3, [r5, #0]
 8007dce:	05d9      	lsls	r1, r3, #23
 8007dd0:	d51b      	bpl.n	8007e0a <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007dd2:	68a3      	ldr	r3, [r4, #8]
 8007dd4:	4d2a      	ldr	r5, [pc, #168]	; (8007e80 <HAL_RCC_OscConfig+0x28c>)
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d127      	bne.n	8007e2a <HAL_RCC_OscConfig+0x236>
 8007dda:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007ddc:	f043 0301 	orr.w	r3, r3, #1
 8007de0:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007de2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8007de6:	f7fd fd55 	bl	8005894 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dea:	4e25      	ldr	r6, [pc, #148]	; (8007e80 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8007dec:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dee:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8007df0:	079b      	lsls	r3, r3, #30
 8007df2:	d53f      	bpl.n	8007e74 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 8007df4:	2f00      	cmp	r7, #0
 8007df6:	f43f af0f 	beq.w	8007c18 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dfa:	4a21      	ldr	r2, [pc, #132]	; (8007e80 <HAL_RCC_OscConfig+0x28c>)
 8007dfc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e02:	6413      	str	r3, [r2, #64]	; 0x40
 8007e04:	e708      	b.n	8007c18 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8007e06:	2700      	movs	r7, #0
 8007e08:	e7df      	b.n	8007dca <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 8007e0a:	682b      	ldr	r3, [r5, #0]
 8007e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e10:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8007e12:	f7fd fd3f 	bl	8005894 <HAL_GetTick>
 8007e16:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e18:	682b      	ldr	r3, [r5, #0]
 8007e1a:	05da      	lsls	r2, r3, #23
 8007e1c:	d4d9      	bmi.n	8007dd2 <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e1e:	f7fd fd39 	bl	8005894 <HAL_GetTick>
 8007e22:	1b80      	subs	r0, r0, r6
 8007e24:	2864      	cmp	r0, #100	; 0x64
 8007e26:	d9f7      	bls.n	8007e18 <HAL_RCC_OscConfig+0x224>
 8007e28:	e727      	b.n	8007c7a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e2a:	b9ab      	cbnz	r3, 8007e58 <HAL_RCC_OscConfig+0x264>
 8007e2c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e2e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e32:	f023 0301 	bic.w	r3, r3, #1
 8007e36:	672b      	str	r3, [r5, #112]	; 0x70
 8007e38:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007e3a:	f023 0304 	bic.w	r3, r3, #4
 8007e3e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8007e40:	f7fd fd28 	bl	8005894 <HAL_GetTick>
 8007e44:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e46:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007e48:	0798      	lsls	r0, r3, #30
 8007e4a:	d5d3      	bpl.n	8007df4 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e4c:	f7fd fd22 	bl	8005894 <HAL_GetTick>
 8007e50:	1b80      	subs	r0, r0, r6
 8007e52:	4540      	cmp	r0, r8
 8007e54:	d9f7      	bls.n	8007e46 <HAL_RCC_OscConfig+0x252>
 8007e56:	e710      	b.n	8007c7a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e58:	2b05      	cmp	r3, #5
 8007e5a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007e5c:	d103      	bne.n	8007e66 <HAL_RCC_OscConfig+0x272>
 8007e5e:	f043 0304 	orr.w	r3, r3, #4
 8007e62:	672b      	str	r3, [r5, #112]	; 0x70
 8007e64:	e7b9      	b.n	8007dda <HAL_RCC_OscConfig+0x1e6>
 8007e66:	f023 0301 	bic.w	r3, r3, #1
 8007e6a:	672b      	str	r3, [r5, #112]	; 0x70
 8007e6c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007e6e:	f023 0304 	bic.w	r3, r3, #4
 8007e72:	e7b5      	b.n	8007de0 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e74:	f7fd fd0e 	bl	8005894 <HAL_GetTick>
 8007e78:	1b40      	subs	r0, r0, r5
 8007e7a:	4540      	cmp	r0, r8
 8007e7c:	d9b7      	bls.n	8007dee <HAL_RCC_OscConfig+0x1fa>
 8007e7e:	e6fc      	b.n	8007c7a <HAL_RCC_OscConfig+0x86>
 8007e80:	40023800 	.word	0x40023800
 8007e84:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e88:	4d3c      	ldr	r5, [pc, #240]	; (8007f7c <HAL_RCC_OscConfig+0x388>)
 8007e8a:	68ab      	ldr	r3, [r5, #8]
 8007e8c:	f003 030c 	and.w	r3, r3, #12
 8007e90:	2b08      	cmp	r3, #8
 8007e92:	d042      	beq.n	8007f1a <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 8007e94:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e96:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8007e98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e9c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e9e:	d12f      	bne.n	8007f00 <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
 8007ea0:	f7fd fcf8 	bl	8005894 <HAL_GetTick>
 8007ea4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ea6:	682b      	ldr	r3, [r5, #0]
 8007ea8:	0199      	lsls	r1, r3, #6
 8007eaa:	d423      	bmi.n	8007ef4 <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007eac:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007eb4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8007eb8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007eba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007ebe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007ec0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8007ec4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007ec6:	0852      	lsrs	r2, r2, #1
 8007ec8:	3a01      	subs	r2, #1
 8007eca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ece:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8007ed0:	682b      	ldr	r3, [r5, #0]
 8007ed2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ed6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007ed8:	f7fd fcdc 	bl	8005894 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007edc:	4d27      	ldr	r5, [pc, #156]	; (8007f7c <HAL_RCC_OscConfig+0x388>)
        tickstart = HAL_GetTick();
 8007ede:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ee0:	682b      	ldr	r3, [r5, #0]
 8007ee2:	019a      	lsls	r2, r3, #6
 8007ee4:	f53f ae9c 	bmi.w	8007c20 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ee8:	f7fd fcd4 	bl	8005894 <HAL_GetTick>
 8007eec:	1b00      	subs	r0, r0, r4
 8007eee:	2802      	cmp	r0, #2
 8007ef0:	d9f6      	bls.n	8007ee0 <HAL_RCC_OscConfig+0x2ec>
 8007ef2:	e6c2      	b.n	8007c7a <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ef4:	f7fd fcce 	bl	8005894 <HAL_GetTick>
 8007ef8:	1b80      	subs	r0, r0, r6
 8007efa:	2802      	cmp	r0, #2
 8007efc:	d9d3      	bls.n	8007ea6 <HAL_RCC_OscConfig+0x2b2>
 8007efe:	e6bc      	b.n	8007c7a <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8007f00:	f7fd fcc8 	bl	8005894 <HAL_GetTick>
 8007f04:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f06:	682b      	ldr	r3, [r5, #0]
 8007f08:	019b      	lsls	r3, r3, #6
 8007f0a:	f57f ae89 	bpl.w	8007c20 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f0e:	f7fd fcc1 	bl	8005894 <HAL_GetTick>
 8007f12:	1b00      	subs	r0, r0, r4
 8007f14:	2802      	cmp	r0, #2
 8007f16:	d9f6      	bls.n	8007f06 <HAL_RCC_OscConfig+0x312>
 8007f18:	e6af      	b.n	8007c7a <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f1a:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8007f1c:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f1e:	f43f ae96 	beq.w	8007c4e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f26:	69e1      	ldr	r1, [r4, #28]
 8007f28:	428a      	cmp	r2, r1
 8007f2a:	f47f ae90 	bne.w	8007c4e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f32:	6a21      	ldr	r1, [r4, #32]
 8007f34:	428a      	cmp	r2, r1
 8007f36:	f47f ae8a 	bne.w	8007c4e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f3a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f3e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f40:	401a      	ands	r2, r3
 8007f42:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8007f46:	f47f ae82 	bne.w	8007c4e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007f4a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007f4c:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8007f50:	0852      	lsrs	r2, r2, #1
 8007f52:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f54:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8007f58:	f47f ae79 	bne.w	8007c4e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007f60:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007f62:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8007f66:	f47f ae72 	bne.w	8007c4e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007f6a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007f6e:	6b22      	ldr	r2, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f70:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8007f74:	f43f ae54 	beq.w	8007c20 <HAL_RCC_OscConfig+0x2c>
 8007f78:	e669      	b.n	8007c4e <HAL_RCC_OscConfig+0x5a>
 8007f7a:	bf00      	nop
 8007f7c:	40023800 	.word	0x40023800

08007f80 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f80:	4913      	ldr	r1, [pc, #76]	; (8007fd0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8007f82:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f84:	688b      	ldr	r3, [r1, #8]
 8007f86:	f003 030c 	and.w	r3, r3, #12
 8007f8a:	2b04      	cmp	r3, #4
 8007f8c:	d01b      	beq.n	8007fc6 <HAL_RCC_GetSysClockFreq+0x46>
 8007f8e:	2b08      	cmp	r3, #8
 8007f90:	d11b      	bne.n	8007fca <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f92:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007f94:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f96:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f98:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007f9c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fa0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8007fa4:	bf1a      	itte	ne
 8007fa6:	480b      	ldrne	r0, [pc, #44]	; (8007fd4 <HAL_RCC_GetSysClockFreq+0x54>)
 8007fa8:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007faa:	480b      	ldreq	r0, [pc, #44]	; (8007fd8 <HAL_RCC_GetSysClockFreq+0x58>)
 8007fac:	fba1 0100 	umull	r0, r1, r1, r0
 8007fb0:	f7f8 f996 	bl	80002e0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007fb4:	4b06      	ldr	r3, [pc, #24]	; (8007fd0 <HAL_RCC_GetSysClockFreq+0x50>)
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8007fc0:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8007fc4:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007fc6:	4803      	ldr	r0, [pc, #12]	; (8007fd4 <HAL_RCC_GetSysClockFreq+0x54>)
 8007fc8:	e7fc      	b.n	8007fc4 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8007fca:	4803      	ldr	r0, [pc, #12]	; (8007fd8 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8007fcc:	e7fa      	b.n	8007fc4 <HAL_RCC_GetSysClockFreq+0x44>
 8007fce:	bf00      	nop
 8007fd0:	40023800 	.word	0x40023800
 8007fd4:	017d7840 	.word	0x017d7840
 8007fd8:	00f42400 	.word	0x00f42400

08007fdc <HAL_RCC_ClockConfig>:
{
 8007fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fe0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	b910      	cbnz	r0, 8007fec <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8007fe6:	2001      	movs	r0, #1
}
 8007fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007fec:	4a46      	ldr	r2, [pc, #280]	; (8008108 <HAL_RCC_ClockConfig+0x12c>)
 8007fee:	6813      	ldr	r3, [r2, #0]
 8007ff0:	f003 030f 	and.w	r3, r3, #15
 8007ff4:	428b      	cmp	r3, r1
 8007ff6:	d328      	bcc.n	800804a <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ff8:	6822      	ldr	r2, [r4, #0]
 8007ffa:	0797      	lsls	r7, r2, #30
 8007ffc:	d430      	bmi.n	8008060 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ffe:	07d0      	lsls	r0, r2, #31
 8008000:	d444      	bmi.n	800808c <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008002:	4a41      	ldr	r2, [pc, #260]	; (8008108 <HAL_RCC_ClockConfig+0x12c>)
 8008004:	6813      	ldr	r3, [r2, #0]
 8008006:	f003 030f 	and.w	r3, r3, #15
 800800a:	42ab      	cmp	r3, r5
 800800c:	d867      	bhi.n	80080de <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800800e:	6822      	ldr	r2, [r4, #0]
 8008010:	0751      	lsls	r1, r2, #29
 8008012:	d470      	bmi.n	80080f6 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008014:	0713      	lsls	r3, r2, #28
 8008016:	d507      	bpl.n	8008028 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008018:	4a3c      	ldr	r2, [pc, #240]	; (800810c <HAL_RCC_ClockConfig+0x130>)
 800801a:	6921      	ldr	r1, [r4, #16]
 800801c:	6893      	ldr	r3, [r2, #8]
 800801e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008022:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008026:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008028:	f7ff ffaa 	bl	8007f80 <HAL_RCC_GetSysClockFreq>
 800802c:	4b37      	ldr	r3, [pc, #220]	; (800810c <HAL_RCC_ClockConfig+0x130>)
 800802e:	4a38      	ldr	r2, [pc, #224]	; (8008110 <HAL_RCC_ClockConfig+0x134>)
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008036:	5cd3      	ldrb	r3, [r2, r3]
 8008038:	40d8      	lsrs	r0, r3
 800803a:	4b36      	ldr	r3, [pc, #216]	; (8008114 <HAL_RCC_ClockConfig+0x138>)
 800803c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800803e:	4b36      	ldr	r3, [pc, #216]	; (8008118 <HAL_RCC_ClockConfig+0x13c>)
 8008040:	6818      	ldr	r0, [r3, #0]
 8008042:	f7fa fef1 	bl	8002e28 <HAL_InitTick>
  return HAL_OK;
 8008046:	2000      	movs	r0, #0
 8008048:	e7ce      	b.n	8007fe8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800804a:	6813      	ldr	r3, [r2, #0]
 800804c:	f023 030f 	bic.w	r3, r3, #15
 8008050:	430b      	orrs	r3, r1
 8008052:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008054:	6813      	ldr	r3, [r2, #0]
 8008056:	f003 030f 	and.w	r3, r3, #15
 800805a:	428b      	cmp	r3, r1
 800805c:	d1c3      	bne.n	8007fe6 <HAL_RCC_ClockConfig+0xa>
 800805e:	e7cb      	b.n	8007ff8 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008060:	f012 0f04 	tst.w	r2, #4
 8008064:	4b29      	ldr	r3, [pc, #164]	; (800810c <HAL_RCC_ClockConfig+0x130>)
 8008066:	d003      	beq.n	8008070 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008068:	6899      	ldr	r1, [r3, #8]
 800806a:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 800806e:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008070:	0716      	lsls	r6, r2, #28
 8008072:	d503      	bpl.n	800807c <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008074:	6899      	ldr	r1, [r3, #8]
 8008076:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 800807a:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800807c:	4923      	ldr	r1, [pc, #140]	; (800810c <HAL_RCC_ClockConfig+0x130>)
 800807e:	68a0      	ldr	r0, [r4, #8]
 8008080:	688b      	ldr	r3, [r1, #8]
 8008082:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008086:	4303      	orrs	r3, r0
 8008088:	608b      	str	r3, [r1, #8]
 800808a:	e7b8      	b.n	8007ffe <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800808c:	6861      	ldr	r1, [r4, #4]
 800808e:	4b1f      	ldr	r3, [pc, #124]	; (800810c <HAL_RCC_ClockConfig+0x130>)
 8008090:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008092:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008094:	d11b      	bne.n	80080ce <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008096:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800809a:	d0a4      	beq.n	8007fe6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800809c:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800809e:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080a2:	4f1a      	ldr	r7, [pc, #104]	; (800810c <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80080a4:	f022 0203 	bic.w	r2, r2, #3
 80080a8:	430a      	orrs	r2, r1
 80080aa:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80080ac:	f7fd fbf2 	bl	8005894 <HAL_GetTick>
 80080b0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	6862      	ldr	r2, [r4, #4]
 80080b6:	f003 030c 	and.w	r3, r3, #12
 80080ba:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80080be:	d0a0      	beq.n	8008002 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080c0:	f7fd fbe8 	bl	8005894 <HAL_GetTick>
 80080c4:	1b80      	subs	r0, r0, r6
 80080c6:	4540      	cmp	r0, r8
 80080c8:	d9f3      	bls.n	80080b2 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 80080ca:	2003      	movs	r0, #3
 80080cc:	e78c      	b.n	8007fe8 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80080ce:	2902      	cmp	r1, #2
 80080d0:	d102      	bne.n	80080d8 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080d2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80080d6:	e7e0      	b.n	800809a <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080d8:	f012 0f02 	tst.w	r2, #2
 80080dc:	e7dd      	b.n	800809a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080de:	6813      	ldr	r3, [r2, #0]
 80080e0:	f023 030f 	bic.w	r3, r3, #15
 80080e4:	432b      	orrs	r3, r5
 80080e6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080e8:	6813      	ldr	r3, [r2, #0]
 80080ea:	f003 030f 	and.w	r3, r3, #15
 80080ee:	42ab      	cmp	r3, r5
 80080f0:	f47f af79 	bne.w	8007fe6 <HAL_RCC_ClockConfig+0xa>
 80080f4:	e78b      	b.n	800800e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80080f6:	4905      	ldr	r1, [pc, #20]	; (800810c <HAL_RCC_ClockConfig+0x130>)
 80080f8:	68e0      	ldr	r0, [r4, #12]
 80080fa:	688b      	ldr	r3, [r1, #8]
 80080fc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8008100:	4303      	orrs	r3, r0
 8008102:	608b      	str	r3, [r1, #8]
 8008104:	e786      	b.n	8008014 <HAL_RCC_ClockConfig+0x38>
 8008106:	bf00      	nop
 8008108:	40023c00 	.word	0x40023c00
 800810c:	40023800 	.word	0x40023800
 8008110:	08027779 	.word	0x08027779
 8008114:	20000048 	.word	0x20000048
 8008118:	20000050 	.word	0x20000050

0800811c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800811c:	4b04      	ldr	r3, [pc, #16]	; (8008130 <HAL_RCC_GetPCLK1Freq+0x14>)
 800811e:	4a05      	ldr	r2, [pc, #20]	; (8008134 <HAL_RCC_GetPCLK1Freq+0x18>)
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8008126:	5cd3      	ldrb	r3, [r2, r3]
 8008128:	4a03      	ldr	r2, [pc, #12]	; (8008138 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800812a:	6810      	ldr	r0, [r2, #0]
}
 800812c:	40d8      	lsrs	r0, r3
 800812e:	4770      	bx	lr
 8008130:	40023800 	.word	0x40023800
 8008134:	08027789 	.word	0x08027789
 8008138:	20000048 	.word	0x20000048

0800813c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800813c:	230f      	movs	r3, #15
 800813e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008140:	4b0b      	ldr	r3, [pc, #44]	; (8008170 <HAL_RCC_GetClockConfig+0x34>)
 8008142:	689a      	ldr	r2, [r3, #8]
 8008144:	f002 0203 	and.w	r2, r2, #3
 8008148:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800814a:	689a      	ldr	r2, [r3, #8]
 800814c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8008150:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008152:	689a      	ldr	r2, [r3, #8]
 8008154:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8008158:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	08db      	lsrs	r3, r3, #3
 800815e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8008162:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008164:	4b03      	ldr	r3, [pc, #12]	; (8008174 <HAL_RCC_GetClockConfig+0x38>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 030f 	and.w	r3, r3, #15
 800816c:	600b      	str	r3, [r1, #0]
}
 800816e:	4770      	bx	lr
 8008170:	40023800 	.word	0x40023800
 8008174:	40023c00 	.word	0x40023c00

08008178 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008178:	6803      	ldr	r3, [r0, #0]
{
 800817a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800817e:	f013 0601 	ands.w	r6, r3, #1
{
 8008182:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008184:	d00b      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008186:	4ab0      	ldr	r2, [pc, #704]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008188:	6891      	ldr	r1, [r2, #8]
 800818a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800818e:	6091      	str	r1, [r2, #8]
 8008190:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8008192:	6891      	ldr	r1, [r2, #8]
 8008194:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008196:	fab6 f686 	clz	r6, r6
 800819a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800819c:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800819e:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 80081a2:	d012      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80081a4:	49a8      	ldr	r1, [pc, #672]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80081a6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80081a8:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80081ac:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80081b0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 80081b4:	bf08      	it	eq
 80081b6:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80081b8:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80081bc:	bf16      	itet	ne
 80081be:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80081c2:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80081c4:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80081c6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80081ca:	02d9      	lsls	r1, r3, #11
 80081cc:	d510      	bpl.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80081ce:	489e      	ldr	r0, [pc, #632]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80081d0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80081d2:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80081d6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80081da:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80081de:	ea42 0201 	orr.w	r2, r2, r1
 80081e2:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80081e6:	f000 81a7 	beq.w	8008538 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80081ea:	2900      	cmp	r1, #0
 80081ec:	bf08      	it	eq
 80081ee:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80081f0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80081f4:	bf18      	it	ne
 80081f6:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80081f8:	069a      	lsls	r2, r3, #26
 80081fa:	d531      	bpl.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80081fc:	4b92      	ldr	r3, [pc, #584]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80081fe:	4f93      	ldr	r7, [pc, #588]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8008200:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008202:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008206:	641a      	str	r2, [r3, #64]	; 0x40
 8008208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800820e:	9301      	str	r3, [sp, #4]
 8008210:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008218:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800821a:	f7fd fb3b 	bl	8005894 <HAL_GetTick>
 800821e:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	05db      	lsls	r3, r3, #23
 8008224:	f140 818a 	bpl.w	800853c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008228:	4f87      	ldr	r7, [pc, #540]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800822a:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800822c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8008230:	f040 818f 	bne.w	8008552 <HAL_RCCEx_PeriphCLKConfig+0x3da>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008234:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008236:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800823a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800823e:	4a82      	ldr	r2, [pc, #520]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008240:	f040 81ad 	bne.w	800859e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008244:	6891      	ldr	r1, [r2, #8]
 8008246:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800824a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800824e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8008252:	4301      	orrs	r1, r0
 8008254:	6091      	str	r1, [r2, #8]
 8008256:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800825a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800825c:	430b      	orrs	r3, r1
 800825e:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008260:	6823      	ldr	r3, [r4, #0]
 8008262:	06da      	lsls	r2, r3, #27
 8008264:	d50c      	bpl.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008266:	4a78      	ldr	r2, [pc, #480]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008268:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800826c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8008270:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8008274:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8008278:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800827a:	4301      	orrs	r1, r0
 800827c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008280:	045f      	lsls	r7, r3, #17
 8008282:	d508      	bpl.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008284:	4970      	ldr	r1, [pc, #448]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008286:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8008288:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800828c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8008290:	4302      	orrs	r2, r0
 8008292:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008296:	0418      	lsls	r0, r3, #16
 8008298:	d508      	bpl.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800829a:	496b      	ldr	r1, [pc, #428]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800829c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800829e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80082a2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80082a6:	4302      	orrs	r2, r0
 80082a8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80082ac:	03d9      	lsls	r1, r3, #15
 80082ae:	d508      	bpl.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80082b0:	4965      	ldr	r1, [pc, #404]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80082b2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80082b4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80082b8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80082bc:	4302      	orrs	r2, r0
 80082be:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80082c2:	039a      	lsls	r2, r3, #14
 80082c4:	d508      	bpl.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80082c6:	4960      	ldr	r1, [pc, #384]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80082c8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80082ca:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80082ce:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80082d2:	4302      	orrs	r2, r0
 80082d4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80082d8:	065f      	lsls	r7, r3, #25
 80082da:	d508      	bpl.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80082dc:	495a      	ldr	r1, [pc, #360]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80082de:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80082e0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80082e4:	f022 0203 	bic.w	r2, r2, #3
 80082e8:	4302      	orrs	r2, r0
 80082ea:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80082ee:	0618      	lsls	r0, r3, #24
 80082f0:	d508      	bpl.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80082f2:	4955      	ldr	r1, [pc, #340]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80082f4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80082f6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80082fa:	f022 020c 	bic.w	r2, r2, #12
 80082fe:	4302      	orrs	r2, r0
 8008300:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008304:	05d9      	lsls	r1, r3, #23
 8008306:	d508      	bpl.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008308:	494f      	ldr	r1, [pc, #316]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800830a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800830c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008310:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008314:	4302      	orrs	r2, r0
 8008316:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800831a:	059a      	lsls	r2, r3, #22
 800831c:	d508      	bpl.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800831e:	494a      	ldr	r1, [pc, #296]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008320:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8008322:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008326:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800832a:	4302      	orrs	r2, r0
 800832c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008330:	055f      	lsls	r7, r3, #21
 8008332:	d508      	bpl.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008334:	4944      	ldr	r1, [pc, #272]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008336:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008338:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800833c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008340:	4302      	orrs	r2, r0
 8008342:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008346:	0518      	lsls	r0, r3, #20
 8008348:	d508      	bpl.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800834a:	493f      	ldr	r1, [pc, #252]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800834c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800834e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008352:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008356:	4302      	orrs	r2, r0
 8008358:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800835c:	04d9      	lsls	r1, r3, #19
 800835e:	d508      	bpl.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008360:	4939      	ldr	r1, [pc, #228]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008362:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8008364:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008368:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800836c:	4302      	orrs	r2, r0
 800836e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008372:	049a      	lsls	r2, r3, #18
 8008374:	d508      	bpl.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008376:	4934      	ldr	r1, [pc, #208]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008378:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800837a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800837e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008382:	4302      	orrs	r2, r0
 8008384:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008388:	025f      	lsls	r7, r3, #9
 800838a:	d508      	bpl.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800838c:	492e      	ldr	r1, [pc, #184]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800838e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8008390:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008394:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8008398:	4302      	orrs	r2, r0
 800839a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800839e:	0298      	lsls	r0, r3, #10
 80083a0:	d50c      	bpl.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80083a2:	4829      	ldr	r0, [pc, #164]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80083a4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80083a6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80083aa:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80083ae:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80083b2:	bf08      	it	eq
 80083b4:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80083b6:	430a      	orrs	r2, r1
 80083b8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80083bc:	f013 0f08 	tst.w	r3, #8
 80083c0:	bf18      	it	ne
 80083c2:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80083c4:	0359      	lsls	r1, r3, #13
 80083c6:	d508      	bpl.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80083c8:	491f      	ldr	r1, [pc, #124]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80083ca:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80083cc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80083d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80083d4:	4302      	orrs	r2, r0
 80083d6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80083da:	021a      	lsls	r2, r3, #8
 80083dc:	d509      	bpl.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80083de:	491a      	ldr	r1, [pc, #104]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80083e0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80083e4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80083e8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80083ec:	4302      	orrs	r2, r0
 80083ee:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80083f2:	015f      	lsls	r7, r3, #5
 80083f4:	d509      	bpl.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80083f6:	4914      	ldr	r1, [pc, #80]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80083f8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80083fc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008400:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8008404:	4302      	orrs	r2, r0
 8008406:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800840a:	0118      	lsls	r0, r3, #4
 800840c:	d509      	bpl.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800840e:	490e      	ldr	r1, [pc, #56]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008410:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8008414:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8008418:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800841c:	4302      	orrs	r2, r0
 800841e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8008422:	00d9      	lsls	r1, r3, #3
 8008424:	d509      	bpl.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008426:	4908      	ldr	r1, [pc, #32]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008428:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800842c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8008430:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8008434:	4302      	orrs	r2, r0
 8008436:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800843a:	2e01      	cmp	r6, #1
 800843c:	f000 80b3 	beq.w	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008440:	019a      	lsls	r2, r3, #6
 8008442:	f100 80b0 	bmi.w	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008446:	e003      	b.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8008448:	40023800 	.word	0x40023800
 800844c:	40007000 	.word	0x40007000
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008450:	2d01      	cmp	r5, #1
 8008452:	d16f      	bne.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008454:	4d9d      	ldr	r5, [pc, #628]	; (80086cc <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8008456:	682b      	ldr	r3, [r5, #0]
 8008458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800845c:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800845e:	f7fd fa19 	bl	8005894 <HAL_GetTick>
 8008462:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008464:	682b      	ldr	r3, [r5, #0]
 8008466:	009f      	lsls	r7, r3, #2
 8008468:	f100 8121 	bmi.w	80086ae <HAL_RCCEx_PeriphCLKConfig+0x536>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800846c:	6822      	ldr	r2, [r4, #0]
 800846e:	0316      	lsls	r6, r2, #12
 8008470:	d501      	bpl.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8008472:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008474:	b11b      	cbz	r3, 800847e <HAL_RCCEx_PeriphCLKConfig+0x306>
 8008476:	02d0      	lsls	r0, r2, #11
 8008478:	d51c      	bpl.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800847a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800847c:	b9d3      	cbnz	r3, 80084b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800847e:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008482:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008486:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800848a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800848e:	430b      	orrs	r3, r1
 8008490:	6961      	ldr	r1, [r4, #20]
 8008492:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8008496:	69a1      	ldr	r1, [r4, #24]
 8008498:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800849c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80084a0:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80084a4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80084a6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80084aa:	3901      	subs	r1, #1
 80084ac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80084b0:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80084b4:	0291      	lsls	r1, r2, #10
 80084b6:	d515      	bpl.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80084b8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80084ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084be:	d111      	bne.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80084c0:	4982      	ldr	r1, [pc, #520]	; (80086cc <HAL_RCCEx_PeriphCLKConfig+0x554>)
 80084c2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80084c6:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80084ca:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80084ce:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80084d2:	4303      	orrs	r3, r0
 80084d4:	6960      	ldr	r0, [r4, #20]
 80084d6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80084da:	6a20      	ldr	r0, [r4, #32]
 80084dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80084e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80084e4:	0712      	lsls	r2, r2, #28
 80084e6:	d519      	bpl.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80084e8:	4a78      	ldr	r2, [pc, #480]	; (80086cc <HAL_RCCEx_PeriphCLKConfig+0x554>)
 80084ea:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80084ee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80084f2:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80084f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80084fa:	430b      	orrs	r3, r1
 80084fc:	6961      	ldr	r1, [r4, #20]
 80084fe:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8008502:	69e1      	ldr	r1, [r4, #28]
 8008504:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8008508:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800850c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8008510:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008512:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008516:	430b      	orrs	r3, r1
 8008518:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800851c:	4c6b      	ldr	r4, [pc, #428]	; (80086cc <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800851e:	6823      	ldr	r3, [r4, #0]
 8008520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008524:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008526:	f7fd f9b5 	bl	8005894 <HAL_GetTick>
 800852a:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800852c:	6823      	ldr	r3, [r4, #0]
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	f140 80c4 	bpl.w	80086bc <HAL_RCCEx_PeriphCLKConfig+0x544>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8008534:	2000      	movs	r0, #0
 8008536:	e009      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      plli2sused = 1;
 8008538:	2601      	movs	r6, #1
 800853a:	e659      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800853c:	f7fd f9aa 	bl	8005894 <HAL_GetTick>
 8008540:	eba0 0008 	sub.w	r0, r0, r8
 8008544:	2864      	cmp	r0, #100	; 0x64
 8008546:	f67f ae6b 	bls.w	8008220 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 800854a:	2003      	movs	r0, #3
}
 800854c:	b003      	add	sp, #12
 800854e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008552:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008554:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8008558:	4293      	cmp	r3, r2
 800855a:	f43f ae6b 	beq.w	8008234 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800855e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8008560:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8008566:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800856a:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800856c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800856e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008572:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8008574:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008576:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008578:	07d8      	lsls	r0, r3, #31
 800857a:	f57f ae5b 	bpl.w	8008234 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 800857e:	f7fd f989 	bl	8005894 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008582:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8008586:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008588:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800858a:	0799      	lsls	r1, r3, #30
 800858c:	f53f ae52 	bmi.w	8008234 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008590:	f7fd f980 	bl	8005894 <HAL_GetTick>
 8008594:	eba0 0008 	sub.w	r0, r0, r8
 8008598:	4548      	cmp	r0, r9
 800859a:	d9f5      	bls.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800859c:	e7d5      	b.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800859e:	6891      	ldr	r1, [r2, #8]
 80085a0:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80085a4:	e656      	b.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 80085a6:	4e49      	ldr	r6, [pc, #292]	; (80086cc <HAL_RCCEx_PeriphCLKConfig+0x554>)
 80085a8:	6833      	ldr	r3, [r6, #0]
 80085aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80085ae:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80085b0:	f7fd f970 	bl	8005894 <HAL_GetTick>
 80085b4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80085b6:	6833      	ldr	r3, [r6, #0]
 80085b8:	011b      	lsls	r3, r3, #4
 80085ba:	d472      	bmi.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80085bc:	6822      	ldr	r2, [r4, #0]
 80085be:	07d7      	lsls	r7, r2, #31
 80085c0:	d512      	bpl.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80085c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085c4:	b983      	cbnz	r3, 80085e8 <HAL_RCCEx_PeriphCLKConfig+0x470>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80085c6:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80085ca:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80085ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80085d2:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80085d6:	430b      	orrs	r3, r1
 80085d8:	6861      	ldr	r1, [r4, #4]
 80085da:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80085de:	68a1      	ldr	r1, [r4, #8]
 80085e0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80085e4:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80085e8:	0316      	lsls	r6, r2, #12
 80085ea:	d503      	bpl.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80085ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80085ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085f2:	d005      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80085f4:	02d0      	lsls	r0, r2, #11
 80085f6:	d51e      	bpl.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x4be>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80085f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085fe:	d11a      	bne.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x4be>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008600:	4932      	ldr	r1, [pc, #200]	; (80086cc <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8008602:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008606:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800860a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800860e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8008612:	4303      	orrs	r3, r0
 8008614:	6860      	ldr	r0, [r4, #4]
 8008616:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800861a:	68e0      	ldr	r0, [r4, #12]
 800861c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8008620:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008624:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8008628:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800862a:	f020 001f 	bic.w	r0, r0, #31
 800862e:	3b01      	subs	r3, #1
 8008630:	4303      	orrs	r3, r0
 8008632:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008636:	01d1      	lsls	r1, r2, #7
 8008638:	d511      	bpl.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800863a:	4924      	ldr	r1, [pc, #144]	; (80086cc <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800863c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008640:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008644:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8008648:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800864c:	4303      	orrs	r3, r0
 800864e:	6860      	ldr	r0, [r4, #4]
 8008650:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8008654:	6920      	ldr	r0, [r4, #16]
 8008656:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800865a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800865e:	0192      	lsls	r2, r2, #6
 8008660:	d50d      	bpl.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x506>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008662:	6923      	ldr	r3, [r4, #16]
 8008664:	6862      	ldr	r2, [r4, #4]
 8008666:	041b      	lsls	r3, r3, #16
 8008668:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800866c:	68e2      	ldr	r2, [r4, #12]
 800866e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008672:	68a2      	ldr	r2, [r4, #8]
 8008674:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8008678:	4a14      	ldr	r2, [pc, #80]	; (80086cc <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800867a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800867e:	4e13      	ldr	r6, [pc, #76]	; (80086cc <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8008680:	6833      	ldr	r3, [r6, #0]
 8008682:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008686:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8008688:	f7fd f904 	bl	8005894 <HAL_GetTick>
 800868c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800868e:	6833      	ldr	r3, [r6, #0]
 8008690:	011b      	lsls	r3, r3, #4
 8008692:	f53f aedd 	bmi.w	8008450 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008696:	f7fd f8fd 	bl	8005894 <HAL_GetTick>
 800869a:	1bc0      	subs	r0, r0, r7
 800869c:	2864      	cmp	r0, #100	; 0x64
 800869e:	d9f6      	bls.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x516>
 80086a0:	e753      	b.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80086a2:	f7fd f8f7 	bl	8005894 <HAL_GetTick>
 80086a6:	1bc0      	subs	r0, r0, r7
 80086a8:	2864      	cmp	r0, #100	; 0x64
 80086aa:	d984      	bls.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80086ac:	e74d      	b.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80086ae:	f7fd f8f1 	bl	8005894 <HAL_GetTick>
 80086b2:	1b80      	subs	r0, r0, r6
 80086b4:	2864      	cmp	r0, #100	; 0x64
 80086b6:	f67f aed5 	bls.w	8008464 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 80086ba:	e746      	b.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80086bc:	f7fd f8ea 	bl	8005894 <HAL_GetTick>
 80086c0:	1b40      	subs	r0, r0, r5
 80086c2:	2864      	cmp	r0, #100	; 0x64
 80086c4:	f67f af32 	bls.w	800852c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 80086c8:	e73f      	b.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80086ca:	bf00      	nop
 80086cc:	40023800 	.word	0x40023800

080086d0 <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80086d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80086d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086da:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80086dc:	4770      	bx	lr

080086de <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80086de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086e0:	4605      	mov	r5, r0
 80086e2:	b089      	sub	sp, #36	; 0x24
 80086e4:	460e      	mov	r6, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80086e6:	f7fd f8d5 	bl	8005894 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 80086ea:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 80086ec:	4607      	mov	r7, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80086ee:	2108      	movs	r1, #8
 80086f0:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 80086f2:	e9cd 3300 	strd	r3, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80086f6:	f001 f8eb 	bl	80098d0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80086fa:	4604      	mov	r4, r0
 80086fc:	b9d8      	cbnz	r0, 8008736 <SD_FindSCR+0x58>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80086fe:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8008700:	6828      	ldr	r0, [r5, #0]
 8008702:	0409      	lsls	r1, r1, #16
 8008704:	f001 f98e 	bl	8009a24 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008708:	4604      	mov	r4, r0
 800870a:	b9a0      	cbnz	r0, 8008736 <SD_FindSCR+0x58>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 800870c:	f04f 32ff 	mov.w	r2, #4294967295
 8008710:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008712:	2130      	movs	r1, #48	; 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008714:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008716:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
 8008718:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800871c:	2302      	movs	r3, #2
 800871e:	e9cd 1304 	strd	r1, r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008722:	2301      	movs	r3, #1
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008724:	a902      	add	r1, sp, #8
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008726:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008728:	f001 f808 	bl	800973c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800872c:	6828      	ldr	r0, [r5, #0]
 800872e:	f001 f9a9 	bl	8009a84 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008732:	4604      	mov	r4, r0
 8008734:	b190      	cbz	r0, 800875c <SD_FindSCR+0x7e>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8008736:	4620      	mov	r0, r4
 8008738:	b009      	add	sp, #36	; 0x24
 800873a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800873c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800873e:	0293      	lsls	r3, r2, #10
 8008740:	d512      	bpl.n	8008768 <SD_FindSCR+0x8a>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008742:	f000 ffd5 	bl	80096f0 <SDMMC_ReadFIFO>
 8008746:	ab08      	add	r3, sp, #32
 8008748:	eb03 0384 	add.w	r3, r3, r4, lsl #2
      index++;
 800874c:	3401      	adds	r4, #1
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800874e:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008752:	f7fd f89f 	bl	8005894 <HAL_GetTick>
 8008756:	1bc0      	subs	r0, r0, r7
 8008758:	3001      	adds	r0, #1
 800875a:	d023      	beq.n	80087a4 <SD_FindSCR+0xc6>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800875c:	6828      	ldr	r0, [r5, #0]
 800875e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008760:	f012 0f2a 	tst.w	r2, #42	; 0x2a
 8008764:	d0ea      	beq.n	800873c <SD_FindSCR+0x5e>
 8008766:	e002      	b.n	800876e <SD_FindSCR+0x90>
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8008768:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800876a:	0491      	lsls	r1, r2, #18
 800876c:	d4f1      	bmi.n	8008752 <SD_FindSCR+0x74>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800876e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008770:	0712      	lsls	r2, r2, #28
 8008772:	d502      	bpl.n	800877a <SD_FindSCR+0x9c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008774:	2408      	movs	r4, #8
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008776:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8008778:	e7dd      	b.n	8008736 <SD_FindSCR+0x58>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800877a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800877c:	0793      	lsls	r3, r2, #30
 800877e:	d501      	bpl.n	8008784 <SD_FindSCR+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008780:	2402      	movs	r4, #2
 8008782:	e7f8      	b.n	8008776 <SD_FindSCR+0x98>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008784:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008786:	f014 0420 	ands.w	r4, r4, #32
 800878a:	d001      	beq.n	8008790 <SD_FindSCR+0xb2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800878c:	2420      	movs	r4, #32
 800878e:	e7f2      	b.n	8008776 <SD_FindSCR+0x98>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008790:	9b01      	ldr	r3, [sp, #4]
 8008792:	f240 523a 	movw	r2, #1338	; 0x53a
 8008796:	ba1b      	rev	r3, r3
 8008798:	6382      	str	r2, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800879a:	6033      	str	r3, [r6, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800879c:	9b00      	ldr	r3, [sp, #0]
 800879e:	ba1b      	rev	r3, r3
 80087a0:	6073      	str	r3, [r6, #4]
  return HAL_SD_ERROR_NONE;
 80087a2:	e7c8      	b.n	8008736 <SD_FindSCR+0x58>
      return HAL_SD_ERROR_TIMEOUT;
 80087a4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80087a8:	e7c5      	b.n	8008736 <SD_FindSCR+0x58>
	...

080087ac <HAL_SD_ReadBlocks_DMA>:
{
 80087ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087b0:	4604      	mov	r4, r0
 80087b2:	b086      	sub	sp, #24
 80087b4:	4615      	mov	r5, r2
 80087b6:	461f      	mov	r7, r3
  if(NULL == pData)
 80087b8:	b941      	cbnz	r1, 80087cc <HAL_SD_ReadBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80087ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 80087bc:	2601      	movs	r6, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80087be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80087c2:	6383      	str	r3, [r0, #56]	; 0x38
}
 80087c4:	4630      	mov	r0, r6
 80087c6:	b006      	add	sp, #24
 80087c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 80087cc:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	b2de      	uxtb	r6, r3
 80087d4:	d170      	bne.n	80088b8 <HAL_SD_ReadBlocks_DMA+0x10c>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80087d6:	2300      	movs	r3, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80087d8:	443a      	add	r2, r7
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80087da:	6383      	str	r3, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80087dc:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80087de:	4282      	cmp	r2, r0
 80087e0:	d904      	bls.n	80087ec <HAL_SD_ReadBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80087e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80087e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80087e8:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 80087ea:	e7eb      	b.n	80087c4 <HAL_SD_ReadBlocks_DMA+0x18>
    hsd->Instance->DCTRL = 0U;
 80087ec:	f8d4 c000 	ldr.w	ip, [r4]
    hsd->State = HAL_SD_STATE_BUSY;
 80087f0:	2203      	movs	r2, #3
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80087f2:	6c20      	ldr	r0, [r4, #64]	; 0x40
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80087f4:	ea4f 2847 	mov.w	r8, r7, lsl #9
    hsd->State = HAL_SD_STATE_BUSY;
 80087f8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 80087fc:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008800:	f8dc 203c 	ldr.w	r2, [ip, #60]	; 0x3c
 8008804:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008808:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800880c:	4a2c      	ldr	r2, [pc, #176]	; (80088c0 <HAL_SD_ReadBlocks_DMA+0x114>)
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800880e:	6083      	str	r3, [r0, #8]
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008810:	63c2      	str	r2, [r0, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008812:	4a2c      	ldr	r2, [pc, #176]	; (80088c4 <HAL_SD_ReadBlocks_DMA+0x118>)
    hsd->hdmarx->XferAbortCallback = NULL;
 8008814:	e9c0 2313 	strd	r2, r3, [r0, #76]	; 0x4c
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8008818:	6802      	ldr	r2, [r0, #0]
 800881a:	6813      	ldr	r3, [r2, #0]
 800881c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008820:	6013      	str	r3, [r2, #0]
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008822:	460a      	mov	r2, r1
 8008824:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8008828:	f10c 0180 	add.w	r1, ip, #128	; 0x80
 800882c:	f7fd f9ee 	bl	8005c0c <HAL_DMA_Start_IT>
 8008830:	6822      	ldr	r2, [r4, #0]
 8008832:	b160      	cbz	r0, 800884e <HAL_SD_ReadBlocks_DMA+0xa2>
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008834:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8008836:	f423 7395 	bic.w	r3, r3, #298	; 0x12a
 800883a:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800883c:	4b22      	ldr	r3, [pc, #136]	; (80088c8 <HAL_SD_ReadBlocks_DMA+0x11c>)
 800883e:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008840:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008842:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008846:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008848:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
      return HAL_ERROR;
 800884c:	e7ba      	b.n	80087c4 <HAL_SD_ReadBlocks_DMA+0x18>
      __HAL_SD_DMA_ENABLE(hsd);
 800884e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008850:	2190      	movs	r1, #144	; 0x90
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008852:	2000      	movs	r0, #0
      __HAL_SD_DMA_ENABLE(hsd);
 8008854:	f043 0308 	orr.w	r3, r3, #8
 8008858:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800885a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800885c:	2b01      	cmp	r3, #1
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800885e:	f04f 33ff 	mov.w	r3, #4294967295
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008862:	e9cd 3800 	strd	r3, r8, [sp]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008866:	f04f 0302 	mov.w	r3, #2
        add *= 512U;
 800886a:	bf18      	it	ne
 800886c:	026d      	lslne	r5, r5, #9
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800886e:	e9cd 1302 	strd	r1, r3, [sp, #8]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008872:	2301      	movs	r3, #1
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008874:	4669      	mov	r1, sp
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008876:	e9cd 0304 	strd	r0, r3, [sp, #16]
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800887a:	4610      	mov	r0, r2
 800887c:	f000 ff5e 	bl	800973c <SDMMC_ConfigData>
      if(NumberOfBlocks > 1U)
 8008880:	2f01      	cmp	r7, #1
 8008882:	d912      	bls.n	80088aa <HAL_SD_ReadBlocks_DMA+0xfe>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008884:	2382      	movs	r3, #130	; 0x82
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008886:	4629      	mov	r1, r5
 8008888:	6820      	ldr	r0, [r4, #0]
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800888a:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800888c:	f001 f850 	bl	8009930 <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 8008890:	b1a0      	cbz	r0, 80088bc <HAL_SD_ReadBlocks_DMA+0x110>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	4a0c      	ldr	r2, [pc, #48]	; (80088c8 <HAL_SD_ReadBlocks_DMA+0x11c>)
 8008896:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008898:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800889a:	4318      	orrs	r0, r3
        hsd->State = HAL_SD_STATE_READY;
 800889c:	2301      	movs	r3, #1
        hsd->ErrorCode |= errorstate;
 800889e:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80088a0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80088a4:	2300      	movs	r3, #0
 80088a6:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 80088a8:	e78c      	b.n	80087c4 <HAL_SD_ReadBlocks_DMA+0x18>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80088aa:	2381      	movs	r3, #129	; 0x81
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80088ac:	4629      	mov	r1, r5
 80088ae:	6820      	ldr	r0, [r4, #0]
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80088b0:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80088b2:	f001 f825 	bl	8009900 <SDMMC_CmdReadSingleBlock>
 80088b6:	e7eb      	b.n	8008890 <HAL_SD_ReadBlocks_DMA+0xe4>
    return HAL_BUSY;
 80088b8:	2602      	movs	r6, #2
 80088ba:	e783      	b.n	80087c4 <HAL_SD_ReadBlocks_DMA+0x18>
      return HAL_OK;
 80088bc:	4606      	mov	r6, r0
 80088be:	e781      	b.n	80087c4 <HAL_SD_ReadBlocks_DMA+0x18>
 80088c0:	080089e7 	.word	0x080089e7
 80088c4:	08008f35 	.word	0x08008f35
 80088c8:	004005ff 	.word	0x004005ff

080088cc <HAL_SD_WriteBlocks_DMA>:
{
 80088cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d0:	4604      	mov	r4, r0
 80088d2:	b086      	sub	sp, #24
 80088d4:	461e      	mov	r6, r3
  if(NULL == pData)
 80088d6:	4688      	mov	r8, r1
 80088d8:	b941      	cbnz	r1, 80088ec <HAL_SD_WriteBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80088da:	6b83      	ldr	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 80088dc:	2701      	movs	r7, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80088de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80088e2:	6383      	str	r3, [r0, #56]	; 0x38
}
 80088e4:	4638      	mov	r0, r7
 80088e6:	b006      	add	sp, #24
 80088e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 80088ec:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	b2df      	uxtb	r7, r3
 80088f4:	d16e      	bne.n	80089d4 <HAL_SD_WriteBlocks_DMA+0x108>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80088f6:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80088f8:	1993      	adds	r3, r2, r6
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80088fa:	6381      	str	r1, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80088fc:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80088fe:	4283      	cmp	r3, r0
 8008900:	d904      	bls.n	800890c <HAL_SD_WriteBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008902:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008904:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008908:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 800890a:	e7eb      	b.n	80088e4 <HAL_SD_WriteBlocks_DMA+0x18>
    hsd->Instance->DCTRL = 0U;
 800890c:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 800890e:	2303      	movs	r3, #3
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008910:	4d31      	ldr	r5, [pc, #196]	; (80089d8 <HAL_SD_WriteBlocks_DMA+0x10c>)
    hsd->State = HAL_SD_STATE_BUSY;
 8008912:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8008916:	62c1      	str	r1, [r0, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008918:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800891a:	f043 031a 	orr.w	r3, r3, #26
 800891e:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008920:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008922:	63dd      	str	r5, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008924:	4d2d      	ldr	r5, [pc, #180]	; (80089dc <HAL_SD_WriteBlocks_DMA+0x110>)
    hsd->hdmatx->XferAbortCallback = NULL;
 8008926:	e9c3 5113 	strd	r5, r1, [r3, #76]	; 0x4c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800892a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800892c:	2b01      	cmp	r3, #1
      add *= 512U;
 800892e:	bf18      	it	ne
 8008930:	0252      	lslne	r2, r2, #9
    if(NumberOfBlocks > 1U)
 8008932:	2e01      	cmp	r6, #1
 8008934:	d912      	bls.n	800895c <HAL_SD_WriteBlocks_DMA+0x90>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008936:	23a0      	movs	r3, #160	; 0xa0
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008938:	4611      	mov	r1, r2
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800893a:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800893c:	f001 f828 	bl	8009990 <SDMMC_CmdWriteMultiBlock>
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008940:	4605      	mov	r5, r0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008942:	6822      	ldr	r2, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008944:	b180      	cbz	r0, 8008968 <HAL_SD_WriteBlocks_DMA+0x9c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008946:	4b26      	ldr	r3, [pc, #152]	; (80089e0 <HAL_SD_WriteBlocks_DMA+0x114>)
 8008948:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800894a:	2301      	movs	r3, #1
      hsd->ErrorCode |= errorstate;
 800894c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800894e:	4305      	orrs	r5, r0
 8008950:	63a5      	str	r5, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008952:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008956:	2300      	movs	r3, #0
 8008958:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800895a:	e7c3      	b.n	80088e4 <HAL_SD_WriteBlocks_DMA+0x18>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800895c:	2390      	movs	r3, #144	; 0x90
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800895e:	4611      	mov	r1, r2
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008960:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008962:	f000 fffd 	bl	8009960 <SDMMC_CmdWriteSingleBlock>
 8008966:	e7eb      	b.n	8008940 <HAL_SD_WriteBlocks_DMA+0x74>
    __HAL_SD_DMA_ENABLE(hsd);
 8008968:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800896a:	0276      	lsls	r6, r6, #9
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800896c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800896e:	3280      	adds	r2, #128	; 0x80
    __HAL_SD_DMA_ENABLE(hsd);
 8008970:	f043 0308 	orr.w	r3, r3, #8
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008974:	6801      	ldr	r1, [r0, #0]
    __HAL_SD_DMA_ENABLE(hsd);
 8008976:	f842 3c54 	str.w	r3, [r2, #-84]
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800897a:	2340      	movs	r3, #64	; 0x40
 800897c:	6083      	str	r3, [r0, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800897e:	680b      	ldr	r3, [r1, #0]
 8008980:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008988:	600b      	str	r3, [r1, #0]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800898a:	08b3      	lsrs	r3, r6, #2
 800898c:	4641      	mov	r1, r8
 800898e:	f7fd f93d 	bl	8005c0c <HAL_DMA_Start_IT>
 8008992:	b178      	cbz	r0, 80089b4 <HAL_SD_WriteBlocks_DMA+0xe8>
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008998:	f022 021a 	bic.w	r2, r2, #26
 800899c:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800899e:	4a10      	ldr	r2, [pc, #64]	; (80089e0 <HAL_SD_WriteBlocks_DMA+0x114>)
 80089a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80089a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80089a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089a8:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089aa:	2301      	movs	r3, #1
 80089ac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80089b0:	6325      	str	r5, [r4, #48]	; 0x30
      return HAL_ERROR;
 80089b2:	e797      	b.n	80088e4 <HAL_SD_WriteBlocks_DMA+0x18>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80089b4:	f04f 33ff 	mov.w	r3, #4294967295
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80089b8:	4669      	mov	r1, sp
 80089ba:	6820      	ldr	r0, [r4, #0]
      return HAL_OK;
 80089bc:	462f      	mov	r7, r5
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80089be:	9504      	str	r5, [sp, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80089c0:	e9cd 3600 	strd	r3, r6, [sp]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80089c4:	2390      	movs	r3, #144	; 0x90
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80089c6:	e9cd 3502 	strd	r3, r5, [sp, #8]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80089ca:	2301      	movs	r3, #1
 80089cc:	9305      	str	r3, [sp, #20]
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80089ce:	f000 feb5 	bl	800973c <SDMMC_ConfigData>
      return HAL_OK;
 80089d2:	e787      	b.n	80088e4 <HAL_SD_WriteBlocks_DMA+0x18>
    return HAL_BUSY;
 80089d4:	2702      	movs	r7, #2
 80089d6:	e785      	b.n	80088e4 <HAL_SD_WriteBlocks_DMA+0x18>
 80089d8:	080086d1 	.word	0x080086d1
 80089dc:	08008f35 	.word	0x08008f35
 80089e0:	004005ff 	.word	0x004005ff

080089e4 <HAL_SD_ErrorCallback>:
 80089e4:	4770      	bx	lr

080089e6 <SD_DMAReceiveCplt>:
{
 80089e6:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80089e8:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80089ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80089ec:	2b82      	cmp	r3, #130	; 0x82
 80089ee:	d109      	bne.n	8008a04 <SD_DMAReceiveCplt+0x1e>
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80089f0:	6820      	ldr	r0, [r4, #0]
 80089f2:	f000 ffe5 	bl	80099c0 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 80089f6:	b128      	cbz	r0, 8008a04 <SD_DMAReceiveCplt+0x1e>
      hsd->ErrorCode |= errorstate;
 80089f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80089fa:	4318      	orrs	r0, r3
 80089fc:	63a0      	str	r0, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 80089fe:	4620      	mov	r0, r4
 8008a00:	f7ff fff0 	bl	80089e4 <HAL_SD_ErrorCallback>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008a04:	6823      	ldr	r3, [r4, #0]
  HAL_SD_RxCpltCallback(hsd);
 8008a06:	4620      	mov	r0, r4
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a0a:	f022 0208 	bic.w	r2, r2, #8
 8008a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008a10:	f240 523a 	movw	r2, #1338	; 0x53a
 8008a14:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8008a16:	2301      	movs	r3, #1
 8008a18:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	6323      	str	r3, [r4, #48]	; 0x30
  HAL_SD_RxCpltCallback(hsd);
 8008a20:	f7f7 fe4f 	bl	80006c2 <HAL_SD_RxCpltCallback>
}
 8008a24:	bd10      	pop	{r4, pc}
	...

08008a28 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008a28:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8008a2a:	0f9a      	lsrs	r2, r3, #30
 8008a2c:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008a2e:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8008a32:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008a34:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8008a38:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008a3a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008a3e:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008a40:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008a44:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008a46:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008a48:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008a4a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8008a4c:	0d1a      	lsrs	r2, r3, #20
 8008a4e:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008a50:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8008a54:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008a56:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8008a5a:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008a5c:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8008a60:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008a62:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8008a66:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008a68:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8008a6c:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008a6e:	2200      	movs	r2, #0
 8008a70:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8008a72:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8008a74:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 8008a76:	2a00      	cmp	r2, #0
 8008a78:	d16c      	bne.n	8008b54 <HAL_SD_GetCardCSD+0x12c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008a7a:	f640 74fc 	movw	r4, #4092	; 0xffc
 8008a7e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8008a80:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 8008a84:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8008a88:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008a8a:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8008a8e:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008a90:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8008a94:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008a96:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8008a9a:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008a9c:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008aa0:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008aa4:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008aa6:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008aa8:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008aaa:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008aac:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008aae:	f002 0207 	and.w	r2, r2, #7
 8008ab2:	3202      	adds	r2, #2
 8008ab4:	fa03 f202 	lsl.w	r2, r3, r2
 8008ab8:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008aba:	7a0b      	ldrb	r3, [r1, #8]
 8008abc:	f003 040f 	and.w	r4, r3, #15
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	40a3      	lsls	r3, r4
 8008ac4:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008ac6:	0a5b      	lsrs	r3, r3, #9
 8008ac8:	4353      	muls	r3, r2
 8008aca:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008acc:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008ad0:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008ad2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8008ad4:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8008ad8:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008ada:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008ae2:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008ae4:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008ae6:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->Reserved3 = 0;
 8008ae8:	2000      	movs	r0, #0
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008aea:	0fda      	lsrs	r2, r3, #31
 8008aec:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008aee:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8008af2:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008af4:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8008af8:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008afa:	f3c3 5283 	ubfx	r2, r3, #22, #4
 8008afe:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008b00:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8008b04:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008b08:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 8008b0c:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008b10:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008b14:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8008b18:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008b1c:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8008b20:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008b24:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8008b28:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008b2c:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8008b30:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008b34:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8008b38:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008b3c:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008b40:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008b44:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008b48:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8008b52:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008b54:	2a01      	cmp	r2, #1
 8008b56:	d10f      	bne.n	8008b78 <HAL_SD_GetCardCSD+0x150>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008b58:	041b      	lsls	r3, r3, #16
 8008b5a:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8008b5e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8008b62:	4313      	orrs	r3, r2
 8008b64:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008b66:	690b      	ldr	r3, [r1, #16]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	029b      	lsls	r3, r3, #10
 8008b6c:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008b6e:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008b70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b74:	6583      	str	r3, [r0, #88]	; 0x58
 8008b76:	e7ab      	b.n	8008ad0 <HAL_SD_GetCardCSD+0xa8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b78:	6803      	ldr	r3, [r0, #0]
 8008b7a:	4a05      	ldr	r2, [pc, #20]	; (8008b90 <HAL_SD_GetCardCSD+0x168>)
 8008b7c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b7e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b84:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008b86:	2301      	movs	r3, #1
 8008b88:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	e7e0      	b.n	8008b52 <HAL_SD_GetCardCSD+0x12a>
 8008b90:	004005ff 	.word	0x004005ff

08008b94 <HAL_SD_InitCard>:
{
 8008b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008b98:	2300      	movs	r3, #0
{
 8008b9a:	b098      	sub	sp, #96	; 0x60
 8008b9c:	4604      	mov	r4, r0
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008b9e:	930b      	str	r3, [sp, #44]	; 0x2c
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008ba0:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008ba4:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008ba8:	2376      	movs	r3, #118	; 0x76
 8008baa:	930c      	str	r3, [sp, #48]	; 0x30
  status = SDMMC_Init(hsd->Instance, Init);
 8008bac:	ab0a      	add	r3, sp, #40	; 0x28
 8008bae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008bb2:	ab07      	add	r3, sp, #28
 8008bb4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8008bb8:	6820      	ldr	r0, [r4, #0]
 8008bba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008bbc:	f000 fd7c 	bl	80096b8 <SDMMC_Init>
  if(status != HAL_OK)
 8008bc0:	4605      	mov	r5, r0
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	f040 80e3 	bne.w	8008d8e <HAL_SD_InitCard+0x1fa>
  __HAL_SD_DISABLE(hsd);
 8008bc8:	6820      	ldr	r0, [r4, #0]
 8008bca:	6843      	ldr	r3, [r0, #4]
 8008bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bd0:	6043      	str	r3, [r0, #4]
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008bd2:	f000 fd95 	bl	8009700 <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8008bd6:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(2);
 8008bd8:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 8008bda:	6853      	ldr	r3, [r2, #4]
 8008bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008be0:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 8008be2:	f7fc fe5d 	bl	80058a0 <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008be6:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8008be8:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008bea:	f000 fdbb 	bl	8009764 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bee:	4605      	mov	r5, r0
 8008bf0:	b940      	cbnz	r0, 8008c04 <HAL_SD_InitCard+0x70>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008bf2:	6820      	ldr	r0, [r4, #0]
 8008bf4:	f001 f886 	bl	8009d04 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bf8:	b170      	cbz	r0, 8008c18 <HAL_SD_InitCard+0x84>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008bfa:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008bfc:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008bfe:	f000 fdb1 	bl	8009764 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c02:	b198      	cbz	r0, 8008c2c <HAL_SD_InitCard+0x98>
    hsd->State = HAL_SD_STATE_READY;
 8008c04:	2501      	movs	r5, #1
 8008c06:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008c0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008c0c:	4303      	orrs	r3, r0
 8008c0e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8008c10:	4628      	mov	r0, r5
 8008c12:	b018      	add	sp, #96	; 0x60
 8008c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	6820      	ldr	r0, [r4, #0]
 8008c20:	f000 ff00 	bl	8009a24 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c24:	b128      	cbz	r0, 8008c32 <HAL_SD_InitCard+0x9e>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c26:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8008c2a:	e7eb      	b.n	8008c04 <HAL_SD_InitCard+0x70>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008c2c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d0f4      	beq.n	8008c1c <HAL_SD_InitCard+0x88>
{
 8008c32:	2600      	movs	r6, #0
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008c34:	f64f 77fe 	movw	r7, #65534	; 0xfffe
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008c38:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8008d98 <HAL_SD_InitCard+0x204>
 8008c3c:	e014      	b.n	8008c68 <HAL_SD_InitCard+0xd4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008c3e:	4631      	mov	r1, r6
 8008c40:	6820      	ldr	r0, [r4, #0]
 8008c42:	f000 feef 	bl	8009a24 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c46:	2800      	cmp	r0, #0
 8008c48:	d1dc      	bne.n	8008c04 <HAL_SD_InitCard+0x70>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008c4a:	4641      	mov	r1, r8
 8008c4c:	6820      	ldr	r0, [r4, #0]
 8008c4e:	f000 ffbb 	bl	8009bc8 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c52:	2800      	cmp	r0, #0
 8008c54:	d1e7      	bne.n	8008c26 <HAL_SD_InitCard+0x92>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008c56:	4631      	mov	r1, r6
 8008c58:	6820      	ldr	r0, [r4, #0]
 8008c5a:	f000 fd6c 	bl	8009736 <SDMMC_GetResponse>
    count++;
 8008c5e:	9b06      	ldr	r3, [sp, #24]
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008c60:	4605      	mov	r5, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008c62:	0fc6      	lsrs	r6, r0, #31
    count++;
 8008c64:	3301      	adds	r3, #1
 8008c66:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008c68:	9b06      	ldr	r3, [sp, #24]
 8008c6a:	42bb      	cmp	r3, r7
 8008c6c:	d801      	bhi.n	8008c72 <HAL_SD_InitCard+0xde>
 8008c6e:	2e00      	cmp	r6, #0
 8008c70:	d0e5      	beq.n	8008c3e <HAL_SD_InitCard+0xaa>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008c72:	9b06      	ldr	r3, [sp, #24]
 8008c74:	42bb      	cmp	r3, r7
 8008c76:	d80c      	bhi.n	8008c92 <HAL_SD_InitCard+0xfe>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008c78:	f3c5 7580 	ubfx	r5, r5, #30, #1
  uint16_t sd_rca = 1U;
 8008c7c:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008c7e:	6820      	ldr	r0, [r4, #0]
 8008c80:	6465      	str	r5, [r4, #68]	; 0x44
  uint16_t sd_rca = 1U;
 8008c82:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008c86:	f000 fd3f 	bl	8009708 <SDMMC_GetPowerState>
 8008c8a:	b928      	cbnz	r0, 8008c98 <HAL_SD_InitCard+0x104>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c8c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8008c90:	e7b8      	b.n	8008c04 <HAL_SD_InitCard+0x70>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008c92:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 8008c96:	e7b5      	b.n	8008c04 <HAL_SD_InitCard+0x70>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008c98:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008c9a:	2b03      	cmp	r3, #3
 8008c9c:	d043      	beq.n	8008d26 <HAL_SD_InitCard+0x192>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008c9e:	6820      	ldr	r0, [r4, #0]
 8008ca0:	f000 ff46 	bl	8009b30 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	d1ad      	bne.n	8008c04 <HAL_SD_InitCard+0x70>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008ca8:	4601      	mov	r1, r0
 8008caa:	6820      	ldr	r0, [r4, #0]
 8008cac:	f000 fd43 	bl	8009736 <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008cb0:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008cb2:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008cb4:	6820      	ldr	r0, [r4, #0]
 8008cb6:	f000 fd3e 	bl	8009736 <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008cba:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008cbc:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008cbe:	6820      	ldr	r0, [r4, #0]
 8008cc0:	f000 fd39 	bl	8009736 <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008cc4:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008cc6:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008cc8:	6820      	ldr	r0, [r4, #0]
 8008cca:	f000 fd34 	bl	8009736 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008cce:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008cd0:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008cd4:	2b03      	cmp	r3, #3
 8008cd6:	d026      	beq.n	8008d26 <HAL_SD_InitCard+0x192>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008cd8:	f10d 0116 	add.w	r1, sp, #22
 8008cdc:	6820      	ldr	r0, [r4, #0]
 8008cde:	f000 ffcf 	bl	8009c80 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	d18e      	bne.n	8008c04 <HAL_SD_InitCard+0x70>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008ce6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008ce8:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008cea:	2b03      	cmp	r3, #3
 8008cec:	d01b      	beq.n	8008d26 <HAL_SD_InitCard+0x192>
    hsd->SdCard.RelCardAdd = sd_rca;
 8008cee:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8008cf2:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008cf4:	0409      	lsls	r1, r1, #16
 8008cf6:	f000 ff30 	bl	8009b5a <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	d182      	bne.n	8008c04 <HAL_SD_InitCard+0x70>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008cfe:	4601      	mov	r1, r0
 8008d00:	6820      	ldr	r0, [r4, #0]
 8008d02:	f000 fd18 	bl	8009736 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008d06:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d08:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008d0a:	6820      	ldr	r0, [r4, #0]
 8008d0c:	f000 fd13 	bl	8009736 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008d10:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008d12:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008d14:	6820      	ldr	r0, [r4, #0]
 8008d16:	f000 fd0e 	bl	8009736 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008d1a:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008d1c:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008d1e:	6820      	ldr	r0, [r4, #0]
 8008d20:	f000 fd09 	bl	8009736 <SDMMC_GetResponse>
 8008d24:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008d26:	2104      	movs	r1, #4
 8008d28:	6820      	ldr	r0, [r4, #0]
 8008d2a:	f000 fd04 	bl	8009736 <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008d2e:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008d30:	0d00      	lsrs	r0, r0, #20
 8008d32:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008d34:	4620      	mov	r0, r4
 8008d36:	f7ff fe77 	bl	8008a28 <HAL_SD_GetCardCSD>
 8008d3a:	4605      	mov	r5, r0
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	f47f af72 	bne.w	8008c26 <HAL_SD_InitCard+0x92>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008d42:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8008d44:	4603      	mov	r3, r0
 8008d46:	6820      	ldr	r0, [r4, #0]
 8008d48:	0412      	lsls	r2, r2, #16
 8008d4a:	f000 fe53 	bl	80099f4 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	f47f af58 	bne.w	8008c04 <HAL_SD_InitCard+0x70>
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008d54:	f104 0310 	add.w	r3, r4, #16
 8008d58:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008d5c:	1d23      	adds	r3, r4, #4
 8008d5e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8008d62:	6820      	ldr	r0, [r4, #0]
 8008d64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d66:	f000 fca7 	bl	80096b8 <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008d6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d6e:	6820      	ldr	r0, [r4, #0]
 8008d70:	f000 fdae 	bl	80098d0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d74:	2800      	cmp	r0, #0
 8008d76:	f43f af4b 	beq.w	8008c10 <HAL_SD_InitCard+0x7c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d7a:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8008d7c:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d7e:	4a05      	ldr	r2, [pc, #20]	; (8008d94 <HAL_SD_InitCard+0x200>)
 8008d80:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008d82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008d84:	4318      	orrs	r0, r3
 8008d86:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008d88:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 8008d8c:	e740      	b.n	8008c10 <HAL_SD_InitCard+0x7c>
    return HAL_ERROR;
 8008d8e:	2501      	movs	r5, #1
 8008d90:	e73e      	b.n	8008c10 <HAL_SD_InitCard+0x7c>
 8008d92:	bf00      	nop
 8008d94:	004005ff 	.word	0x004005ff
 8008d98:	c1100000 	.word	0xc1100000

08008d9c <HAL_SD_Init>:
{
 8008d9c:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8008d9e:	4604      	mov	r4, r0
 8008da0:	b908      	cbnz	r0, 8008da6 <HAL_SD_Init+0xa>
    return HAL_ERROR;
 8008da2:	2001      	movs	r0, #1
}
 8008da4:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 8008da6:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8008daa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008dae:	b913      	cbnz	r3, 8008db6 <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 8008db0:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8008db2:	f7f9 fefb 	bl	8002bac <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8008db6:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008db8:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8008dba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008dbe:	f7ff fee9 	bl	8008b94 <HAL_SD_InitCard>
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	d1ed      	bne.n	8008da2 <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 8008dc6:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008dc8:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8008dca:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8008dcc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8008dd0:	e7e8      	b.n	8008da4 <HAL_SD_Init+0x8>

08008dd2 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008dd2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008dd4:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008dd6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8008dd8:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008dda:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008ddc:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008dde:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008de0:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008de2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8008de4:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008de6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8008de8:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008dea:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8008dec:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008dee:	6e03      	ldr	r3, [r0, #96]	; 0x60
}
 8008df0:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008df2:	61cb      	str	r3, [r1, #28]
}
 8008df4:	4770      	bx	lr
	...

08008df8 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 8008df8:	2303      	movs	r3, #3
{
 8008dfa:	b5f0      	push	{r4, r5, r6, r7, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8008dfc:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 8008e00:	b08b      	sub	sp, #44	; 0x2c
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008e02:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8008e04:	4604      	mov	r4, r0
 8008e06:	460d      	mov	r5, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008e08:	2b03      	cmp	r3, #3
 8008e0a:	d002      	beq.n	8008e12 <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008e0c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8008e10:	d103      	bne.n	8008e1a <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e18:	e05d      	b.n	8008ed6 <HAL_SD_ConfigWideBusOperation+0xde>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008e1a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008e1e:	6800      	ldr	r0, [r0, #0]
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008e20:	d137      	bne.n	8008e92 <HAL_SD_ConfigWideBusOperation+0x9a>
  uint32_t scr[2U] = {0U, 0U};
 8008e22:	2100      	movs	r1, #0
 8008e24:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008e28:	f000 fc85 	bl	8009736 <SDMMC_GetResponse>
 8008e2c:	0180      	lsls	r0, r0, #6
 8008e2e:	d449      	bmi.n	8008ec4 <HAL_SD_ConfigWideBusOperation+0xcc>
  errorstate = SD_FindSCR(hsd, scr);
 8008e30:	a904      	add	r1, sp, #16
 8008e32:	4620      	mov	r0, r4
 8008e34:	f7ff fc53 	bl	80086de <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e38:	b960      	cbnz	r0, 8008e54 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008e3a:	9b05      	ldr	r3, [sp, #20]
 8008e3c:	0359      	lsls	r1, r3, #13
 8008e3e:	d544      	bpl.n	8008eca <HAL_SD_ConfigWideBusOperation+0xd2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e40:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008e42:	6820      	ldr	r0, [r4, #0]
 8008e44:	0409      	lsls	r1, r1, #16
 8008e46:	f000 fded 	bl	8009a24 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e4a:	b918      	cbnz	r0, 8008e54 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008e4c:	2102      	movs	r1, #2
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008e4e:	6820      	ldr	r0, [r4, #0]
 8008e50:	f000 fe00 	bl	8009a54 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8008e54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008e56:	4318      	orrs	r0, r3
 8008e58:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008e5a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e5c:	6827      	ldr	r7, [r4, #0]
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008e5e:	2e00      	cmp	r6, #0
 8008e60:	d03b      	beq.n	8008eda <HAL_SD_ConfigWideBusOperation+0xe2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e62:	4b29      	ldr	r3, [pc, #164]	; (8008f08 <HAL_SD_ConfigWideBusOperation+0x110>)
    hsd->State = HAL_SD_STATE_READY;
 8008e64:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e66:	63bb      	str	r3, [r7, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008e68:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008e6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e70:	6820      	ldr	r0, [r4, #0]
 8008e72:	f000 fd2d 	bl	80098d0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e76:	b130      	cbz	r0, 8008e86 <HAL_SD_ConfigWideBusOperation+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e78:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 8008e7a:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e7c:	4a22      	ldr	r2, [pc, #136]	; (8008f08 <HAL_SD_ConfigWideBusOperation+0x110>)
 8008e7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008e80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008e82:	4318      	orrs	r0, r3
 8008e84:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8008e86:	2301      	movs	r3, #1
}
 8008e88:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8008e8a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8008e8e:	b00b      	add	sp, #44	; 0x2c
 8008e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008e92:	b9e9      	cbnz	r1, 8008ed0 <HAL_SD_ConfigWideBusOperation+0xd8>
  uint32_t scr[2U] = {0U, 0U};
 8008e94:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008e98:	f000 fc4d 	bl	8009736 <SDMMC_GetResponse>
 8008e9c:	0182      	lsls	r2, r0, #6
 8008e9e:	d411      	bmi.n	8008ec4 <HAL_SD_ConfigWideBusOperation+0xcc>
  errorstate = SD_FindSCR(hsd, scr);
 8008ea0:	a904      	add	r1, sp, #16
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	f7ff fc1b 	bl	80086de <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	d1d3      	bne.n	8008e54 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008eac:	9b05      	ldr	r3, [sp, #20]
 8008eae:	03db      	lsls	r3, r3, #15
 8008eb0:	d50b      	bpl.n	8008eca <HAL_SD_ConfigWideBusOperation+0xd2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008eb2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008eb4:	6820      	ldr	r0, [r4, #0]
 8008eb6:	0409      	lsls	r1, r1, #16
 8008eb8:	f000 fdb4 	bl	8009a24 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	d1c9      	bne.n	8008e54 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008ec0:	4601      	mov	r1, r0
 8008ec2:	e7c4      	b.n	8008e4e <HAL_SD_ConfigWideBusOperation+0x56>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008ec4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008ec8:	e7c4      	b.n	8008e54 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008eca:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8008ece:	e7c1      	b.n	8008e54 <HAL_SD_ConfigWideBusOperation+0x5c>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008ed0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008ed2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ed6:	63a3      	str	r3, [r4, #56]	; 0x38
 8008ed8:	e7bf      	b.n	8008e5a <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008eda:	6863      	ldr	r3, [r4, #4]
 8008edc:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008ede:	68a3      	ldr	r3, [r4, #8]
 8008ee0:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008ee2:	68e3      	ldr	r3, [r4, #12]
    Init.BusWide             = WideMode;
 8008ee4:	e9cd 3506 	strd	r3, r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008ee8:	6963      	ldr	r3, [r4, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8008eea:	4635      	mov	r5, r6
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008eec:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008eee:	69a3      	ldr	r3, [r4, #24]
 8008ef0:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDMMC_Init(hsd->Instance, Init);
 8008ef2:	ab0a      	add	r3, sp, #40	; 0x28
 8008ef4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8008ef8:	ab04      	add	r3, sp, #16
 8008efa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8008efe:	4638      	mov	r0, r7
 8008f00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f02:	f000 fbd9 	bl	80096b8 <SDMMC_Init>
 8008f06:	e7b1      	b.n	8008e6c <HAL_SD_ConfigWideBusOperation+0x74>
 8008f08:	004005ff 	.word	0x004005ff

08008f0c <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f0c:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8008f0e:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f10:	0409      	lsls	r1, r1, #16
{
 8008f12:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f14:	6800      	ldr	r0, [r0, #0]
 8008f16:	f000 fdcd 	bl	8009ab4 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f1a:	4601      	mov	r1, r0
 8008f1c:	b928      	cbnz	r0, 8008f2a <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008f1e:	6820      	ldr	r0, [r4, #0]
 8008f20:	f000 fc09 	bl	8009736 <SDMMC_GetResponse>
}
 8008f24:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8008f28:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8008f2a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008f2c:	4308      	orrs	r0, r1
 8008f2e:	63a0      	str	r0, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8008f30:	2000      	movs	r0, #0
 8008f32:	e7f7      	b.n	8008f24 <HAL_SD_GetCardState+0x18>

08008f34 <SD_DMAError>:
{
 8008f34:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008f36:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008f38:	f7fc ff76 	bl	8005e28 <HAL_DMA_GetError>
 8008f3c:	2802      	cmp	r0, #2
 8008f3e:	d026      	beq.n	8008f8e <SD_DMAError+0x5a>
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008f40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f42:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008f44:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008f46:	2a01      	cmp	r2, #1
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008f4a:	d001      	beq.n	8008f50 <SD_DMAError+0x1c>
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d11b      	bne.n	8008f88 <SD_DMAError+0x54>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f50:	6823      	ldr	r3, [r4, #0]
      CardState = HAL_SD_GetCardState(hsd);
 8008f52:	4620      	mov	r0, r4
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f54:	4a0e      	ldr	r2, [pc, #56]	; (8008f90 <SD_DMAError+0x5c>)
 8008f56:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008f58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f5a:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008f5e:	63da      	str	r2, [r3, #60]	; 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008f60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f66:	63a3      	str	r3, [r4, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008f68:	f7ff ffd0 	bl	8008f0c <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008f6c:	3805      	subs	r0, #5
 8008f6e:	2801      	cmp	r0, #1
 8008f70:	d805      	bhi.n	8008f7e <SD_DMAError+0x4a>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008f72:	6820      	ldr	r0, [r4, #0]
 8008f74:	f000 fd24 	bl	80099c0 <SDMMC_CmdStopTransfer>
 8008f78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f7a:	4318      	orrs	r0, r3
 8008f7c:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f84:	2300      	movs	r3, #0
 8008f86:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_SD_ErrorCallback(hsd);
 8008f88:	4620      	mov	r0, r4
 8008f8a:	f7ff fd2b 	bl	80089e4 <HAL_SD_ErrorCallback>
}
 8008f8e:	bd10      	pop	{r4, pc}
 8008f90:	004005ff 	.word	0x004005ff

08008f94 <SD_DMATxAbort>:
{
 8008f94:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008f96:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f98:	f240 523a 	movw	r2, #1338	; 0x53a
 8008f9c:	6823      	ldr	r3, [r4, #0]
  CardState = HAL_SD_GetCardState(hsd);
 8008f9e:	4620      	mov	r0, r4
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008fa0:	639a      	str	r2, [r3, #56]	; 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8008fa2:	f7ff ffb3 	bl	8008f0c <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 8008fa6:	2301      	movs	r3, #1
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008fa8:	3805      	subs	r0, #5
  hsd->State = HAL_SD_STATE_READY;
 8008faa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008fae:	2300      	movs	r3, #0
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008fb0:	2801      	cmp	r0, #1
  hsd->Context = SD_CONTEXT_NONE;
 8008fb2:	6323      	str	r3, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008fb4:	d805      	bhi.n	8008fc2 <SD_DMATxAbort+0x2e>
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008fb6:	6820      	ldr	r0, [r4, #0]
 8008fb8:	f000 fd02 	bl	80099c0 <SDMMC_CmdStopTransfer>
 8008fbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008fbe:	4318      	orrs	r0, r3
 8008fc0:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008fc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    HAL_SD_AbortCallback(hsd);
 8008fc4:	4620      	mov	r0, r4
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008fc6:	b913      	cbnz	r3, 8008fce <SD_DMATxAbort+0x3a>
    HAL_SD_AbortCallback(hsd);
 8008fc8:	f7f7 fb73 	bl	80006b2 <HAL_SD_AbortCallback>
}
 8008fcc:	bd10      	pop	{r4, pc}
    HAL_SD_ErrorCallback(hsd);
 8008fce:	f7ff fd09 	bl	80089e4 <HAL_SD_ErrorCallback>
}
 8008fd2:	e7fb      	b.n	8008fcc <SD_DMATxAbort+0x38>

08008fd4 <HAL_SD_IRQHandler>:
{
 8008fd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t context = hsd->Context;
 8008fd8:	6b05      	ldr	r5, [r0, #48]	; 0x30
{
 8008fda:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008fdc:	6800      	ldr	r0, [r0, #0]
 8008fde:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008fe0:	041f      	lsls	r7, r3, #16
 8008fe2:	d51f      	bpl.n	8009024 <HAL_SD_IRQHandler+0x50>
 8008fe4:	072e      	lsls	r6, r5, #28
 8008fe6:	d51d      	bpl.n	8009024 <HAL_SD_IRQHandler+0x50>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
  dataremaining = hsd->RxXferSize;
 8008fe8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c

  if (dataremaining > 0U)
 8008fea:	b1c7      	cbz	r7, 800901e <HAL_SD_IRQHandler+0x4a>
  tmp = hsd->pRxBuffPtr;
 8008fec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fee:	1d35      	adds	r5, r6, #4
 8008ff0:	f106 0824 	add.w	r8, r6, #36	; 0x24
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008ff4:	6820      	ldr	r0, [r4, #0]
    for(count = 0U; count < 8U; count++)
 8008ff6:	3504      	adds	r5, #4
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008ff8:	f000 fb7a 	bl	80096f0 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 8008ffc:	f805 0c08 	strb.w	r0, [r5, #-8]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009000:	0a03      	lsrs	r3, r0, #8
 8009002:	f805 3c07 	strb.w	r3, [r5, #-7]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009006:	0c03      	lsrs	r3, r0, #16
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009008:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800900a:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800900e:	f805 0c05 	strb.w	r0, [r5, #-5]
    for(count = 0U; count < 8U; count++)
 8009012:	4545      	cmp	r5, r8
 8009014:	d1ee      	bne.n	8008ff4 <HAL_SD_IRQHandler+0x20>
      tmp++;
 8009016:	3620      	adds	r6, #32
      dataremaining--;
 8009018:	3f20      	subs	r7, #32
    }

    hsd->pRxBuffPtr = tmp;
 800901a:	62a6      	str	r6, [r4, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800901c:	62e7      	str	r7, [r4, #44]	; 0x2c
}
 800901e:	b002      	add	sp, #8
 8009020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009024:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009026:	05d9      	lsls	r1, r3, #23
 8009028:	d544      	bpl.n	80090b4 <HAL_SD_IRQHandler+0xe0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800902a:	f44f 7380 	mov.w	r3, #256	; 0x100
    if((context & SD_CONTEXT_IT) != 0U)
 800902e:	072a      	lsls	r2, r5, #28
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009030:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009032:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8009034:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8009038:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800903c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800903e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009040:	f023 0301 	bic.w	r3, r3, #1
 8009044:	62c3      	str	r3, [r0, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8009046:	d51a      	bpl.n	800907e <HAL_SD_IRQHandler+0xaa>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009048:	f015 0f22 	tst.w	r5, #34	; 0x22
 800904c:	d008      	beq.n	8009060 <HAL_SD_IRQHandler+0x8c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800904e:	f000 fcb7 	bl	80099c0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8009052:	b128      	cbz	r0, 8009060 <HAL_SD_IRQHandler+0x8c>
          hsd->ErrorCode |= errorstate;
 8009054:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009056:	4318      	orrs	r0, r3
 8009058:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800905a:	4620      	mov	r0, r4
 800905c:	f7ff fcc2 	bl	80089e4 <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	f240 523a 	movw	r2, #1338	; 0x53a
        HAL_SD_RxCpltCallback(hsd);
 8009066:	4620      	mov	r0, r4
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009068:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800906a:	2301      	movs	r3, #1
 800906c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009070:	2300      	movs	r3, #0
 8009072:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009074:	07ab      	lsls	r3, r5, #30
 8009076:	d01a      	beq.n	80090ae <HAL_SD_IRQHandler+0xda>
        HAL_SD_RxCpltCallback(hsd);
 8009078:	f7f7 fb23 	bl	80006c2 <HAL_SD_RxCpltCallback>
 800907c:	e7cf      	b.n	800901e <HAL_SD_IRQHandler+0x4a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800907e:	062f      	lsls	r7, r5, #24
 8009080:	d5cd      	bpl.n	800901e <HAL_SD_IRQHandler+0x4a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009082:	06ae      	lsls	r6, r5, #26
 8009084:	d508      	bpl.n	8009098 <HAL_SD_IRQHandler+0xc4>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009086:	f000 fc9b 	bl	80099c0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800908a:	b128      	cbz	r0, 8009098 <HAL_SD_IRQHandler+0xc4>
          hsd->ErrorCode |= errorstate;
 800908c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800908e:	4318      	orrs	r0, r3
 8009090:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8009092:	4620      	mov	r0, r4
 8009094:	f7ff fca6 	bl	80089e4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009098:	07a8      	lsls	r0, r5, #30
 800909a:	d1c0      	bne.n	800901e <HAL_SD_IRQHandler+0x4a>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800909c:	6822      	ldr	r2, [r4, #0]
        HAL_SD_TxCpltCallback(hsd);
 800909e:	4620      	mov	r0, r4
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80090a0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80090a2:	f023 0308 	bic.w	r3, r3, #8
 80090a6:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80090a8:	2301      	movs	r3, #1
 80090aa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80090ae:	f7f7 fb04 	bl	80006ba <HAL_SD_TxCpltCallback>
 80090b2:	e7b4      	b.n	800901e <HAL_SD_IRQHandler+0x4a>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80090b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80090b6:	0459      	lsls	r1, r3, #17
 80090b8:	d526      	bpl.n	8009108 <HAL_SD_IRQHandler+0x134>
 80090ba:	072a      	lsls	r2, r5, #28
 80090bc:	d524      	bpl.n	8009108 <HAL_SD_IRQHandler+0x134>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 80090be:	6a67      	ldr	r7, [r4, #36]	; 0x24

  if (dataremaining > 0U)
 80090c0:	2f00      	cmp	r7, #0
 80090c2:	d0ac      	beq.n	800901e <HAL_SD_IRQHandler+0x4a>
  tmp = hsd->pTxBuffPtr;
 80090c4:	6a26      	ldr	r6, [r4, #32]
 80090c6:	1d35      	adds	r5, r6, #4
 80090c8:	f106 0824 	add.w	r8, r6, #36	; 0x24
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = (uint32_t)(*tmp);
 80090cc:	f815 3c04 	ldrb.w	r3, [r5, #-4]
    for(count = 0U; count < 8U; count++)
 80090d0:	3504      	adds	r5, #4
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
      tmp++;
      dataremaining--;
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80090d2:	a901      	add	r1, sp, #4
 80090d4:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 80090d6:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 80090d8:	f815 2c07 	ldrb.w	r2, [r5, #-7]
 80090dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80090e0:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 80090e2:	f815 2c06 	ldrb.w	r2, [r5, #-6]
 80090e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090ea:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 80090ec:	f815 2c05 	ldrb.w	r2, [r5, #-5]
 80090f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80090f4:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80090f6:	f000 fafe 	bl	80096f6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80090fa:	4545      	cmp	r5, r8
 80090fc:	d1e6      	bne.n	80090cc <HAL_SD_IRQHandler+0xf8>
      tmp++;
 80090fe:	3620      	adds	r6, #32
      dataremaining--;
 8009100:	3f20      	subs	r7, #32
    }

    hsd->pTxBuffPtr = tmp;
 8009102:	6226      	str	r6, [r4, #32]
    hsd->TxXferSize = dataremaining;
 8009104:	6267      	str	r7, [r4, #36]	; 0x24
  }
}
 8009106:	e78a      	b.n	800901e <HAL_SD_IRQHandler+0x4a>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8009108:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800910a:	f013 0f3a 	tst.w	r3, #58	; 0x3a
 800910e:	d086      	beq.n	800901e <HAL_SD_IRQHandler+0x4a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8009110:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009112:	079b      	lsls	r3, r3, #30
 8009114:	d503      	bpl.n	800911e <HAL_SD_IRQHandler+0x14a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009116:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009118:	f043 0302 	orr.w	r3, r3, #2
 800911c:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800911e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009120:	071f      	lsls	r7, r3, #28
 8009122:	d503      	bpl.n	800912c <HAL_SD_IRQHandler+0x158>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009124:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009126:	f043 0308 	orr.w	r3, r3, #8
 800912a:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800912c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800912e:	069e      	lsls	r6, r3, #26
 8009130:	d503      	bpl.n	800913a <HAL_SD_IRQHandler+0x166>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009132:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009134:	f043 0320 	orr.w	r3, r3, #32
 8009138:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800913a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800913c:	06d9      	lsls	r1, r3, #27
 800913e:	d503      	bpl.n	8009148 <HAL_SD_IRQHandler+0x174>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009140:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009142:	f043 0310 	orr.w	r3, r3, #16
 8009146:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009148:	f240 533a 	movw	r3, #1338	; 0x53a
 800914c:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800914e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8009150:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8009154:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009156:	f000 fc33 	bl	80099c0 <SDMMC_CmdStopTransfer>
 800915a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800915c:	072a      	lsls	r2, r5, #28
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800915e:	ea40 0003 	orr.w	r0, r0, r3
 8009162:	63a0      	str	r0, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009164:	d508      	bpl.n	8009178 <HAL_SD_IRQHandler+0x1a4>
      hsd->State = HAL_SD_STATE_READY;
 8009166:	2301      	movs	r3, #1
      HAL_SD_ErrorCallback(hsd);
 8009168:	4620      	mov	r0, r4
      hsd->State = HAL_SD_STATE_READY;
 800916a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800916e:	2300      	movs	r3, #0
 8009170:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8009172:	f7ff fc37 	bl	80089e4 <HAL_SD_ErrorCallback>
 8009176:	e752      	b.n	800901e <HAL_SD_IRQHandler+0x4a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009178:	062b      	lsls	r3, r5, #24
 800917a:	f57f af50 	bpl.w	800901e <HAL_SD_IRQHandler+0x4a>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800917e:	f015 0f30 	tst.w	r5, #48	; 0x30
 8009182:	d00d      	beq.n	80091a0 <HAL_SD_IRQHandler+0x1cc>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8009184:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009186:	4b11      	ldr	r3, [pc, #68]	; (80091cc <HAL_SD_IRQHandler+0x1f8>)
 8009188:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800918a:	f7fc fd7c 	bl	8005c86 <HAL_DMA_Abort_IT>
 800918e:	2800      	cmp	r0, #0
 8009190:	f43f af45 	beq.w	800901e <HAL_SD_IRQHandler+0x4a>
          SD_DMATxAbort(hsd->hdmatx);
 8009194:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8009196:	b002      	add	sp, #8
 8009198:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          SD_DMARxAbort(hsd->hdmarx);
 800919c:	f7ff befa 	b.w	8008f94 <SD_DMATxAbort>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80091a0:	f015 0503 	ands.w	r5, r5, #3
 80091a4:	d009      	beq.n	80091ba <HAL_SD_IRQHandler+0x1e6>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80091a6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80091a8:	4b09      	ldr	r3, [pc, #36]	; (80091d0 <HAL_SD_IRQHandler+0x1fc>)
 80091aa:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80091ac:	f7fc fd6b 	bl	8005c86 <HAL_DMA_Abort_IT>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	f43f af34 	beq.w	800901e <HAL_SD_IRQHandler+0x4a>
          SD_DMARxAbort(hsd->hdmarx);
 80091b6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80091b8:	e7ed      	b.n	8009196 <HAL_SD_IRQHandler+0x1c2>
        hsd->State = HAL_SD_STATE_READY;
 80091ba:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80091bc:	63a5      	str	r5, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 80091be:	4620      	mov	r0, r4
        hsd->State = HAL_SD_STATE_READY;
 80091c0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80091c4:	6325      	str	r5, [r4, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80091c6:	f7f7 fa74 	bl	80006b2 <HAL_SD_AbortCallback>
}
 80091ca:	e728      	b.n	800901e <HAL_SD_IRQHandler+0x4a>
 80091cc:	08008f95 	.word	0x08008f95
 80091d0:	080091d5 	.word	0x080091d5

080091d4 <SD_DMARxAbort>:
 80091d4:	f7ff bede 	b.w	8008f94 <SD_DMATxAbort>

080091d8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80091d8:	b538      	push	{r3, r4, r5, lr}
 80091da:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80091dc:	4604      	mov	r4, r0
 80091de:	b1c8      	cbz	r0, 8009214 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80091e0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80091e4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80091e8:	b91b      	cbnz	r3, 80091f2 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80091ea:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80091ee:	f7f9 fdb1 	bl	8002d54 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80091f2:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80091f4:	1d21      	adds	r1, r4, #4
 80091f6:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80091f8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80091fc:	f000 f9cf 	bl	800959e <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009200:	6862      	ldr	r2, [r4, #4]
 8009202:	4629      	mov	r1, r5
 8009204:	6820      	ldr	r0, [r4, #0]
 8009206:	f000 fa05 	bl	8009614 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800920a:	2301      	movs	r3, #1

  return HAL_OK;
 800920c:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800920e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8009212:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009214:	2001      	movs	r0, #1
 8009216:	e7fc      	b.n	8009212 <HAL_SDRAM_Init+0x3a>

08009218 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009218:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800921a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800921e:	4605      	mov	r5, r0
 8009220:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009222:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009224:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8009226:	d010      	beq.n	800924a <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009228:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 800922c:	2c01      	cmp	r4, #1
 800922e:	d110      	bne.n	8009252 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009230:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009232:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009234:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009238:	f000 fa22 	bl	8009680 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800923c:	6833      	ldr	r3, [r6, #0]
 800923e:	2b02      	cmp	r3, #2
 8009240:	d104      	bne.n	800924c <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009242:	2305      	movs	r3, #5
 8009244:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009248:	2000      	movs	r0, #0
}
 800924a:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800924c:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 8009250:	e7fa      	b.n	8009248 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8009252:	2001      	movs	r0, #1
 8009254:	e7f9      	b.n	800924a <HAL_SDRAM_SendCommand+0x32>

08009256 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009256:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009258:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800925c:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800925e:	2b02      	cmp	r3, #2
 8009260:	b2d8      	uxtb	r0, r3
 8009262:	d00d      	beq.n	8009280 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009264:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8009268:	2b01      	cmp	r3, #1
 800926a:	b2dd      	uxtb	r5, r3
 800926c:	d109      	bne.n	8009282 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800926e:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009270:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009272:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009276:	f000 fa15 	bl	80096a4 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800927a:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800927c:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8009280:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009282:	2001      	movs	r0, #1
 8009284:	e7fc      	b.n	8009280 <HAL_SDRAM_ProgramRefreshRate+0x2a>

08009286 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009286:	4770      	bx	lr

08009288 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009288:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800928c:	2b01      	cmp	r3, #1
 800928e:	d133      	bne.n	80092f8 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009290:	2302      	movs	r3, #2
 8009292:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009296:	6803      	ldr	r3, [r0, #0]
 8009298:	68da      	ldr	r2, [r3, #12]
 800929a:	f042 0201 	orr.w	r2, r2, #1
 800929e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092a0:	4a16      	ldr	r2, [pc, #88]	; (80092fc <HAL_TIM_Base_Start_IT+0x74>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d01a      	beq.n	80092dc <HAL_TIM_Base_Start_IT+0x54>
 80092a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092aa:	d017      	beq.n	80092dc <HAL_TIM_Base_Start_IT+0x54>
 80092ac:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d013      	beq.n	80092dc <HAL_TIM_Base_Start_IT+0x54>
 80092b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d00f      	beq.n	80092dc <HAL_TIM_Base_Start_IT+0x54>
 80092bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d00b      	beq.n	80092dc <HAL_TIM_Base_Start_IT+0x54>
 80092c4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d007      	beq.n	80092dc <HAL_TIM_Base_Start_IT+0x54>
 80092cc:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d003      	beq.n	80092dc <HAL_TIM_Base_Start_IT+0x54>
 80092d4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80092d8:	4293      	cmp	r3, r2
 80092da:	d107      	bne.n	80092ec <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092dc:	6899      	ldr	r1, [r3, #8]
 80092de:	4a08      	ldr	r2, [pc, #32]	; (8009300 <HAL_TIM_Base_Start_IT+0x78>)
 80092e0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092e2:	2a06      	cmp	r2, #6
 80092e4:	d006      	beq.n	80092f4 <HAL_TIM_Base_Start_IT+0x6c>
 80092e6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80092ea:	d003      	beq.n	80092f4 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	f042 0201 	orr.w	r2, r2, #1
 80092f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80092f4:	2000      	movs	r0, #0
}
 80092f6:	4770      	bx	lr
    return HAL_ERROR;
 80092f8:	2001      	movs	r0, #1
 80092fa:	4770      	bx	lr
 80092fc:	40010000 	.word	0x40010000
 8009300:	00010007 	.word	0x00010007

08009304 <HAL_TIM_OC_DelayElapsedCallback>:
 8009304:	4770      	bx	lr

08009306 <HAL_TIM_IC_CaptureCallback>:
 8009306:	4770      	bx	lr

08009308 <HAL_TIM_PWM_PulseFinishedCallback>:
 8009308:	4770      	bx	lr

0800930a <HAL_TIM_TriggerCallback>:
 800930a:	4770      	bx	lr

0800930c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800930c:	6803      	ldr	r3, [r0, #0]
 800930e:	691a      	ldr	r2, [r3, #16]
 8009310:	0791      	lsls	r1, r2, #30
{
 8009312:	b510      	push	{r4, lr}
 8009314:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009316:	d50f      	bpl.n	8009338 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009318:	68da      	ldr	r2, [r3, #12]
 800931a:	0792      	lsls	r2, r2, #30
 800931c:	d50c      	bpl.n	8009338 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800931e:	f06f 0202 	mvn.w	r2, #2
 8009322:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009324:	2201      	movs	r2, #1
 8009326:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009328:	699b      	ldr	r3, [r3, #24]
 800932a:	0799      	lsls	r1, r3, #30
 800932c:	f000 8085 	beq.w	800943a <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009330:	f7ff ffe9 	bl	8009306 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009334:	2300      	movs	r3, #0
 8009336:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009338:	6823      	ldr	r3, [r4, #0]
 800933a:	691a      	ldr	r2, [r3, #16]
 800933c:	0752      	lsls	r2, r2, #29
 800933e:	d510      	bpl.n	8009362 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009340:	68da      	ldr	r2, [r3, #12]
 8009342:	0750      	lsls	r0, r2, #29
 8009344:	d50d      	bpl.n	8009362 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009346:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800934a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800934c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800934e:	2202      	movs	r2, #2
 8009350:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009352:	699b      	ldr	r3, [r3, #24]
 8009354:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009358:	d075      	beq.n	8009446 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800935a:	f7ff ffd4 	bl	8009306 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800935e:	2300      	movs	r3, #0
 8009360:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009362:	6823      	ldr	r3, [r4, #0]
 8009364:	691a      	ldr	r2, [r3, #16]
 8009366:	0711      	lsls	r1, r2, #28
 8009368:	d50f      	bpl.n	800938a <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800936a:	68da      	ldr	r2, [r3, #12]
 800936c:	0712      	lsls	r2, r2, #28
 800936e:	d50c      	bpl.n	800938a <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009370:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009374:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009376:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009378:	2204      	movs	r2, #4
 800937a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800937c:	69db      	ldr	r3, [r3, #28]
 800937e:	079b      	lsls	r3, r3, #30
 8009380:	d067      	beq.n	8009452 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8009382:	f7ff ffc0 	bl	8009306 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009386:	2300      	movs	r3, #0
 8009388:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800938a:	6823      	ldr	r3, [r4, #0]
 800938c:	691a      	ldr	r2, [r3, #16]
 800938e:	06d0      	lsls	r0, r2, #27
 8009390:	d510      	bpl.n	80093b4 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009392:	68da      	ldr	r2, [r3, #12]
 8009394:	06d1      	lsls	r1, r2, #27
 8009396:	d50d      	bpl.n	80093b4 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009398:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800939c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800939e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093a0:	2208      	movs	r2, #8
 80093a2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80093a4:	69db      	ldr	r3, [r3, #28]
 80093a6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80093aa:	d058      	beq.n	800945e <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80093ac:	f7ff ffab 	bl	8009306 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093b0:	2300      	movs	r3, #0
 80093b2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80093b4:	6823      	ldr	r3, [r4, #0]
 80093b6:	691a      	ldr	r2, [r3, #16]
 80093b8:	07d2      	lsls	r2, r2, #31
 80093ba:	d508      	bpl.n	80093ce <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80093bc:	68da      	ldr	r2, [r3, #12]
 80093be:	07d0      	lsls	r0, r2, #31
 80093c0:	d505      	bpl.n	80093ce <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80093c2:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80093c6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80093c8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80093ca:	f7f9 fa11 	bl	80027f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80093ce:	6823      	ldr	r3, [r4, #0]
 80093d0:	691a      	ldr	r2, [r3, #16]
 80093d2:	0611      	lsls	r1, r2, #24
 80093d4:	d508      	bpl.n	80093e8 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093d6:	68da      	ldr	r2, [r3, #12]
 80093d8:	0612      	lsls	r2, r2, #24
 80093da:	d505      	bpl.n	80093e8 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80093dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80093e0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80093e2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80093e4:	f000 f8d9 	bl	800959a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80093e8:	6823      	ldr	r3, [r4, #0]
 80093ea:	691a      	ldr	r2, [r3, #16]
 80093ec:	05d0      	lsls	r0, r2, #23
 80093ee:	d508      	bpl.n	8009402 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093f0:	68da      	ldr	r2, [r3, #12]
 80093f2:	0611      	lsls	r1, r2, #24
 80093f4:	d505      	bpl.n	8009402 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80093f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80093fa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80093fc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80093fe:	f000 f8cd 	bl	800959c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009402:	6823      	ldr	r3, [r4, #0]
 8009404:	691a      	ldr	r2, [r3, #16]
 8009406:	0652      	lsls	r2, r2, #25
 8009408:	d508      	bpl.n	800941c <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800940a:	68da      	ldr	r2, [r3, #12]
 800940c:	0650      	lsls	r0, r2, #25
 800940e:	d505      	bpl.n	800941c <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009410:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009414:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009416:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009418:	f7ff ff77 	bl	800930a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800941c:	6823      	ldr	r3, [r4, #0]
 800941e:	691a      	ldr	r2, [r3, #16]
 8009420:	0691      	lsls	r1, r2, #26
 8009422:	d522      	bpl.n	800946a <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009424:	68da      	ldr	r2, [r3, #12]
 8009426:	0692      	lsls	r2, r2, #26
 8009428:	d51f      	bpl.n	800946a <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800942a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800942e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009430:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8009436:	f000 b8af 	b.w	8009598 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800943a:	f7ff ff63 	bl	8009304 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800943e:	4620      	mov	r0, r4
 8009440:	f7ff ff62 	bl	8009308 <HAL_TIM_PWM_PulseFinishedCallback>
 8009444:	e776      	b.n	8009334 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009446:	f7ff ff5d 	bl	8009304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800944a:	4620      	mov	r0, r4
 800944c:	f7ff ff5c 	bl	8009308 <HAL_TIM_PWM_PulseFinishedCallback>
 8009450:	e785      	b.n	800935e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009452:	f7ff ff57 	bl	8009304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009456:	4620      	mov	r0, r4
 8009458:	f7ff ff56 	bl	8009308 <HAL_TIM_PWM_PulseFinishedCallback>
 800945c:	e793      	b.n	8009386 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800945e:	f7ff ff51 	bl	8009304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009462:	4620      	mov	r0, r4
 8009464:	f7ff ff50 	bl	8009308 <HAL_TIM_PWM_PulseFinishedCallback>
 8009468:	e7a2      	b.n	80093b0 <HAL_TIM_IRQHandler+0xa4>
}
 800946a:	bd10      	pop	{r4, pc}

0800946c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800946c:	4a30      	ldr	r2, [pc, #192]	; (8009530 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800946e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009470:	4290      	cmp	r0, r2
 8009472:	d012      	beq.n	800949a <TIM_Base_SetConfig+0x2e>
 8009474:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009478:	d00f      	beq.n	800949a <TIM_Base_SetConfig+0x2e>
 800947a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800947e:	4290      	cmp	r0, r2
 8009480:	d00b      	beq.n	800949a <TIM_Base_SetConfig+0x2e>
 8009482:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009486:	4290      	cmp	r0, r2
 8009488:	d007      	beq.n	800949a <TIM_Base_SetConfig+0x2e>
 800948a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800948e:	4290      	cmp	r0, r2
 8009490:	d003      	beq.n	800949a <TIM_Base_SetConfig+0x2e>
 8009492:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8009496:	4290      	cmp	r0, r2
 8009498:	d119      	bne.n	80094ce <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800949a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800949c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80094a0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094a2:	4a23      	ldr	r2, [pc, #140]	; (8009530 <TIM_Base_SetConfig+0xc4>)
 80094a4:	4290      	cmp	r0, r2
 80094a6:	d029      	beq.n	80094fc <TIM_Base_SetConfig+0x90>
 80094a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80094ac:	d026      	beq.n	80094fc <TIM_Base_SetConfig+0x90>
 80094ae:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80094b2:	4290      	cmp	r0, r2
 80094b4:	d022      	beq.n	80094fc <TIM_Base_SetConfig+0x90>
 80094b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80094ba:	4290      	cmp	r0, r2
 80094bc:	d01e      	beq.n	80094fc <TIM_Base_SetConfig+0x90>
 80094be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80094c2:	4290      	cmp	r0, r2
 80094c4:	d01a      	beq.n	80094fc <TIM_Base_SetConfig+0x90>
 80094c6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80094ca:	4290      	cmp	r0, r2
 80094cc:	d016      	beq.n	80094fc <TIM_Base_SetConfig+0x90>
 80094ce:	4a19      	ldr	r2, [pc, #100]	; (8009534 <TIM_Base_SetConfig+0xc8>)
 80094d0:	4290      	cmp	r0, r2
 80094d2:	d013      	beq.n	80094fc <TIM_Base_SetConfig+0x90>
 80094d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80094d8:	4290      	cmp	r0, r2
 80094da:	d00f      	beq.n	80094fc <TIM_Base_SetConfig+0x90>
 80094dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80094e0:	4290      	cmp	r0, r2
 80094e2:	d00b      	beq.n	80094fc <TIM_Base_SetConfig+0x90>
 80094e4:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80094e8:	4290      	cmp	r0, r2
 80094ea:	d007      	beq.n	80094fc <TIM_Base_SetConfig+0x90>
 80094ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80094f0:	4290      	cmp	r0, r2
 80094f2:	d003      	beq.n	80094fc <TIM_Base_SetConfig+0x90>
 80094f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80094f8:	4290      	cmp	r0, r2
 80094fa:	d103      	bne.n	8009504 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009500:	68ca      	ldr	r2, [r1, #12]
 8009502:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009504:	694a      	ldr	r2, [r1, #20]
 8009506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800950a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800950c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800950e:	688b      	ldr	r3, [r1, #8]
 8009510:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009512:	680b      	ldr	r3, [r1, #0]
 8009514:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009516:	4b06      	ldr	r3, [pc, #24]	; (8009530 <TIM_Base_SetConfig+0xc4>)
 8009518:	4298      	cmp	r0, r3
 800951a:	d003      	beq.n	8009524 <TIM_Base_SetConfig+0xb8>
 800951c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009520:	4298      	cmp	r0, r3
 8009522:	d101      	bne.n	8009528 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009524:	690b      	ldr	r3, [r1, #16]
 8009526:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009528:	2301      	movs	r3, #1
 800952a:	6143      	str	r3, [r0, #20]
}
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	40010000 	.word	0x40010000
 8009534:	40014000 	.word	0x40014000

08009538 <HAL_TIM_Base_Init>:
{
 8009538:	b510      	push	{r4, lr}
  if (htim == NULL)
 800953a:	4604      	mov	r4, r0
 800953c:	b350      	cbz	r0, 8009594 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800953e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009542:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009546:	b91b      	cbnz	r3, 8009550 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8009548:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800954c:	f7ff fe9b 	bl	8009286 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8009550:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009552:	6820      	ldr	r0, [r4, #0]
 8009554:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8009556:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800955a:	f7ff ff87 	bl	800946c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800955e:	2301      	movs	r3, #1
  return HAL_OK;
 8009560:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009562:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009566:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800956a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800956e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009572:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009576:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800957a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800957e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009582:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009586:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800958a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800958e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8009592:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009594:	2001      	movs	r0, #1
 8009596:	e7fc      	b.n	8009592 <HAL_TIM_Base_Init+0x5a>

08009598 <HAL_TIMEx_CommutCallback>:
 8009598:	4770      	bx	lr

0800959a <HAL_TIMEx_BreakCallback>:
 800959a:	4770      	bx	lr

0800959c <HAL_TIMEx_Break2Callback>:
 800959c:	4770      	bx	lr

0800959e <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800959e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80095a2:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80095a4:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 80095a8:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 80095ac:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 80095b0:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 80095b4:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 80095b8:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80095ba:	b9a2      	cbnz	r2, 80095e6 <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80095bc:	ea43 0209 	orr.w	r2, r3, r9
 80095c0:	6801      	ldr	r1, [r0, #0]
 80095c2:	432a      	orrs	r2, r5
 80095c4:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 80095c8:	ea42 0308 	orr.w	r3, r2, r8
 80095cc:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 80095d0:	ea43 030e 	orr.w	r3, r3, lr
 80095d4:	ea43 030c 	orr.w	r3, r3, ip
 80095d8:	433b      	orrs	r3, r7
 80095da:	4333      	orrs	r3, r6
 80095dc:	430b      	orrs	r3, r1
 80095de:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 80095e0:	2000      	movs	r0, #0
 80095e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80095e6:	6802      	ldr	r2, [r0, #0]
 80095e8:	ea43 0309 	orr.w	r3, r3, r9
 80095ec:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80095f0:	4313      	orrs	r3, r2
 80095f2:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80095f4:	ea45 0308 	orr.w	r3, r5, r8
 80095f8:	6842      	ldr	r2, [r0, #4]
 80095fa:	ea43 030e 	orr.w	r3, r3, lr
 80095fe:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8009602:	ea43 030c 	orr.w	r3, r3, ip
 8009606:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800960a:	433b      	orrs	r3, r7
 800960c:	4333      	orrs	r3, r6
 800960e:	4313      	orrs	r3, r2
 8009610:	6043      	str	r3, [r0, #4]
 8009612:	e7e5      	b.n	80095e0 <FMC_SDRAM_Init+0x42>

08009614 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009614:	68cb      	ldr	r3, [r1, #12]
 8009616:	f103 3cff 	add.w	ip, r3, #4294967295
 800961a:	694b      	ldr	r3, [r1, #20]
{
 800961c:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800961e:	3b01      	subs	r3, #1
 8009620:	680f      	ldr	r7, [r1, #0]
 8009622:	684c      	ldr	r4, [r1, #4]
 8009624:	688e      	ldr	r6, [r1, #8]
 8009626:	051b      	lsls	r3, r3, #20
 8009628:	690d      	ldr	r5, [r1, #16]
 800962a:	3c01      	subs	r4, #1
 800962c:	6989      	ldr	r1, [r1, #24]
 800962e:	3e01      	subs	r6, #1
 8009630:	3d01      	subs	r5, #1
 8009632:	3f01      	subs	r7, #1
 8009634:	3901      	subs	r1, #1
 8009636:	0124      	lsls	r4, r4, #4
 8009638:	0236      	lsls	r6, r6, #8
 800963a:	042d      	lsls	r5, r5, #16
 800963c:	0609      	lsls	r1, r1, #24
 800963e:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8009642:	b95a      	cbnz	r2, 800965c <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009644:	433b      	orrs	r3, r7
 8009646:	6882      	ldr	r2, [r0, #8]
 8009648:	4323      	orrs	r3, r4
 800964a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800964e:	4333      	orrs	r3, r6
 8009650:	432b      	orrs	r3, r5
 8009652:	430b      	orrs	r3, r1
 8009654:	4313      	orrs	r3, r2
 8009656:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8009658:	2000      	movs	r0, #0
 800965a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800965c:	6882      	ldr	r2, [r0, #8]
 800965e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009662:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8009666:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009668:	ea44 0306 	orr.w	r3, r4, r6
 800966c:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800966e:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009670:	68c2      	ldr	r2, [r0, #12]
 8009672:	432b      	orrs	r3, r5
 8009674:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8009678:	430b      	orrs	r3, r1
 800967a:	4313      	orrs	r3, r2
 800967c:	60c3      	str	r3, [r0, #12]
 800967e:	e7eb      	b.n	8009658 <FMC_SDRAM_Timing_Init+0x44>

08009680 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8009680:	6902      	ldr	r2, [r0, #16]
{
 8009682:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8009684:	e9d1 3400 	ldrd	r3, r4, [r1]
 8009688:	0d92      	lsrs	r2, r2, #22
 800968a:	4323      	orrs	r3, r4
 800968c:	68cc      	ldr	r4, [r1, #12]
 800968e:	0592      	lsls	r2, r2, #22
 8009690:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8009694:	4313      	orrs	r3, r2
 8009696:	688a      	ldr	r2, [r1, #8]
 8009698:	3a01      	subs	r2, #1
 800969a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800969e:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 80096a0:	2000      	movs	r0, #0
 80096a2:	bd10      	pop	{r4, pc}

080096a4 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80096a4:	6943      	ldr	r3, [r0, #20]
 80096a6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80096aa:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80096ae:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 80096b2:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 80096b4:	2000      	movs	r0, #0
 80096b6:	4770      	bx	lr

080096b8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80096b8:	b084      	sub	sp, #16
 80096ba:	b510      	push	{r4, lr}
 80096bc:	ac03      	add	r4, sp, #12
 80096be:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80096c2:	460b      	mov	r3, r1
 80096c4:	9904      	ldr	r1, [sp, #16]
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80096c6:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 80096c8:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 80096ca:	9905      	ldr	r1, [sp, #20]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80096cc:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.ClockBypass         |\
 80096d0:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 80096d2:	9906      	ldr	r1, [sp, #24]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80096d4:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
             Init.ClockPowerSave      |\
 80096d8:	430b      	orrs	r3, r1
             Init.BusWide             |\
 80096da:	9907      	ldr	r1, [sp, #28]
 80096dc:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 80096de:	9908      	ldr	r1, [sp, #32]
 80096e0:	430b      	orrs	r3, r1

  return HAL_OK;
}
 80096e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80096e6:	4313      	orrs	r3, r2
}
 80096e8:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80096ea:	6043      	str	r3, [r0, #4]
}
 80096ec:	2000      	movs	r0, #0
 80096ee:	4770      	bx	lr

080096f0 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80096f0:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 80096f4:	4770      	bx	lr

080096f6 <SDMMC_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80096f6:	680b      	ldr	r3, [r1, #0]
 80096f8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  return HAL_OK;
}
 80096fc:	2000      	movs	r0, #0
 80096fe:	4770      	bx	lr

08009700 <SDMMC_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8009700:	2303      	movs	r3, #3
 8009702:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 8009704:	2000      	movs	r0, #0
 8009706:	4770      	bx	lr

08009708 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009708:	6800      	ldr	r0, [r0, #0]
}
 800970a:	f000 0003 	and.w	r0, r0, #3
 800970e:	4770      	bx	lr

08009710 <SDMMC_SendCommand>:
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009710:	680b      	ldr	r3, [r1, #0]
{
 8009712:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 8009714:	6083      	str	r3, [r0, #8]
                       Command->Response         |\
                       Command->WaitForInterrupt |\
                       Command->CPSM);
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009716:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009718:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800971c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009720:	4323      	orrs	r3, r4
                       Command->Response         |\
 8009722:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8009724:	6909      	ldr	r1, [r1, #16]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009726:	f022 020f 	bic.w	r2, r2, #15
                       Command->Response         |\
 800972a:	4323      	orrs	r3, r4
                       Command->WaitForInterrupt |\
 800972c:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800972e:	4313      	orrs	r3, r2
 8009730:	60c3      	str	r3, [r0, #12]
  
  return HAL_OK;  
}
 8009732:	2000      	movs	r0, #0
 8009734:	bd10      	pop	{r4, pc}

08009736 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009736:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 8009738:	5840      	ldr	r0, [r0, r1]
}  
 800973a:	4770      	bx	lr

0800973c <SDMMC_ConfigData>:
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800973c:	680b      	ldr	r3, [r1, #0]
{
 800973e:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009740:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009742:	684b      	ldr	r3, [r1, #4]
 8009744:	6283      	str	r3, [r0, #40]	; 0x28
                       Data->TransferDir   |\
                       Data->TransferMode  |\
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009746:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009748:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800974c:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009750:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8009752:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 8009754:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8009756:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8009758:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800975a:	4313      	orrs	r3, r2
 800975c:	62c3      	str	r3, [r0, #44]	; 0x2c

  return HAL_OK;

}
 800975e:	2000      	movs	r0, #0
 8009760:	bd10      	pop	{r4, pc}
	...

08009764 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009764:	b510      	push	{r4, lr}
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009766:	2300      	movs	r3, #0
{
 8009768:	b086      	sub	sp, #24
 800976a:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800976c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800976e:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009772:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800977a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800977c:	f7ff ffc8 	bl	8009710 <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009780:	4b0a      	ldr	r3, [pc, #40]	; (80097ac <SDMMC_CmdGoIdleState+0x48>)
 8009782:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	fbb3 f3f2 	udiv	r3, r3, r2
 800978c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009790:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8009792:	3b01      	subs	r3, #1
 8009794:	d307      	bcc.n	80097a6 <SDMMC_CmdGoIdleState+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009796:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009798:	0612      	lsls	r2, r2, #24
 800979a:	d5fa      	bpl.n	8009792 <SDMMC_CmdGoIdleState+0x2e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800979c:	23c5      	movs	r3, #197	; 0xc5
  
  return SDMMC_ERROR_NONE;
 800979e:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80097a0:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80097a2:	b006      	add	sp, #24
 80097a4:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 80097a6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 80097aa:	e7fa      	b.n	80097a2 <SDMMC_CmdGoIdleState+0x3e>
 80097ac:	20000048 	.word	0x20000048

080097b0 <SDMMC_GetCmdResp1>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80097b0:	4b45      	ldr	r3, [pc, #276]	; (80098c8 <SDMMC_GetCmdResp1+0x118>)
{
 80097b2:	b510      	push	{r4, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80097b4:	681b      	ldr	r3, [r3, #0]
{
 80097b6:	4604      	mov	r4, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80097b8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80097bc:	fbb3 f3f0 	udiv	r3, r3, r0
 80097c0:	435a      	muls	r2, r3
    if (count-- == 0U)
 80097c2:	2a00      	cmp	r2, #0
 80097c4:	d049      	beq.n	800985a <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDMMCx->STA;
 80097c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80097c8:	f013 0f45 	tst.w	r3, #69	; 0x45
 80097cc:	d007      	beq.n	80097de <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80097ce:	051b      	lsls	r3, r3, #20
 80097d0:	d405      	bmi.n	80097de <SDMMC_GetCmdResp1+0x2e>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80097d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097d4:	0758      	lsls	r0, r3, #29
 80097d6:	d504      	bpl.n	80097e2 <SDMMC_GetCmdResp1+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80097d8:	2004      	movs	r0, #4
 80097da:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80097dc:	bd10      	pop	{r4, pc}
 80097de:	3a01      	subs	r2, #1
 80097e0:	e7ef      	b.n	80097c2 <SDMMC_GetCmdResp1+0x12>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80097e2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80097e4:	f010 0001 	ands.w	r0, r0, #1
 80097e8:	d002      	beq.n	80097f0 <SDMMC_GetCmdResp1+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80097ea:	2301      	movs	r3, #1
 80097ec:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80097ee:	e7f5      	b.n	80097dc <SDMMC_GetCmdResp1+0x2c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80097f0:	23c5      	movs	r3, #197	; 0xc5
 80097f2:	63a3      	str	r3, [r4, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80097f4:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	4299      	cmp	r1, r3
 80097fa:	d131      	bne.n	8009860 <SDMMC_GetCmdResp1+0xb0>
  return (*(__IO uint32_t *) tmp);
 80097fc:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80097fe:	4833      	ldr	r0, [pc, #204]	; (80098cc <SDMMC_GetCmdResp1+0x11c>)
 8009800:	4018      	ands	r0, r3
 8009802:	2800      	cmp	r0, #0
 8009804:	d0ea      	beq.n	80097dc <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009806:	2b00      	cmp	r3, #0
 8009808:	db2c      	blt.n	8009864 <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800980a:	005a      	lsls	r2, r3, #1
 800980c:	d42d      	bmi.n	800986a <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800980e:	009c      	lsls	r4, r3, #2
 8009810:	d42d      	bmi.n	800986e <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009812:	00d9      	lsls	r1, r3, #3
 8009814:	d42d      	bmi.n	8009872 <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009816:	011a      	lsls	r2, r3, #4
 8009818:	d42e      	bmi.n	8009878 <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800981a:	015c      	lsls	r4, r3, #5
 800981c:	d42f      	bmi.n	800987e <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800981e:	01d9      	lsls	r1, r3, #7
 8009820:	d430      	bmi.n	8009884 <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009822:	021a      	lsls	r2, r3, #8
 8009824:	d431      	bmi.n	800988a <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009826:	025c      	lsls	r4, r3, #9
 8009828:	d432      	bmi.n	8009890 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800982a:	0299      	lsls	r1, r3, #10
 800982c:	d433      	bmi.n	8009896 <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800982e:	02da      	lsls	r2, r3, #11
 8009830:	d434      	bmi.n	800989c <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009832:	035c      	lsls	r4, r3, #13
 8009834:	d435      	bmi.n	80098a2 <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009836:	0399      	lsls	r1, r3, #14
 8009838:	d436      	bmi.n	80098a8 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800983a:	03da      	lsls	r2, r3, #15
 800983c:	d437      	bmi.n	80098ae <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800983e:	041c      	lsls	r4, r3, #16
 8009840:	d438      	bmi.n	80098b4 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009842:	0459      	lsls	r1, r3, #17
 8009844:	d439      	bmi.n	80098ba <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009846:	049a      	lsls	r2, r3, #18
 8009848:	d43a      	bmi.n	80098c0 <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800984a:	f013 0f08 	tst.w	r3, #8
 800984e:	bf14      	ite	ne
 8009850:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8009854:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8009858:	e7c0      	b.n	80097dc <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800985a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800985e:	e7bd      	b.n	80097dc <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009860:	2001      	movs	r0, #1
 8009862:	e7bb      	b.n	80097dc <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009864:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8009868:	e7b8      	b.n	80097dc <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800986a:	2040      	movs	r0, #64	; 0x40
 800986c:	e7b6      	b.n	80097dc <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800986e:	2080      	movs	r0, #128	; 0x80
 8009870:	e7b4      	b.n	80097dc <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009872:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009876:	e7b1      	b.n	80097dc <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009878:	f44f 7000 	mov.w	r0, #512	; 0x200
 800987c:	e7ae      	b.n	80097dc <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800987e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009882:	e7ab      	b.n	80097dc <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009884:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009888:	e7a8      	b.n	80097dc <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800988a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800988e:	e7a5      	b.n	80097dc <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009890:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009894:	e7a2      	b.n	80097dc <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009896:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800989a:	e79f      	b.n	80097dc <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 800989c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80098a0:	e79c      	b.n	80097dc <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80098a2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80098a6:	e799      	b.n	80097dc <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80098a8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80098ac:	e796      	b.n	80097dc <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80098ae:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80098b2:	e793      	b.n	80097dc <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80098b4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80098b8:	e790      	b.n	80097dc <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80098ba:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80098be:	e78d      	b.n	80097dc <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 80098c0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80098c4:	e78a      	b.n	80097dc <SDMMC_GetCmdResp1+0x2c>
 80098c6:	bf00      	nop
 80098c8:	20000048 	.word	0x20000048
 80098cc:	fdffe008 	.word	0xfdffe008

080098d0 <SDMMC_CmdBlockLength>:
{
 80098d0:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098d2:	2340      	movs	r3, #64	; 0x40
{
 80098d4:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098d6:	2510      	movs	r5, #16
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098d8:	2200      	movs	r2, #0
{
 80098da:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80098dc:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098de:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098e0:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098ec:	f7ff ff10 	bl	8009710 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80098f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80098f4:	4629      	mov	r1, r5
 80098f6:	4620      	mov	r0, r4
 80098f8:	f7ff ff5a 	bl	80097b0 <SDMMC_GetCmdResp1>
}
 80098fc:	b007      	add	sp, #28
 80098fe:	bd30      	pop	{r4, r5, pc}

08009900 <SDMMC_CmdReadSingleBlock>:
{
 8009900:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009902:	2340      	movs	r3, #64	; 0x40
{
 8009904:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009906:	2511      	movs	r5, #17
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009908:	2200      	movs	r2, #0
{
 800990a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800990c:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800990e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009910:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009918:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800991c:	f7ff fef8 	bl	8009710 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009920:	f241 3288 	movw	r2, #5000	; 0x1388
 8009924:	4629      	mov	r1, r5
 8009926:	4620      	mov	r0, r4
 8009928:	f7ff ff42 	bl	80097b0 <SDMMC_GetCmdResp1>
}
 800992c:	b007      	add	sp, #28
 800992e:	bd30      	pop	{r4, r5, pc}

08009930 <SDMMC_CmdReadMultiBlock>:
{
 8009930:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009932:	2340      	movs	r3, #64	; 0x40
{
 8009934:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009936:	2512      	movs	r5, #18
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009938:	2200      	movs	r2, #0
{
 800993a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800993c:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800993e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009940:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009948:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800994c:	f7ff fee0 	bl	8009710 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009950:	f241 3288 	movw	r2, #5000	; 0x1388
 8009954:	4629      	mov	r1, r5
 8009956:	4620      	mov	r0, r4
 8009958:	f7ff ff2a 	bl	80097b0 <SDMMC_GetCmdResp1>
}
 800995c:	b007      	add	sp, #28
 800995e:	bd30      	pop	{r4, r5, pc}

08009960 <SDMMC_CmdWriteSingleBlock>:
{
 8009960:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009962:	2340      	movs	r3, #64	; 0x40
{
 8009964:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009966:	2518      	movs	r5, #24
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009968:	2200      	movs	r2, #0
{
 800996a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800996c:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800996e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009970:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009978:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800997c:	f7ff fec8 	bl	8009710 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009980:	f241 3288 	movw	r2, #5000	; 0x1388
 8009984:	4629      	mov	r1, r5
 8009986:	4620      	mov	r0, r4
 8009988:	f7ff ff12 	bl	80097b0 <SDMMC_GetCmdResp1>
}
 800998c:	b007      	add	sp, #28
 800998e:	bd30      	pop	{r4, r5, pc}

08009990 <SDMMC_CmdWriteMultiBlock>:
{
 8009990:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009992:	2340      	movs	r3, #64	; 0x40
{
 8009994:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009996:	2519      	movs	r5, #25
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009998:	2200      	movs	r2, #0
{
 800999a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800999c:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800999e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099a0:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099ac:	f7ff feb0 	bl	8009710 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80099b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80099b4:	4629      	mov	r1, r5
 80099b6:	4620      	mov	r0, r4
 80099b8:	f7ff fefa 	bl	80097b0 <SDMMC_GetCmdResp1>
}
 80099bc:	b007      	add	sp, #28
 80099be:	bd30      	pop	{r4, r5, pc}

080099c0 <SDMMC_CmdStopTransfer>:
{
 80099c0:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80099c2:	2300      	movs	r3, #0
{
 80099c4:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80099c6:	250c      	movs	r5, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099c8:	2240      	movs	r2, #64	; 0x40
{
 80099ca:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099cc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099ce:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80099d2:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099da:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099dc:	f7ff fe98 	bl	8009710 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80099e0:	4a03      	ldr	r2, [pc, #12]	; (80099f0 <SDMMC_CmdStopTransfer+0x30>)
 80099e2:	4629      	mov	r1, r5
 80099e4:	4620      	mov	r0, r4
 80099e6:	f7ff fee3 	bl	80097b0 <SDMMC_GetCmdResp1>
}
 80099ea:	b007      	add	sp, #28
 80099ec:	bd30      	pop	{r4, r5, pc}
 80099ee:	bf00      	nop
 80099f0:	05f5e100 	.word	0x05f5e100

080099f4 <SDMMC_CmdSelDesel>:
{
 80099f4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099f6:	2340      	movs	r3, #64	; 0x40
{
 80099f8:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099fa:	2507      	movs	r5, #7
{
 80099fc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80099fe:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a00:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a02:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a04:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a10:	f7ff fe7e 	bl	8009710 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a18:	4629      	mov	r1, r5
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	f7ff fec8 	bl	80097b0 <SDMMC_GetCmdResp1>
}
 8009a20:	b007      	add	sp, #28
 8009a22:	bd30      	pop	{r4, r5, pc}

08009a24 <SDMMC_CmdAppCommand>:
{
 8009a24:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a26:	2340      	movs	r3, #64	; 0x40
{
 8009a28:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a2a:	2537      	movs	r5, #55	; 0x37
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a2c:	2200      	movs	r2, #0
{
 8009a2e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009a30:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a32:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a34:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a40:	f7ff fe66 	bl	8009710 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a48:	4629      	mov	r1, r5
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f7ff feb0 	bl	80097b0 <SDMMC_GetCmdResp1>
}
 8009a50:	b007      	add	sp, #28
 8009a52:	bd30      	pop	{r4, r5, pc}

08009a54 <SDMMC_CmdBusWidth>:
{
 8009a54:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a56:	2340      	movs	r3, #64	; 0x40
{
 8009a58:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a5a:	2506      	movs	r5, #6
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a5c:	2200      	movs	r2, #0
{
 8009a5e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009a60:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a62:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a64:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a6c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a70:	f7ff fe4e 	bl	8009710 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a78:	4629      	mov	r1, r5
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	f7ff fe98 	bl	80097b0 <SDMMC_GetCmdResp1>
}
 8009a80:	b007      	add	sp, #28
 8009a82:	bd30      	pop	{r4, r5, pc}

08009a84 <SDMMC_CmdSendSCR>:
{
 8009a84:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009a86:	2300      	movs	r3, #0
{
 8009a88:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009a8a:	2533      	movs	r5, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a8c:	2240      	movs	r2, #64	; 0x40
{
 8009a8e:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a90:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a92:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009a96:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a9e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009aa0:	f7ff fe36 	bl	8009710 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aa8:	4629      	mov	r1, r5
 8009aaa:	4620      	mov	r0, r4
 8009aac:	f7ff fe80 	bl	80097b0 <SDMMC_GetCmdResp1>
}
 8009ab0:	b007      	add	sp, #28
 8009ab2:	bd30      	pop	{r4, r5, pc}

08009ab4 <SDMMC_CmdSendStatus>:
{
 8009ab4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ab6:	2340      	movs	r3, #64	; 0x40
{
 8009ab8:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009aba:	250d      	movs	r5, #13
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009abc:	2200      	movs	r2, #0
{
 8009abe:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8009ac0:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ac2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ac4:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009acc:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ad0:	f7ff fe1e 	bl	8009710 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ad8:	4629      	mov	r1, r5
 8009ada:	4620      	mov	r0, r4
 8009adc:	f7ff fe68 	bl	80097b0 <SDMMC_GetCmdResp1>
}
 8009ae0:	b007      	add	sp, #28
 8009ae2:	bd30      	pop	{r4, r5, pc}

08009ae4 <SDMMC_GetCmdResp2>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009ae4:	4b11      	ldr	r3, [pc, #68]	; (8009b2c <SDMMC_GetCmdResp2+0x48>)
 8009ae6:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 8009aea:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8009af2:	f241 3188 	movw	r1, #5000	; 0x1388
 8009af6:	434b      	muls	r3, r1
    if (count-- == 0U)
 8009af8:	3b01      	subs	r3, #1
 8009afa:	d313      	bcc.n	8009b24 <SDMMC_GetCmdResp2+0x40>
    sta_reg = SDMMCx->STA;
 8009afc:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009afe:	f011 0f45 	tst.w	r1, #69	; 0x45
 8009b02:	d0f9      	beq.n	8009af8 <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009b04:	0509      	lsls	r1, r1, #20
 8009b06:	d4f7      	bmi.n	8009af8 <SDMMC_GetCmdResp2+0x14>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009b08:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8009b0a:	075b      	lsls	r3, r3, #29
 8009b0c:	d502      	bpl.n	8009b14 <SDMMC_GetCmdResp2+0x30>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009b0e:	2004      	movs	r0, #4
 8009b10:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b12:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009b14:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8009b16:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009b1a:	bf14      	ite	ne
 8009b1c:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009b1e:	23c5      	moveq	r3, #197	; 0xc5
 8009b20:	6393      	str	r3, [r2, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8009b22:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8009b24:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	20000048 	.word	0x20000048

08009b30 <SDMMC_CmdSendCID>:
{
 8009b30:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009b32:	2300      	movs	r3, #0
{
 8009b34:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009b36:	2202      	movs	r2, #2
{
 8009b38:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b3a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009b3c:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009b40:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b42:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b4a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b4c:	f7ff fde0 	bl	8009710 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009b50:	4620      	mov	r0, r4
 8009b52:	f7ff ffc7 	bl	8009ae4 <SDMMC_GetCmdResp2>
}
 8009b56:	b006      	add	sp, #24
 8009b58:	bd10      	pop	{r4, pc}

08009b5a <SDMMC_CmdSendCSD>:
{
 8009b5a:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009b5c:	2209      	movs	r2, #9
{
 8009b5e:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009b60:	23c0      	movs	r3, #192	; 0xc0
{
 8009b62:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8009b64:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b66:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009b68:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b70:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b74:	a901      	add	r1, sp, #4
 8009b76:	f7ff fdcb 	bl	8009710 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	f7ff ffb2 	bl	8009ae4 <SDMMC_GetCmdResp2>
}
 8009b80:	b006      	add	sp, #24
 8009b82:	bd10      	pop	{r4, pc}

08009b84 <SDMMC_GetCmdResp3>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009b84:	4b0f      	ldr	r3, [pc, #60]	; (8009bc4 <SDMMC_GetCmdResp3+0x40>)
 8009b86:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 8009b8a:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b92:	f241 3188 	movw	r1, #5000	; 0x1388
 8009b96:	434b      	muls	r3, r1
    if (count-- == 0U)
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	d30f      	bcc.n	8009bbc <SDMMC_GetCmdResp3+0x38>
    sta_reg = SDMMCx->STA;
 8009b9c:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009b9e:	f011 0f45 	tst.w	r1, #69	; 0x45
 8009ba2:	d0f9      	beq.n	8009b98 <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ba4:	0509      	lsls	r1, r1, #20
 8009ba6:	d4f7      	bmi.n	8009b98 <SDMMC_GetCmdResp3+0x14>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009ba8:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8009baa:	f010 0004 	ands.w	r0, r0, #4
 8009bae:	d002      	beq.n	8009bb6 <SDMMC_GetCmdResp3+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009bb0:	2004      	movs	r0, #4
 8009bb2:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009bb4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009bb6:	23c5      	movs	r3, #197	; 0xc5
 8009bb8:	6393      	str	r3, [r2, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8009bba:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8009bbc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	20000048 	.word	0x20000048

08009bc8 <SDMMC_CmdAppOperCommand>:
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009bc8:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bcc:	2229      	movs	r2, #41	; 0x29
 8009bce:	2340      	movs	r3, #64	; 0x40
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009bd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
{
 8009bd4:	b510      	push	{r4, lr}
 8009bd6:	b086      	sub	sp, #24
 8009bd8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bda:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009bde:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009be0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009be4:	2100      	movs	r1, #0
 8009be6:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bea:	a901      	add	r1, sp, #4
 8009bec:	f7ff fd90 	bl	8009710 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	f7ff ffc7 	bl	8009b84 <SDMMC_GetCmdResp3>
}
 8009bf6:	b006      	add	sp, #24
 8009bf8:	bd10      	pop	{r4, pc}
	...

08009bfc <SDMMC_GetCmdResp6>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009bfc:	4b1f      	ldr	r3, [pc, #124]	; (8009c7c <SDMMC_GetCmdResp6+0x80>)
{
 8009bfe:	b510      	push	{r4, lr}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009c00:	681b      	ldr	r3, [r3, #0]
{
 8009c02:	4604      	mov	r4, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009c04:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8009c08:	fbb3 f3f0 	udiv	r3, r3, r0
 8009c0c:	f241 3088 	movw	r0, #5000	; 0x1388
 8009c10:	4343      	muls	r3, r0
    if (count-- == 0U)
 8009c12:	3b01      	subs	r3, #1
 8009c14:	d329      	bcc.n	8009c6a <SDMMC_GetCmdResp6+0x6e>
    sta_reg = SDMMCx->STA;
 8009c16:	6b60      	ldr	r0, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009c18:	f010 0f45 	tst.w	r0, #69	; 0x45
 8009c1c:	d0f9      	beq.n	8009c12 <SDMMC_GetCmdResp6+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009c1e:	0500      	lsls	r0, r0, #20
 8009c20:	d4f7      	bmi.n	8009c12 <SDMMC_GetCmdResp6+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009c22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c24:	0758      	lsls	r0, r3, #29
 8009c26:	d502      	bpl.n	8009c2e <SDMMC_GetCmdResp6+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009c28:	2004      	movs	r0, #4
 8009c2a:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8009c2c:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009c2e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009c30:	f010 0001 	ands.w	r0, r0, #1
 8009c34:	d002      	beq.n	8009c3c <SDMMC_GetCmdResp6+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009c36:	2301      	movs	r3, #1
 8009c38:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c3a:	e7f7      	b.n	8009c2c <SDMMC_GetCmdResp6+0x30>
  return (uint8_t)(SDMMCx->RESPCMD);
 8009c3c:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	4299      	cmp	r1, r3
 8009c42:	d115      	bne.n	8009c70 <SDMMC_GetCmdResp6+0x74>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009c44:	23c5      	movs	r3, #197	; 0xc5
 8009c46:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8009c48:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009c4a:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8009c4e:	d102      	bne.n	8009c56 <SDMMC_GetCmdResp6+0x5a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009c50:	0c1b      	lsrs	r3, r3, #16
 8009c52:	8013      	strh	r3, [r2, #0]
    return SDMMC_ERROR_NONE;
 8009c54:	e7ea      	b.n	8009c2c <SDMMC_GetCmdResp6+0x30>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009c56:	045a      	lsls	r2, r3, #17
 8009c58:	d40c      	bmi.n	8009c74 <SDMMC_GetCmdResp6+0x78>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009c5a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8009c5e:	bf14      	ite	ne
 8009c60:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8009c64:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8009c68:	e7e0      	b.n	8009c2c <SDMMC_GetCmdResp6+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8009c6a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8009c6e:	e7dd      	b.n	8009c2c <SDMMC_GetCmdResp6+0x30>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c70:	2001      	movs	r0, #1
 8009c72:	e7db      	b.n	8009c2c <SDMMC_GetCmdResp6+0x30>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009c74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009c78:	e7d8      	b.n	8009c2c <SDMMC_GetCmdResp6+0x30>
 8009c7a:	bf00      	nop
 8009c7c:	20000048 	.word	0x20000048

08009c80 <SDMMC_CmdSetRelAdd>:
{
 8009c80:	b530      	push	{r4, r5, lr}
 8009c82:	b089      	sub	sp, #36	; 0x24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009c84:	2300      	movs	r3, #0
 8009c86:	2503      	movs	r5, #3
{
 8009c88:	4604      	mov	r4, r0
 8009c8a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c8c:	2140      	movs	r1, #64	; 0x40
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009c8e:	e9cd 3503 	strd	r3, r5, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c92:	e9cd 1305 	strd	r1, r3, [sp, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c9a:	a903      	add	r1, sp, #12
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c9c:	9307      	str	r3, [sp, #28]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c9e:	f7ff fd37 	bl	8009710 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009ca2:	9a01      	ldr	r2, [sp, #4]
 8009ca4:	4629      	mov	r1, r5
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	f7ff ffa8 	bl	8009bfc <SDMMC_GetCmdResp6>
}
 8009cac:	b009      	add	sp, #36	; 0x24
 8009cae:	bd30      	pop	{r4, r5, pc}

08009cb0 <SDMMC_GetCmdResp7>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009cb0:	4b13      	ldr	r3, [pc, #76]	; (8009d00 <SDMMC_GetCmdResp7+0x50>)
 8009cb2:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 8009cb6:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8009cbe:	f241 3188 	movw	r1, #5000	; 0x1388
 8009cc2:	434b      	muls	r3, r1
    if (count-- == 0U)
 8009cc4:	3b01      	subs	r3, #1
 8009cc6:	d317      	bcc.n	8009cf8 <SDMMC_GetCmdResp7+0x48>
    sta_reg = SDMMCx->STA;
 8009cc8:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009cca:	f011 0f45 	tst.w	r1, #69	; 0x45
 8009cce:	d0f9      	beq.n	8009cc4 <SDMMC_GetCmdResp7+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009cd0:	0508      	lsls	r0, r1, #20
 8009cd2:	d4f7      	bmi.n	8009cc4 <SDMMC_GetCmdResp7+0x14>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009cd4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8009cd6:	0759      	lsls	r1, r3, #29
 8009cd8:	d502      	bpl.n	8009ce0 <SDMMC_GetCmdResp7+0x30>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009cda:	2004      	movs	r0, #4
 8009cdc:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009cde:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009ce0:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8009ce2:	f010 0001 	ands.w	r0, r0, #1
 8009ce6:	d002      	beq.n	8009cee <SDMMC_GetCmdResp7+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009ce8:	2301      	movs	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009cea:	6393      	str	r3, [r2, #56]	; 0x38
 8009cec:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009cee:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8009cf0:	065b      	lsls	r3, r3, #25
 8009cf2:	d503      	bpl.n	8009cfc <SDMMC_GetCmdResp7+0x4c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009cf4:	2340      	movs	r3, #64	; 0x40
 8009cf6:	e7f8      	b.n	8009cea <SDMMC_GetCmdResp7+0x3a>
      return SDMMC_ERROR_TIMEOUT;
 8009cf8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	20000048 	.word	0x20000048

08009d04 <SDMMC_CmdOperCond>:
{
 8009d04:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009d06:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
{
 8009d0a:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009d0c:	2308      	movs	r3, #8
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d0e:	2140      	movs	r1, #64	; 0x40
{
 8009d10:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009d12:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d16:	2300      	movs	r3, #0
 8009d18:	e9cd 1303 	strd	r1, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d20:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d22:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d24:	f7ff fcf4 	bl	8009710 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f7ff ffc1 	bl	8009cb0 <SDMMC_GetCmdResp7>
}
 8009d2e:	b006      	add	sp, #24
 8009d30:	bd10      	pop	{r4, pc}
	...

08009d34 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009d34:	4b03      	ldr	r3, [pc, #12]	; (8009d44 <disk_status+0x10>)
 8009d36:	181a      	adds	r2, r3, r0
 8009d38:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	7a10      	ldrb	r0, [r2, #8]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	4718      	bx	r3
 8009d44:	2000dcbc 	.word	0x2000dcbc

08009d48 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8009d48:	4b06      	ldr	r3, [pc, #24]	; (8009d64 <disk_initialize+0x1c>)
 8009d4a:	5c1a      	ldrb	r2, [r3, r0]
 8009d4c:	b942      	cbnz	r2, 8009d60 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 8009d4e:	2201      	movs	r2, #1
 8009d50:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009d52:	181a      	adds	r2, r3, r0
 8009d54:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8009d58:	7a10      	ldrb	r0, [r2, #8]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4718      	bx	r3
  }
  return stat;
}
 8009d60:	2000      	movs	r0, #0
 8009d62:	4770      	bx	lr
 8009d64:	2000dcbc 	.word	0x2000dcbc

08009d68 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009d68:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009d6a:	4c05      	ldr	r4, [pc, #20]	; (8009d80 <disk_read+0x18>)
 8009d6c:	1825      	adds	r5, r4, r0
 8009d6e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8009d72:	6860      	ldr	r0, [r4, #4]
 8009d74:	6884      	ldr	r4, [r0, #8]
 8009d76:	7a28      	ldrb	r0, [r5, #8]
 8009d78:	46a4      	mov	ip, r4
  return res;
}
 8009d7a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009d7c:	4760      	bx	ip
 8009d7e:	bf00      	nop
 8009d80:	2000dcbc 	.word	0x2000dcbc

08009d84 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009d84:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009d86:	4c05      	ldr	r4, [pc, #20]	; (8009d9c <disk_write+0x18>)
 8009d88:	1825      	adds	r5, r4, r0
 8009d8a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8009d8e:	6860      	ldr	r0, [r4, #4]
 8009d90:	68c4      	ldr	r4, [r0, #12]
 8009d92:	7a28      	ldrb	r0, [r5, #8]
 8009d94:	46a4      	mov	ip, r4
  return res;
}
 8009d96:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009d98:	4760      	bx	ip
 8009d9a:	bf00      	nop
 8009d9c:	2000dcbc 	.word	0x2000dcbc

08009da0 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009da0:	4b05      	ldr	r3, [pc, #20]	; (8009db8 <disk_ioctl+0x18>)
{
 8009da2:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009da4:	181c      	adds	r4, r3, r0
 8009da6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	7a20      	ldrb	r0, [r4, #8]
 8009dae:	691b      	ldr	r3, [r3, #16]
  return res;
}
 8009db0:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009db4:	4718      	bx	r3
 8009db6:	bf00      	nop
 8009db8:	2000dcbc 	.word	0x2000dcbc

08009dbc <ld_dword>:
	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
}
 8009dbc:	6800      	ldr	r0, [r0, #0]
 8009dbe:	4770      	bx	lr

08009dc0 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8009dc0:	0a0b      	lsrs	r3, r1, #8
 8009dc2:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009dc4:	7043      	strb	r3, [r0, #1]
 8009dc6:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8009dc8:	0e09      	lsrs	r1, r1, #24
 8009dca:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8009dcc:	70c1      	strb	r1, [r0, #3]
}
 8009dce:	4770      	bx	lr

08009dd0 <mem_set>:
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 8009dd0:	4402      	add	r2, r0

	do {
		*d++ = (BYTE)val;
 8009dd2:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8009dd6:	4290      	cmp	r0, r2
 8009dd8:	d1fb      	bne.n	8009dd2 <mem_set+0x2>
}
 8009dda:	4770      	bx	lr

08009ddc <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 8009ddc:	4a1b      	ldr	r2, [pc, #108]	; (8009e4c <chk_lock+0x70>)
 8009dde:	6813      	ldr	r3, [r2, #0]
{
 8009de0:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 8009de2:	b163      	cbz	r3, 8009dfe <chk_lock+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009de4:	6804      	ldr	r4, [r0, #0]
 8009de6:	429c      	cmp	r4, r3
 8009de8:	d107      	bne.n	8009dfa <chk_lock+0x1e>
 8009dea:	6854      	ldr	r4, [r2, #4]
 8009dec:	6883      	ldr	r3, [r0, #8]
 8009dee:	429c      	cmp	r4, r3
 8009df0:	d103      	bne.n	8009dfa <chk_lock+0x1e>
				Files[i].clu == dp->obj.sclust &&
 8009df2:	6894      	ldr	r4, [r2, #8]
 8009df4:	6943      	ldr	r3, [r0, #20]
 8009df6:	429c      	cmp	r4, r3
 8009df8:	d020      	beq.n	8009e3c <chk_lock+0x60>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009dfa:	2400      	movs	r4, #0
 8009dfc:	e000      	b.n	8009e00 <chk_lock+0x24>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 8009dfe:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 8009e00:	6913      	ldr	r3, [r2, #16]
 8009e02:	b1cb      	cbz	r3, 8009e38 <chk_lock+0x5c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009e04:	6805      	ldr	r5, [r0, #0]
 8009e06:	42ab      	cmp	r3, r5
 8009e08:	d107      	bne.n	8009e1a <chk_lock+0x3e>
 8009e0a:	6955      	ldr	r5, [r2, #20]
 8009e0c:	6883      	ldr	r3, [r0, #8]
 8009e0e:	429d      	cmp	r5, r3
 8009e10:	d103      	bne.n	8009e1a <chk_lock+0x3e>
				Files[i].clu == dp->obj.sclust &&
 8009e12:	6995      	ldr	r5, [r2, #24]
 8009e14:	6943      	ldr	r3, [r0, #20]
 8009e16:	429d      	cmp	r5, r3
 8009e18:	d015      	beq.n	8009e46 <chk_lock+0x6a>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009e1a:	b96c      	cbnz	r4, 8009e38 <chk_lock+0x5c>
 8009e1c:	2902      	cmp	r1, #2
 8009e1e:	bf0c      	ite	eq
 8009e20:	2000      	moveq	r0, #0
 8009e22:	2012      	movne	r0, #18
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 8009e24:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009e26:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8009e2a:	899b      	ldrh	r3, [r3, #12]
 8009e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e30:	bf14      	ite	ne
 8009e32:	2000      	movne	r0, #0
 8009e34:	2010      	moveq	r0, #16
 8009e36:	e7f5      	b.n	8009e24 <chk_lock+0x48>
 8009e38:	2000      	movs	r0, #0
 8009e3a:	e7f3      	b.n	8009e24 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009e3c:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009e3e:	2900      	cmp	r1, #0
 8009e40:	d0f1      	beq.n	8009e26 <chk_lock+0x4a>
 8009e42:	2010      	movs	r0, #16
 8009e44:	e7ee      	b.n	8009e24 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009e46:	2301      	movs	r3, #1
 8009e48:	e7f9      	b.n	8009e3e <chk_lock+0x62>
 8009e4a:	bf00      	nop
 8009e4c:	2000dc98 	.word	0x2000dc98

08009e50 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8009e50:	4a1f      	ldr	r2, [pc, #124]	; (8009ed0 <inc_lock+0x80>)
{
 8009e52:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
 8009e54:	6813      	ldr	r3, [r2, #0]
 8009e56:	6806      	ldr	r6, [r0, #0]
 8009e58:	429e      	cmp	r6, r3
 8009e5a:	d107      	bne.n	8009e6c <inc_lock+0x1c>
 8009e5c:	6855      	ldr	r5, [r2, #4]
 8009e5e:	6884      	ldr	r4, [r0, #8]
 8009e60:	42a5      	cmp	r5, r4
 8009e62:	d103      	bne.n	8009e6c <inc_lock+0x1c>
			Files[i].clu == dp->obj.sclust &&
 8009e64:	6945      	ldr	r5, [r0, #20]
 8009e66:	6894      	ldr	r4, [r2, #8]
 8009e68:	42a5      	cmp	r5, r4
 8009e6a:	d022      	beq.n	8009eb2 <inc_lock+0x62>
		if (Files[i].fs == dp->obj.fs &&
 8009e6c:	6914      	ldr	r4, [r2, #16]
 8009e6e:	42b4      	cmp	r4, r6
 8009e70:	d107      	bne.n	8009e82 <inc_lock+0x32>
 8009e72:	6957      	ldr	r7, [r2, #20]
 8009e74:	6885      	ldr	r5, [r0, #8]
 8009e76:	42af      	cmp	r7, r5
 8009e78:	d103      	bne.n	8009e82 <inc_lock+0x32>
			Files[i].clu == dp->obj.sclust &&
 8009e7a:	6997      	ldr	r7, [r2, #24]
 8009e7c:	6945      	ldr	r5, [r0, #20]
 8009e7e:	42af      	cmp	r7, r5
 8009e80:	d021      	beq.n	8009ec6 <inc_lock+0x76>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009e82:	b10b      	cbz	r3, 8009e88 <inc_lock+0x38>
 8009e84:	bb0c      	cbnz	r4, 8009eca <inc_lock+0x7a>
 8009e86:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8009e88:	011d      	lsls	r5, r3, #4
 8009e8a:	eb02 1403 	add.w	r4, r2, r3, lsl #4
 8009e8e:	5156      	str	r6, [r2, r5]
		Files[i].clu = dp->obj.sclust;
 8009e90:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
 8009e92:	6940      	ldr	r0, [r0, #20]
		Files[i].clu = dp->obj.sclust;
 8009e94:	6065      	str	r5, [r4, #4]
		Files[i].ofs = dp->dptr;
 8009e96:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
 8009e98:	2000      	movs	r0, #0
 8009e9a:	81a0      	strh	r0, [r4, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009e9c:	b981      	cbnz	r1, 8009ec0 <inc_lock+0x70>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009e9e:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 8009ea2:	8989      	ldrh	r1, [r1, #12]
 8009ea4:	3101      	adds	r1, #1
 8009ea6:	b289      	uxth	r1, r1
 8009ea8:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
 8009eac:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009eae:	8191      	strh	r1, [r2, #12]
}
 8009eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009eb2:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009eb4:	2900      	cmp	r1, #0
 8009eb6:	d0f2      	beq.n	8009e9e <inc_lock+0x4e>
 8009eb8:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 8009ebc:	8989      	ldrh	r1, [r1, #12]
 8009ebe:	b921      	cbnz	r1, 8009eca <inc_lock+0x7a>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009ec0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009ec4:	e7f0      	b.n	8009ea8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e7f4      	b.n	8009eb4 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009eca:	2000      	movs	r0, #0
 8009ecc:	e7f0      	b.n	8009eb0 <inc_lock+0x60>
 8009ece:	bf00      	nop
 8009ed0:	2000dc98 	.word	0x2000dc98

08009ed4 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009ed4:	3801      	subs	r0, #1
 8009ed6:	2801      	cmp	r0, #1
 8009ed8:	d815      	bhi.n	8009f06 <dec_lock+0x32>
		n = Files[i].ctr;
 8009eda:	4a0c      	ldr	r2, [pc, #48]	; (8009f0c <dec_lock+0x38>)
 8009edc:	0101      	lsls	r1, r0, #4
 8009ede:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8009ee2:	8983      	ldrh	r3, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ee8:	d104      	bne.n	8009ef4 <dec_lock+0x20>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
 8009eea:	2300      	movs	r3, #0
 8009eec:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009eee:	2000      	movs	r0, #0
 8009ef0:	5050      	str	r0, [r2, r1]
 8009ef2:	4770      	bx	lr
		if (n > 0) n--;				/* Decrement read mode open count */
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d0fa      	beq.n	8009eee <dec_lock+0x1a>
 8009ef8:	3b01      	subs	r3, #1
 8009efa:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 8009efc:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d0f5      	beq.n	8009eee <dec_lock+0x1a>
		res = FR_OK;
 8009f02:	2000      	movs	r0, #0
 8009f04:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009f06:	2002      	movs	r0, #2
	}
	return res;
}
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop
 8009f0c:	2000dc98 	.word	0x2000dc98

08009f10 <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009f10:	4b05      	ldr	r3, [pc, #20]	; (8009f28 <clear_lock+0x18>)
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	4290      	cmp	r0, r2
 8009f16:	bf04      	itt	eq
 8009f18:	2200      	moveq	r2, #0
 8009f1a:	601a      	streq	r2, [r3, #0]
 8009f1c:	691a      	ldr	r2, [r3, #16]
 8009f1e:	4290      	cmp	r0, r2
 8009f20:	bf04      	itt	eq
 8009f22:	2200      	moveq	r2, #0
 8009f24:	611a      	streq	r2, [r3, #16]
	}
}
 8009f26:	4770      	bx	lr
 8009f28:	2000dc98 	.word	0x2000dc98

08009f2c <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009f2c:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
 8009f2e:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009f30:	3b02      	subs	r3, #2
 8009f32:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 8009f34:	bf83      	ittte	hi
 8009f36:	8943      	ldrhhi	r3, [r0, #10]
 8009f38:	6ac0      	ldrhi	r0, [r0, #44]	; 0x2c
 8009f3a:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009f3e:	2000      	movls	r0, #0
}
 8009f40:	4770      	bx	lr

08009f42 <clmt_clust>:
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009f42:	6802      	ldr	r2, [r0, #0]
 8009f44:	0a49      	lsrs	r1, r1, #9
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009f46:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009f48:	8952      	ldrh	r2, [r2, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009f4a:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009f4c:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009f50:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009f52:	b130      	cbz	r0, 8009f62 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8009f54:	4281      	cmp	r1, r0
 8009f56:	d302      	bcc.n	8009f5e <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 8009f58:	1a09      	subs	r1, r1, r0
 8009f5a:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009f5c:	e7f8      	b.n	8009f50 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 8009f5e:	6858      	ldr	r0, [r3, #4]
 8009f60:	4408      	add	r0, r1
}
 8009f62:	4770      	bx	lr

08009f64 <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 8009f64:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8009f68:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8009f6a:	76cb      	strb	r3, [r1, #27]
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
 8009f6c:	7803      	ldrb	r3, [r0, #0]
 8009f6e:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009f70:	bf01      	itttt	eq
 8009f72:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8009f74:	750a      	strbeq	r2, [r1, #20]
 8009f76:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8009f78:	754a      	strbeq	r2, [r1, #21]
	}
}
 8009f7a:	4770      	bx	lr

08009f7c <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009f7c:	6802      	ldr	r2, [r0, #0]
{
 8009f7e:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8009f80:	b152      	cbz	r2, 8009f98 <get_ldnumber+0x1c>
 8009f82:	4611      	mov	r1, r2
 8009f84:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009f86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f8a:	2c20      	cmp	r4, #32
 8009f8c:	d90c      	bls.n	8009fa8 <get_ldnumber+0x2c>
 8009f8e:	2c3a      	cmp	r4, #58	; 0x3a
 8009f90:	d1f8      	bne.n	8009f84 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8009f92:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009f94:	428b      	cmp	r3, r1
 8009f96:	d002      	beq.n	8009f9e <get_ldnumber+0x22>
	int vol = -1;
 8009f98:	f04f 30ff 	mov.w	r0, #4294967295
 8009f9c:	e005      	b.n	8009faa <get_ldnumber+0x2e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009f9e:	7812      	ldrb	r2, [r2, #0]
 8009fa0:	2a30      	cmp	r2, #48	; 0x30
 8009fa2:	d1f9      	bne.n	8009f98 <get_ldnumber+0x1c>
					vol = (int)i;
					*path = ++tt;
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009fa8:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8009faa:	bd10      	pop	{r4, pc}

08009fac <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009fac:	3801      	subs	r0, #1
 8009fae:	440a      	add	r2, r1
			*d++ = *s++;
 8009fb0:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 8009fb4:	4291      	cmp	r1, r2
			*d++ = *s++;
 8009fb6:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8009fba:	d1f9      	bne.n	8009fb0 <mem_cpy.part.0+0x4>
}
 8009fbc:	4770      	bx	lr

08009fbe <sync_window.part.0>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8009fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		wsect = fs->winsect;	/* Current sector number */
 8009fc2:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009fc4:	f100 0834 	add.w	r8, r0, #52	; 0x34
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8009fc8:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009fca:	2301      	movs	r3, #1
 8009fcc:	4632      	mov	r2, r6
 8009fce:	4641      	mov	r1, r8
 8009fd0:	7840      	ldrb	r0, [r0, #1]
 8009fd2:	f7ff fed7 	bl	8009d84 <disk_write>
 8009fd6:	4605      	mov	r5, r0
 8009fd8:	b9a8      	cbnz	r0, 800a006 <sync_window.part.0+0x48>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009fda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fdc:	69e2      	ldr	r2, [r4, #28]
 8009fde:	1af3      	subs	r3, r6, r3
			fs->wflag = 0;
 8009fe0:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d202      	bcs.n	8009fec <sync_window.part.0+0x2e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009fe6:	78a7      	ldrb	r7, [r4, #2]
 8009fe8:	2f01      	cmp	r7, #1
 8009fea:	d802      	bhi.n	8009ff2 <sync_window.part.0+0x34>
}
 8009fec:	4628      	mov	r0, r5
 8009fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					wsect += fs->fsize;
 8009ff2:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009ff4:	4641      	mov	r1, r8
 8009ff6:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009ff8:	3f01      	subs	r7, #1
					wsect += fs->fsize;
 8009ffa:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	4632      	mov	r2, r6
 800a000:	f7ff fec0 	bl	8009d84 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a004:	e7f0      	b.n	8009fe8 <sync_window.part.0+0x2a>
			res = FR_DISK_ERR;
 800a006:	2501      	movs	r5, #1
 800a008:	e7f0      	b.n	8009fec <sync_window.part.0+0x2e>

0800a00a <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a00a:	78c3      	ldrb	r3, [r0, #3]
 800a00c:	b10b      	cbz	r3, 800a012 <sync_window+0x8>
 800a00e:	f7ff bfd6 	b.w	8009fbe <sync_window.part.0>
}
 800a012:	4618      	mov	r0, r3
 800a014:	4770      	bx	lr

0800a016 <move_window>:
{
 800a016:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a018:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 800a01a:	4605      	mov	r5, r0
 800a01c:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a01e:	428b      	cmp	r3, r1
 800a020:	d010      	beq.n	800a044 <move_window+0x2e>
		res = sync_window(fs);		/* Write-back changes */
 800a022:	f7ff fff2 	bl	800a00a <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a026:	b960      	cbnz	r0, 800a042 <move_window+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a028:	4622      	mov	r2, r4
 800a02a:	2301      	movs	r3, #1
 800a02c:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800a030:	7868      	ldrb	r0, [r5, #1]
 800a032:	f7ff fe99 	bl	8009d68 <disk_read>
				res = FR_DISK_ERR;
 800a036:	2800      	cmp	r0, #0
 800a038:	bf1c      	itt	ne
 800a03a:	f04f 34ff 	movne.w	r4, #4294967295
 800a03e:	2001      	movne	r0, #1
			fs->winsect = sector;
 800a040:	632c      	str	r4, [r5, #48]	; 0x30
}
 800a042:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 800a044:	2000      	movs	r0, #0
 800a046:	e7fc      	b.n	800a042 <move_window+0x2c>

0800a048 <check_fs>:
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a048:	2300      	movs	r3, #0
{
 800a04a:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a04c:	70c3      	strb	r3, [r0, #3]
 800a04e:	f04f 33ff 	mov.w	r3, #4294967295
{
 800a052:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a054:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a056:	f7ff ffde 	bl	800a016 <move_window>
 800a05a:	4603      	mov	r3, r0
 800a05c:	bb18      	cbnz	r0, 800a0a6 <check_fs+0x5e>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a05e:	f8b4 1232 	ldrh.w	r1, [r4, #562]	; 0x232
 800a062:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800a066:	4291      	cmp	r1, r2
 800a068:	d11f      	bne.n	800a0aa <check_fs+0x62>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a06a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800a06e:	2ae9      	cmp	r2, #233	; 0xe9
 800a070:	d005      	beq.n	800a07e <check_fs+0x36>
 800a072:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a074:	490f      	ldr	r1, [pc, #60]	; (800a0b4 <check_fs+0x6c>)
 800a076:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 800a07a:	428a      	cmp	r2, r1
 800a07c:	d117      	bne.n	800a0ae <check_fs+0x66>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a07e:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 800a082:	4a0d      	ldr	r2, [pc, #52]	; (800a0b8 <check_fs+0x70>)
 800a084:	f7ff fe9a 	bl	8009dbc <ld_dword>
 800a088:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800a08c:	4290      	cmp	r0, r2
 800a08e:	d008      	beq.n	800a0a2 <check_fs+0x5a>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a090:	f102 524c 	add.w	r2, r2, #855638016	; 0x33000000
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a094:	f104 0086 	add.w	r0, r4, #134	; 0x86
 800a098:	f7ff fe90 	bl	8009dbc <ld_dword>
	return 2;
 800a09c:	4290      	cmp	r0, r2
 800a09e:	bf18      	it	ne
 800a0a0:	2302      	movne	r3, #2
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a0a6:	2304      	movs	r3, #4
 800a0a8:	e7fb      	b.n	800a0a2 <check_fs+0x5a>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a0aa:	2303      	movs	r3, #3
 800a0ac:	e7f9      	b.n	800a0a2 <check_fs+0x5a>
	return 2;
 800a0ae:	2302      	movs	r3, #2
 800a0b0:	e7f7      	b.n	800a0a2 <check_fs+0x5a>
 800a0b2:	bf00      	nop
 800a0b4:	009000eb 	.word	0x009000eb
 800a0b8:	00544146 	.word	0x00544146

0800a0bc <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a0bc:	2901      	cmp	r1, #1
{
 800a0be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0c2:	4606      	mov	r6, r0
 800a0c4:	460c      	mov	r4, r1
 800a0c6:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a0c8:	d974      	bls.n	800a1b4 <put_fat+0xf8>
 800a0ca:	6983      	ldr	r3, [r0, #24]
 800a0cc:	428b      	cmp	r3, r1
 800a0ce:	d971      	bls.n	800a1b4 <put_fat+0xf8>
		switch (fs->fs_type) {
 800a0d0:	7803      	ldrb	r3, [r0, #0]
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d040      	beq.n	800a158 <put_fat+0x9c>
 800a0d6:	2b03      	cmp	r3, #3
 800a0d8:	d051      	beq.n	800a17e <put_fat+0xc2>
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d16a      	bne.n	800a1b4 <put_fat+0xf8>
			bc = (UINT)clst; bc += bc / 2;
 800a0de:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a0e2:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800a0e4:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800a0e8:	f7ff ff95 	bl	800a016 <move_window>
 800a0ec:	4605      	mov	r5, r0
			if (res != FR_OK) break;
 800a0ee:	bb40      	cbnz	r0, 800a142 <put_fat+0x86>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a0f0:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
 800a0f4:	f106 0934 	add.w	r9, r6, #52	; 0x34
 800a0f8:	f108 0a01 	add.w	sl, r8, #1
 800a0fc:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a100:	bf08      	it	eq
 800a102:	b2fb      	uxtbeq	r3, r7
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a104:	4630      	mov	r0, r6
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a106:	bf1f      	itttt	ne
 800a108:	f819 3008 	ldrbne.w	r3, [r9, r8]
 800a10c:	f003 020f 	andne.w	r2, r3, #15
 800a110:	013b      	lslne	r3, r7, #4
 800a112:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 800a116:	bf18      	it	ne
 800a118:	4313      	orrne	r3, r2
 800a11a:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 800a11e:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a120:	6a71      	ldr	r1, [r6, #36]	; 0x24
			fs->wflag = 1;
 800a122:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a124:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800a128:	f7ff ff75 	bl	800a016 <move_window>
			if (res != FR_OK) break;
 800a12c:	4605      	mov	r5, r0
 800a12e:	b940      	cbnz	r0, 800a142 <put_fat+0x86>
			p = fs->win + bc % SS(fs);
 800a130:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a134:	b144      	cbz	r4, 800a148 <put_fat+0x8c>
 800a136:	f3c7 1707 	ubfx	r7, r7, #4, #8
 800a13a:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 800a13e:	2301      	movs	r3, #1
 800a140:	70f3      	strb	r3, [r6, #3]
}
 800a142:	4628      	mov	r0, r5
 800a144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a148:	f819 300a 	ldrb.w	r3, [r9, sl]
 800a14c:	f3c7 2703 	ubfx	r7, r7, #8, #4
 800a150:	f023 030f 	bic.w	r3, r3, #15
 800a154:	431f      	orrs	r7, r3
 800a156:	e7f0      	b.n	800a13a <put_fat+0x7e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a158:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800a15a:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800a15e:	f7ff ff5a 	bl	800a016 <move_window>
			if (res != FR_OK) break;
 800a162:	4605      	mov	r5, r0
 800a164:	2800      	cmp	r0, #0
 800a166:	d1ec      	bne.n	800a142 <put_fat+0x86>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a168:	0064      	lsls	r4, r4, #1
 800a16a:	f106 0334 	add.w	r3, r6, #52	; 0x34
 800a16e:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800a172:	551f      	strb	r7, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a174:	1918      	adds	r0, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800a176:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 800a17a:	7047      	strb	r7, [r0, #1]
			fs->wflag = 1;
 800a17c:	e7df      	b.n	800a13e <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a17e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800a180:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800a184:	f7ff ff47 	bl	800a016 <move_window>
			if (res != FR_OK) break;
 800a188:	4605      	mov	r5, r0
 800a18a:	2800      	cmp	r0, #0
 800a18c:	d1d9      	bne.n	800a142 <put_fat+0x86>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a18e:	00a4      	lsls	r4, r4, #2
 800a190:	f106 0334 	add.w	r3, r6, #52	; 0x34
 800a194:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 800a198:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800a19c:	441c      	add	r4, r3
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f7ff fe0c 	bl	8009dbc <ld_dword>
 800a1a4:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a1a8:	ea47 0100 	orr.w	r1, r7, r0
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	f7ff fe07 	bl	8009dc0 <st_dword>
 800a1b2:	e7c4      	b.n	800a13e <put_fat+0x82>
		switch (fs->fs_type) {
 800a1b4:	2502      	movs	r5, #2
 800a1b6:	e7c4      	b.n	800a142 <put_fat+0x86>

0800a1b8 <unlock_fs>:
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800a1b8:	b140      	cbz	r0, 800a1cc <unlock_fs+0x14>
 800a1ba:	f1a1 030b 	sub.w	r3, r1, #11
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d904      	bls.n	800a1cc <unlock_fs+0x14>
 800a1c2:	290f      	cmp	r1, #15
 800a1c4:	d002      	beq.n	800a1cc <unlock_fs+0x14>
		ff_rel_grant(fs->sobj);
 800a1c6:	68c0      	ldr	r0, [r0, #12]
 800a1c8:	f000 bedd 	b.w	800af86 <ff_rel_grant>
}
 800a1cc:	4770      	bx	lr

0800a1ce <sync_fs>:
{
 800a1ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d0:	4604      	mov	r4, r0
	res = sync_window(fs);
 800a1d2:	f7ff ff1a 	bl	800a00a <sync_window>
 800a1d6:	4605      	mov	r5, r0
	if (res == FR_OK) {
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	d142      	bne.n	800a262 <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a1dc:	7823      	ldrb	r3, [r4, #0]
 800a1de:	2b03      	cmp	r3, #3
 800a1e0:	d137      	bne.n	800a252 <sync_fs+0x84>
 800a1e2:	7927      	ldrb	r7, [r4, #4]
 800a1e4:	2f01      	cmp	r7, #1
 800a1e6:	d134      	bne.n	800a252 <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 800a1e8:	f104 0634 	add.w	r6, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 800a1ec:	2355      	movs	r3, #85	; 0x55
			mem_set(fs->win, 0, SS(fs));
 800a1ee:	4601      	mov	r1, r0
 800a1f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1f4:	4630      	mov	r0, r6
 800a1f6:	f7ff fdeb 	bl	8009dd0 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 800a1fa:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
 800a1fe:	23aa      	movs	r3, #170	; 0xaa
	*ptr++ = (BYTE)val;
 800a200:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 800a202:	2172      	movs	r1, #114	; 0x72
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a204:	f504 7007 	add.w	r0, r4, #540	; 0x21c
	*ptr++ = (BYTE)val;
 800a208:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 800a20c:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 800a20e:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
	*ptr++ = (BYTE)val; val >>= 8;
 800a212:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 800a216:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 800a21a:	2361      	movs	r3, #97	; 0x61
	*ptr++ = (BYTE)val; val >>= 8;
 800a21c:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
	*ptr++ = (BYTE)val; val >>= 8;
 800a220:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
 800a224:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
	*ptr++ = (BYTE)val; val >>= 8;
 800a228:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
	*ptr++ = (BYTE)val; val >>= 8;
 800a22c:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a230:	6961      	ldr	r1, [r4, #20]
 800a232:	f7ff fdc5 	bl	8009dc0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a236:	6921      	ldr	r1, [r4, #16]
 800a238:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800a23c:	f7ff fdc0 	bl	8009dc0 <st_dword>
			fs->winsect = fs->volbase + 1;
 800a240:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a242:	463b      	mov	r3, r7
 800a244:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
 800a246:	3201      	adds	r2, #1
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a248:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 800a24a:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a24c:	f7ff fd9a 	bl	8009d84 <disk_write>
			fs->fsi_flag = 0;
 800a250:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a252:	2200      	movs	r2, #0
 800a254:	7860      	ldrb	r0, [r4, #1]
 800a256:	4611      	mov	r1, r2
 800a258:	f7ff fda2 	bl	8009da0 <disk_ioctl>
	res = sync_window(fs);
 800a25c:	3800      	subs	r0, #0
 800a25e:	bf18      	it	ne
 800a260:	2001      	movne	r0, #1
}
 800a262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a264 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a264:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a268:	2300      	movs	r3, #0
{
 800a26a:	460f      	mov	r7, r1
 800a26c:	4615      	mov	r5, r2
	*rfs = 0;
 800a26e:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 800a270:	f7ff fe84 	bl	8009f7c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800a274:	1e06      	subs	r6, r0, #0
 800a276:	f2c0 811a 	blt.w	800a4ae <find_volume+0x24a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a27a:	4b91      	ldr	r3, [pc, #580]	; (800a4c0 <find_volume+0x25c>)
 800a27c:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a280:	2c00      	cmp	r4, #0
 800a282:	f000 8116 	beq.w	800a4b2 <find_volume+0x24e>
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800a286:	68e0      	ldr	r0, [r4, #12]
 800a288:	f000 fe74 	bl	800af74 <ff_req_grant>
 800a28c:	2800      	cmp	r0, #0
 800a28e:	f000 8112 	beq.w	800a4b6 <find_volume+0x252>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a292:	603c      	str	r4, [r7, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a294:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a298:	7823      	ldrb	r3, [r4, #0]
 800a29a:	b16b      	cbz	r3, 800a2b8 <find_volume+0x54>
		stat = disk_status(fs->drv);
 800a29c:	7860      	ldrb	r0, [r4, #1]
 800a29e:	f7ff fd49 	bl	8009d34 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a2a2:	07c1      	lsls	r1, r0, #31
 800a2a4:	d408      	bmi.n	800a2b8 <find_volume+0x54>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a2a6:	b11d      	cbz	r5, 800a2b0 <find_volume+0x4c>
 800a2a8:	f010 0504 	ands.w	r5, r0, #4
 800a2ac:	d000      	beq.n	800a2b0 <find_volume+0x4c>
				return FR_WRITE_PROTECTED;
 800a2ae:	250a      	movs	r5, #10
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	b004      	add	sp, #16
 800a2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800a2b8:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a2ba:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 800a2bc:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a2be:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a2c0:	f7ff fd42 	bl	8009d48 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a2c4:	07c2      	lsls	r2, r0, #31
 800a2c6:	f100 80f8 	bmi.w	800a4ba <find_volume+0x256>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a2ca:	b10d      	cbz	r5, 800a2d0 <find_volume+0x6c>
 800a2cc:	0743      	lsls	r3, r0, #29
 800a2ce:	d4ee      	bmi.n	800a2ae <find_volume+0x4a>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a2d0:	2100      	movs	r1, #0
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	f7ff feb8 	bl	800a048 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a2d8:	2802      	cmp	r0, #2
 800a2da:	f040 80cd 	bne.w	800a478 <find_volume+0x214>
 800a2de:	466f      	mov	r7, sp
 800a2e0:	f504 73fd 	add.w	r3, r4, #506	; 0x1fa
 800a2e4:	f204 213a 	addw	r1, r4, #570	; 0x23a
 800a2e8:	463a      	mov	r2, r7
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a2ea:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 800a2ee:	b110      	cbz	r0, 800a2f6 <find_volume+0x92>
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7ff fd63 	bl	8009dbc <ld_dword>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a2f6:	3310      	adds	r3, #16
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a2f8:	f842 0b04 	str.w	r0, [r2], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a2fc:	428b      	cmp	r3, r1
 800a2fe:	d1f4      	bne.n	800a2ea <find_volume+0x86>
 800a300:	2500      	movs	r5, #0
			bsect = br[i];
 800a302:	f857 6b04 	ldr.w	r6, [r7], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a306:	2e00      	cmp	r6, #0
 800a308:	f000 80ad 	beq.w	800a466 <find_volume+0x202>
 800a30c:	4631      	mov	r1, r6
 800a30e:	4620      	mov	r0, r4
 800a310:	f7ff fe9a 	bl	800a048 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a314:	2801      	cmp	r0, #1
 800a316:	f200 80a7 	bhi.w	800a468 <find_volume+0x204>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a31a:	f8b4 303f 	ldrh.w	r3, [r4, #63]	; 0x3f
 800a31e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a322:	f040 80ad 	bne.w	800a480 <find_volume+0x21c>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a326:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a32a:	b921      	cbnz	r1, 800a336 <find_volume+0xd2>
 800a32c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a330:	f7ff fd44 	bl	8009dbc <ld_dword>
 800a334:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a336:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
		fs->fsize = fasize;
 800a33a:	61e1      	str	r1, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a33c:	1e53      	subs	r3, r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a33e:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a340:	2b01      	cmp	r3, #1
 800a342:	f200 809d 	bhi.w	800a480 <find_volume+0x21c>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a346:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
 800a34a:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a34c:	2d00      	cmp	r5, #0
 800a34e:	f000 8097 	beq.w	800a480 <find_volume+0x21c>
 800a352:	1e6b      	subs	r3, r5, #1
 800a354:	422b      	tst	r3, r5
 800a356:	f040 8093 	bne.w	800a480 <find_volume+0x21c>
	rv = ptr[1];
 800a35a:	f8b4 8045 	ldrh.w	r8, [r4, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a35e:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a362:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a366:	f040 808b 	bne.w	800a480 <find_volume+0x21c>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a36a:	f8b4 0047 	ldrh.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a36e:	b918      	cbnz	r0, 800a378 <find_volume+0x114>
 800a370:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800a374:	f7ff fd22 	bl	8009dbc <ld_dword>
	rv = ptr[1];
 800a378:	f8b4 7042 	ldrh.w	r7, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a37c:	2f00      	cmp	r7, #0
 800a37e:	d07f      	beq.n	800a480 <find_volume+0x21c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a380:	fb01 fc02 	mul.w	ip, r1, r2
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a384:	eb07 1218 	add.w	r2, r7, r8, lsr #4
 800a388:	eb02 0e0c 	add.w	lr, r2, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a38c:	4570      	cmp	r0, lr
 800a38e:	d377      	bcc.n	800a480 <find_volume+0x21c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a390:	eba0 020e 	sub.w	r2, r0, lr
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a394:	42aa      	cmp	r2, r5
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a396:	fbb2 f3f5 	udiv	r3, r2, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a39a:	d371      	bcc.n	800a480 <find_volume+0x21c>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a39c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d871      	bhi.n	800a488 <find_volume+0x224>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a3a4:	f640 75f5 	movw	r5, #4085	; 0xff5
 800a3a8:	42ab      	cmp	r3, r5
 800a3aa:	bf8c      	ite	hi
 800a3ac:	2502      	movhi	r5, #2
 800a3ae:	2501      	movls	r5, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a3b0:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a3b2:	4437      	add	r7, r6
		fs->database = bsect + sysect;					/* Data start sector */
 800a3b4:	eb0e 0206 	add.w	r2, lr, r6
		if (fmt == FS_FAT32) {
 800a3b8:	2d03      	cmp	r5, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a3ba:	61a3      	str	r3, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a3bc:	6226      	str	r6, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a3be:	6267      	str	r7, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a3c0:	62e2      	str	r2, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a3c2:	d163      	bne.n	800a48c <find_volume+0x228>
	rv = rv << 8 | ptr[0];
 800a3c4:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a3c8:	ea52 0208 	orrs.w	r2, r2, r8
 800a3cc:	d158      	bne.n	800a480 <find_volume+0x21c>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a3ce:	009b      	lsls	r3, r3, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a3d0:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800a3d4:	f7ff fcf2 	bl	8009dbc <ld_dword>
 800a3d8:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a3da:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a3de:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 800a3e2:	d34d      	bcc.n	800a480 <find_volume+0x21c>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a3e4:	f04f 33ff 	mov.w	r3, #4294967295
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a3e8:	2d03      	cmp	r5, #3
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a3ea:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
 800a3ee:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a3f2:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a3f4:	d12b      	bne.n	800a44e <find_volume+0x1ea>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a3f6:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d127      	bne.n	800a44e <find_volume+0x1ea>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a3fe:	1c71      	adds	r1, r6, #1
 800a400:	4620      	mov	r0, r4
 800a402:	f7ff fe08 	bl	800a016 <move_window>
 800a406:	bb10      	cbnz	r0, 800a44e <find_volume+0x1ea>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a408:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
 800a40c:	f64a 2355 	movw	r3, #43605	; 0xaa55
			fs->fsi_flag = 0;
 800a410:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a412:	429a      	cmp	r2, r3
 800a414:	d11b      	bne.n	800a44e <find_volume+0x1ea>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a416:	4b2b      	ldr	r3, [pc, #172]	; (800a4c4 <find_volume+0x260>)
 800a418:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800a41c:	f7ff fcce 	bl	8009dbc <ld_dword>
 800a420:	4298      	cmp	r0, r3
 800a422:	d114      	bne.n	800a44e <find_volume+0x1ea>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a424:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 800a428:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800a42c:	f7ff fcc6 	bl	8009dbc <ld_dword>
 800a430:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a434:	3320      	adds	r3, #32
 800a436:	4298      	cmp	r0, r3
 800a438:	d109      	bne.n	800a44e <find_volume+0x1ea>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a43a:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800a43e:	f7ff fcbd 	bl	8009dbc <ld_dword>
 800a442:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a444:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800a448:	f7ff fcb8 	bl	8009dbc <ld_dword>
 800a44c:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 800a44e:	4a1e      	ldr	r2, [pc, #120]	; (800a4c8 <find_volume+0x264>)
	clear_lock(fs);
 800a450:	4620      	mov	r0, r4
	fs->fs_type = fmt;		/* FAT sub-type */
 800a452:	7025      	strb	r5, [r4, #0]
	return FR_OK;
 800a454:	2500      	movs	r5, #0
	fs->id = ++Fsid;		/* File system mount ID */
 800a456:	8813      	ldrh	r3, [r2, #0]
 800a458:	3301      	adds	r3, #1
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	80e3      	strh	r3, [r4, #6]
 800a45e:	8013      	strh	r3, [r2, #0]
	clear_lock(fs);
 800a460:	f7ff fd56 	bl	8009f10 <clear_lock>
	return FR_OK;
 800a464:	e724      	b.n	800a2b0 <find_volume+0x4c>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a466:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a468:	3501      	adds	r5, #1
 800a46a:	2d04      	cmp	r5, #4
 800a46c:	f47f af49 	bne.w	800a302 <find_volume+0x9e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a470:	2804      	cmp	r0, #4
 800a472:	d105      	bne.n	800a480 <find_volume+0x21c>
 800a474:	2501      	movs	r5, #1
 800a476:	e71b      	b.n	800a2b0 <find_volume+0x4c>
 800a478:	2804      	cmp	r0, #4
 800a47a:	d0fb      	beq.n	800a474 <find_volume+0x210>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a47c:	2801      	cmp	r0, #1
 800a47e:	d901      	bls.n	800a484 <find_volume+0x220>
 800a480:	250d      	movs	r5, #13
 800a482:	e715      	b.n	800a2b0 <find_volume+0x4c>
	bsect = 0;
 800a484:	2600      	movs	r6, #0
 800a486:	e748      	b.n	800a31a <find_volume+0xb6>
		fmt = FS_FAT32;
 800a488:	2503      	movs	r5, #3
 800a48a:	e791      	b.n	800a3b0 <find_volume+0x14c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a48c:	f1b8 0f00 	cmp.w	r8, #0
 800a490:	d0f6      	beq.n	800a480 <find_volume+0x21c>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a492:	2d02      	cmp	r5, #2
 800a494:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a498:	4467      	add	r7, ip
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a49a:	bf1a      	itte	ne
 800a49c:	18d2      	addne	r2, r2, r3
 800a49e:	f003 0301 	andne.w	r3, r3, #1
 800a4a2:	4613      	moveq	r3, r2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a4a4:	62a7      	str	r7, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a4a6:	bf18      	it	ne
 800a4a8:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 800a4ac:	e795      	b.n	800a3da <find_volume+0x176>
	if (vol < 0) return FR_INVALID_DRIVE;
 800a4ae:	250b      	movs	r5, #11
 800a4b0:	e6fe      	b.n	800a2b0 <find_volume+0x4c>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a4b2:	250c      	movs	r5, #12
 800a4b4:	e6fc      	b.n	800a2b0 <find_volume+0x4c>
	ENTER_FF(fs);						/* Lock the volume */
 800a4b6:	250f      	movs	r5, #15
 800a4b8:	e6fa      	b.n	800a2b0 <find_volume+0x4c>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a4ba:	2503      	movs	r5, #3
 800a4bc:	e6f8      	b.n	800a2b0 <find_volume+0x4c>
 800a4be:	bf00      	nop
 800a4c0:	2000dc94 	.word	0x2000dc94
 800a4c4:	41615252 	.word	0x41615252
 800a4c8:	2000dcb8 	.word	0x2000dcb8

0800a4cc <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
 800a4cc:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800a4ce:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a4d0:	bf04      	itt	eq
 800a4d2:	8a8a      	ldrheq	r2, [r1, #20]
 800a4d4:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	4770      	bx	lr

0800a4dc <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a4dc:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800a4de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4e0:	4606      	mov	r6, r0
 800a4e2:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a4e4:	d94e      	bls.n	800a584 <get_fat.isra.0+0xa8>
 800a4e6:	6983      	ldr	r3, [r0, #24]
 800a4e8:	4299      	cmp	r1, r3
 800a4ea:	d24b      	bcs.n	800a584 <get_fat.isra.0+0xa8>
		switch (fs->fs_type) {
 800a4ec:	7803      	ldrb	r3, [r0, #0]
 800a4ee:	2b02      	cmp	r3, #2
 800a4f0:	d029      	beq.n	800a546 <get_fat.isra.0+0x6a>
 800a4f2:	2b03      	cmp	r3, #3
 800a4f4:	d034      	beq.n	800a560 <get_fat.isra.0+0x84>
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d144      	bne.n	800a584 <get_fat.isra.0+0xa8>
			bc = (UINT)clst; bc += bc / 2;
 800a4fa:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a4fe:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800a500:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 800a504:	f7ff fd87 	bl	800a016 <move_window>
 800a508:	b110      	cbz	r0, 800a510 <get_fat.isra.0+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a50a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a50e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 800a510:	1c6f      	adds	r7, r5, #1
 800a512:	f3c5 0508 	ubfx	r5, r5, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a516:	6a71      	ldr	r1, [r6, #36]	; 0x24
 800a518:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];
 800a51a:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a51c:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800a520:	f895 5034 	ldrb.w	r5, [r5, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a524:	f7ff fd77 	bl	800a016 <move_window>
 800a528:	2800      	cmp	r0, #0
 800a52a:	d1ee      	bne.n	800a50a <get_fat.isra.0+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a52c:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a530:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800a532:	443e      	add	r6, r7
 800a534:	f896 0034 	ldrb.w	r0, [r6, #52]	; 0x34
 800a538:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a53c:	bf4c      	ite	mi
 800a53e:	0900      	lsrmi	r0, r0, #4
 800a540:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 800a544:	e7e3      	b.n	800a50e <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a546:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800a548:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800a54c:	f7ff fd63 	bl	800a016 <move_window>
 800a550:	2800      	cmp	r0, #0
 800a552:	d1da      	bne.n	800a50a <get_fat.isra.0+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a554:	0064      	lsls	r4, r4, #1
 800a556:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800a55a:	4426      	add	r6, r4
 800a55c:	8eb0      	ldrh	r0, [r6, #52]	; 0x34
			break;
 800a55e:	e7d6      	b.n	800a50e <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a560:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800a562:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800a566:	f7ff fd56 	bl	800a016 <move_window>
 800a56a:	2800      	cmp	r0, #0
 800a56c:	d1cd      	bne.n	800a50a <get_fat.isra.0+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a56e:	00a4      	lsls	r4, r4, #2
 800a570:	f106 0034 	add.w	r0, r6, #52	; 0x34
 800a574:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800a578:	4420      	add	r0, r4
 800a57a:	f7ff fc1f 	bl	8009dbc <ld_dword>
 800a57e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 800a582:	e7c4      	b.n	800a50e <get_fat.isra.0+0x32>
		switch (fs->fs_type) {
 800a584:	2001      	movs	r0, #1
	return val;
 800a586:	e7c2      	b.n	800a50e <get_fat.isra.0+0x32>

0800a588 <dir_sdi.constprop.0>:
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800a588:	b538      	push	{r3, r4, r5, lr}
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a58a:	6882      	ldr	r2, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
 800a58c:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800a58e:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800a590:	6805      	ldr	r5, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 800a592:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a594:	b99a      	cbnz	r2, 800a5be <dir_sdi.constprop.0+0x36>
 800a596:	782b      	ldrb	r3, [r5, #0]
 800a598:	2b02      	cmp	r3, #2
 800a59a:	d901      	bls.n	800a5a0 <dir_sdi.constprop.0+0x18>
		clst = fs->dirbase;
 800a59c:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a59e:	b96b      	cbnz	r3, 800a5bc <dir_sdi.constprop.0+0x34>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a5a0:	892b      	ldrh	r3, [r5, #8]
 800a5a2:	b90b      	cbnz	r3, 800a5a8 <dir_sdi.constprop.0+0x20>
 800a5a4:	2002      	movs	r0, #2
}
 800a5a6:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 800a5a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a5aa:	61e3      	str	r3, [r4, #28]
	if (!dp->sect) return FR_INT_ERR;
 800a5ac:	69e3      	ldr	r3, [r4, #28]
	dp->clust = clst;					/* Current cluster# */
 800a5ae:	61a2      	str	r2, [r4, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d0f7      	beq.n	800a5a4 <dir_sdi.constprop.0+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a5b4:	3534      	adds	r5, #52	; 0x34
	return FR_OK;
 800a5b6:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a5b8:	6225      	str	r5, [r4, #32]
	return FR_OK;
 800a5ba:	e7f4      	b.n	800a5a6 <dir_sdi.constprop.0+0x1e>
 800a5bc:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a5be:	896b      	ldrh	r3, [r5, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a5c0:	b963      	cbnz	r3, 800a5dc <dir_sdi.constprop.0+0x54>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a5c2:	4611      	mov	r1, r2
 800a5c4:	6820      	ldr	r0, [r4, #0]
 800a5c6:	f7ff ff89 	bl	800a4dc <get_fat.isra.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a5ca:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a5cc:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a5ce:	d00b      	beq.n	800a5e8 <dir_sdi.constprop.0+0x60>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a5d0:	2801      	cmp	r0, #1
 800a5d2:	d9e7      	bls.n	800a5a4 <dir_sdi.constprop.0+0x1c>
 800a5d4:	69ab      	ldr	r3, [r5, #24]
 800a5d6:	4298      	cmp	r0, r3
 800a5d8:	d3f3      	bcc.n	800a5c2 <dir_sdi.constprop.0+0x3a>
 800a5da:	e7e3      	b.n	800a5a4 <dir_sdi.constprop.0+0x1c>
		dp->sect = clust2sect(fs, clst);
 800a5dc:	4611      	mov	r1, r2
 800a5de:	4628      	mov	r0, r5
 800a5e0:	f7ff fca4 	bl	8009f2c <clust2sect>
 800a5e4:	61e0      	str	r0, [r4, #28]
 800a5e6:	e7e1      	b.n	800a5ac <dir_sdi.constprop.0+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a5e8:	2001      	movs	r0, #1
 800a5ea:	e7dc      	b.n	800a5a6 <dir_sdi.constprop.0+0x1e>

0800a5ec <remove_chain>:
{
 800a5ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5ee:	460c      	mov	r4, r1
 800a5f0:	4606      	mov	r6, r0
 800a5f2:	4611      	mov	r1, r2
	FATFS *fs = obj->fs;
 800a5f4:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a5f6:	2c01      	cmp	r4, #1
 800a5f8:	d92c      	bls.n	800a654 <remove_chain+0x68>
 800a5fa:	69ab      	ldr	r3, [r5, #24]
 800a5fc:	42a3      	cmp	r3, r4
 800a5fe:	d929      	bls.n	800a654 <remove_chain+0x68>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a600:	b12a      	cbz	r2, 800a60e <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a602:	f04f 32ff 	mov.w	r2, #4294967295
 800a606:	4628      	mov	r0, r5
 800a608:	f7ff fd58 	bl	800a0bc <put_fat>
		if (res != FR_OK) return res;
 800a60c:	b940      	cbnz	r0, 800a620 <remove_chain+0x34>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a60e:	4621      	mov	r1, r4
 800a610:	6830      	ldr	r0, [r6, #0]
 800a612:	9401      	str	r4, [sp, #4]
 800a614:	f7ff ff62 	bl	800a4dc <get_fat.isra.0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a618:	9901      	ldr	r1, [sp, #4]
 800a61a:	4604      	mov	r4, r0
 800a61c:	b910      	cbnz	r0, 800a624 <remove_chain+0x38>
	return FR_OK;
 800a61e:	2000      	movs	r0, #0
}
 800a620:	b002      	add	sp, #8
 800a622:	bd70      	pop	{r4, r5, r6, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a624:	2801      	cmp	r0, #1
 800a626:	d015      	beq.n	800a654 <remove_chain+0x68>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a628:	1c43      	adds	r3, r0, #1
 800a62a:	d015      	beq.n	800a658 <remove_chain+0x6c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a62c:	2200      	movs	r2, #0
 800a62e:	4628      	mov	r0, r5
 800a630:	f7ff fd44 	bl	800a0bc <put_fat>
			if (res != FR_OK) return res;
 800a634:	2800      	cmp	r0, #0
 800a636:	d1f3      	bne.n	800a620 <remove_chain+0x34>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a638:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 800a63c:	1e91      	subs	r1, r2, #2
 800a63e:	428b      	cmp	r3, r1
 800a640:	d205      	bcs.n	800a64e <remove_chain+0x62>
			fs->free_clst++;
 800a642:	3301      	adds	r3, #1
 800a644:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 800a646:	792b      	ldrb	r3, [r5, #4]
 800a648:	f043 0301 	orr.w	r3, r3, #1
 800a64c:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a64e:	42a2      	cmp	r2, r4
 800a650:	d8dd      	bhi.n	800a60e <remove_chain+0x22>
 800a652:	e7e4      	b.n	800a61e <remove_chain+0x32>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a654:	2002      	movs	r0, #2
 800a656:	e7e3      	b.n	800a620 <remove_chain+0x34>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a658:	2001      	movs	r0, #1
 800a65a:	e7e1      	b.n	800a620 <remove_chain+0x34>

0800a65c <create_chain>:
{
 800a65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a660:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 800a662:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800a664:	460f      	mov	r7, r1
 800a666:	b971      	cbnz	r1, 800a686 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a668:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a66a:	b1ee      	cbz	r6, 800a6a8 <create_chain+0x4c>
 800a66c:	69ab      	ldr	r3, [r5, #24]
 800a66e:	42b3      	cmp	r3, r6
 800a670:	bf98      	it	ls
 800a672:	2601      	movls	r6, #1
		ncl = scl;	/* Start cluster */
 800a674:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 800a676:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a678:	69ab      	ldr	r3, [r5, #24]
 800a67a:	42a3      	cmp	r3, r4
 800a67c:	d817      	bhi.n	800a6ae <create_chain+0x52>
				if (ncl > scl) return 0;	/* No free cluster */
 800a67e:	2e01      	cmp	r6, #1
 800a680:	d814      	bhi.n	800a6ac <create_chain+0x50>
 800a682:	2400      	movs	r4, #0
 800a684:	e006      	b.n	800a694 <create_chain+0x38>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a686:	4628      	mov	r0, r5
 800a688:	f7ff ff28 	bl	800a4dc <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a68c:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a68e:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a690:	d803      	bhi.n	800a69a <create_chain+0x3e>
 800a692:	2401      	movs	r4, #1
}
 800a694:	4620      	mov	r0, r4
 800a696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a69a:	1c43      	adds	r3, r0, #1
 800a69c:	d030      	beq.n	800a700 <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a69e:	69ab      	ldr	r3, [r5, #24]
 800a6a0:	4283      	cmp	r3, r0
 800a6a2:	d8f7      	bhi.n	800a694 <create_chain+0x38>
 800a6a4:	463e      	mov	r6, r7
 800a6a6:	e7e5      	b.n	800a674 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a6a8:	2601      	movs	r6, #1
 800a6aa:	e7e3      	b.n	800a674 <create_chain+0x18>
				ncl = 2;
 800a6ac:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a6ae:	4621      	mov	r1, r4
 800a6b0:	f8d8 0000 	ldr.w	r0, [r8]
 800a6b4:	f7ff ff12 	bl	800a4dc <get_fat.isra.0>
			if (cs == 0) break;				/* Found a free cluster */
 800a6b8:	b130      	cbz	r0, 800a6c8 <create_chain+0x6c>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a6ba:	2801      	cmp	r0, #1
 800a6bc:	d0e9      	beq.n	800a692 <create_chain+0x36>
 800a6be:	3001      	adds	r0, #1
 800a6c0:	d01e      	beq.n	800a700 <create_chain+0xa4>
			if (ncl == scl) return 0;		/* No free cluster */
 800a6c2:	42b4      	cmp	r4, r6
 800a6c4:	d1d7      	bne.n	800a676 <create_chain+0x1a>
 800a6c6:	e7dc      	b.n	800a682 <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a6c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a6cc:	4621      	mov	r1, r4
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	f7ff fcf4 	bl	800a0bc <put_fat>
		if (res == FR_OK && clst != 0) {
 800a6d4:	b990      	cbnz	r0, 800a6fc <create_chain+0xa0>
 800a6d6:	b957      	cbnz	r7, 800a6ee <create_chain+0x92>
		fs->last_clst = ncl;
 800a6d8:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a6da:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 800a6de:	3a02      	subs	r2, #2
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d910      	bls.n	800a706 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 800a6e4:	792b      	ldrb	r3, [r5, #4]
 800a6e6:	f043 0301 	orr.w	r3, r3, #1
 800a6ea:	712b      	strb	r3, [r5, #4]
 800a6ec:	e7d2      	b.n	800a694 <create_chain+0x38>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a6ee:	4622      	mov	r2, r4
 800a6f0:	4639      	mov	r1, r7
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	f7ff fce2 	bl	800a0bc <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	d0ed      	beq.n	800a6d8 <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a6fc:	2801      	cmp	r0, #1
 800a6fe:	d1c8      	bne.n	800a692 <create_chain+0x36>
 800a700:	f04f 34ff 	mov.w	r4, #4294967295
 800a704:	e7c6      	b.n	800a694 <create_chain+0x38>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a706:	3b01      	subs	r3, #1
 800a708:	616b      	str	r3, [r5, #20]
 800a70a:	e7eb      	b.n	800a6e4 <create_chain+0x88>

0800a70c <dir_next>:
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a70c:	6943      	ldr	r3, [r0, #20]
{
 800a70e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a712:	f103 0820 	add.w	r8, r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a716:	69c3      	ldr	r3, [r0, #28]
{
 800a718:	4605      	mov	r5, r0
 800a71a:	468a      	mov	sl, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a71c:	b193      	cbz	r3, 800a744 <dir_next+0x38>
 800a71e:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 800a722:	d20f      	bcs.n	800a744 <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a724:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 800a728:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a72a:	f1b9 0f00 	cmp.w	r9, #0
 800a72e:	d14d      	bne.n	800a7cc <dir_next+0xc0>
		dp->sect++;				/* Next sector */
 800a730:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 800a732:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 800a734:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800a736:	b939      	cbnz	r1, 800a748 <dir_next+0x3c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a738:	8923      	ldrh	r3, [r4, #8]
 800a73a:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 800a73e:	d845      	bhi.n	800a7cc <dir_next+0xc0>
				dp->sect = 0; return FR_NO_FILE;
 800a740:	2300      	movs	r3, #0
 800a742:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a744:	2004      	movs	r0, #4
 800a746:	e00b      	b.n	800a760 <dir_next+0x54>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a748:	8967      	ldrh	r7, [r4, #10]
 800a74a:	3f01      	subs	r7, #1
 800a74c:	ea17 2758 	ands.w	r7, r7, r8, lsr #9
 800a750:	d13c      	bne.n	800a7cc <dir_next+0xc0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a752:	4620      	mov	r0, r4
 800a754:	f7ff fec2 	bl	800a4dc <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a758:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a75a:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a75c:	d802      	bhi.n	800a764 <dir_next+0x58>
 800a75e:	2002      	movs	r0, #2
}
 800a760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a764:	1c42      	adds	r2, r0, #1
 800a766:	d101      	bne.n	800a76c <dir_next+0x60>
 800a768:	2001      	movs	r0, #1
 800a76a:	e7f9      	b.n	800a760 <dir_next+0x54>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a76c:	69a3      	ldr	r3, [r4, #24]
 800a76e:	4283      	cmp	r3, r0
 800a770:	d826      	bhi.n	800a7c0 <dir_next+0xb4>
					if (!stretch) {								/* If no stretch, report EOT */
 800a772:	f1ba 0f00 	cmp.w	sl, #0
 800a776:	d0e3      	beq.n	800a740 <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a778:	69a9      	ldr	r1, [r5, #24]
 800a77a:	4628      	mov	r0, r5
 800a77c:	f7ff ff6e 	bl	800a65c <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a780:	4606      	mov	r6, r0
 800a782:	2800      	cmp	r0, #0
 800a784:	d035      	beq.n	800a7f2 <dir_next+0xe6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a786:	2801      	cmp	r0, #1
 800a788:	d0e9      	beq.n	800a75e <dir_next+0x52>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a78a:	1c43      	adds	r3, r0, #1
 800a78c:	d0ec      	beq.n	800a768 <dir_next+0x5c>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a78e:	4620      	mov	r0, r4
 800a790:	f7ff fc3b 	bl	800a00a <sync_window>
 800a794:	4601      	mov	r1, r0
 800a796:	2800      	cmp	r0, #0
 800a798:	d1e6      	bne.n	800a768 <dir_next+0x5c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a79a:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800a79e:	f44f 7200 	mov.w	r2, #512	; 0x200
						fs->wflag = 1;
 800a7a2:	f04f 0a01 	mov.w	sl, #1
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a7a6:	f7ff fb13 	bl	8009dd0 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a7aa:	4631      	mov	r1, r6
 800a7ac:	4620      	mov	r0, r4
 800a7ae:	f7ff fbbd 	bl	8009f2c <clust2sect>
 800a7b2:	6320      	str	r0, [r4, #48]	; 0x30
 800a7b4:	8963      	ldrh	r3, [r4, #10]
 800a7b6:	429f      	cmp	r7, r3
 800a7b8:	d30f      	bcc.n	800a7da <dir_next+0xce>
					fs->winsect -= n;							/* Restore window offset */
 800a7ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a7bc:	1bdb      	subs	r3, r3, r7
 800a7be:	6323      	str	r3, [r4, #48]	; 0x30
				dp->sect = clust2sect(fs, clst);
 800a7c0:	4631      	mov	r1, r6
 800a7c2:	4620      	mov	r0, r4
				dp->clust = clst;		/* Initialize data for new cluster */
 800a7c4:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 800a7c6:	f7ff fbb1 	bl	8009f2c <clust2sect>
 800a7ca:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a7cc:	3434      	adds	r4, #52	; 0x34
	return FR_OK;
 800a7ce:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 800a7d0:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a7d4:	444c      	add	r4, r9
 800a7d6:	622c      	str	r4, [r5, #32]
	return FR_OK;
 800a7d8:	e7c2      	b.n	800a760 <dir_next+0x54>
						fs->wflag = 1;
 800a7da:	4620      	mov	r0, r4
 800a7dc:	f884 a003 	strb.w	sl, [r4, #3]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a7e0:	f7ff fbed 	bl	8009fbe <sync_window.part.0>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	d1bf      	bne.n	800a768 <dir_next+0x5c>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a7e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a7ea:	3701      	adds	r7, #1
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	6323      	str	r3, [r4, #48]	; 0x30
 800a7f0:	e7e0      	b.n	800a7b4 <dir_next+0xa8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a7f2:	2007      	movs	r0, #7
 800a7f4:	e7b4      	b.n	800a760 <dir_next+0x54>
	...

0800a7f8 <follow_path>:
{
 800a7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7fc:	4681      	mov	r9, r0
	FATFS *fs = obj->fs;
 800a7fe:	6806      	ldr	r6, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a800:	460c      	mov	r4, r1
 800a802:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a806:	2b2f      	cmp	r3, #47	; 0x2f
 800a808:	d0fa      	beq.n	800a800 <follow_path+0x8>
 800a80a:	2b5c      	cmp	r3, #92	; 0x5c
 800a80c:	d0f8      	beq.n	800a800 <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 800a80e:	2300      	movs	r3, #0
 800a810:	f8c9 3008 	str.w	r3, [r9, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a814:	7823      	ldrb	r3, [r4, #0]
 800a816:	2b1f      	cmp	r3, #31
 800a818:	d95a      	bls.n	800a8d0 <follow_path+0xd8>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a81a:	4f54      	ldr	r7, [pc, #336]	; (800a96c <follow_path+0x174>)
	p = *path; sfn = dp->fn;
 800a81c:	f109 0524 	add.w	r5, r9, #36	; 0x24
	mem_set(sfn, ' ', 11);
 800a820:	220b      	movs	r2, #11
 800a822:	2120      	movs	r1, #32
 800a824:	f1c4 0802 	rsb	r8, r4, #2
 800a828:	4628      	mov	r0, r5
 800a82a:	f7ff fad1 	bl	8009dd0 <mem_set>
	si = i = 0; ni = 8;
 800a82e:	f104 3cff 	add.w	ip, r4, #4294967295
 800a832:	2200      	movs	r2, #0
 800a834:	2008      	movs	r0, #8
		c = (BYTE)p[si++];
 800a836:	eb08 010c 	add.w	r1, r8, ip
 800a83a:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a83e:	2b20      	cmp	r3, #32
 800a840:	d908      	bls.n	800a854 <follow_path+0x5c>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a842:	2b2f      	cmp	r3, #47	; 0x2f
 800a844:	d001      	beq.n	800a84a <follow_path+0x52>
 800a846:	2b5c      	cmp	r3, #92	; 0x5c
 800a848:	d14c      	bne.n	800a8e4 <follow_path+0xec>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a84a:	5c60      	ldrb	r0, [r4, r1]
 800a84c:	282f      	cmp	r0, #47	; 0x2f
 800a84e:	d047      	beq.n	800a8e0 <follow_path+0xe8>
 800a850:	285c      	cmp	r0, #92	; 0x5c
 800a852:	d045      	beq.n	800a8e0 <follow_path+0xe8>
	*path = p + si;						/* Return pointer to the next segment */
 800a854:	440c      	add	r4, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a856:	2a00      	cmp	r2, #0
 800a858:	d053      	beq.n	800a902 <follow_path+0x10a>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a85a:	f899 2024 	ldrb.w	r2, [r9, #36]	; 0x24
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a85e:	4648      	mov	r0, r9
	FATFS *fs = dp->obj.fs;
 800a860:	f8d9 8000 	ldr.w	r8, [r9]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a864:	2ae5      	cmp	r2, #229	; 0xe5
 800a866:	bf04      	itt	eq
 800a868:	2205      	moveq	r2, #5
 800a86a:	f889 2024 	strbeq.w	r2, [r9, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a86e:	2b21      	cmp	r3, #33	; 0x21
 800a870:	bf34      	ite	cc
 800a872:	2304      	movcc	r3, #4
 800a874:	2300      	movcs	r3, #0
 800a876:	f889 302f 	strb.w	r3, [r9, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a87a:	f7ff fe85 	bl	800a588 <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 800a87e:	2800      	cmp	r0, #0
 800a880:	d143      	bne.n	800a90a <follow_path+0x112>
		res = move_window(fs, dp->sect);
 800a882:	f8d9 101c 	ldr.w	r1, [r9, #28]
 800a886:	4640      	mov	r0, r8
 800a888:	f7ff fbc5 	bl	800a016 <move_window>
		if (res != FR_OK) break;
 800a88c:	2800      	cmp	r0, #0
 800a88e:	d13c      	bne.n	800a90a <follow_path+0x112>
		c = dp->dir[DIR_Name];
 800a890:	f8d9 2020 	ldr.w	r2, [r9, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a894:	7813      	ldrb	r3, [r2, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d042      	beq.n	800a920 <follow_path+0x128>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a89a:	7ad3      	ldrb	r3, [r2, #11]
 800a89c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8a0:	f889 3006 	strb.w	r3, [r9, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a8a4:	7ad3      	ldrb	r3, [r2, #11]
 800a8a6:	f013 0008 	ands.w	r0, r3, #8
 800a8aa:	d10c      	bne.n	800a8c6 <follow_path+0xce>
 800a8ac:	f102 0c0b 	add.w	ip, r2, #11
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a8b0:	4629      	mov	r1, r5
		r = *d++ - *s++;
 800a8b2:	f812 3b01 	ldrb.w	r3, [r2], #1
 800a8b6:	f811 eb01 	ldrb.w	lr, [r1], #1
	} while (--cnt && r == 0);
 800a8ba:	4594      	cmp	ip, r2
		r = *d++ - *s++;
 800a8bc:	eba3 030e 	sub.w	r3, r3, lr
	} while (--cnt && r == 0);
 800a8c0:	d021      	beq.n	800a906 <follow_path+0x10e>
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d0f5      	beq.n	800a8b2 <follow_path+0xba>
		res = dir_next(dp, 0);	/* Next entry */
 800a8c6:	2100      	movs	r1, #0
 800a8c8:	4648      	mov	r0, r9
 800a8ca:	f7ff ff1f 	bl	800a70c <dir_next>
 800a8ce:	e7d6      	b.n	800a87e <follow_path+0x86>
		dp->fn[NSFLAG] = NS_NONAME;
 800a8d0:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 800a8d2:	4648      	mov	r0, r9
		dp->fn[NSFLAG] = NS_NONAME;
 800a8d4:	f889 302f 	strb.w	r3, [r9, #47]	; 0x2f
}
 800a8d8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 800a8dc:	f7ff be54 	b.w	800a588 <dir_sdi.constprop.0>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a8e0:	3101      	adds	r1, #1
 800a8e2:	e7b2      	b.n	800a84a <follow_path+0x52>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a8e4:	2b2e      	cmp	r3, #46	; 0x2e
 800a8e6:	d032      	beq.n	800a94e <follow_path+0x156>
 800a8e8:	4290      	cmp	r0, r2
 800a8ea:	d90a      	bls.n	800a902 <follow_path+0x10a>
		if (c >= 0x80) {				/* Extended character? */
 800a8ec:	0619      	lsls	r1, r3, #24
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a8ee:	f8df e080 	ldr.w	lr, [pc, #128]	; 800a970 <follow_path+0x178>
 800a8f2:	bf44      	itt	mi
 800a8f4:	3b80      	submi	r3, #128	; 0x80
 800a8f6:	5cfb      	ldrbmi	r3, [r7, r3]
	while (*str && *str != chr) str++;
 800a8f8:	f81e 1b01 	ldrb.w	r1, [lr], #1
 800a8fc:	b361      	cbz	r1, 800a958 <follow_path+0x160>
 800a8fe:	428b      	cmp	r3, r1
 800a900:	d1fa      	bne.n	800a8f8 <follow_path+0x100>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a902:	2006      	movs	r0, #6
	return res;
 800a904:	e00a      	b.n	800a91c <follow_path+0x124>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a906:	2b00      	cmp	r3, #0
 800a908:	d1dd      	bne.n	800a8c6 <follow_path+0xce>
			ns = dp->fn[NSFLAG];
 800a90a:	f899 302f 	ldrb.w	r3, [r9, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800a90e:	b148      	cbz	r0, 800a924 <follow_path+0x12c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a910:	2804      	cmp	r0, #4
 800a912:	d103      	bne.n	800a91c <follow_path+0x124>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a914:	f013 0f04 	tst.w	r3, #4
 800a918:	bf08      	it	eq
 800a91a:	2005      	moveq	r0, #5
}
 800a91c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a920:	2004      	movs	r0, #4
 800a922:	e7f2      	b.n	800a90a <follow_path+0x112>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a924:	075a      	lsls	r2, r3, #29
 800a926:	d4f9      	bmi.n	800a91c <follow_path+0x124>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a928:	f899 3006 	ldrb.w	r3, [r9, #6]
 800a92c:	06db      	lsls	r3, r3, #27
 800a92e:	d50c      	bpl.n	800a94a <follow_path+0x152>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a930:	f8d9 1014 	ldr.w	r1, [r9, #20]
 800a934:	f106 0334 	add.w	r3, r6, #52	; 0x34
 800a938:	7830      	ldrb	r0, [r6, #0]
 800a93a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800a93e:	4419      	add	r1, r3
 800a940:	f7ff fdc4 	bl	800a4cc <ld_clust.isra.0>
 800a944:	f8c9 0008 	str.w	r0, [r9, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a948:	e768      	b.n	800a81c <follow_path+0x24>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a94a:	2005      	movs	r0, #5
 800a94c:	e7e6      	b.n	800a91c <follow_path+0x124>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a94e:	280b      	cmp	r0, #11
 800a950:	d0d7      	beq.n	800a902 <follow_path+0x10a>
			i = 8; ni = 11;				/* Goto extension */
 800a952:	2208      	movs	r2, #8
 800a954:	200b      	movs	r0, #11
 800a956:	e76e      	b.n	800a836 <follow_path+0x3e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a958:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 800a95c:	2919      	cmp	r1, #25
 800a95e:	d801      	bhi.n	800a964 <follow_path+0x16c>
 800a960:	3b20      	subs	r3, #32
 800a962:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 800a964:	54ab      	strb	r3, [r5, r2]
 800a966:	3201      	adds	r2, #1
 800a968:	e765      	b.n	800a836 <follow_path+0x3e>
 800a96a:	bf00      	nop
 800a96c:	080277a8 	.word	0x080277a8
 800a970:	08027799 	.word	0x08027799

0800a974 <dir_register>:
{
 800a974:	b570      	push	{r4, r5, r6, lr}
 800a976:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 800a978:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 800a97a:	f7ff fe05 	bl	800a588 <dir_sdi.constprop.0>
	if (res == FR_OK) {
 800a97e:	4604      	mov	r4, r0
 800a980:	bb28      	cbnz	r0, 800a9ce <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 800a982:	69e9      	ldr	r1, [r5, #28]
 800a984:	4630      	mov	r0, r6
 800a986:	f7ff fb46 	bl	800a016 <move_window>
			if (res != FR_OK) break;
 800a98a:	4604      	mov	r4, r0
 800a98c:	b9f8      	cbnz	r0, 800a9ce <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a98e:	6a2b      	ldr	r3, [r5, #32]
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	2be5      	cmp	r3, #229	; 0xe5
 800a994:	d114      	bne.n	800a9c0 <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 800a996:	69e9      	ldr	r1, [r5, #28]
 800a998:	4630      	mov	r0, r6
 800a99a:	f7ff fb3c 	bl	800a016 <move_window>
		if (res == FR_OK) {
 800a99e:	4604      	mov	r4, r0
 800a9a0:	b960      	cbnz	r0, 800a9bc <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a9a2:	4601      	mov	r1, r0
 800a9a4:	2220      	movs	r2, #32
 800a9a6:	6a28      	ldr	r0, [r5, #32]
 800a9a8:	f7ff fa12 	bl	8009dd0 <mem_set>
	if (cnt) {
 800a9ac:	220b      	movs	r2, #11
 800a9ae:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800a9b2:	6a28      	ldr	r0, [r5, #32]
 800a9b4:	f7ff fafa 	bl	8009fac <mem_cpy.part.0>
			fs->wflag = 1;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	70f3      	strb	r3, [r6, #3]
}
 800a9bc:	4620      	mov	r0, r4
 800a9be:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d0e8      	beq.n	800a996 <dir_register+0x22>
			res = dir_next(dp, 1);
 800a9c4:	2101      	movs	r1, #1
 800a9c6:	4628      	mov	r0, r5
 800a9c8:	f7ff fea0 	bl	800a70c <dir_next>
 800a9cc:	e7d7      	b.n	800a97e <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a9ce:	2c04      	cmp	r4, #4
 800a9d0:	bf08      	it	eq
 800a9d2:	2407      	moveq	r4, #7
 800a9d4:	e7f2      	b.n	800a9bc <dir_register+0x48>

0800a9d6 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a9d6:	b538      	push	{r3, r4, r5, lr}
 800a9d8:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a9da:	4604      	mov	r4, r0
 800a9dc:	b1f0      	cbz	r0, 800aa1c <validate+0x46>
 800a9de:	6803      	ldr	r3, [r0, #0]
 800a9e0:	b1db      	cbz	r3, 800aa1a <validate+0x44>
 800a9e2:	781a      	ldrb	r2, [r3, #0]
 800a9e4:	b1b2      	cbz	r2, 800aa14 <validate+0x3e>
 800a9e6:	8881      	ldrh	r1, [r0, #4]
 800a9e8:	88da      	ldrh	r2, [r3, #6]
 800a9ea:	4291      	cmp	r1, r2
 800a9ec:	d112      	bne.n	800aa14 <validate+0x3e>
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800a9ee:	68d8      	ldr	r0, [r3, #12]
 800a9f0:	f000 fac0 	bl	800af74 <ff_req_grant>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	b198      	cbz	r0, 800aa20 <validate+0x4a>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a9f8:	6823      	ldr	r3, [r4, #0]
 800a9fa:	7858      	ldrb	r0, [r3, #1]
 800a9fc:	f7ff f99a 	bl	8009d34 <disk_status>
 800aa00:	f010 0001 	ands.w	r0, r0, #1
 800aa04:	d102      	bne.n	800aa0c <validate+0x36>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800aa06:	6824      	ldr	r4, [r4, #0]
 800aa08:	602c      	str	r4, [r5, #0]
	return res;
}
 800aa0a:	bd38      	pop	{r3, r4, r5, pc}
				unlock_fs(obj->fs, FR_OK);
 800aa0c:	2100      	movs	r1, #0
 800aa0e:	6820      	ldr	r0, [r4, #0]
 800aa10:	f7ff fbd2 	bl	800a1b8 <unlock_fs>
	FRESULT res = FR_INVALID_OBJECT;
 800aa14:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800aa16:	2400      	movs	r4, #0
 800aa18:	e7f6      	b.n	800aa08 <validate+0x32>
 800aa1a:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 800aa1c:	2009      	movs	r0, #9
 800aa1e:	e7f3      	b.n	800aa08 <validate+0x32>
			res = FR_TIMEOUT;
 800aa20:	200f      	movs	r0, #15
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800aa22:	461c      	mov	r4, r3
 800aa24:	e7f0      	b.n	800aa08 <validate+0x32>
	...

0800aa28 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800aa28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa2a:	b085      	sub	sp, #20
 800aa2c:	4616      	mov	r6, r2
 800aa2e:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800aa32:	a803      	add	r0, sp, #12
	const TCHAR *rp = path;
 800aa34:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 800aa36:	f7ff faa1 	bl	8009f7c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800aa3a:	1e05      	subs	r5, r0, #0
 800aa3c:	db2d      	blt.n	800aa9a <f_mount+0x72>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800aa3e:	4f19      	ldr	r7, [pc, #100]	; (800aaa4 <f_mount+0x7c>)
 800aa40:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]

	if (cfs) {
 800aa44:	b164      	cbz	r4, 800aa60 <f_mount+0x38>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800aa46:	4620      	mov	r0, r4
 800aa48:	f7ff fa62 	bl	8009f10 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800aa4c:	68e0      	ldr	r0, [r4, #12]
 800aa4e:	f000 fa8c 	bl	800af6a <ff_del_syncobj>
 800aa52:	b918      	cbnz	r0, 800aa5c <f_mount+0x34>
 800aa54:	2402      	movs	r4, #2

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800aa56:	4620      	mov	r0, r4
 800aa58:	b005      	add	sp, #20
 800aa5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cfs->fs_type = 0;				/* Clear old fs object */
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	7023      	strb	r3, [r4, #0]
	if (fs) {
 800aa60:	9901      	ldr	r1, [sp, #4]
 800aa62:	b989      	cbnz	r1, 800aa88 <f_mount+0x60>
	FatFs[vol] = fs;					/* Register new fs object */
 800aa64:	9c01      	ldr	r4, [sp, #4]
 800aa66:	f847 4025 	str.w	r4, [r7, r5, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800aa6a:	2c00      	cmp	r4, #0
 800aa6c:	d0f3      	beq.n	800aa56 <f_mount+0x2e>
 800aa6e:	2e01      	cmp	r6, #1
 800aa70:	d115      	bne.n	800aa9e <f_mount+0x76>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800aa72:	a901      	add	r1, sp, #4
 800aa74:	2200      	movs	r2, #0
 800aa76:	4668      	mov	r0, sp
 800aa78:	f7ff fbf4 	bl	800a264 <find_volume>
 800aa7c:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
 800aa7e:	4601      	mov	r1, r0
 800aa80:	9801      	ldr	r0, [sp, #4]
 800aa82:	f7ff fb99 	bl	800a1b8 <unlock_fs>
 800aa86:	e7e6      	b.n	800aa56 <f_mount+0x2e>
		fs->fs_type = 0;				/* Clear new fs object */
 800aa88:	2300      	movs	r3, #0
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800aa8a:	b2e8      	uxtb	r0, r5
		fs->fs_type = 0;				/* Clear new fs object */
 800aa8c:	f801 3b0c 	strb.w	r3, [r1], #12
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800aa90:	f000 fa5f 	bl	800af52 <ff_cre_syncobj>
 800aa94:	2800      	cmp	r0, #0
 800aa96:	d1e5      	bne.n	800aa64 <f_mount+0x3c>
 800aa98:	e7dc      	b.n	800aa54 <f_mount+0x2c>
	if (vol < 0) return FR_INVALID_DRIVE;
 800aa9a:	240b      	movs	r4, #11
 800aa9c:	e7db      	b.n	800aa56 <f_mount+0x2e>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800aa9e:	2400      	movs	r4, #0
 800aaa0:	e7d9      	b.n	800aa56 <f_mount+0x2e>
 800aaa2:	bf00      	nop
 800aaa4:	2000dc94 	.word	0x2000dc94

0800aaa8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800aaa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaac:	b090      	sub	sp, #64	; 0x40
 800aaae:	4617      	mov	r7, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800aab0:	4604      	mov	r4, r0
{
 800aab2:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 800aab4:	2800      	cmp	r0, #0
 800aab6:	f000 80f6 	beq.w	800aca6 <f_open+0x1fe>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800aaba:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800aabe:	a903      	add	r1, sp, #12
 800aac0:	a801      	add	r0, sp, #4
 800aac2:	462a      	mov	r2, r5
 800aac4:	f7ff fbce 	bl	800a264 <find_volume>
	if (res == FR_OK) {
 800aac8:	4606      	mov	r6, r0
 800aaca:	2800      	cmp	r0, #0
 800aacc:	d15c      	bne.n	800ab88 <f_open+0xe0>
		dj.obj.fs = fs;
 800aace:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800aad0:	a804      	add	r0, sp, #16
 800aad2:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 800aad4:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800aad6:	f7ff fe8f 	bl	800a7f8 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800aada:	b958      	cbnz	r0, 800aaf4 <f_open+0x4c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800aadc:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	db5c      	blt.n	800ab9e <f_open+0xf6>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aae4:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 800aae8:	a804      	add	r0, sp, #16
 800aaea:	bf14      	ite	ne
 800aaec:	2101      	movne	r1, #1
 800aaee:	2100      	moveq	r1, #0
 800aaf0:	f7ff f974 	bl	8009ddc <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800aaf4:	f017 0f1c 	tst.w	r7, #28
 800aaf8:	d071      	beq.n	800abde <f_open+0x136>
			if (res != FR_OK) {					/* No file, create new */
 800aafa:	2800      	cmp	r0, #0
 800aafc:	d051      	beq.n	800aba2 <f_open+0xfa>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800aafe:	2804      	cmp	r0, #4
 800ab00:	d142      	bne.n	800ab88 <f_open+0xe0>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ab02:	4b6a      	ldr	r3, [pc, #424]	; (800acac <f_open+0x204>)
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	b11a      	cbz	r2, 800ab10 <f_open+0x68>
 800ab08:	691b      	ldr	r3, [r3, #16]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	f040 80c5 	bne.w	800ac9a <f_open+0x1f2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ab10:	a804      	add	r0, sp, #16
 800ab12:	f7ff ff2f 	bl	800a974 <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ab16:	2800      	cmp	r0, #0
 800ab18:	d136      	bne.n	800ab88 <f_open+0xe0>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ab1a:	f045 0508 	orr.w	r5, r5, #8
				dw = GET_FATTIME();
 800ab1e:	f7f5 fd99 	bl	8000654 <get_fattime>
 800ab22:	4601      	mov	r1, r0
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ab24:	9000      	str	r0, [sp, #0]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ab26:	2220      	movs	r2, #32
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ab28:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ab2a:	300e      	adds	r0, #14
 800ab2c:	f7ff f948 	bl	8009dc0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ab30:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ab32:	9900      	ldr	r1, [sp, #0]
 800ab34:	3016      	adds	r0, #22
 800ab36:	f7ff f943 	bl	8009dc0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ab3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ab3c:	f8dd 800c 	ldr.w	r8, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ab40:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ab42:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ab44:	f898 0000 	ldrb.w	r0, [r8]
 800ab48:	f7ff fcc0 	bl	800a4cc <ld_clust.isra.0>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ab4c:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ab4e:	4607      	mov	r7, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ab50:	4640      	mov	r0, r8
 800ab52:	f7ff fa07 	bl	8009f64 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ab56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800ab58:	2200      	movs	r2, #0
					fs->wflag = 1;
 800ab5a:	2101      	movs	r1, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800ab5c:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab5e:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab60:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 800ab62:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 800ab64:	9b03      	ldr	r3, [sp, #12]
 800ab66:	70d9      	strb	r1, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ab68:	b327      	cbz	r7, 800abb4 <f_open+0x10c>
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
 800ab6a:	4639      	mov	r1, r7
 800ab6c:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 800ab6e:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 800ab72:	f7ff fd3b 	bl	800a5ec <remove_chain>
						if (res == FR_OK) {
 800ab76:	b938      	cbnz	r0, 800ab88 <f_open+0xe0>
							res = move_window(fs, dw);
 800ab78:	4641      	mov	r1, r8
 800ab7a:	9803      	ldr	r0, [sp, #12]
 800ab7c:	f7ff fa4b 	bl	800a016 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ab80:	3f01      	subs	r7, #1
 800ab82:	9b03      	ldr	r3, [sp, #12]
 800ab84:	611f      	str	r7, [r3, #16]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 800ab86:	b1a8      	cbz	r0, 800abb4 <f_open+0x10c>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ab88:	2300      	movs	r3, #0
 800ab8a:	4606      	mov	r6, r0
 800ab8c:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
 800ab8e:	4631      	mov	r1, r6
 800ab90:	9803      	ldr	r0, [sp, #12]
 800ab92:	f7ff fb11 	bl	800a1b8 <unlock_fs>
}
 800ab96:	4630      	mov	r0, r6
 800ab98:	b010      	add	sp, #64	; 0x40
 800ab9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				res = FR_INVALID_NAME;
 800ab9e:	2006      	movs	r0, #6
 800aba0:	e7a8      	b.n	800aaf4 <f_open+0x4c>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800aba2:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800aba6:	f013 0f11 	tst.w	r3, #17
 800abaa:	d122      	bne.n	800abf2 <f_open+0x14a>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800abac:	077b      	lsls	r3, r7, #29
 800abae:	d476      	bmi.n	800ac9e <f_open+0x1f6>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800abb0:	073f      	lsls	r7, r7, #28
 800abb2:	d4b4      	bmi.n	800ab1e <f_open+0x76>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800abb4:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800abb6:	9b03      	ldr	r3, [sp, #12]
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800abb8:	a804      	add	r0, sp, #16
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800abba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				mode |= FA_MODIFIED;
 800abbc:	bf48      	it	mi
 800abbe:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800abc2:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800abc4:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 800abc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800abca:	bf14      	ite	ne
 800abcc:	2101      	movne	r1, #1
 800abce:	2100      	moveq	r1, #0
			fp->dir_ptr = dj.dir;
 800abd0:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800abd2:	f7ff f93d 	bl	8009e50 <inc_lock>
 800abd6:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800abd8:	b968      	cbnz	r0, 800abf6 <f_open+0x14e>
 800abda:	2002      	movs	r0, #2
 800abdc:	e7d4      	b.n	800ab88 <f_open+0xe0>
			if (res == FR_OK) {					/* Following succeeded */
 800abde:	2800      	cmp	r0, #0
 800abe0:	d1d2      	bne.n	800ab88 <f_open+0xe0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800abe2:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800abe6:	06d8      	lsls	r0, r3, #27
 800abe8:	d45b      	bmi.n	800aca2 <f_open+0x1fa>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800abea:	07ba      	lsls	r2, r7, #30
 800abec:	d5e2      	bpl.n	800abb4 <f_open+0x10c>
 800abee:	07df      	lsls	r7, r3, #31
 800abf0:	d5e0      	bpl.n	800abb4 <f_open+0x10c>
					res = FR_DENIED;
 800abf2:	2007      	movs	r0, #7
 800abf4:	e7c8      	b.n	800ab88 <f_open+0xe0>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800abf6:	9f03      	ldr	r7, [sp, #12]
 800abf8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800abfa:	7838      	ldrb	r0, [r7, #0]
 800abfc:	f7ff fc66 	bl	800a4cc <ld_clust.isra.0>
 800ac00:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ac02:	f101 001c 	add.w	r0, r1, #28
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ac06:	2100      	movs	r1, #0
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ac08:	f7ff f8d8 	bl	8009dbc <ld_dword>
			fp->obj.id = fs->id;
 800ac0c:	88fb      	ldrh	r3, [r7, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ac0e:	6027      	str	r7, [r4, #0]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ac10:	f104 0730 	add.w	r7, r4, #48	; 0x30
 800ac14:	f44f 7200 	mov.w	r2, #512	; 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ac18:	60e0      	str	r0, [r4, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ac1a:	62e1      	str	r1, [r4, #44]	; 0x2c
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ac1c:	4638      	mov	r0, r7
			fp->obj.id = fs->id;
 800ac1e:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 800ac20:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 800ac22:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ac24:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ac26:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ac28:	f7ff f8d2 	bl	8009dd0 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ac2c:	06aa      	lsls	r2, r5, #26
 800ac2e:	d5ae      	bpl.n	800ab8e <f_open+0xe6>
 800ac30:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800ac34:	f1b8 0f00 	cmp.w	r8, #0
 800ac38:	d0a9      	beq.n	800ab8e <f_open+0xe6>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ac3a:	9b03      	ldr	r3, [sp, #12]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ac3c:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ac3e:	895d      	ldrh	r5, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ac40:	f8c4 8018 	str.w	r8, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ac44:	026d      	lsls	r5, r5, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ac46:	4545      	cmp	r5, r8
 800ac48:	d319      	bcc.n	800ac7e <f_open+0x1d6>
 800ac4a:	2000      	movs	r0, #0
				fp->clust = clst;
 800ac4c:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ac4e:	2800      	cmp	r0, #0
 800ac50:	d19a      	bne.n	800ab88 <f_open+0xe0>
 800ac52:	f3c8 0308 	ubfx	r3, r8, #0, #9
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d099      	beq.n	800ab8e <f_open+0xe6>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ac5a:	9d03      	ldr	r5, [sp, #12]
 800ac5c:	4628      	mov	r0, r5
 800ac5e:	f7ff f965 	bl	8009f2c <clust2sect>
 800ac62:	2800      	cmp	r0, #0
 800ac64:	d0b9      	beq.n	800abda <f_open+0x132>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ac66:	eb00 2258 	add.w	r2, r0, r8, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	4639      	mov	r1, r7
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ac6e:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ac70:	7868      	ldrb	r0, [r5, #1]
 800ac72:	f7ff f879 	bl	8009d68 <disk_read>
 800ac76:	2800      	cmp	r0, #0
 800ac78:	d089      	beq.n	800ab8e <f_open+0xe6>
 800ac7a:	2001      	movs	r0, #1
 800ac7c:	e784      	b.n	800ab88 <f_open+0xe0>
					clst = get_fat(&fp->obj, clst);
 800ac7e:	6820      	ldr	r0, [r4, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ac80:	eba8 0805 	sub.w	r8, r8, r5
					clst = get_fat(&fp->obj, clst);
 800ac84:	f7ff fc2a 	bl	800a4dc <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 800ac88:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 800ac8a:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 800ac8c:	d903      	bls.n	800ac96 <f_open+0x1ee>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ac8e:	1c43      	adds	r3, r0, #1
 800ac90:	d1d9      	bne.n	800ac46 <f_open+0x19e>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ac92:	2001      	movs	r0, #1
 800ac94:	e7da      	b.n	800ac4c <f_open+0x1a4>
					if (clst <= 1) res = FR_INT_ERR;
 800ac96:	2002      	movs	r0, #2
 800ac98:	e7d8      	b.n	800ac4c <f_open+0x1a4>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ac9a:	2012      	movs	r0, #18
 800ac9c:	e774      	b.n	800ab88 <f_open+0xe0>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ac9e:	2008      	movs	r0, #8
 800aca0:	e772      	b.n	800ab88 <f_open+0xe0>
					res = FR_NO_FILE;
 800aca2:	2004      	movs	r0, #4
 800aca4:	e770      	b.n	800ab88 <f_open+0xe0>
	if (!fp) return FR_INVALID_OBJECT;
 800aca6:	2609      	movs	r6, #9
 800aca8:	e775      	b.n	800ab96 <f_open+0xee>
 800acaa:	bf00      	nop
 800acac:	2000dc98 	.word	0x2000dc98

0800acb0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800acb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb4:	4699      	mov	r9, r3
 800acb6:	b085      	sub	sp, #20
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800acb8:	2300      	movs	r3, #0
{
 800acba:	4688      	mov	r8, r1
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800acbc:	a903      	add	r1, sp, #12
{
 800acbe:	4604      	mov	r4, r0
	*br = 0;	/* Clear read byte counter */
 800acc0:	f8c9 3000 	str.w	r3, [r9]
{
 800acc4:	4616      	mov	r6, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800acc6:	f7ff fe86 	bl	800a9d6 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800acca:	4605      	mov	r5, r0
 800accc:	b908      	cbnz	r0, 800acd2 <f_read+0x22>
 800acce:	7d65      	ldrb	r5, [r4, #21]
 800acd0:	b125      	cbz	r5, 800acdc <f_read+0x2c>
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800acd2:	4629      	mov	r1, r5
 800acd4:	9803      	ldr	r0, [sp, #12]
 800acd6:	f7ff fa6f 	bl	800a1b8 <unlock_fs>
 800acda:	e008      	b.n	800acee <f_read+0x3e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800acdc:	7d25      	ldrb	r5, [r4, #20]
 800acde:	f015 0501 	ands.w	r5, r5, #1
 800ace2:	d108      	bne.n	800acf6 <f_read+0x46>
 800ace4:	2507      	movs	r5, #7
 800ace6:	2107      	movs	r1, #7
 800ace8:	9803      	ldr	r0, [sp, #12]
 800acea:	f7ff fa65 	bl	800a1b8 <unlock_fs>
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800acee:	4628      	mov	r0, r5
 800acf0:	b005      	add	sp, #20
 800acf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	remain = fp->obj.objsize - fp->fptr;
 800acf6:	68e2      	ldr	r2, [r4, #12]
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800acf8:	f104 0b30 	add.w	fp, r4, #48	; 0x30
	remain = fp->obj.objsize - fp->fptr;
 800acfc:	69a3      	ldr	r3, [r4, #24]
 800acfe:	1ad2      	subs	r2, r2, r3
 800ad00:	4296      	cmp	r6, r2
 800ad02:	bf28      	it	cs
 800ad04:	4616      	movcs	r6, r2
	for ( ;  btr;								/* Repeat until all data read */
 800ad06:	b92e      	cbnz	r6, 800ad14 <f_read+0x64>
	LEAVE_FF(fs, FR_OK);
 800ad08:	4631      	mov	r1, r6
 800ad0a:	9803      	ldr	r0, [sp, #12]
 800ad0c:	4635      	mov	r5, r6
 800ad0e:	f7ff fa53 	bl	800a1b8 <unlock_fs>
 800ad12:	e7ec      	b.n	800acee <f_read+0x3e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ad14:	69a1      	ldr	r1, [r4, #24]
 800ad16:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d17e      	bne.n	800ae1c <f_read+0x16c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ad1e:	9b03      	ldr	r3, [sp, #12]
 800ad20:	895b      	ldrh	r3, [r3, #10]
 800ad22:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800ad24:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
 800ad28:	9301      	str	r3, [sp, #4]
 800ad2a:	d117      	bne.n	800ad5c <f_read+0xac>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ad2c:	b929      	cbnz	r1, 800ad3a <f_read+0x8a>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ad2e:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ad30:	2801      	cmp	r0, #1
 800ad32:	d80d      	bhi.n	800ad50 <f_read+0xa0>
 800ad34:	2502      	movs	r5, #2
 800ad36:	7565      	strb	r5, [r4, #21]
 800ad38:	e7cb      	b.n	800acd2 <f_read+0x22>
					if (fp->cltbl) {
 800ad3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ad3c:	b11b      	cbz	r3, 800ad46 <f_read+0x96>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f7ff f8ff 	bl	8009f42 <clmt_clust>
 800ad44:	e7f4      	b.n	800ad30 <f_read+0x80>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ad46:	69e1      	ldr	r1, [r4, #28]
 800ad48:	6820      	ldr	r0, [r4, #0]
 800ad4a:	f7ff fbc7 	bl	800a4dc <get_fat.isra.0>
 800ad4e:	e7ef      	b.n	800ad30 <f_read+0x80>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ad50:	1c43      	adds	r3, r0, #1
 800ad52:	d102      	bne.n	800ad5a <f_read+0xaa>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ad54:	2101      	movs	r1, #1
 800ad56:	7561      	strb	r1, [r4, #21]
 800ad58:	e7bc      	b.n	800acd4 <f_read+0x24>
				fp->clust = clst;				/* Update current cluster */
 800ad5a:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ad5c:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800ad60:	69e1      	ldr	r1, [r4, #28]
 800ad62:	4650      	mov	r0, sl
 800ad64:	f7ff f8e2 	bl	8009f2c <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ad68:	b920      	cbnz	r0, 800ad74 <f_read+0xc4>
 800ad6a:	2502      	movs	r5, #2
 800ad6c:	4650      	mov	r0, sl
 800ad6e:	4629      	mov	r1, r5
 800ad70:	7565      	strb	r5, [r4, #21]
 800ad72:	e7b0      	b.n	800acd6 <f_read+0x26>
			sect += csect;
 800ad74:	9b01      	ldr	r3, [sp, #4]
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ad76:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 800ad7a:	eb03 0700 	add.w	r7, r3, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ad7e:	d330      	bcc.n	800ade2 <f_read+0x132>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ad80:	9901      	ldr	r1, [sp, #4]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ad82:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ad84:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 800ad88:	eb01 2156 	add.w	r1, r1, r6, lsr #9
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ad8c:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ad90:	4291      	cmp	r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ad92:	4641      	mov	r1, r8
					cc = fs->csize - csect;
 800ad94:	bf84      	itt	hi
 800ad96:	9b01      	ldrhi	r3, [sp, #4]
 800ad98:	1ad3      	subhi	r3, r2, r3
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ad9a:	463a      	mov	r2, r7
 800ad9c:	9301      	str	r3, [sp, #4]
 800ad9e:	f7fe ffe3 	bl	8009d68 <disk_read>
 800ada2:	9b01      	ldr	r3, [sp, #4]
 800ada4:	2800      	cmp	r0, #0
 800ada6:	d1d5      	bne.n	800ad54 <f_read+0xa4>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ada8:	f994 2014 	ldrsb.w	r2, [r4, #20]
 800adac:	2a00      	cmp	r2, #0
 800adae:	da0c      	bge.n	800adca <f_read+0x11a>
 800adb0:	6a20      	ldr	r0, [r4, #32]
 800adb2:	1bc0      	subs	r0, r0, r7
 800adb4:	4298      	cmp	r0, r3
 800adb6:	d208      	bcs.n	800adca <f_read+0x11a>
 800adb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800adbc:	4659      	mov	r1, fp
 800adbe:	eb08 2040 	add.w	r0, r8, r0, lsl #9
 800adc2:	9301      	str	r3, [sp, #4]
	if (cnt) {
 800adc4:	f7ff f8f2 	bl	8009fac <mem_cpy.part.0>
 800adc8:	9b01      	ldr	r3, [sp, #4]
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800adca:	025f      	lsls	r7, r3, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800adcc:	69a3      	ldr	r3, [r4, #24]
 800adce:	44b8      	add	r8, r7
 800add0:	1bf6      	subs	r6, r6, r7
 800add2:	443b      	add	r3, r7
 800add4:	61a3      	str	r3, [r4, #24]
 800add6:	f8d9 3000 	ldr.w	r3, [r9]
 800adda:	443b      	add	r3, r7
 800addc:	f8c9 3000 	str.w	r3, [r9]
 800ade0:	e791      	b.n	800ad06 <f_read+0x56>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ade2:	6a22      	ldr	r2, [r4, #32]
 800ade4:	42ba      	cmp	r2, r7
 800ade6:	d018      	beq.n	800ae1a <f_read+0x16a>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ade8:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800adec:	2b00      	cmp	r3, #0
 800adee:	da0b      	bge.n	800ae08 <f_read+0x158>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800adf0:	2301      	movs	r3, #1
 800adf2:	4659      	mov	r1, fp
 800adf4:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800adf8:	f7fe ffc4 	bl	8009d84 <disk_write>
 800adfc:	2800      	cmp	r0, #0
 800adfe:	d1a9      	bne.n	800ad54 <f_read+0xa4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ae00:	7d23      	ldrb	r3, [r4, #20]
 800ae02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae06:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ae08:	9803      	ldr	r0, [sp, #12]
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	463a      	mov	r2, r7
 800ae0e:	4659      	mov	r1, fp
 800ae10:	7840      	ldrb	r0, [r0, #1]
 800ae12:	f7fe ffa9 	bl	8009d68 <disk_read>
 800ae16:	2800      	cmp	r0, #0
 800ae18:	d19c      	bne.n	800ad54 <f_read+0xa4>
			fp->sect = sect;
 800ae1a:	6227      	str	r7, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ae1c:	69a1      	ldr	r1, [r4, #24]
 800ae1e:	4640      	mov	r0, r8
 800ae20:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800ae24:	f5c1 7700 	rsb	r7, r1, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ae28:	4459      	add	r1, fp
 800ae2a:	42b7      	cmp	r7, r6
 800ae2c:	bf28      	it	cs
 800ae2e:	4637      	movcs	r7, r6
	if (cnt) {
 800ae30:	463a      	mov	r2, r7
 800ae32:	f7ff f8bb 	bl	8009fac <mem_cpy.part.0>
}
 800ae36:	e7c9      	b.n	800adcc <f_read+0x11c>

0800ae38 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ae38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ae3a:	a901      	add	r1, sp, #4
{
 800ae3c:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ae3e:	f7ff fdca 	bl	800a9d6 <validate>
	if (res == FR_OK) {
 800ae42:	4604      	mov	r4, r0
 800ae44:	2800      	cmp	r0, #0
 800ae46:	d143      	bne.n	800aed0 <f_sync+0x98>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ae48:	7d2b      	ldrb	r3, [r5, #20]
 800ae4a:	f013 0440 	ands.w	r4, r3, #64	; 0x40
 800ae4e:	d03f      	beq.n	800aed0 <f_sync+0x98>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ae50:	061b      	lsls	r3, r3, #24
 800ae52:	d514      	bpl.n	800ae7e <f_sync+0x46>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ae54:	9801      	ldr	r0, [sp, #4]
 800ae56:	2301      	movs	r3, #1
 800ae58:	6a2a      	ldr	r2, [r5, #32]
 800ae5a:	f105 0130 	add.w	r1, r5, #48	; 0x30
 800ae5e:	7840      	ldrb	r0, [r0, #1]
 800ae60:	f7fe ff90 	bl	8009d84 <disk_write>
 800ae64:	b138      	cbz	r0, 800ae76 <f_sync+0x3e>
 800ae66:	2401      	movs	r4, #1
 800ae68:	2101      	movs	r1, #1
 800ae6a:	9801      	ldr	r0, [sp, #4]
 800ae6c:	f7ff f9a4 	bl	800a1b8 <unlock_fs>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800ae70:	4620      	mov	r0, r4
 800ae72:	b003      	add	sp, #12
 800ae74:	bdf0      	pop	{r4, r5, r6, r7, pc}
				fp->flag &= (BYTE)~FA_DIRTY;
 800ae76:	7d2b      	ldrb	r3, [r5, #20]
 800ae78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae7c:	752b      	strb	r3, [r5, #20]
			tm = GET_FATTIME();				/* Modified time */
 800ae7e:	f7f5 fbe9 	bl	8000654 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 800ae82:	6a69      	ldr	r1, [r5, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 800ae84:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 800ae86:	9801      	ldr	r0, [sp, #4]
 800ae88:	f7ff f8c5 	bl	800a016 <move_window>
				if (res == FR_OK) {
 800ae8c:	4604      	mov	r4, r0
 800ae8e:	b9f8      	cbnz	r0, 800aed0 <f_sync+0x98>
					dir = fp->dir_ptr;
 800ae90:	6aae      	ldr	r6, [r5, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ae92:	7af3      	ldrb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ae94:	4631      	mov	r1, r6
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ae96:	f043 0320 	orr.w	r3, r3, #32
 800ae9a:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ae9c:	68aa      	ldr	r2, [r5, #8]
 800ae9e:	6828      	ldr	r0, [r5, #0]
 800aea0:	f7ff f860 	bl	8009f64 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800aea4:	68e9      	ldr	r1, [r5, #12]
 800aea6:	f106 001c 	add.w	r0, r6, #28
 800aeaa:	f7fe ff89 	bl	8009dc0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800aeae:	4639      	mov	r1, r7
 800aeb0:	f106 0016 	add.w	r0, r6, #22
 800aeb4:	f7fe ff84 	bl	8009dc0 <st_dword>
					fs->wflag = 1;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 800aebc:	74b4      	strb	r4, [r6, #18]
	*ptr++ = (BYTE)val;
 800aebe:	74f4      	strb	r4, [r6, #19]
					fs->wflag = 1;
 800aec0:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800aec2:	f7ff f984 	bl	800a1ce <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800aec6:	7d2b      	ldrb	r3, [r5, #20]
					res = sync_fs(fs);					/* Restore it to the directory */
 800aec8:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 800aeca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aece:	752b      	strb	r3, [r5, #20]
	LEAVE_FF(fs, res);
 800aed0:	4621      	mov	r1, r4
 800aed2:	9801      	ldr	r0, [sp, #4]
 800aed4:	f7ff f970 	bl	800a1b8 <unlock_fs>
 800aed8:	e7ca      	b.n	800ae70 <f_sync+0x38>

0800aeda <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800aeda:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aedc:	4605      	mov	r5, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800aede:	f7ff ffab 	bl	800ae38 <f_sync>
	if (res == FR_OK)
 800aee2:	4604      	mov	r4, r0
 800aee4:	b978      	cbnz	r0, 800af06 <f_close+0x2c>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800aee6:	a901      	add	r1, sp, #4
 800aee8:	4628      	mov	r0, r5
 800aeea:	f7ff fd74 	bl	800a9d6 <validate>
		if (res == FR_OK) {
 800aeee:	4604      	mov	r4, r0
 800aef0:	b948      	cbnz	r0, 800af06 <f_close+0x2c>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800aef2:	6928      	ldr	r0, [r5, #16]
 800aef4:	f7fe ffee 	bl	8009ed4 <dec_lock>
			if (res == FR_OK)
 800aef8:	4604      	mov	r4, r0
 800aefa:	b900      	cbnz	r0, 800aefe <f_close+0x24>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800aefc:	6028      	str	r0, [r5, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800aefe:	2100      	movs	r1, #0
 800af00:	9801      	ldr	r0, [sp, #4]
 800af02:	f7ff f959 	bl	800a1b8 <unlock_fs>
#endif
		}
	}
	return res;
}
 800af06:	4620      	mov	r0, r4
 800af08:	b003      	add	sp, #12
 800af0a:	bd30      	pop	{r4, r5, pc}

0800af0c <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800af0c:	4b0e      	ldr	r3, [pc, #56]	; (800af48 <FATFS_LinkDriverEx+0x3c>)
{
 800af0e:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 800af10:	7a5c      	ldrb	r4, [r3, #9]
{
 800af12:	4605      	mov	r5, r0
  if(disk.nbr < _VOLUMES)
 800af14:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 800af18:	b9a4      	cbnz	r4, 800af44 <FATFS_LinkDriverEx+0x38>
  {
    disk.is_initialized[disk.nbr] = 0;
 800af1a:	7a5c      	ldrb	r4, [r3, #9]
 800af1c:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 800af1e:	7a5c      	ldrb	r4, [r3, #9]
 800af20:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800af24:	6065      	str	r5, [r4, #4]
    disk.lun[disk.nbr] = lun;
 800af26:	7a5c      	ldrb	r4, [r3, #9]
 800af28:	441c      	add	r4, r3
 800af2a:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800af2c:	7a5a      	ldrb	r2, [r3, #9]
 800af2e:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 800af30:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 800af32:	b2e4      	uxtb	r4, r4
 800af34:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 800af36:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 800af38:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800af3a:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800af3c:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 800af3e:	70c8      	strb	r0, [r1, #3]
    path[2] = '/';
 800af40:	708b      	strb	r3, [r1, #2]
    ret = 0;
  }

  return ret;
}
 800af42:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800af44:	2001      	movs	r0, #1
 800af46:	e7fc      	b.n	800af42 <FATFS_LinkDriverEx+0x36>
 800af48:	2000dcbc 	.word	0x2000dcbc

0800af4c <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800af4c:	2200      	movs	r2, #0
 800af4e:	f7ff bfdd 	b.w	800af0c <FATFS_LinkDriverEx>

0800af52 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800af52:	b510      	push	{r4, lr}
 800af54:	460c      	mov	r4, r1

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800af56:	2101      	movs	r1, #1
 800af58:	2200      	movs	r2, #0
 800af5a:	4608      	mov	r0, r1
 800af5c:	f000 f8e4 	bl	800b128 <osSemaphoreNew>
 800af60:	6020      	str	r0, [r4, #0]

#endif
    ret = (*sobj != NULL);

    return ret;
}
 800af62:	3800      	subs	r0, #0
 800af64:	bf18      	it	ne
 800af66:	2001      	movne	r0, #1
 800af68:	bd10      	pop	{r4, pc}

0800af6a <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800af6a:	b508      	push	{r3, lr}
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800af6c:	f000 f9a2 	bl	800b2b4 <osSemaphoreDelete>
#endif
    return 1;
}
 800af70:	2001      	movs	r0, #1
 800af72:	bd08      	pop	{r3, pc}

0800af74 <ff_req_grant>:
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800af74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
{
 800af78:	b508      	push	{r3, lr}
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800af7a:	f000 f92b 	bl	800b1d4 <osSemaphoreAcquire>
  {
    ret = 1;
  }

  return ret;
}
 800af7e:	fab0 f080 	clz	r0, r0
 800af82:	0940      	lsrs	r0, r0, #5
 800af84:	bd08      	pop	{r3, pc}

0800af86 <ff_rel_grant>:
)
{
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800af86:	f000 b95f 	b.w	800b248 <osSemaphoreRelease>
	...

0800af8c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af8c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800af90:	b113      	cbz	r3, 800af98 <osKernelInitialize+0xc>
    stat = osErrorISR;
 800af92:	f06f 0005 	mvn.w	r0, #5
 800af96:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af98:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 800af9c:	4b07      	ldr	r3, [pc, #28]	; (800afbc <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 800af9e:	b912      	cbnz	r2, 800afa6 <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800afa0:	f3ef 8211 	mrs	r2, BASEPRI
 800afa4:	b112      	cbz	r2, 800afac <osKernelInitialize+0x20>
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	2a02      	cmp	r2, #2
 800afaa:	d0f2      	beq.n	800af92 <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 800afac:	6818      	ldr	r0, [r3, #0]
 800afae:	b910      	cbnz	r0, 800afb6 <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800afb0:	2201      	movs	r2, #1
 800afb2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800afb4:	4770      	bx	lr
    } else {
      stat = osError;
 800afb6:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800afba:	4770      	bx	lr
 800afbc:	2000df88 	.word	0x2000df88

0800afc0 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800afc0:	b508      	push	{r3, lr}
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800afc2:	f001 ff6d 	bl	800cea0 <xTaskGetSchedulerState>
 800afc6:	b138      	cbz	r0, 800afd8 <osKernelGetState+0x18>
 800afc8:	2802      	cmp	r0, #2
 800afca:	d004      	beq.n	800afd6 <osKernelGetState+0x16>
      state = osKernelLocked;
      break;

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800afcc:	4b03      	ldr	r3, [pc, #12]	; (800afdc <osKernelGetState+0x1c>)
 800afce:	6818      	ldr	r0, [r3, #0]
 800afd0:	1e43      	subs	r3, r0, #1
 800afd2:	4258      	negs	r0, r3
 800afd4:	4158      	adcs	r0, r3
      }
      break;
  }

  return (state);
}
 800afd6:	bd08      	pop	{r3, pc}
  switch (xTaskGetSchedulerState()) {
 800afd8:	2003      	movs	r0, #3
  return (state);
 800afda:	e7fc      	b.n	800afd6 <osKernelGetState+0x16>
 800afdc:	2000df88 	.word	0x2000df88

0800afe0 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800afe0:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afe2:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800afe6:	b113      	cbz	r3, 800afee <osKernelStart+0xe>
    stat = osErrorISR;
 800afe8:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 800afec:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afee:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 800aff2:	4b0a      	ldr	r3, [pc, #40]	; (800b01c <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 800aff4:	b912      	cbnz	r2, 800affc <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aff6:	f3ef 8211 	mrs	r2, BASEPRI
 800affa:	b112      	cbz	r2, 800b002 <osKernelStart+0x22>
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	2a02      	cmp	r2, #2
 800b000:	d0f2      	beq.n	800afe8 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	2a01      	cmp	r2, #1
 800b006:	d105      	bne.n	800b014 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 800b008:	2202      	movs	r2, #2
 800b00a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800b00c:	f001 fdd2 	bl	800cbb4 <vTaskStartScheduler>
      stat = osOK;
 800b010:	2000      	movs	r0, #0
 800b012:	e7eb      	b.n	800afec <osKernelStart+0xc>
      stat = osError;
 800b014:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800b018:	e7e8      	b.n	800afec <osKernelStart+0xc>
 800b01a:	bf00      	nop
 800b01c:	2000df88 	.word	0x2000df88

0800b020 <osKernelGetTickCount>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b020:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 800b024:	b10b      	cbz	r3, 800b02a <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 800b026:	f001 bc6d 	b.w	800c904 <xTaskGetTickCountFromISR>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b02a:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800b02e:	b913      	cbnz	r3, 800b036 <osKernelGetTickCount+0x16>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b030:	f3ef 8311 	mrs	r3, BASEPRI
 800b034:	b11b      	cbz	r3, 800b03e <osKernelGetTickCount+0x1e>
 800b036:	4b03      	ldr	r3, [pc, #12]	; (800b044 <osKernelGetTickCount+0x24>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2b02      	cmp	r3, #2
 800b03c:	d0f3      	beq.n	800b026 <osKernelGetTickCount+0x6>
  } else {
    ticks = xTaskGetTickCount();
 800b03e:	f001 bc5b 	b.w	800c8f8 <xTaskGetTickCount>
 800b042:	bf00      	nop
 800b044:	2000df88 	.word	0x2000df88

0800b048 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b04a:	4614      	mov	r4, r2
 800b04c:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b04e:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b050:	460b      	mov	r3, r1
  hTask = NULL;
 800b052:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b054:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800b058:	bb22      	cbnz	r2, 800b0a4 <osThreadNew+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b05a:	f3ef 8210 	mrs	r2, PRIMASK
 800b05e:	b912      	cbnz	r2, 800b066 <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b060:	f3ef 8211 	mrs	r2, BASEPRI
 800b064:	b11a      	cbz	r2, 800b06e <osThreadNew+0x26>
 800b066:	4a22      	ldr	r2, [pc, #136]	; (800b0f0 <osThreadNew+0xa8>)
 800b068:	6812      	ldr	r2, [r2, #0]
 800b06a:	2a02      	cmp	r2, #2
 800b06c:	d01a      	beq.n	800b0a4 <osThreadNew+0x5c>
 800b06e:	b1c8      	cbz	r0, 800b0a4 <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800b070:	2c00      	cmp	r4, #0
 800b072:	d02f      	beq.n	800b0d4 <osThreadNew+0x8c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800b074:	69a5      	ldr	r5, [r4, #24]
 800b076:	2d00      	cmp	r5, #0
 800b078:	bf08      	it	eq
 800b07a:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b07c:	1e6a      	subs	r2, r5, #1
 800b07e:	46ac      	mov	ip, r5
 800b080:	2a37      	cmp	r2, #55	; 0x37
 800b082:	d82b      	bhi.n	800b0dc <osThreadNew+0x94>
 800b084:	6862      	ldr	r2, [r4, #4]
 800b086:	07d2      	lsls	r2, r2, #31
 800b088:	d428      	bmi.n	800b0dc <osThreadNew+0x94>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800b08a:	6966      	ldr	r6, [r4, #20]
 800b08c:	b16e      	cbz	r6, 800b0aa <osThreadNew+0x62>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b08e:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800b090:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b092:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800b096:	b157      	cbz	r7, 800b0ae <osThreadNew+0x66>
 800b098:	f1be 0fbf 	cmp.w	lr, #191	; 0xbf
 800b09c:	d902      	bls.n	800b0a4 <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b09e:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b0a0:	b104      	cbz	r4, 800b0a4 <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b0a2:	b9ee      	cbnz	r6, 800b0e0 <osThreadNew+0x98>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b0a4:	9805      	ldr	r0, [sp, #20]
}
 800b0a6:	b007      	add	sp, #28
 800b0a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800b0aa:	2280      	movs	r2, #128	; 0x80
 800b0ac:	e7f0      	b.n	800b090 <osThreadNew+0x48>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b0ae:	f1be 0f00 	cmp.w	lr, #0
 800b0b2:	d1f7      	bne.n	800b0a4 <osThreadNew+0x5c>
      if (mem == 0) {
 800b0b4:	6924      	ldr	r4, [r4, #16]
 800b0b6:	2c00      	cmp	r4, #0
 800b0b8:	d1f4      	bne.n	800b0a4 <osThreadNew+0x5c>
 800b0ba:	460c      	mov	r4, r1
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b0bc:	a905      	add	r1, sp, #20
 800b0be:	b292      	uxth	r2, r2
 800b0c0:	e9cd c100 	strd	ip, r1, [sp]
 800b0c4:	4621      	mov	r1, r4
 800b0c6:	f001 fbe1 	bl	800c88c <xTaskCreate>
 800b0ca:	2801      	cmp	r0, #1
          hTask = NULL;
 800b0cc:	bf1c      	itt	ne
 800b0ce:	2300      	movne	r3, #0
 800b0d0:	9305      	strne	r3, [sp, #20]
 800b0d2:	e7e7      	b.n	800b0a4 <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;
 800b0d4:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800b0d8:	2280      	movs	r2, #128	; 0x80
 800b0da:	e7ef      	b.n	800b0bc <osThreadNew+0x74>
        return (NULL);
 800b0dc:	2000      	movs	r0, #0
 800b0de:	e7e2      	b.n	800b0a6 <osThreadNew+0x5e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b0e0:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800b0e4:	9500      	str	r5, [sp, #0]
 800b0e6:	f001 fb93 	bl	800c810 <xTaskCreateStatic>
 800b0ea:	9005      	str	r0, [sp, #20]
 800b0ec:	e7da      	b.n	800b0a4 <osThreadNew+0x5c>
 800b0ee:	bf00      	nop
 800b0f0:	2000df88 	.word	0x2000df88

0800b0f4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800b0f4:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0f6:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800b0fa:	b113      	cbz	r3, 800b102 <osDelay+0xe>
    stat = osErrorISR;
 800b0fc:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800b100:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b102:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800b106:	b913      	cbnz	r3, 800b10e <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b108:	f3ef 8311 	mrs	r3, BASEPRI
 800b10c:	b11b      	cbz	r3, 800b116 <osDelay+0x22>
 800b10e:	4b05      	ldr	r3, [pc, #20]	; (800b124 <osDelay+0x30>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	2b02      	cmp	r3, #2
 800b114:	d0f2      	beq.n	800b0fc <osDelay+0x8>
    if (ticks != 0U) {
 800b116:	2800      	cmp	r0, #0
 800b118:	d0f2      	beq.n	800b100 <osDelay+0xc>
      vTaskDelay(ticks);
 800b11a:	f001 fd09 	bl	800cb30 <vTaskDelay>
    stat = osOK;
 800b11e:	2000      	movs	r0, #0
 800b120:	e7ee      	b.n	800b100 <osDelay+0xc>
 800b122:	bf00      	nop
 800b124:	2000df88 	.word	0x2000df88

0800b128 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b128:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b12a:	460e      	mov	r6, r1
 800b12c:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b12e:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b132:	b11b      	cbz	r3, 800b13c <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 800b134:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800b136:	4620      	mov	r0, r4
 800b138:	b002      	add	sp, #8
 800b13a:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b13c:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b140:	b913      	cbnz	r3, 800b148 <osSemaphoreNew+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b142:	f3ef 8311 	mrs	r3, BASEPRI
 800b146:	b11b      	cbz	r3, 800b150 <osSemaphoreNew+0x28>
 800b148:	4b21      	ldr	r3, [pc, #132]	; (800b1d0 <osSemaphoreNew+0xa8>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2b02      	cmp	r3, #2
 800b14e:	d0f1      	beq.n	800b134 <osSemaphoreNew+0xc>
 800b150:	2800      	cmp	r0, #0
 800b152:	d0ef      	beq.n	800b134 <osSemaphoreNew+0xc>
 800b154:	42b0      	cmp	r0, r6
 800b156:	d3ed      	bcc.n	800b134 <osSemaphoreNew+0xc>
    if (attr != NULL) {
 800b158:	b1ed      	cbz	r5, 800b196 <osSemaphoreNew+0x6e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b15a:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800b15e:	b1c3      	cbz	r3, 800b192 <osSemaphoreNew+0x6a>
 800b160:	2a4f      	cmp	r2, #79	; 0x4f
 800b162:	d9e7      	bls.n	800b134 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 800b164:	2801      	cmp	r0, #1
 800b166:	d129      	bne.n	800b1bc <osSemaphoreNew+0x94>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b168:	2203      	movs	r2, #3
 800b16a:	9200      	str	r2, [sp, #0]
 800b16c:	2200      	movs	r2, #0
 800b16e:	4611      	mov	r1, r2
 800b170:	f000 fd8c 	bl	800bc8c <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 800b174:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b176:	2800      	cmp	r0, #0
 800b178:	d0dc      	beq.n	800b134 <osSemaphoreNew+0xc>
 800b17a:	b1ce      	cbz	r6, 800b1b0 <osSemaphoreNew+0x88>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b17c:	2300      	movs	r3, #0
 800b17e:	461a      	mov	r2, r3
 800b180:	4619      	mov	r1, r3
 800b182:	f000 fe08 	bl	800bd96 <xQueueGenericSend>
 800b186:	2801      	cmp	r0, #1
 800b188:	d012      	beq.n	800b1b0 <osSemaphoreNew+0x88>
            vSemaphoreDelete (hSemaphore);
 800b18a:	4620      	mov	r0, r4
 800b18c:	f001 f988 	bl	800c4a0 <vQueueDelete>
 800b190:	e7d0      	b.n	800b134 <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b192:	2a00      	cmp	r2, #0
 800b194:	d1ce      	bne.n	800b134 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 800b196:	2801      	cmp	r0, #1
 800b198:	d104      	bne.n	800b1a4 <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateBinary();
 800b19a:	2203      	movs	r2, #3
 800b19c:	2100      	movs	r1, #0
 800b19e:	f000 fd89 	bl	800bcb4 <xQueueGenericCreate>
 800b1a2:	e7e7      	b.n	800b174 <osSemaphoreNew+0x4c>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b1a4:	4631      	mov	r1, r6
 800b1a6:	f000 fdd4 	bl	800bd52 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	d0c1      	beq.n	800b134 <osSemaphoreNew+0xc>
        if (attr != NULL) {
 800b1b0:	b95d      	cbnz	r5, 800b1ca <osSemaphoreNew+0xa2>
        vQueueAddToRegistry (hSemaphore, name);
 800b1b2:	4629      	mov	r1, r5
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	f001 f94d 	bl	800c454 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800b1ba:	e7bc      	b.n	800b136 <osSemaphoreNew+0xe>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b1bc:	461a      	mov	r2, r3
 800b1be:	4631      	mov	r1, r6
 800b1c0:	f000 fda1 	bl	800bd06 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800b1c4:	4604      	mov	r4, r0
 800b1c6:	2800      	cmp	r0, #0
 800b1c8:	d0b4      	beq.n	800b134 <osSemaphoreNew+0xc>
          name = attr->name;
 800b1ca:	682d      	ldr	r5, [r5, #0]
 800b1cc:	e7f1      	b.n	800b1b2 <osSemaphoreNew+0x8a>
 800b1ce:	bf00      	nop
 800b1d0:	2000df88 	.word	0x2000df88

0800b1d4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b1d4:	b513      	push	{r0, r1, r4, lr}
 800b1d6:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800b1d8:	b918      	cbnz	r0, 800b1e2 <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 800b1da:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800b1de:	b002      	add	sp, #8
 800b1e0:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1e2:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 800b1e6:	b163      	cbz	r3, 800b202 <osSemaphoreAcquire+0x2e>
    if (timeout != 0U) {
 800b1e8:	2c00      	cmp	r4, #0
 800b1ea:	d1f6      	bne.n	800b1da <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b1ec:	aa01      	add	r2, sp, #4
 800b1ee:	4621      	mov	r1, r4
      yield = pdFALSE;
 800b1f0:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b1f2:	f001 f8c0 	bl	800c376 <xQueueReceiveFromISR>
 800b1f6:	2801      	cmp	r0, #1
 800b1f8:	d113      	bne.n	800b222 <osSemaphoreAcquire+0x4e>
        portYIELD_FROM_ISR (yield);
 800b1fa:	9b01      	ldr	r3, [sp, #4]
 800b1fc:	b9a3      	cbnz	r3, 800b228 <osSemaphoreAcquire+0x54>
  stat = osOK;
 800b1fe:	2000      	movs	r0, #0
 800b200:	e7ed      	b.n	800b1de <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b202:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800b206:	b913      	cbnz	r3, 800b20e <osSemaphoreAcquire+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b208:	f3ef 8311 	mrs	r3, BASEPRI
 800b20c:	b11b      	cbz	r3, 800b216 <osSemaphoreAcquire+0x42>
 800b20e:	4b0d      	ldr	r3, [pc, #52]	; (800b244 <osSemaphoreAcquire+0x70>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	2b02      	cmp	r3, #2
 800b214:	d0e8      	beq.n	800b1e8 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b216:	4621      	mov	r1, r4
 800b218:	f000 ffe2 	bl	800c1e0 <xQueueSemaphoreTake>
 800b21c:	2801      	cmp	r0, #1
 800b21e:	d0ee      	beq.n	800b1fe <osSemaphoreAcquire+0x2a>
      if (timeout != 0U) {
 800b220:	b96c      	cbnz	r4, 800b23e <osSemaphoreAcquire+0x6a>
        stat = osErrorResource;
 800b222:	f06f 0002 	mvn.w	r0, #2
 800b226:	e7da      	b.n	800b1de <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 800b228:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b22c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b230:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b234:	f3bf 8f4f 	dsb	sy
 800b238:	f3bf 8f6f 	isb	sy
 800b23c:	e7df      	b.n	800b1fe <osSemaphoreAcquire+0x2a>
        stat = osErrorTimeout;
 800b23e:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800b242:	e7cc      	b.n	800b1de <osSemaphoreAcquire+0xa>
 800b244:	2000df88 	.word	0x2000df88

0800b248 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b248:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800b24a:	b370      	cbz	r0, 800b2aa <osSemaphoreRelease+0x62>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b24c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800b250:	b14b      	cbz	r3, 800b266 <osSemaphoreRelease+0x1e>
    yield = pdFALSE;
 800b252:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b254:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800b256:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b258:	f000 fec1 	bl	800bfde <xQueueGiveFromISR>
 800b25c:	2801      	cmp	r0, #1
 800b25e:	d014      	beq.n	800b28a <osSemaphoreRelease+0x42>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800b260:	f06f 0002 	mvn.w	r0, #2
 800b264:	e014      	b.n	800b290 <osSemaphoreRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b266:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800b26a:	b913      	cbnz	r3, 800b272 <osSemaphoreRelease+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b26c:	f3ef 8311 	mrs	r3, BASEPRI
 800b270:	b11b      	cbz	r3, 800b27a <osSemaphoreRelease+0x32>
 800b272:	4b0f      	ldr	r3, [pc, #60]	; (800b2b0 <osSemaphoreRelease+0x68>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	2b02      	cmp	r3, #2
 800b278:	d0eb      	beq.n	800b252 <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b27a:	2300      	movs	r3, #0
 800b27c:	461a      	mov	r2, r3
 800b27e:	4619      	mov	r1, r3
 800b280:	f000 fd89 	bl	800bd96 <xQueueGenericSend>
 800b284:	2801      	cmp	r0, #1
 800b286:	d002      	beq.n	800b28e <osSemaphoreRelease+0x46>
 800b288:	e7ea      	b.n	800b260 <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
 800b28a:	9b01      	ldr	r3, [sp, #4]
 800b28c:	b913      	cbnz	r3, 800b294 <osSemaphoreRelease+0x4c>
  stat = osOK;
 800b28e:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 800b290:	b002      	add	sp, #8
 800b292:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 800b294:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b29c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b2a0:	f3bf 8f4f 	dsb	sy
 800b2a4:	f3bf 8f6f 	isb	sy
 800b2a8:	e7f1      	b.n	800b28e <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 800b2aa:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b2ae:	e7ef      	b.n	800b290 <osSemaphoreRelease+0x48>
 800b2b0:	2000df88 	.word	0x2000df88

0800b2b4 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800b2b4:	b507      	push	{r0, r1, r2, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2b6:	f3ef 8305 	mrs	r3, IPSR
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800b2ba:	b123      	cbz	r3, 800b2c6 <osSemaphoreDelete+0x12>
    stat = osErrorISR;
 800b2bc:	f06f 0005 	mvn.w	r0, #5
#else
  stat = osError;
#endif

  return (stat);
}
 800b2c0:	b003      	add	sp, #12
 800b2c2:	f85d fb04 	ldr.w	pc, [sp], #4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2c6:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800b2ca:	b913      	cbnz	r3, 800b2d2 <osSemaphoreDelete+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b2cc:	f3ef 8311 	mrs	r3, BASEPRI
 800b2d0:	b11b      	cbz	r3, 800b2da <osSemaphoreDelete+0x26>
 800b2d2:	4b08      	ldr	r3, [pc, #32]	; (800b2f4 <osSemaphoreDelete+0x40>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2b02      	cmp	r3, #2
 800b2d8:	d0f0      	beq.n	800b2bc <osSemaphoreDelete+0x8>
  else if (hSemaphore == NULL) {
 800b2da:	b138      	cbz	r0, 800b2ec <osSemaphoreDelete+0x38>
    vQueueUnregisterQueue (hSemaphore);
 800b2dc:	9001      	str	r0, [sp, #4]
 800b2de:	f001 f8cb 	bl	800c478 <vQueueUnregisterQueue>
    vSemaphoreDelete (hSemaphore);
 800b2e2:	9801      	ldr	r0, [sp, #4]
 800b2e4:	f001 f8dc 	bl	800c4a0 <vQueueDelete>
    stat = osOK;
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	e7e9      	b.n	800b2c0 <osSemaphoreDelete+0xc>
    stat = osErrorParameter;
 800b2ec:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b2f0:	e7e6      	b.n	800b2c0 <osSemaphoreDelete+0xc>
 800b2f2:	bf00      	nop
 800b2f4:	2000df88 	.word	0x2000df88

0800b2f8 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b2f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b2fa:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2fc:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b300:	b11b      	cbz	r3, 800b30a <osMessageQueueNew+0x12>
  hQueue = NULL;
 800b302:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800b304:	4628      	mov	r0, r5
 800b306:	b002      	add	sp, #8
 800b308:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b30a:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b30e:	b913      	cbnz	r3, 800b316 <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b310:	f3ef 8311 	mrs	r3, BASEPRI
 800b314:	b11b      	cbz	r3, 800b31e <osMessageQueueNew+0x26>
 800b316:	4b1a      	ldr	r3, [pc, #104]	; (800b380 <osMessageQueueNew+0x88>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2b02      	cmp	r3, #2
 800b31c:	d0f1      	beq.n	800b302 <osMessageQueueNew+0xa>
 800b31e:	2800      	cmp	r0, #0
 800b320:	d0ef      	beq.n	800b302 <osMessageQueueNew+0xa>
 800b322:	2900      	cmp	r1, #0
 800b324:	d0ed      	beq.n	800b302 <osMessageQueueNew+0xa>
    if (attr != NULL) {
 800b326:	b1ec      	cbz	r4, 800b364 <osMessageQueueNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b328:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800b32c:	b193      	cbz	r3, 800b354 <osMessageQueueNew+0x5c>
 800b32e:	2a4f      	cmp	r2, #79	; 0x4f
 800b330:	d9e7      	bls.n	800b302 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b332:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b334:	2a00      	cmp	r2, #0
 800b336:	d0e4      	beq.n	800b302 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b338:	fb01 f500 	mul.w	r5, r1, r0
 800b33c:	6966      	ldr	r6, [r4, #20]
 800b33e:	42ae      	cmp	r6, r5
 800b340:	d3df      	bcc.n	800b302 <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b342:	2500      	movs	r5, #0
 800b344:	9500      	str	r5, [sp, #0]
 800b346:	f000 fca1 	bl	800bc8c <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800b34a:	4605      	mov	r5, r0
 800b34c:	2800      	cmp	r0, #0
 800b34e:	d0d8      	beq.n	800b302 <osMessageQueueNew+0xa>
        name = attr->name;
 800b350:	6824      	ldr	r4, [r4, #0]
 800b352:	e00f      	b.n	800b374 <osMessageQueueNew+0x7c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b354:	2a00      	cmp	r2, #0
 800b356:	d1d4      	bne.n	800b302 <osMessageQueueNew+0xa>
 800b358:	6923      	ldr	r3, [r4, #16]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d1d1      	bne.n	800b302 <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b35e:	6963      	ldr	r3, [r4, #20]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d1ce      	bne.n	800b302 <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 800b364:	2200      	movs	r2, #0
 800b366:	f000 fca5 	bl	800bcb4 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800b36a:	4605      	mov	r5, r0
 800b36c:	2800      	cmp	r0, #0
 800b36e:	d0c8      	beq.n	800b302 <osMessageQueueNew+0xa>
      if (attr != NULL) {
 800b370:	2c00      	cmp	r4, #0
 800b372:	d1ed      	bne.n	800b350 <osMessageQueueNew+0x58>
      vQueueAddToRegistry (hQueue, name);
 800b374:	4621      	mov	r1, r4
 800b376:	4628      	mov	r0, r5
 800b378:	f001 f86c 	bl	800c454 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800b37c:	e7c2      	b.n	800b304 <osMessageQueueNew+0xc>
 800b37e:	bf00      	nop
 800b380:	2000df88 	.word	0x2000df88

0800b384 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b384:	b513      	push	{r0, r1, r4, lr}
 800b386:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b388:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800b38c:	b123      	cbz	r3, 800b398 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b38e:	b9d8      	cbnz	r0, 800b3c8 <osMessageQueuePut+0x44>
      stat = osErrorParameter;
 800b390:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800b394:	b002      	add	sp, #8
 800b396:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b398:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800b39c:	b913      	cbnz	r3, 800b3a4 <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b39e:	f3ef 8311 	mrs	r3, BASEPRI
 800b3a2:	b11b      	cbz	r3, 800b3ac <osMessageQueuePut+0x28>
 800b3a4:	4b17      	ldr	r3, [pc, #92]	; (800b404 <osMessageQueuePut+0x80>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2b02      	cmp	r3, #2
 800b3aa:	d0f0      	beq.n	800b38e <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	d0ef      	beq.n	800b390 <osMessageQueuePut+0xc>
 800b3b0:	2900      	cmp	r1, #0
 800b3b2:	d0ed      	beq.n	800b390 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	4622      	mov	r2, r4
 800b3b8:	f000 fced 	bl	800bd96 <xQueueGenericSend>
 800b3bc:	2801      	cmp	r0, #1
 800b3be:	d010      	beq.n	800b3e2 <osMessageQueuePut+0x5e>
        if (timeout != 0U) {
 800b3c0:	b9e4      	cbnz	r4, 800b3fc <osMessageQueuePut+0x78>
          stat = osErrorResource;
 800b3c2:	f06f 0002 	mvn.w	r0, #2
 800b3c6:	e7e5      	b.n	800b394 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b3c8:	2900      	cmp	r1, #0
 800b3ca:	d0e1      	beq.n	800b390 <osMessageQueuePut+0xc>
 800b3cc:	2c00      	cmp	r4, #0
 800b3ce:	d1df      	bne.n	800b390 <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b3d0:	4623      	mov	r3, r4
 800b3d2:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b3d4:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b3d6:	f000 fd99 	bl	800bf0c <xQueueGenericSendFromISR>
 800b3da:	2801      	cmp	r0, #1
 800b3dc:	d1f1      	bne.n	800b3c2 <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
 800b3de:	9b01      	ldr	r3, [sp, #4]
 800b3e0:	b90b      	cbnz	r3, 800b3e6 <osMessageQueuePut+0x62>
  stat = osOK;
 800b3e2:	2000      	movs	r0, #0
 800b3e4:	e7d6      	b.n	800b394 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 800b3e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b3ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3ee:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b3f2:	f3bf 8f4f 	dsb	sy
 800b3f6:	f3bf 8f6f 	isb	sy
 800b3fa:	e7f2      	b.n	800b3e2 <osMessageQueuePut+0x5e>
          stat = osErrorTimeout;
 800b3fc:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800b400:	e7c8      	b.n	800b394 <osMessageQueuePut+0x10>
 800b402:	bf00      	nop
 800b404:	2000df88 	.word	0x2000df88

0800b408 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b408:	b513      	push	{r0, r1, r4, lr}
 800b40a:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b40c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800b410:	b123      	cbz	r3, 800b41c <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b412:	b9d0      	cbnz	r0, 800b44a <osMessageQueueGet+0x42>
      stat = osErrorParameter;
 800b414:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800b418:	b002      	add	sp, #8
 800b41a:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b41c:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800b420:	b913      	cbnz	r3, 800b428 <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b422:	f3ef 8311 	mrs	r3, BASEPRI
 800b426:	b11b      	cbz	r3, 800b430 <osMessageQueueGet+0x28>
 800b428:	4b16      	ldr	r3, [pc, #88]	; (800b484 <osMessageQueueGet+0x7c>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	2b02      	cmp	r3, #2
 800b42e:	d0f0      	beq.n	800b412 <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b430:	2800      	cmp	r0, #0
 800b432:	d0ef      	beq.n	800b414 <osMessageQueueGet+0xc>
 800b434:	2900      	cmp	r1, #0
 800b436:	d0ed      	beq.n	800b414 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b438:	4622      	mov	r2, r4
 800b43a:	f000 fe2c 	bl	800c096 <xQueueReceive>
 800b43e:	2801      	cmp	r0, #1
 800b440:	d00f      	beq.n	800b462 <osMessageQueueGet+0x5a>
        if (timeout != 0U) {
 800b442:	b9dc      	cbnz	r4, 800b47c <osMessageQueueGet+0x74>
          stat = osErrorResource;
 800b444:	f06f 0002 	mvn.w	r0, #2
 800b448:	e7e6      	b.n	800b418 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b44a:	2900      	cmp	r1, #0
 800b44c:	d0e2      	beq.n	800b414 <osMessageQueueGet+0xc>
 800b44e:	2c00      	cmp	r4, #0
 800b450:	d1e0      	bne.n	800b414 <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b452:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b454:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b456:	f000 ff8e 	bl	800c376 <xQueueReceiveFromISR>
 800b45a:	2801      	cmp	r0, #1
 800b45c:	d1f2      	bne.n	800b444 <osMessageQueueGet+0x3c>
        portYIELD_FROM_ISR (yield);
 800b45e:	9b01      	ldr	r3, [sp, #4]
 800b460:	b90b      	cbnz	r3, 800b466 <osMessageQueueGet+0x5e>
  stat = osOK;
 800b462:	2000      	movs	r0, #0
 800b464:	e7d8      	b.n	800b418 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 800b466:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b46a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b46e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b472:	f3bf 8f4f 	dsb	sy
 800b476:	f3bf 8f6f 	isb	sy
 800b47a:	e7f2      	b.n	800b462 <osMessageQueueGet+0x5a>
          stat = osErrorTimeout;
 800b47c:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800b480:	e7ca      	b.n	800b418 <osMessageQueueGet+0x10>
 800b482:	bf00      	nop
 800b484:	2000df88 	.word	0x2000df88

0800b488 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b488:	4b03      	ldr	r3, [pc, #12]	; (800b498 <vApplicationGetIdleTaskMemory+0x10>)
 800b48a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b48c:	4b03      	ldr	r3, [pc, #12]	; (800b49c <vApplicationGetIdleTaskMemory+0x14>)
 800b48e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b490:	2380      	movs	r3, #128	; 0x80
 800b492:	6013      	str	r3, [r2, #0]
}
 800b494:	4770      	bx	lr
 800b496:	bf00      	nop
 800b498:	2000dec8 	.word	0x2000dec8
 800b49c:	2000dcc8 	.word	0x2000dcc8

0800b4a0 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b4a0:	4b03      	ldr	r3, [pc, #12]	; (800b4b0 <vApplicationGetTimerTaskMemory+0x10>)
 800b4a2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b4a4:	4b03      	ldr	r3, [pc, #12]	; (800b4b4 <vApplicationGetTimerTaskMemory+0x14>)
 800b4a6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b4a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4ac:	6013      	str	r3, [r2, #0]
}
 800b4ae:	4770      	bx	lr
 800b4b0:	2000e38c 	.word	0x2000e38c
 800b4b4:	2000df8c 	.word	0x2000df8c

0800b4b8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b4b8:	4b0f      	ldr	r3, [pc, #60]	; (800b4f8 <prvInsertBlockIntoFreeList+0x40>)
{
 800b4ba:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b4bc:	461a      	mov	r2, r3
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4283      	cmp	r3, r0
 800b4c2:	d3fb      	bcc.n	800b4bc <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b4c4:	6854      	ldr	r4, [r2, #4]
 800b4c6:	1911      	adds	r1, r2, r4
 800b4c8:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b4ca:	bf01      	itttt	eq
 800b4cc:	6841      	ldreq	r1, [r0, #4]
 800b4ce:	4610      	moveq	r0, r2
 800b4d0:	1909      	addeq	r1, r1, r4
 800b4d2:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b4d4:	6844      	ldr	r4, [r0, #4]
 800b4d6:	1901      	adds	r1, r0, r4
 800b4d8:	428b      	cmp	r3, r1
 800b4da:	d107      	bne.n	800b4ec <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b4dc:	4907      	ldr	r1, [pc, #28]	; (800b4fc <prvInsertBlockIntoFreeList+0x44>)
 800b4de:	6809      	ldr	r1, [r1, #0]
 800b4e0:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b4e2:	bf1f      	itttt	ne
 800b4e4:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b4e6:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b4e8:	1909      	addne	r1, r1, r4
 800b4ea:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b4ec:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b4ee:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b4f0:	bf18      	it	ne
 800b4f2:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4f4:	bd10      	pop	{r4, pc}
 800b4f6:	bf00      	nop
 800b4f8:	20020954 	.word	0x20020954
 800b4fc:	2000e44c 	.word	0x2000e44c

0800b500 <pvPortMalloc>:
{
 800b500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 800b504:	4f41      	ldr	r7, [pc, #260]	; (800b60c <pvPortMalloc+0x10c>)
{
 800b506:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800b508:	f001 f9ee 	bl	800c8e8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800b50c:	4840      	ldr	r0, [pc, #256]	; (800b610 <pvPortMalloc+0x110>)
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	b9f3      	cbnz	r3, 800b550 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800b512:	4940      	ldr	r1, [pc, #256]	; (800b614 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800b514:	2300      	movs	r3, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b516:	074d      	lsls	r5, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b518:	4d3f      	ldr	r5, [pc, #252]	; (800b618 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b51a:	bf1b      	ittet	ne
 800b51c:	3107      	addne	r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b51e:	4a3f      	ldrne	r2, [pc, #252]	; (800b61c <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b520:	4a3f      	ldreq	r2, [pc, #252]	; (800b620 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b522:	f021 0107 	bicne.w	r1, r1, #7
	xStart.xBlockSize = ( size_t ) 0;
 800b526:	606b      	str	r3, [r5, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b528:	bf18      	it	ne
 800b52a:	1a52      	subne	r2, r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b52c:	6029      	str	r1, [r5, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b52e:	440a      	add	r2, r1
	uxAddress -= xHeapStructSize;
 800b530:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b532:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 800b536:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b53a:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 800b53c:	603a      	str	r2, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b53e:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b542:	4a38      	ldr	r2, [pc, #224]	; (800b624 <pvPortMalloc+0x124>)
 800b544:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b546:	4a38      	ldr	r2, [pc, #224]	; (800b628 <pvPortMalloc+0x128>)
 800b548:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b54a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b54e:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b550:	f8d0 8000 	ldr.w	r8, [r0]
 800b554:	ea18 0f04 	tst.w	r8, r4
 800b558:	d152      	bne.n	800b600 <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 800b55a:	2c00      	cmp	r4, #0
 800b55c:	d041      	beq.n	800b5e2 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 800b55e:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b562:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b564:	bf1c      	itt	ne
 800b566:	f023 0307 	bicne.w	r3, r3, #7
 800b56a:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d047      	beq.n	800b600 <pvPortMalloc+0x100>
 800b570:	4c2d      	ldr	r4, [pc, #180]	; (800b628 <pvPortMalloc+0x128>)
 800b572:	6826      	ldr	r6, [r4, #0]
 800b574:	429e      	cmp	r6, r3
 800b576:	d343      	bcc.n	800b600 <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 800b578:	4a27      	ldr	r2, [pc, #156]	; (800b618 <pvPortMalloc+0x118>)
 800b57a:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b57c:	6869      	ldr	r1, [r5, #4]
 800b57e:	4299      	cmp	r1, r3
 800b580:	d201      	bcs.n	800b586 <pvPortMalloc+0x86>
 800b582:	6828      	ldr	r0, [r5, #0]
 800b584:	b9b0      	cbnz	r0, 800b5b4 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800b586:	6838      	ldr	r0, [r7, #0]
 800b588:	42a8      	cmp	r0, r5
 800b58a:	d039      	beq.n	800b600 <pvPortMalloc+0x100>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b58c:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b58e:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b590:	6817      	ldr	r7, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b592:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b594:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b596:	d914      	bls.n	800b5c2 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b598:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b59a:	0742      	lsls	r2, r0, #29
 800b59c:	d00d      	beq.n	800b5ba <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a2:	b672      	cpsid	i
 800b5a4:	f383 8811 	msr	BASEPRI, r3
 800b5a8:	f3bf 8f6f 	isb	sy
 800b5ac:	f3bf 8f4f 	dsb	sy
 800b5b0:	b662      	cpsie	i
 800b5b2:	e7fe      	b.n	800b5b2 <pvPortMalloc+0xb2>
 800b5b4:	462a      	mov	r2, r5
 800b5b6:	4605      	mov	r5, r0
 800b5b8:	e7e0      	b.n	800b57c <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b5ba:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b5bc:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b5be:	f7ff ff7b 	bl	800b4b8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b5c2:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b5c4:	4917      	ldr	r1, [pc, #92]	; (800b624 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b5c6:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b5c8:	ea48 0303 	orr.w	r3, r8, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b5cc:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b5ce:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b5d0:	f107 0408 	add.w	r4, r7, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b5d4:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b5d6:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b5d8:	f04f 0300 	mov.w	r3, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b5dc:	bf38      	it	cc
 800b5de:	600e      	strcc	r6, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800b5e0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800b5e2:	f001 fa2f 	bl	800ca44 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5e6:	0763      	lsls	r3, r4, #29
 800b5e8:	d00c      	beq.n	800b604 <pvPortMalloc+0x104>
 800b5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ee:	b672      	cpsid	i
 800b5f0:	f383 8811 	msr	BASEPRI, r3
 800b5f4:	f3bf 8f6f 	isb	sy
 800b5f8:	f3bf 8f4f 	dsb	sy
 800b5fc:	b662      	cpsie	i
 800b5fe:	e7fe      	b.n	800b5fe <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 800b600:	2400      	movs	r4, #0
 800b602:	e7ee      	b.n	800b5e2 <pvPortMalloc+0xe2>
}
 800b604:	4620      	mov	r0, r4
 800b606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b60a:	bf00      	nop
 800b60c:	2000e44c 	.word	0x2000e44c
 800b610:	20020948 	.word	0x20020948
 800b614:	2000e450 	.word	0x2000e450
 800b618:	20020954 	.word	0x20020954
 800b61c:	20020948 	.word	0x20020948
 800b620:	000124f8 	.word	0x000124f8
 800b624:	20020950 	.word	0x20020950
 800b628:	2002094c 	.word	0x2002094c

0800b62c <vPortFree>:
{
 800b62c:	b510      	push	{r4, lr}
	if( pv != NULL )
 800b62e:	4604      	mov	r4, r0
 800b630:	2800      	cmp	r0, #0
 800b632:	d032      	beq.n	800b69a <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b634:	4a19      	ldr	r2, [pc, #100]	; (800b69c <vPortFree+0x70>)
 800b636:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800b63a:	6812      	ldr	r2, [r2, #0]
 800b63c:	4213      	tst	r3, r2
 800b63e:	d10a      	bne.n	800b656 <vPortFree+0x2a>
 800b640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b644:	b672      	cpsid	i
 800b646:	f383 8811 	msr	BASEPRI, r3
 800b64a:	f3bf 8f6f 	isb	sy
 800b64e:	f3bf 8f4f 	dsb	sy
 800b652:	b662      	cpsie	i
 800b654:	e7fe      	b.n	800b654 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b656:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800b65a:	b151      	cbz	r1, 800b672 <vPortFree+0x46>
 800b65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b660:	b672      	cpsid	i
 800b662:	f383 8811 	msr	BASEPRI, r3
 800b666:	f3bf 8f6f 	isb	sy
 800b66a:	f3bf 8f4f 	dsb	sy
 800b66e:	b662      	cpsie	i
 800b670:	e7fe      	b.n	800b670 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b672:	ea23 0302 	bic.w	r3, r3, r2
 800b676:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800b67a:	f001 f935 	bl	800c8e8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b67e:	4a08      	ldr	r2, [pc, #32]	; (800b6a0 <vPortFree+0x74>)
 800b680:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b684:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b688:	6811      	ldr	r1, [r2, #0]
 800b68a:	440b      	add	r3, r1
 800b68c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b68e:	f7ff ff13 	bl	800b4b8 <prvInsertBlockIntoFreeList>
}
 800b692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800b696:	f001 b9d5 	b.w	800ca44 <xTaskResumeAll>
}
 800b69a:	bd10      	pop	{r4, pc}
 800b69c:	20020948 	.word	0x20020948
 800b6a0:	2002094c 	.word	0x2002094c

0800b6a4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6a4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b6a8:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6ac:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6ae:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6b0:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b6b8:	4770      	bx	lr

0800b6ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b6be:	4770      	bx	lr

0800b6c0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800b6c0:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b6c2:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800b6c4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b6c6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b6c8:	689a      	ldr	r2, [r3, #8]
 800b6ca:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b6cc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800b6ce:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800b6d0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	6003      	str	r3, [r0, #0]
}
 800b6d6:	4770      	bx	lr

0800b6d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b6d8:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b6da:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b6dc:	1c63      	adds	r3, r4, #1
 800b6de:	d10a      	bne.n	800b6f6 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b6e0:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b6e2:	685a      	ldr	r2, [r3, #4]
 800b6e4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b6e6:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b6e8:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800b6ea:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800b6ec:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800b6ee:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	6003      	str	r3, [r0, #0]
}
 800b6f4:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b6f6:	f100 0208 	add.w	r2, r0, #8
 800b6fa:	4613      	mov	r3, r2
 800b6fc:	6852      	ldr	r2, [r2, #4]
 800b6fe:	6815      	ldr	r5, [r2, #0]
 800b700:	42a5      	cmp	r5, r4
 800b702:	d9fa      	bls.n	800b6fa <vListInsert+0x22>
 800b704:	e7ed      	b.n	800b6e2 <vListInsert+0xa>

0800b706 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b706:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b708:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800b70c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b70e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b710:	6859      	ldr	r1, [r3, #4]
 800b712:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b714:	bf08      	it	eq
 800b716:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b718:	2200      	movs	r2, #0
 800b71a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	3a01      	subs	r2, #1
 800b720:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b722:	6818      	ldr	r0, [r3, #0]
}
 800b724:	4770      	bx	lr
	...

0800b728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b728:	4808      	ldr	r0, [pc, #32]	; (800b74c <prvPortStartFirstTask+0x24>)
 800b72a:	6800      	ldr	r0, [r0, #0]
 800b72c:	6800      	ldr	r0, [r0, #0]
 800b72e:	f380 8808 	msr	MSP, r0
 800b732:	f04f 0000 	mov.w	r0, #0
 800b736:	f380 8814 	msr	CONTROL, r0
 800b73a:	b662      	cpsie	i
 800b73c:	b661      	cpsie	f
 800b73e:	f3bf 8f4f 	dsb	sy
 800b742:	f3bf 8f6f 	isb	sy
 800b746:	df00      	svc	0
 800b748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b74a:	0000      	.short	0x0000
 800b74c:	e000ed08 	.word	0xe000ed08

0800b750 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b750:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b760 <vPortEnableVFP+0x10>
 800b754:	6801      	ldr	r1, [r0, #0]
 800b756:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b75a:	6001      	str	r1, [r0, #0]
 800b75c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b75e:	0000      	.short	0x0000
 800b760:	e000ed88 	.word	0xe000ed88

0800b764 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800b764:	2300      	movs	r3, #0
{
 800b766:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800b768:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800b76a:	4b0f      	ldr	r3, [pc, #60]	; (800b7a8 <prvTaskExitError+0x44>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	3301      	adds	r3, #1
 800b770:	d00a      	beq.n	800b788 <prvTaskExitError+0x24>
 800b772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b776:	b672      	cpsid	i
 800b778:	f383 8811 	msr	BASEPRI, r3
 800b77c:	f3bf 8f6f 	isb	sy
 800b780:	f3bf 8f4f 	dsb	sy
 800b784:	b662      	cpsie	i
 800b786:	e7fe      	b.n	800b786 <prvTaskExitError+0x22>
 800b788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78c:	b672      	cpsid	i
 800b78e:	f383 8811 	msr	BASEPRI, r3
 800b792:	f3bf 8f6f 	isb	sy
 800b796:	f3bf 8f4f 	dsb	sy
 800b79a:	b662      	cpsie	i
	while( ulDummy == 0 )
 800b79c:	9b01      	ldr	r3, [sp, #4]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d0fc      	beq.n	800b79c <prvTaskExitError+0x38>
}
 800b7a2:	b002      	add	sp, #8
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	20000054 	.word	0x20000054

0800b7ac <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b7ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b7b0:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b7b4:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800b7b8:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b7ba:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b7bc:	4b03      	ldr	r3, [pc, #12]	; (800b7cc <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b7be:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b7c0:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b7c2:	f06f 0302 	mvn.w	r3, #2
 800b7c6:	6203      	str	r3, [r0, #32]
}
 800b7c8:	4770      	bx	lr
 800b7ca:	bf00      	nop
 800b7cc:	0800b765 	.word	0x0800b765

0800b7d0 <SVC_Handler>:
	__asm volatile (
 800b7d0:	4b07      	ldr	r3, [pc, #28]	; (800b7f0 <pxCurrentTCBConst2>)
 800b7d2:	6819      	ldr	r1, [r3, #0]
 800b7d4:	6808      	ldr	r0, [r1, #0]
 800b7d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7da:	f380 8809 	msr	PSP, r0
 800b7de:	f3bf 8f6f 	isb	sy
 800b7e2:	f04f 0000 	mov.w	r0, #0
 800b7e6:	f380 8811 	msr	BASEPRI, r0
 800b7ea:	4770      	bx	lr
 800b7ec:	f3af 8000 	nop.w

0800b7f0 <pxCurrentTCBConst2>:
 800b7f0:	200209a4 	.word	0x200209a4

0800b7f4 <vPortEnterCritical>:
 800b7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f8:	b672      	cpsid	i
 800b7fa:	f383 8811 	msr	BASEPRI, r3
 800b7fe:	f3bf 8f6f 	isb	sy
 800b802:	f3bf 8f4f 	dsb	sy
 800b806:	b662      	cpsie	i
	uxCriticalNesting++;
 800b808:	4a0b      	ldr	r2, [pc, #44]	; (800b838 <vPortEnterCritical+0x44>)
 800b80a:	6813      	ldr	r3, [r2, #0]
 800b80c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800b80e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800b810:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800b812:	d110      	bne.n	800b836 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b814:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b818:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800b81c:	b2db      	uxtb	r3, r3
 800b81e:	b153      	cbz	r3, 800b836 <vPortEnterCritical+0x42>
 800b820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b824:	b672      	cpsid	i
 800b826:	f383 8811 	msr	BASEPRI, r3
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	b662      	cpsie	i
 800b834:	e7fe      	b.n	800b834 <vPortEnterCritical+0x40>
}
 800b836:	4770      	bx	lr
 800b838:	20000054 	.word	0x20000054

0800b83c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800b83c:	4a09      	ldr	r2, [pc, #36]	; (800b864 <vPortExitCritical+0x28>)
 800b83e:	6813      	ldr	r3, [r2, #0]
 800b840:	b953      	cbnz	r3, 800b858 <vPortExitCritical+0x1c>
 800b842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b846:	b672      	cpsid	i
 800b848:	f383 8811 	msr	BASEPRI, r3
 800b84c:	f3bf 8f6f 	isb	sy
 800b850:	f3bf 8f4f 	dsb	sy
 800b854:	b662      	cpsie	i
 800b856:	e7fe      	b.n	800b856 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800b858:	3b01      	subs	r3, #1
 800b85a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b85c:	b90b      	cbnz	r3, 800b862 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b85e:	f383 8811 	msr	BASEPRI, r3
}
 800b862:	4770      	bx	lr
 800b864:	20000054 	.word	0x20000054
	...

0800b870 <PendSV_Handler>:
	__asm volatile
 800b870:	f3ef 8009 	mrs	r0, PSP
 800b874:	f3bf 8f6f 	isb	sy
 800b878:	4b15      	ldr	r3, [pc, #84]	; (800b8d0 <pxCurrentTCBConst>)
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	f01e 0f10 	tst.w	lr, #16
 800b880:	bf08      	it	eq
 800b882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b88a:	6010      	str	r0, [r2, #0]
 800b88c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b890:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b894:	b672      	cpsid	i
 800b896:	f380 8811 	msr	BASEPRI, r0
 800b89a:	f3bf 8f4f 	dsb	sy
 800b89e:	f3bf 8f6f 	isb	sy
 800b8a2:	b662      	cpsie	i
 800b8a4:	f001 f9de 	bl	800cc64 <vTaskSwitchContext>
 800b8a8:	f04f 0000 	mov.w	r0, #0
 800b8ac:	f380 8811 	msr	BASEPRI, r0
 800b8b0:	bc09      	pop	{r0, r3}
 800b8b2:	6819      	ldr	r1, [r3, #0]
 800b8b4:	6808      	ldr	r0, [r1, #0]
 800b8b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ba:	f01e 0f10 	tst.w	lr, #16
 800b8be:	bf08      	it	eq
 800b8c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b8c4:	f380 8809 	msr	PSP, r0
 800b8c8:	f3bf 8f6f 	isb	sy
 800b8cc:	4770      	bx	lr
 800b8ce:	bf00      	nop

0800b8d0 <pxCurrentTCBConst>:
 800b8d0:	200209a4 	.word	0x200209a4

0800b8d4 <SysTick_Handler>:
{
 800b8d4:	b508      	push	{r3, lr}
	__asm volatile
 800b8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8da:	b672      	cpsid	i
 800b8dc:	f383 8811 	msr	BASEPRI, r3
 800b8e0:	f3bf 8f6f 	isb	sy
 800b8e4:	f3bf 8f4f 	dsb	sy
 800b8e8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800b8ea:	f001 f813 	bl	800c914 <xTaskIncrementTick>
 800b8ee:	b128      	cbz	r0, 800b8fc <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b8f0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b8f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8f8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	f383 8811 	msr	BASEPRI, r3
}
 800b902:	bd08      	pop	{r3, pc}

0800b904 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b904:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800b908:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b90a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b90e:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b910:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b912:	4b04      	ldr	r3, [pc, #16]	; (800b924 <vPortSetupTimerInterrupt+0x20>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	fbb3 f3f1 	udiv	r3, r3, r1
 800b91a:	3b01      	subs	r3, #1
 800b91c:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b91e:	2307      	movs	r3, #7
 800b920:	6113      	str	r3, [r2, #16]
}
 800b922:	4770      	bx	lr
 800b924:	20000048 	.word	0x20000048

0800b928 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b928:	4b2e      	ldr	r3, [pc, #184]	; (800b9e4 <xPortStartScheduler+0xbc>)
{
 800b92a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b92c:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b92e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b930:	b2d2      	uxtb	r2, r2
 800b932:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b934:	22ff      	movs	r2, #255	; 0xff
 800b936:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b938:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b93a:	4a2b      	ldr	r2, [pc, #172]	; (800b9e8 <xPortStartScheduler+0xc0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b93c:	b2db      	uxtb	r3, r3
 800b93e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b942:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b946:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b94a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b94c:	2307      	movs	r3, #7
 800b94e:	4a27      	ldr	r2, [pc, #156]	; (800b9ec <xPortStartScheduler+0xc4>)
 800b950:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b952:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800b956:	1e5c      	subs	r4, r3, #1
 800b958:	0600      	lsls	r0, r0, #24
 800b95a:	d40e      	bmi.n	800b97a <xPortStartScheduler+0x52>
 800b95c:	b111      	cbz	r1, 800b964 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b95e:	2b03      	cmp	r3, #3
 800b960:	6013      	str	r3, [r2, #0]
 800b962:	d013      	beq.n	800b98c <xPortStartScheduler+0x64>
	__asm volatile
 800b964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b968:	b672      	cpsid	i
 800b96a:	f383 8811 	msr	BASEPRI, r3
 800b96e:	f3bf 8f6f 	isb	sy
 800b972:	f3bf 8f4f 	dsb	sy
 800b976:	b662      	cpsie	i
 800b978:	e7fe      	b.n	800b978 <xPortStartScheduler+0x50>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b97a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b97e:	2101      	movs	r1, #1
 800b980:	005b      	lsls	r3, r3, #1
 800b982:	b2db      	uxtb	r3, r3
 800b984:	f88d 3003 	strb.w	r3, [sp, #3]
 800b988:	4623      	mov	r3, r4
 800b98a:	e7e2      	b.n	800b952 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b98c:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b990:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 800b994:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b996:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b998:	9b01      	ldr	r3, [sp, #4]
 800b99a:	4a12      	ldr	r2, [pc, #72]	; (800b9e4 <xPortStartScheduler+0xbc>)
 800b99c:	b2db      	uxtb	r3, r3
 800b99e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b9a0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800b9a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b9a8:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b9ac:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800b9b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b9b4:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800b9b8:	f7ff ffa4 	bl	800b904 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800b9bc:	4b0c      	ldr	r3, [pc, #48]	; (800b9f0 <xPortStartScheduler+0xc8>)
 800b9be:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800b9c0:	f7ff fec6 	bl	800b750 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b9c4:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800b9c8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b9cc:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800b9d0:	f7ff feaa 	bl	800b728 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800b9d4:	f001 f946 	bl	800cc64 <vTaskSwitchContext>
}
 800b9d8:	4628      	mov	r0, r5
	prvTaskExitError();
 800b9da:	f7ff fec3 	bl	800b764 <prvTaskExitError>
}
 800b9de:	b003      	add	sp, #12
 800b9e0:	bd30      	pop	{r4, r5, pc}
 800b9e2:	bf00      	nop
 800b9e4:	e000e400 	.word	0xe000e400
 800b9e8:	2002095c 	.word	0x2002095c
 800b9ec:	20020960 	.word	0x20020960
 800b9f0:	20000054 	.word	0x20000054

0800b9f4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b9f4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b9f8:	2b0f      	cmp	r3, #15
 800b9fa:	d910      	bls.n	800ba1e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b9fc:	4a13      	ldr	r2, [pc, #76]	; (800ba4c <vPortValidateInterruptPriority+0x58>)
 800b9fe:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ba00:	4a13      	ldr	r2, [pc, #76]	; (800ba50 <vPortValidateInterruptPriority+0x5c>)
 800ba02:	7812      	ldrb	r2, [r2, #0]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d90a      	bls.n	800ba1e <vPortValidateInterruptPriority+0x2a>
 800ba08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0c:	b672      	cpsid	i
 800ba0e:	f383 8811 	msr	BASEPRI, r3
 800ba12:	f3bf 8f6f 	isb	sy
 800ba16:	f3bf 8f4f 	dsb	sy
 800ba1a:	b662      	cpsie	i
 800ba1c:	e7fe      	b.n	800ba1c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ba1e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ba22:	4a0c      	ldr	r2, [pc, #48]	; (800ba54 <vPortValidateInterruptPriority+0x60>)
 800ba24:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800ba28:	6812      	ldr	r2, [r2, #0]
 800ba2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d90a      	bls.n	800ba48 <vPortValidateInterruptPriority+0x54>
 800ba32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba36:	b672      	cpsid	i
 800ba38:	f383 8811 	msr	BASEPRI, r3
 800ba3c:	f3bf 8f6f 	isb	sy
 800ba40:	f3bf 8f4f 	dsb	sy
 800ba44:	b662      	cpsie	i
 800ba46:	e7fe      	b.n	800ba46 <vPortValidateInterruptPriority+0x52>
	}
 800ba48:	4770      	bx	lr
 800ba4a:	bf00      	nop
 800ba4c:	e000e3f0 	.word	0xe000e3f0
 800ba50:	2002095c 	.word	0x2002095c
 800ba54:	20020960 	.word	0x20020960

0800ba58 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ba58:	b510      	push	{r4, lr}
 800ba5a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba5c:	f7ff feca 	bl	800b7f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ba60:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800ba62:	f7ff feeb 	bl	800b83c <vPortExitCritical>

	return xReturn;
}
 800ba66:	fab4 f084 	clz	r0, r4
 800ba6a:	0940      	lsrs	r0, r0, #5
 800ba6c:	bd10      	pop	{r4, pc}

0800ba6e <prvCopyDataToQueue>:
{
 800ba6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba70:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ba72:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800ba74:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba76:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ba78:	b952      	cbnz	r2, 800ba90 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ba7a:	6807      	ldr	r7, [r0, #0]
 800ba7c:	bb47      	cbnz	r7, 800bad0 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ba7e:	6880      	ldr	r0, [r0, #8]
 800ba80:	f001 fa5e 	bl	800cf40 <xTaskPriorityDisinherit>
 800ba84:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ba86:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ba88:	3601      	adds	r6, #1
}
 800ba8a:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ba8c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800ba8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800ba90:	b965      	cbnz	r5, 800baac <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba92:	6840      	ldr	r0, [r0, #4]
 800ba94:	f019 f92c 	bl	8024cf0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba98:	6863      	ldr	r3, [r4, #4]
 800ba9a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ba9c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba9e:	68a2      	ldr	r2, [r4, #8]
 800baa0:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800baa2:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800baa4:	d3f0      	bcc.n	800ba88 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800baa6:	6823      	ldr	r3, [r4, #0]
 800baa8:	6063      	str	r3, [r4, #4]
 800baaa:	e7ed      	b.n	800ba88 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800baac:	68c0      	ldr	r0, [r0, #12]
 800baae:	f019 f91f 	bl	8024cf0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bab2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800bab4:	68e3      	ldr	r3, [r4, #12]
 800bab6:	4251      	negs	r1, r2
 800bab8:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800baba:	6822      	ldr	r2, [r4, #0]
 800babc:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800babe:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bac0:	bf3e      	ittt	cc
 800bac2:	68a3      	ldrcc	r3, [r4, #8]
 800bac4:	185b      	addcc	r3, r3, r1
 800bac6:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800bac8:	2d02      	cmp	r5, #2
 800baca:	d101      	bne.n	800bad0 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bacc:	b116      	cbz	r6, 800bad4 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800bace:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800bad0:	2500      	movs	r5, #0
 800bad2:	e7d9      	b.n	800ba88 <prvCopyDataToQueue+0x1a>
 800bad4:	4635      	mov	r5, r6
 800bad6:	e7d7      	b.n	800ba88 <prvCopyDataToQueue+0x1a>

0800bad8 <prvCopyDataFromQueue>:
{
 800bad8:	4603      	mov	r3, r0
 800bada:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800badc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800bade:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bae0:	b162      	cbz	r2, 800bafc <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bae2:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bae4:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bae6:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bae8:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800baea:	60dc      	str	r4, [r3, #12]
}
 800baec:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800baf0:	bf24      	itt	cs
 800baf2:	6819      	ldrcs	r1, [r3, #0]
 800baf4:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800baf6:	68d9      	ldr	r1, [r3, #12]
 800baf8:	f019 b8fa 	b.w	8024cf0 <memcpy>
}
 800bafc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb00:	4770      	bx	lr

0800bb02 <prvUnlockQueue>:
{
 800bb02:	b570      	push	{r4, r5, r6, lr}
 800bb04:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800bb06:	f7ff fe75 	bl	800b7f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800bb0a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb0e:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800bb12:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb14:	2d00      	cmp	r5, #0
 800bb16:	dc14      	bgt.n	800bb42 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800bb18:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb1a:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800bb1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800bb22:	f7ff fe8b 	bl	800b83c <vPortExitCritical>
	taskENTER_CRITICAL();
 800bb26:	f7ff fe65 	bl	800b7f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800bb2a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800bb2e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb30:	2d00      	cmp	r5, #0
 800bb32:	dc12      	bgt.n	800bb5a <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800bb34:	23ff      	movs	r3, #255	; 0xff
 800bb36:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800bb3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800bb3e:	f7ff be7d 	b.w	800b83c <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d0e7      	beq.n	800bb18 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb48:	4630      	mov	r0, r6
 800bb4a:	f001 f911 	bl	800cd70 <xTaskRemoveFromEventList>
 800bb4e:	b108      	cbz	r0, 800bb54 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800bb50:	f001 f9a0 	bl	800ce94 <vTaskMissedYield>
			--cTxLock;
 800bb54:	3d01      	subs	r5, #1
 800bb56:	b26d      	sxtb	r5, r5
 800bb58:	e7dc      	b.n	800bb14 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb5a:	6923      	ldr	r3, [r4, #16]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d0e9      	beq.n	800bb34 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb60:	4630      	mov	r0, r6
 800bb62:	f001 f905 	bl	800cd70 <xTaskRemoveFromEventList>
 800bb66:	b108      	cbz	r0, 800bb6c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800bb68:	f001 f994 	bl	800ce94 <vTaskMissedYield>
				--cRxLock;
 800bb6c:	3d01      	subs	r5, #1
 800bb6e:	b26d      	sxtb	r5, r5
 800bb70:	e7de      	b.n	800bb30 <prvUnlockQueue+0x2e>

0800bb72 <xQueueGenericReset>:
{
 800bb72:	b538      	push	{r3, r4, r5, lr}
 800bb74:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800bb76:	4604      	mov	r4, r0
 800bb78:	b950      	cbnz	r0, 800bb90 <xQueueGenericReset+0x1e>
 800bb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7e:	b672      	cpsid	i
 800bb80:	f383 8811 	msr	BASEPRI, r3
 800bb84:	f3bf 8f6f 	isb	sy
 800bb88:	f3bf 8f4f 	dsb	sy
 800bb8c:	b662      	cpsie	i
 800bb8e:	e7fe      	b.n	800bb8e <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 800bb90:	f7ff fe30 	bl	800b7f4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb94:	6822      	ldr	r2, [r4, #0]
 800bb96:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb9a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb9c:	434b      	muls	r3, r1
 800bb9e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bba0:	1a5b      	subs	r3, r3, r1
 800bba2:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bba4:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bba6:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bba8:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bbaa:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bbac:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800bbae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bbb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800bbb6:	b9a5      	cbnz	r5, 800bbe2 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbb8:	6923      	ldr	r3, [r4, #16]
 800bbba:	b173      	cbz	r3, 800bbda <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bbbc:	f104 0010 	add.w	r0, r4, #16
 800bbc0:	f001 f8d6 	bl	800cd70 <xTaskRemoveFromEventList>
 800bbc4:	b148      	cbz	r0, 800bbda <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 800bbc6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bbca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbce:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800bbd2:	f3bf 8f4f 	dsb	sy
 800bbd6:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800bbda:	f7ff fe2f 	bl	800b83c <vPortExitCritical>
}
 800bbde:	2001      	movs	r0, #1
 800bbe0:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bbe2:	f104 0010 	add.w	r0, r4, #16
 800bbe6:	f7ff fd5d 	bl	800b6a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bbea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800bbee:	f7ff fd59 	bl	800b6a4 <vListInitialise>
 800bbf2:	e7f2      	b.n	800bbda <xQueueGenericReset+0x68>

0800bbf4 <xQueueGenericCreateStatic.part.0>:
	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
 800bbf4:	b513      	push	{r0, r1, r4, lr}
		configASSERT( pxStaticQueue != NULL );
 800bbf6:	461c      	mov	r4, r3
 800bbf8:	b953      	cbnz	r3, 800bc10 <xQueueGenericCreateStatic.part.0+0x1c>
 800bbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfe:	b672      	cpsid	i
 800bc00:	f383 8811 	msr	BASEPRI, r3
 800bc04:	f3bf 8f6f 	isb	sy
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	b662      	cpsie	i
 800bc0e:	e7fe      	b.n	800bc0e <xQueueGenericCreateStatic.part.0+0x1a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bc10:	b15a      	cbz	r2, 800bc2a <xQueueGenericCreateStatic.part.0+0x36>
 800bc12:	b9b1      	cbnz	r1, 800bc42 <xQueueGenericCreateStatic.part.0+0x4e>
 800bc14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc18:	b672      	cpsid	i
 800bc1a:	f383 8811 	msr	BASEPRI, r3
 800bc1e:	f3bf 8f6f 	isb	sy
 800bc22:	f3bf 8f4f 	dsb	sy
 800bc26:	b662      	cpsie	i
 800bc28:	e7fe      	b.n	800bc28 <xQueueGenericCreateStatic.part.0+0x34>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bc2a:	b151      	cbz	r1, 800bc42 <xQueueGenericCreateStatic.part.0+0x4e>
 800bc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc30:	b672      	cpsid	i
 800bc32:	f383 8811 	msr	BASEPRI, r3
 800bc36:	f3bf 8f6f 	isb	sy
 800bc3a:	f3bf 8f4f 	dsb	sy
 800bc3e:	b662      	cpsie	i
 800bc40:	e7fe      	b.n	800bc40 <xQueueGenericCreateStatic.part.0+0x4c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bc42:	2350      	movs	r3, #80	; 0x50
 800bc44:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bc46:	9b01      	ldr	r3, [sp, #4]
 800bc48:	2b50      	cmp	r3, #80	; 0x50
 800bc4a:	d00a      	beq.n	800bc62 <xQueueGenericCreateStatic.part.0+0x6e>
 800bc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc50:	b672      	cpsid	i
 800bc52:	f383 8811 	msr	BASEPRI, r3
 800bc56:	f3bf 8f6f 	isb	sy
 800bc5a:	f3bf 8f4f 	dsb	sy
 800bc5e:	b662      	cpsie	i
 800bc60:	e7fe      	b.n	800bc60 <xQueueGenericCreateStatic.part.0+0x6c>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800bc62:	2900      	cmp	r1, #0
 800bc64:	bf08      	it	eq
 800bc66:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bc68:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	6022      	str	r2, [r4, #0]
 800bc6e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800bc72:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bc76:	4619      	mov	r1, r3
 800bc78:	4620      	mov	r0, r4
 800bc7a:	f7ff ff7a 	bl	800bb72 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800bc7e:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 800bc82:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800bc84:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 800bc88:	b002      	add	sp, #8
 800bc8a:	bd10      	pop	{r4, pc}

0800bc8c <xQueueGenericCreateStatic>:
	{
 800bc8c:	b410      	push	{r4}
 800bc8e:	f89d 4004 	ldrb.w	r4, [sp, #4]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bc92:	b950      	cbnz	r0, 800bcaa <xQueueGenericCreateStatic+0x1e>
 800bc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc98:	b672      	cpsid	i
 800bc9a:	f383 8811 	msr	BASEPRI, r3
 800bc9e:	f3bf 8f6f 	isb	sy
 800bca2:	f3bf 8f4f 	dsb	sy
 800bca6:	b662      	cpsie	i
 800bca8:	e7fe      	b.n	800bca8 <xQueueGenericCreateStatic+0x1c>
 800bcaa:	9401      	str	r4, [sp, #4]
	}
 800bcac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcb0:	f7ff bfa0 	b.w	800bbf4 <xQueueGenericCreateStatic.part.0>

0800bcb4 <xQueueGenericCreate>:
	{
 800bcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcb6:	460d      	mov	r5, r1
 800bcb8:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bcba:	4606      	mov	r6, r0
 800bcbc:	b950      	cbnz	r0, 800bcd4 <xQueueGenericCreate+0x20>
 800bcbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc2:	b672      	cpsid	i
 800bcc4:	f383 8811 	msr	BASEPRI, r3
 800bcc8:	f3bf 8f6f 	isb	sy
 800bccc:	f3bf 8f4f 	dsb	sy
 800bcd0:	b662      	cpsie	i
 800bcd2:	e7fe      	b.n	800bcd2 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcd4:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bcd6:	3050      	adds	r0, #80	; 0x50
 800bcd8:	f7ff fc12 	bl	800b500 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800bcdc:	4604      	mov	r4, r0
 800bcde:	b170      	cbz	r0, 800bcfe <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bce0:	2300      	movs	r3, #0
 800bce2:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800bce6:	b165      	cbz	r5, 800bd02 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bce8:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bcec:	2101      	movs	r1, #1
 800bcee:	4620      	mov	r0, r4
 800bcf0:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800bcf2:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bcf6:	f7ff ff3c 	bl	800bb72 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800bcfa:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800bcfe:	4620      	mov	r0, r4
 800bd00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd02:	4603      	mov	r3, r0
 800bd04:	e7f2      	b.n	800bcec <xQueueGenericCreate+0x38>

0800bd06 <xQueueCreateCountingSemaphoreStatic>:
	{
 800bd06:	b513      	push	{r0, r1, r4, lr}
 800bd08:	4613      	mov	r3, r2
 800bd0a:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800bd0c:	b950      	cbnz	r0, 800bd24 <xQueueCreateCountingSemaphoreStatic+0x1e>
 800bd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd12:	b672      	cpsid	i
 800bd14:	f383 8811 	msr	BASEPRI, r3
 800bd18:	f3bf 8f6f 	isb	sy
 800bd1c:	f3bf 8f4f 	dsb	sy
 800bd20:	b662      	cpsie	i
 800bd22:	e7fe      	b.n	800bd22 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bd24:	4288      	cmp	r0, r1
 800bd26:	d20a      	bcs.n	800bd3e <xQueueCreateCountingSemaphoreStatic+0x38>
 800bd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2c:	b672      	cpsid	i
 800bd2e:	f383 8811 	msr	BASEPRI, r3
 800bd32:	f3bf 8f6f 	isb	sy
 800bd36:	f3bf 8f4f 	dsb	sy
 800bd3a:	b662      	cpsie	i
 800bd3c:	e7fe      	b.n	800bd3c <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bd3e:	2202      	movs	r2, #2
 800bd40:	9200      	str	r2, [sp, #0]
 800bd42:	2200      	movs	r2, #0
 800bd44:	4611      	mov	r1, r2
 800bd46:	f7ff ffa1 	bl	800bc8c <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800bd4a:	b100      	cbz	r0, 800bd4e <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bd4c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800bd4e:	b002      	add	sp, #8
 800bd50:	bd10      	pop	{r4, pc}

0800bd52 <xQueueCreateCountingSemaphore>:
	{
 800bd52:	b510      	push	{r4, lr}
 800bd54:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800bd56:	b950      	cbnz	r0, 800bd6e <xQueueCreateCountingSemaphore+0x1c>
 800bd58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5c:	b672      	cpsid	i
 800bd5e:	f383 8811 	msr	BASEPRI, r3
 800bd62:	f3bf 8f6f 	isb	sy
 800bd66:	f3bf 8f4f 	dsb	sy
 800bd6a:	b662      	cpsie	i
 800bd6c:	e7fe      	b.n	800bd6c <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bd6e:	4288      	cmp	r0, r1
 800bd70:	d20a      	bcs.n	800bd88 <xQueueCreateCountingSemaphore+0x36>
 800bd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd76:	b672      	cpsid	i
 800bd78:	f383 8811 	msr	BASEPRI, r3
 800bd7c:	f3bf 8f6f 	isb	sy
 800bd80:	f3bf 8f4f 	dsb	sy
 800bd84:	b662      	cpsie	i
 800bd86:	e7fe      	b.n	800bd86 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bd88:	2202      	movs	r2, #2
 800bd8a:	2100      	movs	r1, #0
 800bd8c:	f7ff ff92 	bl	800bcb4 <xQueueGenericCreate>
		if( xHandle != NULL )
 800bd90:	b100      	cbz	r0, 800bd94 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bd92:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800bd94:	bd10      	pop	{r4, pc}

0800bd96 <xQueueGenericSend>:
{
 800bd96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd9a:	b085      	sub	sp, #20
 800bd9c:	4688      	mov	r8, r1
 800bd9e:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800bda0:	4604      	mov	r4, r0
{
 800bda2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800bda4:	b950      	cbnz	r0, 800bdbc <xQueueGenericSend+0x26>
 800bda6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdaa:	b672      	cpsid	i
 800bdac:	f383 8811 	msr	BASEPRI, r3
 800bdb0:	f3bf 8f6f 	isb	sy
 800bdb4:	f3bf 8f4f 	dsb	sy
 800bdb8:	b662      	cpsie	i
 800bdba:	e7fe      	b.n	800bdba <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdbc:	b961      	cbnz	r1, 800bdd8 <xQueueGenericSend+0x42>
 800bdbe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800bdc0:	b153      	cbz	r3, 800bdd8 <xQueueGenericSend+0x42>
 800bdc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc6:	b672      	cpsid	i
 800bdc8:	f383 8811 	msr	BASEPRI, r3
 800bdcc:	f3bf 8f6f 	isb	sy
 800bdd0:	f3bf 8f4f 	dsb	sy
 800bdd4:	b662      	cpsie	i
 800bdd6:	e7fe      	b.n	800bdd6 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bdd8:	2f02      	cmp	r7, #2
 800bdda:	d10d      	bne.n	800bdf8 <xQueueGenericSend+0x62>
 800bddc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	d00a      	beq.n	800bdf8 <xQueueGenericSend+0x62>
 800bde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde6:	b672      	cpsid	i
 800bde8:	f383 8811 	msr	BASEPRI, r3
 800bdec:	f3bf 8f6f 	isb	sy
 800bdf0:	f3bf 8f4f 	dsb	sy
 800bdf4:	b662      	cpsie	i
 800bdf6:	e7fe      	b.n	800bdf6 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bdf8:	f001 f852 	bl	800cea0 <xTaskGetSchedulerState>
 800bdfc:	4606      	mov	r6, r0
 800bdfe:	b960      	cbnz	r0, 800be1a <xQueueGenericSend+0x84>
 800be00:	9b01      	ldr	r3, [sp, #4]
 800be02:	b15b      	cbz	r3, 800be1c <xQueueGenericSend+0x86>
 800be04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be08:	b672      	cpsid	i
 800be0a:	f383 8811 	msr	BASEPRI, r3
 800be0e:	f3bf 8f6f 	isb	sy
 800be12:	f3bf 8f4f 	dsb	sy
 800be16:	b662      	cpsie	i
 800be18:	e7fe      	b.n	800be18 <xQueueGenericSend+0x82>
 800be1a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800be1c:	f04f 0900 	mov.w	r9, #0
 800be20:	e037      	b.n	800be92 <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 800be22:	9d01      	ldr	r5, [sp, #4]
 800be24:	b91d      	cbnz	r5, 800be2e <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 800be26:	f7ff fd09 	bl	800b83c <vPortExitCritical>
			return errQUEUE_FULL;
 800be2a:	2000      	movs	r0, #0
 800be2c:	e052      	b.n	800bed4 <xQueueGenericSend+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 800be2e:	b916      	cbnz	r6, 800be36 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be30:	a802      	add	r0, sp, #8
 800be32:	f000 ffe3 	bl	800cdfc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800be36:	f7ff fd01 	bl	800b83c <vPortExitCritical>
		vTaskSuspendAll();
 800be3a:	f000 fd55 	bl	800c8e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be3e:	f7ff fcd9 	bl	800b7f4 <vPortEnterCritical>
 800be42:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800be46:	2bff      	cmp	r3, #255	; 0xff
 800be48:	d101      	bne.n	800be4e <xQueueGenericSend+0xb8>
 800be4a:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800be4e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800be52:	2bff      	cmp	r3, #255	; 0xff
 800be54:	d101      	bne.n	800be5a <xQueueGenericSend+0xc4>
 800be56:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800be5a:	f7ff fcef 	bl	800b83c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be5e:	a901      	add	r1, sp, #4
 800be60:	a802      	add	r0, sp, #8
 800be62:	f000 ffd7 	bl	800ce14 <xTaskCheckForTimeOut>
 800be66:	2800      	cmp	r0, #0
 800be68:	d14a      	bne.n	800bf00 <xQueueGenericSend+0x16a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800be6a:	f7ff fcc3 	bl	800b7f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800be6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800be70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800be72:	429a      	cmp	r2, r3
 800be74:	d131      	bne.n	800beda <xQueueGenericSend+0x144>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800be76:	f7ff fce1 	bl	800b83c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800be7a:	9901      	ldr	r1, [sp, #4]
 800be7c:	f104 0010 	add.w	r0, r4, #16
 800be80:	f000 ff3a 	bl	800ccf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800be84:	4620      	mov	r0, r4
 800be86:	f7ff fe3c 	bl	800bb02 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800be8a:	f000 fddb 	bl	800ca44 <xTaskResumeAll>
 800be8e:	b360      	cbz	r0, 800beea <xQueueGenericSend+0x154>
 800be90:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800be92:	f7ff fcaf 	bl	800b7f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800be96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800be98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d301      	bcc.n	800bea2 <xQueueGenericSend+0x10c>
 800be9e:	2f02      	cmp	r7, #2
 800bea0:	d1bf      	bne.n	800be22 <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bea2:	463a      	mov	r2, r7
 800bea4:	4641      	mov	r1, r8
 800bea6:	4620      	mov	r0, r4
 800bea8:	f7ff fde1 	bl	800ba6e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800beac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800beae:	b11b      	cbz	r3, 800beb8 <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800beb0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800beb4:	f000 ff5c 	bl	800cd70 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800beb8:	b148      	cbz	r0, 800bece <xQueueGenericSend+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800beba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bec2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800bec6:	f3bf 8f4f 	dsb	sy
 800beca:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800bece:	f7ff fcb5 	bl	800b83c <vPortExitCritical>
				return pdPASS;
 800bed2:	2001      	movs	r0, #1
}
 800bed4:	b005      	add	sp, #20
 800bed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800beda:	f7ff fcaf 	bl	800b83c <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800bede:	4620      	mov	r0, r4
 800bee0:	f7ff fe0f 	bl	800bb02 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bee4:	f000 fdae 	bl	800ca44 <xTaskResumeAll>
 800bee8:	e7d2      	b.n	800be90 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 800beea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800beee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bef2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800bef6:	f3bf 8f4f 	dsb	sy
 800befa:	f3bf 8f6f 	isb	sy
 800befe:	e7c7      	b.n	800be90 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 800bf00:	4620      	mov	r0, r4
 800bf02:	f7ff fdfe 	bl	800bb02 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf06:	f000 fd9d 	bl	800ca44 <xTaskResumeAll>
 800bf0a:	e78e      	b.n	800be2a <xQueueGenericSend+0x94>

0800bf0c <xQueueGenericSendFromISR>:
{
 800bf0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf10:	4689      	mov	r9, r1
 800bf12:	4690      	mov	r8, r2
 800bf14:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800bf16:	4604      	mov	r4, r0
 800bf18:	b950      	cbnz	r0, 800bf30 <xQueueGenericSendFromISR+0x24>
 800bf1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf1e:	b672      	cpsid	i
 800bf20:	f383 8811 	msr	BASEPRI, r3
 800bf24:	f3bf 8f6f 	isb	sy
 800bf28:	f3bf 8f4f 	dsb	sy
 800bf2c:	b662      	cpsie	i
 800bf2e:	e7fe      	b.n	800bf2e <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf30:	b961      	cbnz	r1, 800bf4c <xQueueGenericSendFromISR+0x40>
 800bf32:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800bf34:	b153      	cbz	r3, 800bf4c <xQueueGenericSendFromISR+0x40>
 800bf36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf3a:	b672      	cpsid	i
 800bf3c:	f383 8811 	msr	BASEPRI, r3
 800bf40:	f3bf 8f6f 	isb	sy
 800bf44:	f3bf 8f4f 	dsb	sy
 800bf48:	b662      	cpsie	i
 800bf4a:	e7fe      	b.n	800bf4a <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf4c:	2f02      	cmp	r7, #2
 800bf4e:	d10d      	bne.n	800bf6c <xQueueGenericSendFromISR+0x60>
 800bf50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d00a      	beq.n	800bf6c <xQueueGenericSendFromISR+0x60>
 800bf56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5a:	b672      	cpsid	i
 800bf5c:	f383 8811 	msr	BASEPRI, r3
 800bf60:	f3bf 8f6f 	isb	sy
 800bf64:	f3bf 8f4f 	dsb	sy
 800bf68:	b662      	cpsie	i
 800bf6a:	e7fe      	b.n	800bf6a <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf6c:	f7ff fd42 	bl	800b9f4 <vPortValidateInterruptPriority>
	__asm volatile
 800bf70:	f3ef 8611 	mrs	r6, BASEPRI
 800bf74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf78:	b672      	cpsid	i
 800bf7a:	f383 8811 	msr	BASEPRI, r3
 800bf7e:	f3bf 8f6f 	isb	sy
 800bf82:	f3bf 8f4f 	dsb	sy
 800bf86:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf88:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800bf8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d301      	bcc.n	800bf94 <xQueueGenericSendFromISR+0x88>
 800bf90:	2f02      	cmp	r7, #2
 800bf92:	d122      	bne.n	800bfda <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 800bf94:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf98:	463a      	mov	r2, r7
 800bf9a:	4649      	mov	r1, r9
 800bf9c:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800bf9e:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bfa0:	f7ff fd65 	bl	800ba6e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800bfa4:	1c6b      	adds	r3, r5, #1
 800bfa6:	d113      	bne.n	800bfd0 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bfa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfaa:	b90b      	cbnz	r3, 800bfb0 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 800bfac:	2001      	movs	r0, #1
 800bfae:	e00b      	b.n	800bfc8 <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bfb0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800bfb4:	f000 fedc 	bl	800cd70 <xTaskRemoveFromEventList>
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	d0f7      	beq.n	800bfac <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 800bfbc:	f1b8 0f00 	cmp.w	r8, #0
 800bfc0:	d0f4      	beq.n	800bfac <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bfc2:	2001      	movs	r0, #1
 800bfc4:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800bfc8:	f386 8811 	msr	BASEPRI, r6
}
 800bfcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bfd0:	3501      	adds	r5, #1
 800bfd2:	b26d      	sxtb	r5, r5
 800bfd4:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800bfd8:	e7e8      	b.n	800bfac <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 800bfda:	2000      	movs	r0, #0
 800bfdc:	e7f4      	b.n	800bfc8 <xQueueGenericSendFromISR+0xbc>

0800bfde <xQueueGiveFromISR>:
{
 800bfde:	b570      	push	{r4, r5, r6, lr}
 800bfe0:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	b950      	cbnz	r0, 800bffc <xQueueGiveFromISR+0x1e>
	__asm volatile
 800bfe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfea:	b672      	cpsid	i
 800bfec:	f383 8811 	msr	BASEPRI, r3
 800bff0:	f3bf 8f6f 	isb	sy
 800bff4:	f3bf 8f4f 	dsb	sy
 800bff8:	b662      	cpsie	i
 800bffa:	e7fe      	b.n	800bffa <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 800bffc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800bffe:	b153      	cbz	r3, 800c016 <xQueueGiveFromISR+0x38>
 800c000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c004:	b672      	cpsid	i
 800c006:	f383 8811 	msr	BASEPRI, r3
 800c00a:	f3bf 8f6f 	isb	sy
 800c00e:	f3bf 8f4f 	dsb	sy
 800c012:	b662      	cpsie	i
 800c014:	e7fe      	b.n	800c014 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c016:	6803      	ldr	r3, [r0, #0]
 800c018:	b963      	cbnz	r3, 800c034 <xQueueGiveFromISR+0x56>
 800c01a:	6883      	ldr	r3, [r0, #8]
 800c01c:	b153      	cbz	r3, 800c034 <xQueueGiveFromISR+0x56>
 800c01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c022:	b672      	cpsid	i
 800c024:	f383 8811 	msr	BASEPRI, r3
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	f3bf 8f4f 	dsb	sy
 800c030:	b662      	cpsie	i
 800c032:	e7fe      	b.n	800c032 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c034:	f7ff fcde 	bl	800b9f4 <vPortValidateInterruptPriority>
	__asm volatile
 800c038:	f3ef 8611 	mrs	r6, BASEPRI
 800c03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c040:	b672      	cpsid	i
 800c042:	f383 8811 	msr	BASEPRI, r3
 800c046:	f3bf 8f6f 	isb	sy
 800c04a:	f3bf 8f4f 	dsb	sy
 800c04e:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c050:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c052:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c054:	4293      	cmp	r3, r2
 800c056:	d91c      	bls.n	800c092 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800c058:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c05c:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800c05e:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800c060:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c062:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800c064:	d110      	bne.n	800c088 <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c066:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c068:	b90b      	cbnz	r3, 800c06e <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800c06a:	2001      	movs	r0, #1
 800c06c:	e009      	b.n	800c082 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c06e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c072:	f000 fe7d 	bl	800cd70 <xTaskRemoveFromEventList>
 800c076:	2800      	cmp	r0, #0
 800c078:	d0f7      	beq.n	800c06a <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800c07a:	2d00      	cmp	r5, #0
 800c07c:	d0f5      	beq.n	800c06a <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c07e:	2001      	movs	r0, #1
 800c080:	6028      	str	r0, [r5, #0]
	__asm volatile
 800c082:	f386 8811 	msr	BASEPRI, r6
}
 800c086:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c088:	3301      	adds	r3, #1
 800c08a:	b25b      	sxtb	r3, r3
 800c08c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c090:	e7eb      	b.n	800c06a <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800c092:	2000      	movs	r0, #0
 800c094:	e7f5      	b.n	800c082 <xQueueGiveFromISR+0xa4>

0800c096 <xQueueReceive>:
{
 800c096:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c09a:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 800c09c:	4604      	mov	r4, r0
{
 800c09e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800c0a0:	b950      	cbnz	r0, 800c0b8 <xQueueReceive+0x22>
	__asm volatile
 800c0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a6:	b672      	cpsid	i
 800c0a8:	f383 8811 	msr	BASEPRI, r3
 800c0ac:	f3bf 8f6f 	isb	sy
 800c0b0:	f3bf 8f4f 	dsb	sy
 800c0b4:	b662      	cpsie	i
 800c0b6:	e7fe      	b.n	800c0b6 <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0b8:	b961      	cbnz	r1, 800c0d4 <xQueueReceive+0x3e>
 800c0ba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c0bc:	b153      	cbz	r3, 800c0d4 <xQueueReceive+0x3e>
 800c0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c2:	b672      	cpsid	i
 800c0c4:	f383 8811 	msr	BASEPRI, r3
 800c0c8:	f3bf 8f6f 	isb	sy
 800c0cc:	f3bf 8f4f 	dsb	sy
 800c0d0:	b662      	cpsie	i
 800c0d2:	e7fe      	b.n	800c0d2 <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c0d4:	f000 fee4 	bl	800cea0 <xTaskGetSchedulerState>
 800c0d8:	4606      	mov	r6, r0
 800c0da:	b960      	cbnz	r0, 800c0f6 <xQueueReceive+0x60>
 800c0dc:	9b01      	ldr	r3, [sp, #4]
 800c0de:	b15b      	cbz	r3, 800c0f8 <xQueueReceive+0x62>
 800c0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e4:	b672      	cpsid	i
 800c0e6:	f383 8811 	msr	BASEPRI, r3
 800c0ea:	f3bf 8f6f 	isb	sy
 800c0ee:	f3bf 8f4f 	dsb	sy
 800c0f2:	b662      	cpsie	i
 800c0f4:	e7fe      	b.n	800c0f4 <xQueueReceive+0x5e>
 800c0f6:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800c0f8:	f04f 0800 	mov.w	r8, #0
 800c0fc:	e03d      	b.n	800c17a <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c0fe:	9d01      	ldr	r5, [sp, #4]
 800c100:	b91d      	cbnz	r5, 800c10a <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 800c102:	f7ff fb9b 	bl	800b83c <vPortExitCritical>
				return errQUEUE_EMPTY;
 800c106:	2000      	movs	r0, #0
 800c108:	e056      	b.n	800c1b8 <xQueueReceive+0x122>
				else if( xEntryTimeSet == pdFALSE )
 800c10a:	b916      	cbnz	r6, 800c112 <xQueueReceive+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c10c:	a802      	add	r0, sp, #8
 800c10e:	f000 fe75 	bl	800cdfc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800c112:	f7ff fb93 	bl	800b83c <vPortExitCritical>
		vTaskSuspendAll();
 800c116:	f000 fbe7 	bl	800c8e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c11a:	f7ff fb6b 	bl	800b7f4 <vPortEnterCritical>
 800c11e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c122:	2bff      	cmp	r3, #255	; 0xff
 800c124:	d101      	bne.n	800c12a <xQueueReceive+0x94>
 800c126:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800c12a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c12e:	2bff      	cmp	r3, #255	; 0xff
 800c130:	d101      	bne.n	800c136 <xQueueReceive+0xa0>
 800c132:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800c136:	f7ff fb81 	bl	800b83c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c13a:	a901      	add	r1, sp, #4
 800c13c:	a802      	add	r0, sp, #8
 800c13e:	f000 fe69 	bl	800ce14 <xTaskCheckForTimeOut>
 800c142:	2800      	cmp	r0, #0
 800c144:	d141      	bne.n	800c1ca <xQueueReceive+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c146:	4620      	mov	r0, r4
 800c148:	f7ff fc86 	bl	800ba58 <prvIsQueueEmpty>
 800c14c:	b3b8      	cbz	r0, 800c1be <xQueueReceive+0x128>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c14e:	9901      	ldr	r1, [sp, #4]
 800c150:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c154:	f000 fdd0 	bl	800ccf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c158:	4620      	mov	r0, r4
 800c15a:	f7ff fcd2 	bl	800bb02 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c15e:	f000 fc71 	bl	800ca44 <xTaskResumeAll>
 800c162:	b948      	cbnz	r0, 800c178 <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 800c164:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c16c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c170:	f3bf 8f4f 	dsb	sy
 800c174:	f3bf 8f6f 	isb	sy
 800c178:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800c17a:	f7ff fb3b 	bl	800b7f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c17e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c180:	2d00      	cmp	r5, #0
 800c182:	d0bc      	beq.n	800c0fe <xQueueReceive+0x68>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c184:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c186:	4639      	mov	r1, r7
 800c188:	4620      	mov	r0, r4
 800c18a:	f7ff fca5 	bl	800bad8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c18e:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c190:	6923      	ldr	r3, [r4, #16]
 800c192:	b173      	cbz	r3, 800c1b2 <xQueueReceive+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c194:	f104 0010 	add.w	r0, r4, #16
 800c198:	f000 fdea 	bl	800cd70 <xTaskRemoveFromEventList>
 800c19c:	b148      	cbz	r0, 800c1b2 <xQueueReceive+0x11c>
						queueYIELD_IF_USING_PREEMPTION();
 800c19e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c1a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1a6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c1aa:	f3bf 8f4f 	dsb	sy
 800c1ae:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800c1b2:	f7ff fb43 	bl	800b83c <vPortExitCritical>
				return pdPASS;
 800c1b6:	2001      	movs	r0, #1
}
 800c1b8:	b004      	add	sp, #16
 800c1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800c1be:	4620      	mov	r0, r4
 800c1c0:	f7ff fc9f 	bl	800bb02 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c1c4:	f000 fc3e 	bl	800ca44 <xTaskResumeAll>
 800c1c8:	e7d6      	b.n	800c178 <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	f7ff fc99 	bl	800bb02 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c1d0:	f000 fc38 	bl	800ca44 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	f7ff fc3f 	bl	800ba58 <prvIsQueueEmpty>
 800c1da:	2800      	cmp	r0, #0
 800c1dc:	d0cc      	beq.n	800c178 <xQueueReceive+0xe2>
 800c1de:	e792      	b.n	800c106 <xQueueReceive+0x70>

0800c1e0 <xQueueSemaphoreTake>:
{
 800c1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1e2:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800c1e4:	4604      	mov	r4, r0
{
 800c1e6:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800c1e8:	b950      	cbnz	r0, 800c200 <xQueueSemaphoreTake+0x20>
 800c1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ee:	b672      	cpsid	i
 800c1f0:	f383 8811 	msr	BASEPRI, r3
 800c1f4:	f3bf 8f6f 	isb	sy
 800c1f8:	f3bf 8f4f 	dsb	sy
 800c1fc:	b662      	cpsie	i
 800c1fe:	e7fe      	b.n	800c1fe <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 800c200:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800c202:	b155      	cbz	r5, 800c21a <xQueueSemaphoreTake+0x3a>
 800c204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c208:	b672      	cpsid	i
 800c20a:	f383 8811 	msr	BASEPRI, r3
 800c20e:	f3bf 8f6f 	isb	sy
 800c212:	f3bf 8f4f 	dsb	sy
 800c216:	b662      	cpsie	i
 800c218:	e7fe      	b.n	800c218 <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c21a:	f000 fe41 	bl	800cea0 <xTaskGetSchedulerState>
 800c21e:	4606      	mov	r6, r0
 800c220:	b960      	cbnz	r0, 800c23c <xQueueSemaphoreTake+0x5c>
 800c222:	9b01      	ldr	r3, [sp, #4]
 800c224:	b16b      	cbz	r3, 800c242 <xQueueSemaphoreTake+0x62>
 800c226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c22a:	b672      	cpsid	i
 800c22c:	f383 8811 	msr	BASEPRI, r3
 800c230:	f3bf 8f6f 	isb	sy
 800c234:	f3bf 8f4f 	dsb	sy
 800c238:	b662      	cpsie	i
 800c23a:	e7fe      	b.n	800c23a <xQueueSemaphoreTake+0x5a>
 800c23c:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800c23e:	2700      	movs	r7, #0
 800c240:	e055      	b.n	800c2ee <xQueueSemaphoreTake+0x10e>
 800c242:	4605      	mov	r5, r0
 800c244:	e7fb      	b.n	800c23e <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c246:	9b01      	ldr	r3, [sp, #4]
 800c248:	b973      	cbnz	r3, 800c268 <xQueueSemaphoreTake+0x88>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c24a:	b155      	cbz	r5, 800c262 <xQueueSemaphoreTake+0x82>
 800c24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c250:	b672      	cpsid	i
 800c252:	f383 8811 	msr	BASEPRI, r3
 800c256:	f3bf 8f6f 	isb	sy
 800c25a:	f3bf 8f4f 	dsb	sy
 800c25e:	b662      	cpsie	i
 800c260:	e7fe      	b.n	800c260 <xQueueSemaphoreTake+0x80>
					taskEXIT_CRITICAL();
 800c262:	f7ff faeb 	bl	800b83c <vPortExitCritical>
					return errQUEUE_EMPTY;
 800c266:	e062      	b.n	800c32e <xQueueSemaphoreTake+0x14e>
				else if( xEntryTimeSet == pdFALSE )
 800c268:	b916      	cbnz	r6, 800c270 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c26a:	a802      	add	r0, sp, #8
 800c26c:	f000 fdc6 	bl	800cdfc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800c270:	f7ff fae4 	bl	800b83c <vPortExitCritical>
		vTaskSuspendAll();
 800c274:	f000 fb38 	bl	800c8e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c278:	f7ff fabc 	bl	800b7f4 <vPortEnterCritical>
 800c27c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c280:	2bff      	cmp	r3, #255	; 0xff
 800c282:	d101      	bne.n	800c288 <xQueueSemaphoreTake+0xa8>
 800c284:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800c288:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c28c:	2bff      	cmp	r3, #255	; 0xff
 800c28e:	d101      	bne.n	800c294 <xQueueSemaphoreTake+0xb4>
 800c290:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c294:	f7ff fad2 	bl	800b83c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c298:	a901      	add	r1, sp, #4
 800c29a:	a802      	add	r0, sp, #8
 800c29c:	f000 fdba 	bl	800ce14 <xTaskCheckForTimeOut>
 800c2a0:	2800      	cmp	r0, #0
 800c2a2:	d14d      	bne.n	800c340 <xQueueSemaphoreTake+0x160>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	f7ff fbd7 	bl	800ba58 <prvIsQueueEmpty>
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	d042      	beq.n	800c334 <xQueueSemaphoreTake+0x154>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c2ae:	6823      	ldr	r3, [r4, #0]
 800c2b0:	b93b      	cbnz	r3, 800c2c2 <xQueueSemaphoreTake+0xe2>
						taskENTER_CRITICAL();
 800c2b2:	f7ff fa9f 	bl	800b7f4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c2b6:	68a0      	ldr	r0, [r4, #8]
 800c2b8:	f000 fe02 	bl	800cec0 <xTaskPriorityInherit>
 800c2bc:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800c2be:	f7ff fabd 	bl	800b83c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c2c2:	9901      	ldr	r1, [sp, #4]
 800c2c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c2c8:	f000 fd16 	bl	800ccf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	f7ff fc18 	bl	800bb02 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c2d2:	f000 fbb7 	bl	800ca44 <xTaskResumeAll>
 800c2d6:	b948      	cbnz	r0, 800c2ec <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 800c2d8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c2dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c2e4:	f3bf 8f4f 	dsb	sy
 800c2e8:	f3bf 8f6f 	isb	sy
 800c2ec:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800c2ee:	f7ff fa81 	bl	800b7f4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c2f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d0a6      	beq.n	800c246 <xQueueSemaphoreTake+0x66>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c2f8:	3b01      	subs	r3, #1
 800c2fa:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c2fc:	6823      	ldr	r3, [r4, #0]
 800c2fe:	b913      	cbnz	r3, 800c306 <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c300:	f000 febc 	bl	800d07c <pvTaskIncrementMutexHeldCount>
 800c304:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c306:	6923      	ldr	r3, [r4, #16]
 800c308:	b173      	cbz	r3, 800c328 <xQueueSemaphoreTake+0x148>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c30a:	f104 0010 	add.w	r0, r4, #16
 800c30e:	f000 fd2f 	bl	800cd70 <xTaskRemoveFromEventList>
 800c312:	b148      	cbz	r0, 800c328 <xQueueSemaphoreTake+0x148>
						queueYIELD_IF_USING_PREEMPTION();
 800c314:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c31c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c320:	f3bf 8f4f 	dsb	sy
 800c324:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800c328:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800c32a:	f7ff fa87 	bl	800b83c <vPortExitCritical>
}
 800c32e:	4628      	mov	r0, r5
 800c330:	b005      	add	sp, #20
 800c332:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 800c334:	4620      	mov	r0, r4
 800c336:	f7ff fbe4 	bl	800bb02 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c33a:	f000 fb83 	bl	800ca44 <xTaskResumeAll>
 800c33e:	e7d5      	b.n	800c2ec <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 800c340:	4620      	mov	r0, r4
 800c342:	f7ff fbde 	bl	800bb02 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c346:	f000 fb7d 	bl	800ca44 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c34a:	4620      	mov	r0, r4
 800c34c:	f7ff fb84 	bl	800ba58 <prvIsQueueEmpty>
 800c350:	2800      	cmp	r0, #0
 800c352:	d0cb      	beq.n	800c2ec <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 800c354:	2d00      	cmp	r5, #0
 800c356:	d0ea      	beq.n	800c32e <xQueueSemaphoreTake+0x14e>
						taskENTER_CRITICAL();
 800c358:	f7ff fa4c 	bl	800b7f4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c35c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c35e:	b119      	cbz	r1, 800c368 <xQueueSemaphoreTake+0x188>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c360:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c362:	6819      	ldr	r1, [r3, #0]
 800c364:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c368:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800c36a:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c36c:	f000 fe30 	bl	800cfd0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800c370:	f7ff fa64 	bl	800b83c <vPortExitCritical>
 800c374:	e7db      	b.n	800c32e <xQueueSemaphoreTake+0x14e>

0800c376 <xQueueReceiveFromISR>:
{
 800c376:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c37a:	4689      	mov	r9, r1
 800c37c:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800c37e:	4605      	mov	r5, r0
 800c380:	b950      	cbnz	r0, 800c398 <xQueueReceiveFromISR+0x22>
 800c382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c386:	b672      	cpsid	i
 800c388:	f383 8811 	msr	BASEPRI, r3
 800c38c:	f3bf 8f6f 	isb	sy
 800c390:	f3bf 8f4f 	dsb	sy
 800c394:	b662      	cpsie	i
 800c396:	e7fe      	b.n	800c396 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c398:	b961      	cbnz	r1, 800c3b4 <xQueueReceiveFromISR+0x3e>
 800c39a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c39c:	b153      	cbz	r3, 800c3b4 <xQueueReceiveFromISR+0x3e>
 800c39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a2:	b672      	cpsid	i
 800c3a4:	f383 8811 	msr	BASEPRI, r3
 800c3a8:	f3bf 8f6f 	isb	sy
 800c3ac:	f3bf 8f4f 	dsb	sy
 800c3b0:	b662      	cpsie	i
 800c3b2:	e7fe      	b.n	800c3b2 <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c3b4:	f7ff fb1e 	bl	800b9f4 <vPortValidateInterruptPriority>
	__asm volatile
 800c3b8:	f3ef 8711 	mrs	r7, BASEPRI
 800c3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c0:	b672      	cpsid	i
 800c3c2:	f383 8811 	msr	BASEPRI, r3
 800c3c6:	f3bf 8f6f 	isb	sy
 800c3ca:	f3bf 8f4f 	dsb	sy
 800c3ce:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c3d0:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3d2:	b31c      	cbz	r4, 800c41c <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 800c3d4:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c3d8:	4649      	mov	r1, r9
 800c3da:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c3dc:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800c3de:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c3e0:	f7ff fb7a 	bl	800bad8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c3e4:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800c3e6:	1c73      	adds	r3, r6, #1
 800c3e8:	d113      	bne.n	800c412 <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3ea:	692b      	ldr	r3, [r5, #16]
 800c3ec:	b90b      	cbnz	r3, 800c3f2 <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 800c3ee:	2001      	movs	r0, #1
 800c3f0:	e00b      	b.n	800c40a <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3f2:	f105 0010 	add.w	r0, r5, #16
 800c3f6:	f000 fcbb 	bl	800cd70 <xTaskRemoveFromEventList>
 800c3fa:	2800      	cmp	r0, #0
 800c3fc:	d0f7      	beq.n	800c3ee <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 800c3fe:	f1b8 0f00 	cmp.w	r8, #0
 800c402:	d0f4      	beq.n	800c3ee <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c404:	2001      	movs	r0, #1
 800c406:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800c40a:	f387 8811 	msr	BASEPRI, r7
}
 800c40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c412:	3601      	adds	r6, #1
 800c414:	b276      	sxtb	r6, r6
 800c416:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800c41a:	e7e8      	b.n	800c3ee <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 800c41c:	4620      	mov	r0, r4
 800c41e:	e7f4      	b.n	800c40a <xQueueReceiveFromISR+0x94>

0800c420 <uxQueueSpacesAvailable>:
{
 800c420:	b513      	push	{r0, r1, r4, lr}
	configASSERT( pxQueue );
 800c422:	4604      	mov	r4, r0
 800c424:	b950      	cbnz	r0, 800c43c <uxQueueSpacesAvailable+0x1c>
	__asm volatile
 800c426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c42a:	b672      	cpsid	i
 800c42c:	f383 8811 	msr	BASEPRI, r3
 800c430:	f3bf 8f6f 	isb	sy
 800c434:	f3bf 8f4f 	dsb	sy
 800c438:	b662      	cpsie	i
 800c43a:	e7fe      	b.n	800c43a <uxQueueSpacesAvailable+0x1a>
	taskENTER_CRITICAL();
 800c43c:	f7ff f9da 	bl	800b7f4 <vPortEnterCritical>
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800c440:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c442:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800c444:	1ac0      	subs	r0, r0, r3
 800c446:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 800c448:	f7ff f9f8 	bl	800b83c <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c44c:	9801      	ldr	r0, [sp, #4]
 800c44e:	b002      	add	sp, #8
 800c450:	bd10      	pop	{r4, pc}
	...

0800c454 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c454:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c456:	4a07      	ldr	r2, [pc, #28]	; (800c474 <vQueueAddToRegistry+0x20>)
	{
 800c458:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c45a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800c45e:	b92c      	cbnz	r4, 800c46c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c460:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c464:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c468:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c46a:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c46c:	3301      	adds	r3, #1
 800c46e:	2b08      	cmp	r3, #8
 800c470:	d1f3      	bne.n	800c45a <vQueueAddToRegistry+0x6>
 800c472:	e7fa      	b.n	800c46a <vQueueAddToRegistry+0x16>
 800c474:	20020964 	.word	0x20020964

0800c478 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c478:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c47a:	4a08      	ldr	r2, [pc, #32]	; (800c49c <vQueueUnregisterQueue+0x24>)
	{
 800c47c:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c47e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c482:	684c      	ldr	r4, [r1, #4]
 800c484:	4284      	cmp	r4, r0
 800c486:	d104      	bne.n	800c492 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c488:	2000      	movs	r0, #0
 800c48a:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c48e:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c490:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c492:	3301      	adds	r3, #1
 800c494:	2b08      	cmp	r3, #8
 800c496:	d1f2      	bne.n	800c47e <vQueueUnregisterQueue+0x6>
 800c498:	e7fa      	b.n	800c490 <vQueueUnregisterQueue+0x18>
 800c49a:	bf00      	nop
 800c49c:	20020964 	.word	0x20020964

0800c4a0 <vQueueDelete>:
{
 800c4a0:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800c4a2:	4604      	mov	r4, r0
 800c4a4:	b950      	cbnz	r0, 800c4bc <vQueueDelete+0x1c>
 800c4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4aa:	b672      	cpsid	i
 800c4ac:	f383 8811 	msr	BASEPRI, r3
 800c4b0:	f3bf 8f6f 	isb	sy
 800c4b4:	f3bf 8f4f 	dsb	sy
 800c4b8:	b662      	cpsie	i
 800c4ba:	e7fe      	b.n	800c4ba <vQueueDelete+0x1a>
		vQueueUnregisterQueue( pxQueue );
 800c4bc:	f7ff ffdc 	bl	800c478 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c4c0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c4c4:	b923      	cbnz	r3, 800c4d0 <vQueueDelete+0x30>
			vPortFree( pxQueue );
 800c4c6:	4620      	mov	r0, r4
}
 800c4c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800c4cc:	f7ff b8ae 	b.w	800b62c <vPortFree>
}
 800c4d0:	bd10      	pop	{r4, pc}

0800c4d2 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c4d2:	b570      	push	{r4, r5, r6, lr}
 800c4d4:	4604      	mov	r4, r0
 800c4d6:	460d      	mov	r5, r1
 800c4d8:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c4da:	f7ff f98b 	bl	800b7f4 <vPortEnterCritical>
 800c4de:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c4e2:	2bff      	cmp	r3, #255	; 0xff
 800c4e4:	d102      	bne.n	800c4ec <vQueueWaitForMessageRestricted+0x1a>
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c4ec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c4f0:	2bff      	cmp	r3, #255	; 0xff
 800c4f2:	d102      	bne.n	800c4fa <vQueueWaitForMessageRestricted+0x28>
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c4fa:	f7ff f99f 	bl	800b83c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c4fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c500:	b92b      	cbnz	r3, 800c50e <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c502:	4632      	mov	r2, r6
 800c504:	4629      	mov	r1, r5
 800c506:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c50a:	f000 fc11 	bl	800cd30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c50e:	4620      	mov	r0, r4
	}
 800c510:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800c514:	f7ff baf5 	b.w	800bb02 <prvUnlockQueue>

0800c518 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c51c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c51e:	f7ff f969 	bl	800b7f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c522:	4b2f      	ldr	r3, [pc, #188]	; (800c5e0 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800c524:	4e2f      	ldr	r6, [pc, #188]	; (800c5e4 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800c526:	681a      	ldr	r2, [r3, #0]
 800c528:	4f2f      	ldr	r7, [pc, #188]	; (800c5e8 <prvAddNewTaskToReadyList+0xd0>)
 800c52a:	3201      	adds	r2, #1
 800c52c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800c52e:	6835      	ldr	r5, [r6, #0]
 800c530:	2d00      	cmp	r5, #0
 800c532:	d14a      	bne.n	800c5ca <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c534:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	2b01      	cmp	r3, #1
 800c53a:	d11f      	bne.n	800c57c <prvAddNewTaskToReadyList+0x64>
 800c53c:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c53e:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c540:	4640      	mov	r0, r8
 800c542:	f7ff f8af 	bl	800b6a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c546:	f108 0814 	add.w	r8, r8, #20
 800c54a:	2d38      	cmp	r5, #56	; 0x38
 800c54c:	d1f7      	bne.n	800c53e <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c54e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800c610 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800c552:	4d26      	ldr	r5, [pc, #152]	; (800c5ec <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800c554:	4640      	mov	r0, r8
 800c556:	f7ff f8a5 	bl	800b6a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c55a:	4628      	mov	r0, r5
 800c55c:	f7ff f8a2 	bl	800b6a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c560:	4823      	ldr	r0, [pc, #140]	; (800c5f0 <prvAddNewTaskToReadyList+0xd8>)
 800c562:	f7ff f89f 	bl	800b6a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c566:	4823      	ldr	r0, [pc, #140]	; (800c5f4 <prvAddNewTaskToReadyList+0xdc>)
 800c568:	f7ff f89c 	bl	800b6a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c56c:	4822      	ldr	r0, [pc, #136]	; (800c5f8 <prvAddNewTaskToReadyList+0xe0>)
 800c56e:	f7ff f899 	bl	800b6a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c572:	4b22      	ldr	r3, [pc, #136]	; (800c5fc <prvAddNewTaskToReadyList+0xe4>)
 800c574:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c578:	4b21      	ldr	r3, [pc, #132]	; (800c600 <prvAddNewTaskToReadyList+0xe8>)
 800c57a:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800c57c:	4a21      	ldr	r2, [pc, #132]	; (800c604 <prvAddNewTaskToReadyList+0xec>)
 800c57e:	6813      	ldr	r3, [r2, #0]
 800c580:	3301      	adds	r3, #1
 800c582:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800c584:	4a20      	ldr	r2, [pc, #128]	; (800c608 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c586:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800c588:	6811      	ldr	r1, [r2, #0]
 800c58a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c58c:	428b      	cmp	r3, r1
 800c58e:	d900      	bls.n	800c592 <prvAddNewTaskToReadyList+0x7a>
 800c590:	6013      	str	r3, [r2, #0]
 800c592:	2014      	movs	r0, #20
 800c594:	1d21      	adds	r1, r4, #4
 800c596:	fb00 7003 	mla	r0, r0, r3, r7
 800c59a:	f7ff f891 	bl	800b6c0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800c59e:	f7ff f94d 	bl	800b83c <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800c5a2:	4b1a      	ldr	r3, [pc, #104]	; (800c60c <prvAddNewTaskToReadyList+0xf4>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	b173      	cbz	r3, 800c5c6 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c5a8:	6833      	ldr	r3, [r6, #0]
 800c5aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d209      	bcs.n	800c5c6 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800c5b2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c5b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5ba:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c5be:	f3bf 8f4f 	dsb	sy
 800c5c2:	f3bf 8f6f 	isb	sy
}
 800c5c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800c5ca:	4b10      	ldr	r3, [pc, #64]	; (800c60c <prvAddNewTaskToReadyList+0xf4>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d1d4      	bne.n	800c57c <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c5d2:	6833      	ldr	r3, [r6, #0]
 800c5d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d8cf      	bhi.n	800c57c <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800c5dc:	6034      	str	r4, [r6, #0]
 800c5de:	e7cd      	b.n	800c57c <prvAddNewTaskToReadyList+0x64>
 800c5e0:	20020e10 	.word	0x20020e10
 800c5e4:	200209a4 	.word	0x200209a4
 800c5e8:	200209b0 	.word	0x200209b0
 800c5ec:	20020e3c 	.word	0x20020e3c
 800c5f0:	20020e58 	.word	0x20020e58
 800c5f4:	20020e84 	.word	0x20020e84
 800c5f8:	20020e70 	.word	0x20020e70
 800c5fc:	200209a8 	.word	0x200209a8
 800c600:	200209ac 	.word	0x200209ac
 800c604:	20020e20 	.word	0x20020e20
 800c608:	20020e24 	.word	0x20020e24
 800c60c:	20020e6c 	.word	0x20020e6c
 800c610:	20020e28 	.word	0x20020e28

0800c614 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c616:	4b15      	ldr	r3, [pc, #84]	; (800c66c <prvAddCurrentTaskToDelayedList+0x58>)
{
 800c618:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c61a:	4e15      	ldr	r6, [pc, #84]	; (800c670 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800c61c:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800c61e:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c620:	6830      	ldr	r0, [r6, #0]
 800c622:	3004      	adds	r0, #4
 800c624:	f7ff f86f 	bl	800b706 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c628:	1c63      	adds	r3, r4, #1
 800c62a:	d107      	bne.n	800c63c <prvAddCurrentTaskToDelayedList+0x28>
 800c62c:	b137      	cbz	r7, 800c63c <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c62e:	6831      	ldr	r1, [r6, #0]
 800c630:	4810      	ldr	r0, [pc, #64]	; (800c674 <prvAddCurrentTaskToDelayedList+0x60>)
 800c632:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c634:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c638:	f7ff b842 	b.w	800b6c0 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c63c:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c63e:	6833      	ldr	r3, [r6, #0]
 800c640:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c642:	d307      	bcc.n	800c654 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c644:	4b0c      	ldr	r3, [pc, #48]	; (800c678 <prvAddCurrentTaskToDelayedList+0x64>)
 800c646:	6818      	ldr	r0, [r3, #0]
 800c648:	6831      	ldr	r1, [r6, #0]
}
 800c64a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c64e:	3104      	adds	r1, #4
 800c650:	f7ff b842 	b.w	800b6d8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c654:	4b09      	ldr	r3, [pc, #36]	; (800c67c <prvAddCurrentTaskToDelayedList+0x68>)
 800c656:	6818      	ldr	r0, [r3, #0]
 800c658:	6831      	ldr	r1, [r6, #0]
 800c65a:	3104      	adds	r1, #4
 800c65c:	f7ff f83c 	bl	800b6d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c660:	4b07      	ldr	r3, [pc, #28]	; (800c680 <prvAddCurrentTaskToDelayedList+0x6c>)
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	42a2      	cmp	r2, r4
 800c666:	d900      	bls.n	800c66a <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800c668:	601c      	str	r4, [r3, #0]
}
 800c66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c66c:	20020e98 	.word	0x20020e98
 800c670:	200209a4 	.word	0x200209a4
 800c674:	20020e70 	.word	0x20020e70
 800c678:	200209ac 	.word	0x200209ac
 800c67c:	200209a8 	.word	0x200209a8
 800c680:	20020e50 	.word	0x20020e50

0800c684 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c684:	4a06      	ldr	r2, [pc, #24]	; (800c6a0 <prvResetNextTaskUnblockTime+0x1c>)
 800c686:	6813      	ldr	r3, [r2, #0]
 800c688:	6819      	ldr	r1, [r3, #0]
 800c68a:	4b06      	ldr	r3, [pc, #24]	; (800c6a4 <prvResetNextTaskUnblockTime+0x20>)
 800c68c:	b919      	cbnz	r1, 800c696 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800c68e:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c692:	601a      	str	r2, [r3, #0]
}
 800c694:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c696:	6812      	ldr	r2, [r2, #0]
 800c698:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c69a:	68d2      	ldr	r2, [r2, #12]
 800c69c:	6852      	ldr	r2, [r2, #4]
 800c69e:	e7f8      	b.n	800c692 <prvResetNextTaskUnblockTime+0xe>
 800c6a0:	200209a8 	.word	0x200209a8
 800c6a4:	20020e50 	.word	0x20020e50

0800c6a8 <prvDeleteTCB>:
	{
 800c6a8:	b510      	push	{r4, lr}
 800c6aa:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c6ac:	3058      	adds	r0, #88	; 0x58
 800c6ae:	f018 ff11 	bl	80254d4 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c6b2:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
 800c6b6:	b93b      	cbnz	r3, 800c6c8 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 800c6b8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800c6ba:	f7fe ffb7 	bl	800b62c <vPortFree>
				vPortFree( pxTCB );
 800c6be:	4620      	mov	r0, r4
	}
 800c6c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800c6c4:	f7fe bfb2 	b.w	800b62c <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c6c8:	2b01      	cmp	r3, #1
 800c6ca:	d0f8      	beq.n	800c6be <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c6cc:	2b02      	cmp	r3, #2
 800c6ce:	d00a      	beq.n	800c6e6 <prvDeleteTCB+0x3e>
 800c6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d4:	b672      	cpsid	i
 800c6d6:	f383 8811 	msr	BASEPRI, r3
 800c6da:	f3bf 8f6f 	isb	sy
 800c6de:	f3bf 8f4f 	dsb	sy
 800c6e2:	b662      	cpsie	i
 800c6e4:	e7fe      	b.n	800c6e4 <prvDeleteTCB+0x3c>
	}
 800c6e6:	bd10      	pop	{r4, pc}

0800c6e8 <prvIdleTask>:
{
 800c6e8:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c6ea:	4c14      	ldr	r4, [pc, #80]	; (800c73c <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6ec:	4f14      	ldr	r7, [pc, #80]	; (800c740 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800c6ee:	4d15      	ldr	r5, [pc, #84]	; (800c744 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c6f0:	6823      	ldr	r3, [r4, #0]
 800c6f2:	b983      	cbnz	r3, 800c716 <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c6f4:	4b14      	ldr	r3, [pc, #80]	; (800c748 <prvIdleTask+0x60>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	d909      	bls.n	800c710 <prvIdleTask+0x28>
				taskYIELD();
 800c6fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c704:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c708:	f3bf 8f4f 	dsb	sy
 800c70c:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800c710:	f7f5 f9fa 	bl	8001b08 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800c714:	e7eb      	b.n	800c6ee <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800c716:	f7ff f86d 	bl	800b7f4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c71e:	1d30      	adds	r0, r6, #4
 800c720:	f7fe fff1 	bl	800b706 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c724:	682b      	ldr	r3, [r5, #0]
 800c726:	3b01      	subs	r3, #1
 800c728:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c72a:	6823      	ldr	r3, [r4, #0]
 800c72c:	3b01      	subs	r3, #1
 800c72e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800c730:	f7ff f884 	bl	800b83c <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800c734:	4630      	mov	r0, r6
 800c736:	f7ff ffb7 	bl	800c6a8 <prvDeleteTCB>
 800c73a:	e7d9      	b.n	800c6f0 <prvIdleTask+0x8>
 800c73c:	20020e14 	.word	0x20020e14
 800c740:	20020e84 	.word	0x20020e84
 800c744:	20020e10 	.word	0x20020e10
 800c748:	200209b0 	.word	0x200209b0

0800c74c <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c750:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c754:	4606      	mov	r6, r0
 800c756:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c758:	21a5      	movs	r1, #165	; 0xa5
 800c75a:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c75c:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c75e:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c762:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c766:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800c768:	f018 fad0 	bl	8024d0c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c76c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c76e:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c770:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 800c774:	2d00      	cmp	r5, #0
 800c776:	d042      	beq.n	800c7fe <prvInitialiseNewTask.constprop.0+0xb2>
 800c778:	1e6b      	subs	r3, r5, #1
 800c77a:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800c77e:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c780:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800c784:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800c788:	b108      	cbz	r0, 800c78e <prvInitialiseNewTask.constprop.0+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c78a:	42ab      	cmp	r3, r5
 800c78c:	d1f8      	bne.n	800c780 <prvInitialiseNewTask.constprop.0+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c78e:	2300      	movs	r3, #0
 800c790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c794:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800c796:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c79a:	1d20      	adds	r0, r4, #4
 800c79c:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800c79e:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 800c7a2:	bf28      	it	cs
 800c7a4:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800c7a6:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800c7a8:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7aa:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c7ae:	f7fe ff84 	bl	800b6ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c7b2:	f104 0018 	add.w	r0, r4, #24
 800c7b6:	f7fe ff80 	bl	800b6ba <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c7ba:	2260      	movs	r2, #96	; 0x60
 800c7bc:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 800c7be:	f8c4 a0b8 	str.w	sl, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c7c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c7c6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7c8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c7ca:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 800c7cc:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c7d0:	f884 a0bc 	strb.w	sl, [r4, #188]	; 0xbc
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c7d4:	f018 fa9a 	bl	8024d0c <memset>
 800c7d8:	4b0a      	ldr	r3, [pc, #40]	; (800c804 <prvInitialiseNewTask.constprop.0+0xb8>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c7da:	463a      	mov	r2, r7
 800c7dc:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c7de:	65e3      	str	r3, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c7e0:	4648      	mov	r0, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c7e2:	4b09      	ldr	r3, [pc, #36]	; (800c808 <prvInitialiseNewTask.constprop.0+0xbc>)
 800c7e4:	6623      	str	r3, [r4, #96]	; 0x60
 800c7e6:	4b09      	ldr	r3, [pc, #36]	; (800c80c <prvInitialiseNewTask.constprop.0+0xc0>)
 800c7e8:	6663      	str	r3, [r4, #100]	; 0x64
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c7ea:	f7fe ffdf 	bl	800b7ac <pxPortInitialiseStack>
 800c7ee:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800c7f0:	f1b8 0f00 	cmp.w	r8, #0
 800c7f4:	d001      	beq.n	800c7fa <prvInitialiseNewTask.constprop.0+0xae>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c7f6:	f8c8 4000 	str.w	r4, [r8]
}
 800c7fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c7fe:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800c802:	e7c7      	b.n	800c794 <prvInitialiseNewTask.constprop.0+0x48>
 800c804:	0802aaf4 	.word	0x0802aaf4
 800c808:	0802ab14 	.word	0x0802ab14
 800c80c:	0802aad4 	.word	0x0802aad4

0800c810 <xTaskCreateStatic>:
	{
 800c810:	b570      	push	{r4, r5, r6, lr}
 800c812:	b086      	sub	sp, #24
 800c814:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800c818:	b955      	cbnz	r5, 800c830 <xTaskCreateStatic+0x20>
 800c81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c81e:	b672      	cpsid	i
 800c820:	f383 8811 	msr	BASEPRI, r3
 800c824:	f3bf 8f6f 	isb	sy
 800c828:	f3bf 8f4f 	dsb	sy
 800c82c:	b662      	cpsie	i
 800c82e:	e7fe      	b.n	800c82e <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 800c830:	b954      	cbnz	r4, 800c848 <xTaskCreateStatic+0x38>
 800c832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c836:	b672      	cpsid	i
 800c838:	f383 8811 	msr	BASEPRI, r3
 800c83c:	f3bf 8f6f 	isb	sy
 800c840:	f3bf 8f4f 	dsb	sy
 800c844:	b662      	cpsie	i
 800c846:	e7fe      	b.n	800c846 <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 800c848:	26c0      	movs	r6, #192	; 0xc0
 800c84a:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c84c:	9e05      	ldr	r6, [sp, #20]
 800c84e:	2ec0      	cmp	r6, #192	; 0xc0
 800c850:	d00a      	beq.n	800c868 <xTaskCreateStatic+0x58>
 800c852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c856:	b672      	cpsid	i
 800c858:	f383 8811 	msr	BASEPRI, r3
 800c85c:	f3bf 8f6f 	isb	sy
 800c860:	f3bf 8f4f 	dsb	sy
 800c864:	b662      	cpsie	i
 800c866:	e7fe      	b.n	800c866 <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c868:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c86a:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c86c:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c86e:	f884 50bd 	strb.w	r5, [r4, #189]	; 0xbd
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c872:	ad04      	add	r5, sp, #16
 800c874:	9402      	str	r4, [sp, #8]
 800c876:	9501      	str	r5, [sp, #4]
 800c878:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c87a:	9500      	str	r5, [sp, #0]
 800c87c:	f7ff ff66 	bl	800c74c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c880:	4620      	mov	r0, r4
 800c882:	f7ff fe49 	bl	800c518 <prvAddNewTaskToReadyList>
	}
 800c886:	9804      	ldr	r0, [sp, #16]
 800c888:	b006      	add	sp, #24
 800c88a:	bd70      	pop	{r4, r5, r6, pc}

0800c88c <xTaskCreate>:
	{
 800c88c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c890:	4607      	mov	r7, r0
 800c892:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c894:	0090      	lsls	r0, r2, #2
	{
 800c896:	4688      	mov	r8, r1
 800c898:	4616      	mov	r6, r2
 800c89a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c89c:	f7fe fe30 	bl	800b500 <pvPortMalloc>
			if( pxStack != NULL )
 800c8a0:	4605      	mov	r5, r0
 800c8a2:	b1e8      	cbz	r0, 800c8e0 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c8a4:	20c0      	movs	r0, #192	; 0xc0
 800c8a6:	f7fe fe2b 	bl	800b500 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800c8aa:	4604      	mov	r4, r0
 800c8ac:	b1a8      	cbz	r0, 800c8da <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c8ae:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800c8b0:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c8b2:	4632      	mov	r2, r6
 800c8b4:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c8b6:	f880 30bd 	strb.w	r3, [r0, #189]	; 0xbd
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c8ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8bc:	9002      	str	r0, [sp, #8]
 800c8be:	4638      	mov	r0, r7
 800c8c0:	9301      	str	r3, [sp, #4]
 800c8c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8c4:	9300      	str	r3, [sp, #0]
 800c8c6:	464b      	mov	r3, r9
 800c8c8:	f7ff ff40 	bl	800c74c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	f7ff fe23 	bl	800c518 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c8d2:	2001      	movs	r0, #1
	}
 800c8d4:	b005      	add	sp, #20
 800c8d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800c8da:	4628      	mov	r0, r5
 800c8dc:	f7fe fea6 	bl	800b62c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c8e0:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800c8e4:	e7f6      	b.n	800c8d4 <xTaskCreate+0x48>
	...

0800c8e8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800c8e8:	4a02      	ldr	r2, [pc, #8]	; (800c8f4 <vTaskSuspendAll+0xc>)
 800c8ea:	6813      	ldr	r3, [r2, #0]
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	6013      	str	r3, [r2, #0]
}
 800c8f0:	4770      	bx	lr
 800c8f2:	bf00      	nop
 800c8f4:	20020e1c 	.word	0x20020e1c

0800c8f8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800c8f8:	4b01      	ldr	r3, [pc, #4]	; (800c900 <xTaskGetTickCount+0x8>)
 800c8fa:	6818      	ldr	r0, [r3, #0]
}
 800c8fc:	4770      	bx	lr
 800c8fe:	bf00      	nop
 800c900:	20020e98 	.word	0x20020e98

0800c904 <xTaskGetTickCountFromISR>:
{
 800c904:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c906:	f7ff f875 	bl	800b9f4 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800c90a:	4b01      	ldr	r3, [pc, #4]	; (800c910 <xTaskGetTickCountFromISR+0xc>)
 800c90c:	6818      	ldr	r0, [r3, #0]
}
 800c90e:	bd08      	pop	{r3, pc}
 800c910:	20020e98 	.word	0x20020e98

0800c914 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c914:	4b40      	ldr	r3, [pc, #256]	; (800ca18 <xTaskIncrementTick+0x104>)
 800c916:	681b      	ldr	r3, [r3, #0]
{
 800c918:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d174      	bne.n	800ca0a <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c920:	4b3e      	ldr	r3, [pc, #248]	; (800ca1c <xTaskIncrementTick+0x108>)
 800c922:	681d      	ldr	r5, [r3, #0]
 800c924:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800c926:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c928:	b9cd      	cbnz	r5, 800c95e <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 800c92a:	4b3d      	ldr	r3, [pc, #244]	; (800ca20 <xTaskIncrementTick+0x10c>)
 800c92c:	681a      	ldr	r2, [r3, #0]
 800c92e:	6812      	ldr	r2, [r2, #0]
 800c930:	b152      	cbz	r2, 800c948 <xTaskIncrementTick+0x34>
 800c932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c936:	b672      	cpsid	i
 800c938:	f383 8811 	msr	BASEPRI, r3
 800c93c:	f3bf 8f6f 	isb	sy
 800c940:	f3bf 8f4f 	dsb	sy
 800c944:	b662      	cpsie	i
 800c946:	e7fe      	b.n	800c946 <xTaskIncrementTick+0x32>
 800c948:	4a36      	ldr	r2, [pc, #216]	; (800ca24 <xTaskIncrementTick+0x110>)
 800c94a:	6819      	ldr	r1, [r3, #0]
 800c94c:	6810      	ldr	r0, [r2, #0]
 800c94e:	6018      	str	r0, [r3, #0]
 800c950:	6011      	str	r1, [r2, #0]
 800c952:	4a35      	ldr	r2, [pc, #212]	; (800ca28 <xTaskIncrementTick+0x114>)
 800c954:	6813      	ldr	r3, [r2, #0]
 800c956:	3301      	adds	r3, #1
 800c958:	6013      	str	r3, [r2, #0]
 800c95a:	f7ff fe93 	bl	800c684 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c95e:	4e33      	ldr	r6, [pc, #204]	; (800ca2c <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 800c960:	2400      	movs	r4, #0
 800c962:	4f33      	ldr	r7, [pc, #204]	; (800ca30 <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c964:	6833      	ldr	r3, [r6, #0]
 800c966:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800ca3c <xTaskIncrementTick+0x128>
 800c96a:	42ab      	cmp	r3, r5
 800c96c:	d911      	bls.n	800c992 <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c96e:	f8d8 3000 	ldr.w	r3, [r8]
 800c972:	2214      	movs	r2, #20
 800c974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c976:	4353      	muls	r3, r2
 800c978:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800c97a:	2b02      	cmp	r3, #2
 800c97c:	bf28      	it	cs
 800c97e:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 800c980:	4b2c      	ldr	r3, [pc, #176]	; (800ca34 <xTaskIncrementTick+0x120>)
 800c982:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 800c984:	2b00      	cmp	r3, #0
}
 800c986:	bf0c      	ite	eq
 800c988:	4620      	moveq	r0, r4
 800c98a:	2001      	movne	r0, #1
 800c98c:	b003      	add	sp, #12
 800c98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c992:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800ca20 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 800c996:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800ca40 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c99a:	f8d9 3000 	ldr.w	r3, [r9]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	b91b      	cbnz	r3, 800c9aa <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c9a6:	6033      	str	r3, [r6, #0]
					break;
 800c9a8:	e7e1      	b.n	800c96e <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9aa:	f8d9 3000 	ldr.w	r3, [r9]
 800c9ae:	68db      	ldr	r3, [r3, #12]
 800c9b0:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c9b4:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 800c9b8:	4295      	cmp	r5, r2
 800c9ba:	d201      	bcs.n	800c9c0 <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 800c9bc:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c9be:	e7d6      	b.n	800c96e <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9c0:	f10b 0104 	add.w	r1, fp, #4
 800c9c4:	4608      	mov	r0, r1
 800c9c6:	9101      	str	r1, [sp, #4]
 800c9c8:	f7fe fe9d 	bl	800b706 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c9cc:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800c9d0:	9901      	ldr	r1, [sp, #4]
 800c9d2:	b122      	cbz	r2, 800c9de <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c9d4:	f10b 0018 	add.w	r0, fp, #24
 800c9d8:	f7fe fe95 	bl	800b706 <uxListRemove>
 800c9dc:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800c9de:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 800c9e2:	f8da 2000 	ldr.w	r2, [sl]
 800c9e6:	4290      	cmp	r0, r2
 800c9e8:	d901      	bls.n	800c9ee <xTaskIncrementTick+0xda>
 800c9ea:	f8ca 0000 	str.w	r0, [sl]
 800c9ee:	2314      	movs	r3, #20
 800c9f0:	fb03 7000 	mla	r0, r3, r0, r7
 800c9f4:	f7fe fe64 	bl	800b6c0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c9f8:	f8d8 1000 	ldr.w	r1, [r8]
 800c9fc:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800ca00:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800ca02:	429a      	cmp	r2, r3
 800ca04:	bf28      	it	cs
 800ca06:	2401      	movcs	r4, #1
 800ca08:	e7c7      	b.n	800c99a <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 800ca0a:	4a0b      	ldr	r2, [pc, #44]	; (800ca38 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800ca0c:	2400      	movs	r4, #0
		++uxPendedTicks;
 800ca0e:	6813      	ldr	r3, [r2, #0]
 800ca10:	3301      	adds	r3, #1
 800ca12:	6013      	str	r3, [r2, #0]
 800ca14:	e7b4      	b.n	800c980 <xTaskIncrementTick+0x6c>
 800ca16:	bf00      	nop
 800ca18:	20020e1c 	.word	0x20020e1c
 800ca1c:	20020e98 	.word	0x20020e98
 800ca20:	200209a8 	.word	0x200209a8
 800ca24:	200209ac 	.word	0x200209ac
 800ca28:	20020e54 	.word	0x20020e54
 800ca2c:	20020e50 	.word	0x20020e50
 800ca30:	200209b0 	.word	0x200209b0
 800ca34:	20020e9c 	.word	0x20020e9c
 800ca38:	20020e18 	.word	0x20020e18
 800ca3c:	200209a4 	.word	0x200209a4
 800ca40:	20020e24 	.word	0x20020e24

0800ca44 <xTaskResumeAll>:
{
 800ca44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800ca46:	4c32      	ldr	r4, [pc, #200]	; (800cb10 <xTaskResumeAll+0xcc>)
 800ca48:	6823      	ldr	r3, [r4, #0]
 800ca4a:	b953      	cbnz	r3, 800ca62 <xTaskResumeAll+0x1e>
 800ca4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca50:	b672      	cpsid	i
 800ca52:	f383 8811 	msr	BASEPRI, r3
 800ca56:	f3bf 8f6f 	isb	sy
 800ca5a:	f3bf 8f4f 	dsb	sy
 800ca5e:	b662      	cpsie	i
 800ca60:	e7fe      	b.n	800ca60 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 800ca62:	f7fe fec7 	bl	800b7f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800ca66:	6823      	ldr	r3, [r4, #0]
 800ca68:	3b01      	subs	r3, #1
 800ca6a:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca6c:	6824      	ldr	r4, [r4, #0]
 800ca6e:	b12c      	cbz	r4, 800ca7c <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 800ca70:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ca72:	f7fe fee3 	bl	800b83c <vPortExitCritical>
}
 800ca76:	4620      	mov	r0, r4
 800ca78:	b003      	add	sp, #12
 800ca7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ca7c:	4b25      	ldr	r3, [pc, #148]	; (800cb14 <xTaskResumeAll+0xd0>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d0f5      	beq.n	800ca70 <xTaskResumeAll+0x2c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca84:	4d24      	ldr	r5, [pc, #144]	; (800cb18 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 800ca86:	4e25      	ldr	r6, [pc, #148]	; (800cb1c <xTaskResumeAll+0xd8>)
 800ca88:	4f25      	ldr	r7, [pc, #148]	; (800cb20 <xTaskResumeAll+0xdc>)
 800ca8a:	e01e      	b.n	800caca <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca8c:	68eb      	ldr	r3, [r5, #12]
 800ca8e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca90:	f104 0018 	add.w	r0, r4, #24
 800ca94:	f7fe fe37 	bl	800b706 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca98:	1d21      	adds	r1, r4, #4
 800ca9a:	4608      	mov	r0, r1
 800ca9c:	9101      	str	r1, [sp, #4]
 800ca9e:	f7fe fe32 	bl	800b706 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800caa2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800caa4:	6832      	ldr	r2, [r6, #0]
 800caa6:	9901      	ldr	r1, [sp, #4]
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d900      	bls.n	800caae <xTaskResumeAll+0x6a>
 800caac:	6033      	str	r3, [r6, #0]
 800caae:	2014      	movs	r0, #20
 800cab0:	fb00 7003 	mla	r0, r0, r3, r7
 800cab4:	f7fe fe04 	bl	800b6c0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cab8:	4b1a      	ldr	r3, [pc, #104]	; (800cb24 <xTaskResumeAll+0xe0>)
 800caba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d302      	bcc.n	800caca <xTaskResumeAll+0x86>
						xYieldPending = pdTRUE;
 800cac4:	4b18      	ldr	r3, [pc, #96]	; (800cb28 <xTaskResumeAll+0xe4>)
 800cac6:	2201      	movs	r2, #1
 800cac8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800caca:	682b      	ldr	r3, [r5, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d1dd      	bne.n	800ca8c <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800cad0:	b10c      	cbz	r4, 800cad6 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 800cad2:	f7ff fdd7 	bl	800c684 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cad6:	4d15      	ldr	r5, [pc, #84]	; (800cb2c <xTaskResumeAll+0xe8>)
 800cad8:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cada:	b144      	cbz	r4, 800caee <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
 800cadc:	4e12      	ldr	r6, [pc, #72]	; (800cb28 <xTaskResumeAll+0xe4>)
 800cade:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800cae0:	f7ff ff18 	bl	800c914 <xTaskIncrementTick>
 800cae4:	b100      	cbz	r0, 800cae8 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 800cae6:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cae8:	3c01      	subs	r4, #1
 800caea:	d1f9      	bne.n	800cae0 <xTaskResumeAll+0x9c>
						uxPendedTicks = 0;
 800caec:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800caee:	4b0e      	ldr	r3, [pc, #56]	; (800cb28 <xTaskResumeAll+0xe4>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d0bc      	beq.n	800ca70 <xTaskResumeAll+0x2c>
					taskYIELD_IF_USING_PREEMPTION();
 800caf6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800cafa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cafe:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800cb02:	f3bf 8f4f 	dsb	sy
 800cb06:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800cb0a:	2401      	movs	r4, #1
 800cb0c:	e7b1      	b.n	800ca72 <xTaskResumeAll+0x2e>
 800cb0e:	bf00      	nop
 800cb10:	20020e1c 	.word	0x20020e1c
 800cb14:	20020e10 	.word	0x20020e10
 800cb18:	20020e58 	.word	0x20020e58
 800cb1c:	20020e24 	.word	0x20020e24
 800cb20:	200209b0 	.word	0x200209b0
 800cb24:	200209a4 	.word	0x200209a4
 800cb28:	20020e9c 	.word	0x20020e9c
 800cb2c:	20020e18 	.word	0x20020e18

0800cb30 <vTaskDelay>:
	{
 800cb30:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cb32:	b950      	cbnz	r0, 800cb4a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800cb34:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800cb38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb3c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800cb40:	f3bf 8f4f 	dsb	sy
 800cb44:	f3bf 8f6f 	isb	sy
	}
 800cb48:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800cb4a:	4b0b      	ldr	r3, [pc, #44]	; (800cb78 <vTaskDelay+0x48>)
 800cb4c:	6819      	ldr	r1, [r3, #0]
 800cb4e:	b151      	cbz	r1, 800cb66 <vTaskDelay+0x36>
 800cb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb54:	b672      	cpsid	i
 800cb56:	f383 8811 	msr	BASEPRI, r3
 800cb5a:	f3bf 8f6f 	isb	sy
 800cb5e:	f3bf 8f4f 	dsb	sy
 800cb62:	b662      	cpsie	i
 800cb64:	e7fe      	b.n	800cb64 <vTaskDelay+0x34>
			vTaskSuspendAll();
 800cb66:	f7ff febf 	bl	800c8e8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cb6a:	f7ff fd53 	bl	800c614 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800cb6e:	f7ff ff69 	bl	800ca44 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800cb72:	2800      	cmp	r0, #0
 800cb74:	d0de      	beq.n	800cb34 <vTaskDelay+0x4>
 800cb76:	e7e7      	b.n	800cb48 <vTaskDelay+0x18>
 800cb78:	20020e1c 	.word	0x20020e1c

0800cb7c <vTaskSetApplicationTaskTag>:
	{
 800cb7c:	b538      	push	{r3, r4, r5, lr}
 800cb7e:	460d      	mov	r5, r1
		if( xTask == NULL )
 800cb80:	4604      	mov	r4, r0
 800cb82:	b908      	cbnz	r0, 800cb88 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800cb84:	4b04      	ldr	r3, [pc, #16]	; (800cb98 <vTaskSetApplicationTaskTag+0x1c>)
 800cb86:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800cb88:	f7fe fe34 	bl	800b7f4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800cb8c:	6565      	str	r5, [r4, #84]	; 0x54
	}
 800cb8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800cb92:	f7fe be53 	b.w	800b83c <vPortExitCritical>
 800cb96:	bf00      	nop
 800cb98:	200209a4 	.word	0x200209a4

0800cb9c <xTaskCallApplicationTaskHook>:
	{
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	4608      	mov	r0, r1
		if( xTask == NULL )
 800cba0:	b90b      	cbnz	r3, 800cba6 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800cba2:	4b03      	ldr	r3, [pc, #12]	; (800cbb0 <xTaskCallApplicationTaskHook+0x14>)
 800cba4:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800cba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cba8:	b103      	cbz	r3, 800cbac <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800cbaa:	4718      	bx	r3
	}
 800cbac:	4618      	mov	r0, r3
 800cbae:	4770      	bx	lr
 800cbb0:	200209a4 	.word	0x200209a4

0800cbb4 <vTaskStartScheduler>:
{
 800cbb4:	b510      	push	{r4, lr}
 800cbb6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cbb8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cbba:	aa07      	add	r2, sp, #28
 800cbbc:	a906      	add	r1, sp, #24
 800cbbe:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cbc0:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cbc4:	f7fe fc60 	bl	800b488 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cbc8:	9b05      	ldr	r3, [sp, #20]
 800cbca:	9a07      	ldr	r2, [sp, #28]
 800cbcc:	9302      	str	r3, [sp, #8]
 800cbce:	9b06      	ldr	r3, [sp, #24]
 800cbd0:	491d      	ldr	r1, [pc, #116]	; (800cc48 <vTaskStartScheduler+0x94>)
 800cbd2:	481e      	ldr	r0, [pc, #120]	; (800cc4c <vTaskStartScheduler+0x98>)
 800cbd4:	e9cd 4300 	strd	r4, r3, [sp]
 800cbd8:	4623      	mov	r3, r4
 800cbda:	f7ff fe19 	bl	800c810 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800cbde:	2800      	cmp	r0, #0
 800cbe0:	d030      	beq.n	800cc44 <vTaskStartScheduler+0x90>
			xReturn = xTimerCreateTimerTask();
 800cbe2:	f000 faa9 	bl	800d138 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800cbe6:	2801      	cmp	r0, #1
 800cbe8:	d11f      	bne.n	800cc2a <vTaskStartScheduler+0x76>
 800cbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbee:	b672      	cpsid	i
 800cbf0:	f383 8811 	msr	BASEPRI, r3
 800cbf4:	f3bf 8f6f 	isb	sy
 800cbf8:	f3bf 8f4f 	dsb	sy
 800cbfc:	b662      	cpsie	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cbfe:	4a14      	ldr	r2, [pc, #80]	; (800cc50 <vTaskStartScheduler+0x9c>)
 800cc00:	4914      	ldr	r1, [pc, #80]	; (800cc54 <vTaskStartScheduler+0xa0>)
 800cc02:	6813      	ldr	r3, [r2, #0]
 800cc04:	3358      	adds	r3, #88	; 0x58
 800cc06:	600b      	str	r3, [r1, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800cc08:	f04f 31ff 	mov.w	r1, #4294967295
 800cc0c:	4b12      	ldr	r3, [pc, #72]	; (800cc58 <vTaskStartScheduler+0xa4>)
 800cc0e:	6019      	str	r1, [r3, #0]
		traceTASK_SWITCHED_IN();
 800cc10:	4621      	mov	r1, r4
		xSchedulerRunning = pdTRUE;
 800cc12:	4b12      	ldr	r3, [pc, #72]	; (800cc5c <vTaskStartScheduler+0xa8>)
 800cc14:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cc16:	4b12      	ldr	r3, [pc, #72]	; (800cc60 <vTaskStartScheduler+0xac>)
 800cc18:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800cc1a:	6810      	ldr	r0, [r2, #0]
 800cc1c:	f7ff ffbe 	bl	800cb9c <xTaskCallApplicationTaskHook>
}
 800cc20:	b008      	add	sp, #32
 800cc22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800cc26:	f7fe be7f 	b.w	800b928 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cc2a:	3001      	adds	r0, #1
 800cc2c:	d10a      	bne.n	800cc44 <vTaskStartScheduler+0x90>
 800cc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc32:	b672      	cpsid	i
 800cc34:	f383 8811 	msr	BASEPRI, r3
 800cc38:	f3bf 8f6f 	isb	sy
 800cc3c:	f3bf 8f4f 	dsb	sy
 800cc40:	b662      	cpsie	i
 800cc42:	e7fe      	b.n	800cc42 <vTaskStartScheduler+0x8e>
}
 800cc44:	b008      	add	sp, #32
 800cc46:	bd10      	pop	{r4, pc}
 800cc48:	08027828 	.word	0x08027828
 800cc4c:	0800c6e9 	.word	0x0800c6e9
 800cc50:	200209a4 	.word	0x200209a4
 800cc54:	200000d0 	.word	0x200000d0
 800cc58:	20020e50 	.word	0x20020e50
 800cc5c:	20020e6c 	.word	0x20020e6c
 800cc60:	20020e98 	.word	0x20020e98

0800cc64 <vTaskSwitchContext>:
{
 800cc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cc66:	4b1e      	ldr	r3, [pc, #120]	; (800cce0 <vTaskSwitchContext+0x7c>)
 800cc68:	681a      	ldr	r2, [r3, #0]
 800cc6a:	4b1e      	ldr	r3, [pc, #120]	; (800cce4 <vTaskSwitchContext+0x80>)
 800cc6c:	b112      	cbz	r2, 800cc74 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800cc6e:	2201      	movs	r2, #1
 800cc70:	601a      	str	r2, [r3, #0]
}
 800cc72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800cc74:	4c1c      	ldr	r4, [pc, #112]	; (800cce8 <vTaskSwitchContext+0x84>)
 800cc76:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc78:	4e1c      	ldr	r6, [pc, #112]	; (800ccec <vTaskSwitchContext+0x88>)
 800cc7a:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800cc7c:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800cc7e:	6820      	ldr	r0, [r4, #0]
 800cc80:	f7ff ff8c 	bl	800cb9c <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc84:	6832      	ldr	r2, [r6, #0]
 800cc86:	491a      	ldr	r1, [pc, #104]	; (800ccf0 <vTaskSwitchContext+0x8c>)
 800cc88:	fb07 f302 	mul.w	r3, r7, r2
 800cc8c:	58cd      	ldr	r5, [r1, r3]
 800cc8e:	18c8      	adds	r0, r1, r3
 800cc90:	b1c5      	cbz	r5, 800ccc4 <vTaskSwitchContext+0x60>
 800cc92:	6845      	ldr	r5, [r0, #4]
 800cc94:	3308      	adds	r3, #8
 800cc96:	686d      	ldr	r5, [r5, #4]
 800cc98:	440b      	add	r3, r1
 800cc9a:	429d      	cmp	r5, r3
 800cc9c:	6045      	str	r5, [r0, #4]
 800cc9e:	bf04      	itt	eq
 800cca0:	686b      	ldreq	r3, [r5, #4]
 800cca2:	6043      	streq	r3, [r0, #4]
 800cca4:	2314      	movs	r3, #20
 800cca6:	fb03 1102 	mla	r1, r3, r2, r1
 800ccaa:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800ccac:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccae:	68db      	ldr	r3, [r3, #12]
 800ccb0:	6023      	str	r3, [r4, #0]
 800ccb2:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800ccb4:	6820      	ldr	r0, [r4, #0]
 800ccb6:	f7ff ff71 	bl	800cb9c <xTaskCallApplicationTaskHook>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ccba:	6823      	ldr	r3, [r4, #0]
 800ccbc:	4a0d      	ldr	r2, [pc, #52]	; (800ccf4 <vTaskSwitchContext+0x90>)
 800ccbe:	3358      	adds	r3, #88	; 0x58
 800ccc0:	6013      	str	r3, [r2, #0]
}
 800ccc2:	e7d6      	b.n	800cc72 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccc4:	b952      	cbnz	r2, 800ccdc <vTaskSwitchContext+0x78>
 800ccc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccca:	b672      	cpsid	i
 800cccc:	f383 8811 	msr	BASEPRI, r3
 800ccd0:	f3bf 8f6f 	isb	sy
 800ccd4:	f3bf 8f4f 	dsb	sy
 800ccd8:	b662      	cpsie	i
 800ccda:	e7fe      	b.n	800ccda <vTaskSwitchContext+0x76>
 800ccdc:	3a01      	subs	r2, #1
 800ccde:	e7d3      	b.n	800cc88 <vTaskSwitchContext+0x24>
 800cce0:	20020e1c 	.word	0x20020e1c
 800cce4:	20020e9c 	.word	0x20020e9c
 800cce8:	200209a4 	.word	0x200209a4
 800ccec:	20020e24 	.word	0x20020e24
 800ccf0:	200209b0 	.word	0x200209b0
 800ccf4:	200000d0 	.word	0x200000d0

0800ccf8 <vTaskPlaceOnEventList>:
{
 800ccf8:	b510      	push	{r4, lr}
 800ccfa:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800ccfc:	b950      	cbnz	r0, 800cd14 <vTaskPlaceOnEventList+0x1c>
 800ccfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd02:	b672      	cpsid	i
 800cd04:	f383 8811 	msr	BASEPRI, r3
 800cd08:	f3bf 8f6f 	isb	sy
 800cd0c:	f3bf 8f4f 	dsb	sy
 800cd10:	b662      	cpsie	i
 800cd12:	e7fe      	b.n	800cd12 <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd14:	4b05      	ldr	r3, [pc, #20]	; (800cd2c <vTaskPlaceOnEventList+0x34>)
 800cd16:	6819      	ldr	r1, [r3, #0]
 800cd18:	3118      	adds	r1, #24
 800cd1a:	f7fe fcdd 	bl	800b6d8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cd1e:	4620      	mov	r0, r4
 800cd20:	2101      	movs	r1, #1
}
 800cd22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cd26:	f7ff bc75 	b.w	800c614 <prvAddCurrentTaskToDelayedList>
 800cd2a:	bf00      	nop
 800cd2c:	200209a4 	.word	0x200209a4

0800cd30 <vTaskPlaceOnEventListRestricted>:
	{
 800cd30:	b538      	push	{r3, r4, r5, lr}
 800cd32:	460d      	mov	r5, r1
 800cd34:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800cd36:	b950      	cbnz	r0, 800cd4e <vTaskPlaceOnEventListRestricted+0x1e>
 800cd38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd3c:	b672      	cpsid	i
 800cd3e:	f383 8811 	msr	BASEPRI, r3
 800cd42:	f3bf 8f6f 	isb	sy
 800cd46:	f3bf 8f4f 	dsb	sy
 800cd4a:	b662      	cpsie	i
 800cd4c:	e7fe      	b.n	800cd4c <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd4e:	4b07      	ldr	r3, [pc, #28]	; (800cd6c <vTaskPlaceOnEventListRestricted+0x3c>)
 800cd50:	6819      	ldr	r1, [r3, #0]
 800cd52:	3118      	adds	r1, #24
 800cd54:	f7fe fcb4 	bl	800b6c0 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800cd58:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cd5a:	4621      	mov	r1, r4
 800cd5c:	bf0c      	ite	eq
 800cd5e:	4628      	moveq	r0, r5
 800cd60:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800cd64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cd68:	f7ff bc54 	b.w	800c614 <prvAddCurrentTaskToDelayedList>
 800cd6c:	200209a4 	.word	0x200209a4

0800cd70 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd70:	68c3      	ldr	r3, [r0, #12]
{
 800cd72:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd74:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800cd76:	b954      	cbnz	r4, 800cd8e <xTaskRemoveFromEventList+0x1e>
 800cd78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd7c:	b672      	cpsid	i
 800cd7e:	f383 8811 	msr	BASEPRI, r3
 800cd82:	f3bf 8f6f 	isb	sy
 800cd86:	f3bf 8f4f 	dsb	sy
 800cd8a:	b662      	cpsie	i
 800cd8c:	e7fe      	b.n	800cd8c <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cd8e:	f104 0118 	add.w	r1, r4, #24
 800cd92:	4608      	mov	r0, r1
 800cd94:	9101      	str	r1, [sp, #4]
 800cd96:	f7fe fcb6 	bl	800b706 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd9a:	4b12      	ldr	r3, [pc, #72]	; (800cde4 <xTaskRemoveFromEventList+0x74>)
 800cd9c:	9901      	ldr	r1, [sp, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	b9e3      	cbnz	r3, 800cddc <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cda2:	1d21      	adds	r1, r4, #4
 800cda4:	4608      	mov	r0, r1
 800cda6:	9101      	str	r1, [sp, #4]
 800cda8:	f7fe fcad 	bl	800b706 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cdac:	4a0e      	ldr	r2, [pc, #56]	; (800cde8 <xTaskRemoveFromEventList+0x78>)
 800cdae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cdb0:	6810      	ldr	r0, [r2, #0]
 800cdb2:	9901      	ldr	r1, [sp, #4]
 800cdb4:	4283      	cmp	r3, r0
 800cdb6:	d900      	bls.n	800cdba <xTaskRemoveFromEventList+0x4a>
 800cdb8:	6013      	str	r3, [r2, #0]
 800cdba:	4a0c      	ldr	r2, [pc, #48]	; (800cdec <xTaskRemoveFromEventList+0x7c>)
 800cdbc:	2014      	movs	r0, #20
 800cdbe:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cdc2:	f7fe fc7d 	bl	800b6c0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cdc6:	4b0a      	ldr	r3, [pc, #40]	; (800cdf0 <xTaskRemoveFromEventList+0x80>)
 800cdc8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d906      	bls.n	800cde0 <xTaskRemoveFromEventList+0x70>
		xYieldPending = pdTRUE;
 800cdd2:	2001      	movs	r0, #1
 800cdd4:	4b07      	ldr	r3, [pc, #28]	; (800cdf4 <xTaskRemoveFromEventList+0x84>)
 800cdd6:	6018      	str	r0, [r3, #0]
}
 800cdd8:	b002      	add	sp, #8
 800cdda:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cddc:	4806      	ldr	r0, [pc, #24]	; (800cdf8 <xTaskRemoveFromEventList+0x88>)
 800cdde:	e7f0      	b.n	800cdc2 <xTaskRemoveFromEventList+0x52>
		xReturn = pdFALSE;
 800cde0:	2000      	movs	r0, #0
	return xReturn;
 800cde2:	e7f9      	b.n	800cdd8 <xTaskRemoveFromEventList+0x68>
 800cde4:	20020e1c 	.word	0x20020e1c
 800cde8:	20020e24 	.word	0x20020e24
 800cdec:	200209b0 	.word	0x200209b0
 800cdf0:	200209a4 	.word	0x200209a4
 800cdf4:	20020e9c 	.word	0x20020e9c
 800cdf8:	20020e58 	.word	0x20020e58

0800cdfc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cdfc:	4b03      	ldr	r3, [pc, #12]	; (800ce0c <vTaskInternalSetTimeOutState+0x10>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ce02:	4b03      	ldr	r3, [pc, #12]	; (800ce10 <vTaskInternalSetTimeOutState+0x14>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	6043      	str	r3, [r0, #4]
}
 800ce08:	4770      	bx	lr
 800ce0a:	bf00      	nop
 800ce0c:	20020e54 	.word	0x20020e54
 800ce10:	20020e98 	.word	0x20020e98

0800ce14 <xTaskCheckForTimeOut>:
{
 800ce14:	b570      	push	{r4, r5, r6, lr}
 800ce16:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800ce18:	4605      	mov	r5, r0
 800ce1a:	b950      	cbnz	r0, 800ce32 <xTaskCheckForTimeOut+0x1e>
 800ce1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce20:	b672      	cpsid	i
 800ce22:	f383 8811 	msr	BASEPRI, r3
 800ce26:	f3bf 8f6f 	isb	sy
 800ce2a:	f3bf 8f4f 	dsb	sy
 800ce2e:	b662      	cpsie	i
 800ce30:	e7fe      	b.n	800ce30 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 800ce32:	b951      	cbnz	r1, 800ce4a <xTaskCheckForTimeOut+0x36>
 800ce34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce38:	b672      	cpsid	i
 800ce3a:	f383 8811 	msr	BASEPRI, r3
 800ce3e:	f3bf 8f6f 	isb	sy
 800ce42:	f3bf 8f4f 	dsb	sy
 800ce46:	b662      	cpsie	i
 800ce48:	e7fe      	b.n	800ce48 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800ce4a:	f7fe fcd3 	bl	800b7f4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ce4e:	4b0f      	ldr	r3, [pc, #60]	; (800ce8c <xTaskCheckForTimeOut+0x78>)
 800ce50:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800ce52:	6823      	ldr	r3, [r4, #0]
 800ce54:	1c5a      	adds	r2, r3, #1
 800ce56:	d010      	beq.n	800ce7a <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ce58:	480d      	ldr	r0, [pc, #52]	; (800ce90 <xTaskCheckForTimeOut+0x7c>)
 800ce5a:	682e      	ldr	r6, [r5, #0]
 800ce5c:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ce5e:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ce60:	4286      	cmp	r6, r0
 800ce62:	d001      	beq.n	800ce68 <xTaskCheckForTimeOut+0x54>
 800ce64:	428a      	cmp	r2, r1
 800ce66:	d90f      	bls.n	800ce88 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ce68:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ce6a:	4283      	cmp	r3, r0
 800ce6c:	d90a      	bls.n	800ce84 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 800ce6e:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ce70:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800ce72:	4413      	add	r3, r2
 800ce74:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ce76:	f7ff ffc1 	bl	800cdfc <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800ce7a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ce7c:	f7fe fcde 	bl	800b83c <vPortExitCritical>
}
 800ce80:	4620      	mov	r0, r4
 800ce82:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800ce84:	2300      	movs	r3, #0
 800ce86:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800ce88:	2401      	movs	r4, #1
 800ce8a:	e7f7      	b.n	800ce7c <xTaskCheckForTimeOut+0x68>
 800ce8c:	20020e98 	.word	0x20020e98
 800ce90:	20020e54 	.word	0x20020e54

0800ce94 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ce94:	4b01      	ldr	r3, [pc, #4]	; (800ce9c <vTaskMissedYield+0x8>)
 800ce96:	2201      	movs	r2, #1
 800ce98:	601a      	str	r2, [r3, #0]
}
 800ce9a:	4770      	bx	lr
 800ce9c:	20020e9c 	.word	0x20020e9c

0800cea0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800cea0:	4b05      	ldr	r3, [pc, #20]	; (800ceb8 <xTaskGetSchedulerState+0x18>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	b133      	cbz	r3, 800ceb4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cea6:	4b05      	ldr	r3, [pc, #20]	; (800cebc <xTaskGetSchedulerState+0x1c>)
 800cea8:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	bf0c      	ite	eq
 800ceae:	2002      	moveq	r0, #2
 800ceb0:	2000      	movne	r0, #0
 800ceb2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ceb4:	2001      	movs	r0, #1
	}
 800ceb6:	4770      	bx	lr
 800ceb8:	20020e6c 	.word	0x20020e6c
 800cebc:	20020e1c 	.word	0x20020e1c

0800cec0 <xTaskPriorityInherit>:
	{
 800cec0:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800cec2:	4604      	mov	r4, r0
 800cec4:	b340      	cbz	r0, 800cf18 <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cec6:	4d1b      	ldr	r5, [pc, #108]	; (800cf34 <xTaskPriorityInherit+0x74>)
 800cec8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ceca:	682a      	ldr	r2, [r5, #0]
 800cecc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cece:	4293      	cmp	r3, r2
 800ced0:	d228      	bcs.n	800cf24 <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ced2:	6982      	ldr	r2, [r0, #24]
 800ced4:	2a00      	cmp	r2, #0
 800ced6:	db04      	blt.n	800cee2 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ced8:	682a      	ldr	r2, [r5, #0]
 800ceda:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cedc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800cee0:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cee2:	2214      	movs	r2, #20
 800cee4:	4e14      	ldr	r6, [pc, #80]	; (800cf38 <xTaskPriorityInherit+0x78>)
 800cee6:	fb02 6303 	mla	r3, r2, r3, r6
 800ceea:	6962      	ldr	r2, [r4, #20]
 800ceec:	429a      	cmp	r2, r3
 800ceee:	d115      	bne.n	800cf1c <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cef0:	1d21      	adds	r1, r4, #4
 800cef2:	4608      	mov	r0, r1
 800cef4:	9101      	str	r1, [sp, #4]
 800cef6:	f7fe fc06 	bl	800b706 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cefa:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cefc:	4a0f      	ldr	r2, [pc, #60]	; (800cf3c <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cf00:	6810      	ldr	r0, [r2, #0]
 800cf02:	9901      	ldr	r1, [sp, #4]
 800cf04:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cf06:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cf08:	d900      	bls.n	800cf0c <xTaskPriorityInherit+0x4c>
 800cf0a:	6013      	str	r3, [r2, #0]
 800cf0c:	2014      	movs	r0, #20
 800cf0e:	fb00 6003 	mla	r0, r0, r3, r6
 800cf12:	f7fe fbd5 	bl	800b6c0 <vListInsertEnd>
				xReturn = pdTRUE;
 800cf16:	2001      	movs	r0, #1
	}
 800cf18:	b002      	add	sp, #8
 800cf1a:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cf1c:	682b      	ldr	r3, [r5, #0]
 800cf1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf20:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf22:	e7f8      	b.n	800cf16 <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cf24:	682b      	ldr	r3, [r5, #0]
 800cf26:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800cf28:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800cf2a:	42a0      	cmp	r0, r4
 800cf2c:	bf2c      	ite	cs
 800cf2e:	2000      	movcs	r0, #0
 800cf30:	2001      	movcc	r0, #1
 800cf32:	e7f1      	b.n	800cf18 <xTaskPriorityInherit+0x58>
 800cf34:	200209a4 	.word	0x200209a4
 800cf38:	200209b0 	.word	0x200209b0
 800cf3c:	20020e24 	.word	0x20020e24

0800cf40 <xTaskPriorityDisinherit>:
	{
 800cf40:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 800cf42:	b910      	cbnz	r0, 800cf4a <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800cf44:	2000      	movs	r0, #0
	}
 800cf46:	b002      	add	sp, #8
 800cf48:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800cf4a:	4b1e      	ldr	r3, [pc, #120]	; (800cfc4 <xTaskPriorityDisinherit+0x84>)
 800cf4c:	681c      	ldr	r4, [r3, #0]
 800cf4e:	4284      	cmp	r4, r0
 800cf50:	d00a      	beq.n	800cf68 <xTaskPriorityDisinherit+0x28>
 800cf52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf56:	b672      	cpsid	i
 800cf58:	f383 8811 	msr	BASEPRI, r3
 800cf5c:	f3bf 8f6f 	isb	sy
 800cf60:	f3bf 8f4f 	dsb	sy
 800cf64:	b662      	cpsie	i
 800cf66:	e7fe      	b.n	800cf66 <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 800cf68:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800cf6a:	b953      	cbnz	r3, 800cf82 <xTaskPriorityDisinherit+0x42>
 800cf6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf70:	b672      	cpsid	i
 800cf72:	f383 8811 	msr	BASEPRI, r3
 800cf76:	f3bf 8f6f 	isb	sy
 800cf7a:	f3bf 8f4f 	dsb	sy
 800cf7e:	b662      	cpsie	i
 800cf80:	e7fe      	b.n	800cf80 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cf82:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800cf84:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cf86:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800cf88:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cf8a:	4291      	cmp	r1, r2
 800cf8c:	d0da      	beq.n	800cf44 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d1d8      	bne.n	800cf44 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf92:	1d21      	adds	r1, r4, #4
 800cf94:	4608      	mov	r0, r1
 800cf96:	9101      	str	r1, [sp, #4]
 800cf98:	f7fe fbb5 	bl	800b706 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cf9c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800cf9e:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfa0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cfa4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfa6:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800cfa8:	4a07      	ldr	r2, [pc, #28]	; (800cfc8 <xTaskPriorityDisinherit+0x88>)
 800cfaa:	6810      	ldr	r0, [r2, #0]
 800cfac:	4283      	cmp	r3, r0
 800cfae:	d900      	bls.n	800cfb2 <xTaskPriorityDisinherit+0x72>
 800cfb0:	6013      	str	r3, [r2, #0]
 800cfb2:	4a06      	ldr	r2, [pc, #24]	; (800cfcc <xTaskPriorityDisinherit+0x8c>)
 800cfb4:	2014      	movs	r0, #20
 800cfb6:	fb00 2003 	mla	r0, r0, r3, r2
 800cfba:	f7fe fb81 	bl	800b6c0 <vListInsertEnd>
					xReturn = pdTRUE;
 800cfbe:	2001      	movs	r0, #1
		return xReturn;
 800cfc0:	e7c1      	b.n	800cf46 <xTaskPriorityDisinherit+0x6>
 800cfc2:	bf00      	nop
 800cfc4:	200209a4 	.word	0x200209a4
 800cfc8:	20020e24 	.word	0x20020e24
 800cfcc:	200209b0 	.word	0x200209b0

0800cfd0 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800cfd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	d048      	beq.n	800d06a <vTaskPriorityDisinheritAfterTimeout+0x9a>
			configASSERT( pxTCB->uxMutexesHeld );
 800cfd8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800cfda:	b952      	cbnz	r2, 800cff2 <vTaskPriorityDisinheritAfterTimeout+0x22>
 800cfdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe0:	b672      	cpsid	i
 800cfe2:	f383 8811 	msr	BASEPRI, r3
 800cfe6:	f3bf 8f6f 	isb	sy
 800cfea:	f3bf 8f4f 	dsb	sy
 800cfee:	b662      	cpsie	i
 800cff0:	e7fe      	b.n	800cff0 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cff2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800cff4:	4299      	cmp	r1, r3
 800cff6:	bf38      	it	cc
 800cff8:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cffa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800cffc:	428b      	cmp	r3, r1
 800cffe:	d034      	beq.n	800d06a <vTaskPriorityDisinheritAfterTimeout+0x9a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d000:	2a01      	cmp	r2, #1
 800d002:	d132      	bne.n	800d06a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					configASSERT( pxTCB != pxCurrentTCB );
 800d004:	4a1a      	ldr	r2, [pc, #104]	; (800d070 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800d006:	6812      	ldr	r2, [r2, #0]
 800d008:	4282      	cmp	r2, r0
 800d00a:	d10a      	bne.n	800d022 <vTaskPriorityDisinheritAfterTimeout+0x52>
 800d00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d010:	b672      	cpsid	i
 800d012:	f383 8811 	msr	BASEPRI, r3
 800d016:	f3bf 8f6f 	isb	sy
 800d01a:	f3bf 8f4f 	dsb	sy
 800d01e:	b662      	cpsie	i
 800d020:	e7fe      	b.n	800d020 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d022:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d024:	4d13      	ldr	r5, [pc, #76]	; (800d074 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d026:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d028:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800d02c:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d02e:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d032:	bfa8      	it	ge
 800d034:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d038:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d03a:	bfa8      	it	ge
 800d03c:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d03e:	429a      	cmp	r2, r3
 800d040:	d113      	bne.n	800d06a <vTaskPriorityDisinheritAfterTimeout+0x9a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d042:	1d01      	adds	r1, r0, #4
 800d044:	4608      	mov	r0, r1
 800d046:	9101      	str	r1, [sp, #4]
 800d048:	f7fe fb5d 	bl	800b706 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800d04c:	4a0a      	ldr	r2, [pc, #40]	; (800d078 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 800d04e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d050:	6810      	ldr	r0, [r2, #0]
 800d052:	9901      	ldr	r1, [sp, #4]
 800d054:	4283      	cmp	r3, r0
 800d056:	d900      	bls.n	800d05a <vTaskPriorityDisinheritAfterTimeout+0x8a>
 800d058:	6013      	str	r3, [r2, #0]
 800d05a:	2014      	movs	r0, #20
 800d05c:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800d060:	b003      	add	sp, #12
 800d062:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800d066:	f7fe bb2b 	b.w	800b6c0 <vListInsertEnd>
	}
 800d06a:	b003      	add	sp, #12
 800d06c:	bd30      	pop	{r4, r5, pc}
 800d06e:	bf00      	nop
 800d070:	200209a4 	.word	0x200209a4
 800d074:	200209b0 	.word	0x200209b0
 800d078:	20020e24 	.word	0x20020e24

0800d07c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800d07c:	4b04      	ldr	r3, [pc, #16]	; (800d090 <pvTaskIncrementMutexHeldCount+0x14>)
 800d07e:	681a      	ldr	r2, [r3, #0]
 800d080:	b11a      	cbz	r2, 800d08a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800d082:	6819      	ldr	r1, [r3, #0]
 800d084:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800d086:	3201      	adds	r2, #1
 800d088:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800d08a:	6818      	ldr	r0, [r3, #0]
	}
 800d08c:	4770      	bx	lr
 800d08e:	bf00      	nop
 800d090:	200209a4 	.word	0x200209a4

0800d094 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800d096:	4c11      	ldr	r4, [pc, #68]	; (800d0dc <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800d098:	f7fe fbac 	bl	800b7f4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800d09c:	6825      	ldr	r5, [r4, #0]
 800d09e:	b9bd      	cbnz	r5, 800d0d0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800d0a0:	4f0f      	ldr	r7, [pc, #60]	; (800d0e0 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800d0a2:	4e10      	ldr	r6, [pc, #64]	; (800d0e4 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800d0a4:	4638      	mov	r0, r7
 800d0a6:	f7fe fafd 	bl	800b6a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d0aa:	4630      	mov	r0, r6
 800d0ac:	f7fe fafa 	bl	800b6a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d0b0:	4b0d      	ldr	r3, [pc, #52]	; (800d0e8 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d0b2:	4a0e      	ldr	r2, [pc, #56]	; (800d0ec <prvCheckForValidListAndQueue+0x58>)
 800d0b4:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800d0b6:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d0b8:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800d0ba:	4b0d      	ldr	r3, [pc, #52]	; (800d0f0 <prvCheckForValidListAndQueue+0x5c>)
 800d0bc:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d0be:	4b0d      	ldr	r3, [pc, #52]	; (800d0f4 <prvCheckForValidListAndQueue+0x60>)
 800d0c0:	9500      	str	r5, [sp, #0]
 800d0c2:	f7fe fde3 	bl	800bc8c <xQueueGenericCreateStatic>
 800d0c6:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d0c8:	b110      	cbz	r0, 800d0d0 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d0ca:	490b      	ldr	r1, [pc, #44]	; (800d0f8 <prvCheckForValidListAndQueue+0x64>)
 800d0cc:	f7ff f9c2 	bl	800c454 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800d0d0:	b003      	add	sp, #12
 800d0d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800d0d6:	f7fe bbb1 	b.w	800b83c <vPortExitCritical>
 800d0da:	bf00      	nop
 800d0dc:	20020fc4 	.word	0x20020fc4
 800d0e0:	20020f48 	.word	0x20020f48
 800d0e4:	20020f5c 	.word	0x20020f5c
 800d0e8:	20020ea0 	.word	0x20020ea0
 800d0ec:	20020ea8 	.word	0x20020ea8
 800d0f0:	20020ea4 	.word	0x20020ea4
 800d0f4:	20020f74 	.word	0x20020f74
 800d0f8:	0802782d 	.word	0x0802782d

0800d0fc <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800d0fc:	4291      	cmp	r1, r2
{
 800d0fe:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d100:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d102:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800d104:	d80a      	bhi.n	800d11c <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d106:	1ad2      	subs	r2, r2, r3
 800d108:	6983      	ldr	r3, [r0, #24]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d20d      	bcs.n	800d12a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d10e:	1d01      	adds	r1, r0, #4
 800d110:	4b07      	ldr	r3, [pc, #28]	; (800d130 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d112:	6818      	ldr	r0, [r3, #0]
 800d114:	f7fe fae0 	bl	800b6d8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800d118:	2000      	movs	r0, #0
}
 800d11a:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d201      	bcs.n	800d124 <prvInsertTimerInActiveList+0x28>
 800d120:	4299      	cmp	r1, r3
 800d122:	d202      	bcs.n	800d12a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d124:	1d01      	adds	r1, r0, #4
 800d126:	4b03      	ldr	r3, [pc, #12]	; (800d134 <prvInsertTimerInActiveList+0x38>)
 800d128:	e7f3      	b.n	800d112 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800d12a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800d12c:	e7f5      	b.n	800d11a <prvInsertTimerInActiveList+0x1e>
 800d12e:	bf00      	nop
 800d130:	20020ea4 	.word	0x20020ea4
 800d134:	20020ea0 	.word	0x20020ea0

0800d138 <xTimerCreateTimerTask>:
{
 800d138:	b510      	push	{r4, lr}
 800d13a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800d13c:	f7ff ffaa 	bl	800d094 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800d140:	4b13      	ldr	r3, [pc, #76]	; (800d190 <xTimerCreateTimerTask+0x58>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	b1b3      	cbz	r3, 800d174 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d146:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d148:	aa07      	add	r2, sp, #28
 800d14a:	a906      	add	r1, sp, #24
 800d14c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d14e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d152:	f7fe f9a5 	bl	800b4a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d156:	9b05      	ldr	r3, [sp, #20]
 800d158:	9a07      	ldr	r2, [sp, #28]
 800d15a:	9302      	str	r3, [sp, #8]
 800d15c:	9b06      	ldr	r3, [sp, #24]
 800d15e:	490d      	ldr	r1, [pc, #52]	; (800d194 <xTimerCreateTimerTask+0x5c>)
 800d160:	9301      	str	r3, [sp, #4]
 800d162:	2302      	movs	r3, #2
 800d164:	480c      	ldr	r0, [pc, #48]	; (800d198 <xTimerCreateTimerTask+0x60>)
 800d166:	9300      	str	r3, [sp, #0]
 800d168:	4623      	mov	r3, r4
 800d16a:	f7ff fb51 	bl	800c810 <xTaskCreateStatic>
 800d16e:	4b0b      	ldr	r3, [pc, #44]	; (800d19c <xTimerCreateTimerTask+0x64>)
 800d170:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800d172:	b950      	cbnz	r0, 800d18a <xTimerCreateTimerTask+0x52>
 800d174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d178:	b672      	cpsid	i
 800d17a:	f383 8811 	msr	BASEPRI, r3
 800d17e:	f3bf 8f6f 	isb	sy
 800d182:	f3bf 8f4f 	dsb	sy
 800d186:	b662      	cpsie	i
	configASSERT( xReturn );
 800d188:	e7fe      	b.n	800d188 <xTimerCreateTimerTask+0x50>
}
 800d18a:	2001      	movs	r0, #1
 800d18c:	b008      	add	sp, #32
 800d18e:	bd10      	pop	{r4, pc}
 800d190:	20020fc4 	.word	0x20020fc4
 800d194:	08027832 	.word	0x08027832
 800d198:	0800d2a9 	.word	0x0800d2a9
 800d19c:	20020fc8 	.word	0x20020fc8

0800d1a0 <xTimerGenericCommand>:
{
 800d1a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d1a2:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800d1a4:	4604      	mov	r4, r0
{
 800d1a6:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800d1a8:	b950      	cbnz	r0, 800d1c0 <xTimerGenericCommand+0x20>
 800d1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ae:	b672      	cpsid	i
 800d1b0:	f383 8811 	msr	BASEPRI, r3
 800d1b4:	f3bf 8f6f 	isb	sy
 800d1b8:	f3bf 8f4f 	dsb	sy
 800d1bc:	b662      	cpsie	i
 800d1be:	e7fe      	b.n	800d1be <xTimerGenericCommand+0x1e>
	if( xTimerQueue != NULL )
 800d1c0:	4d0c      	ldr	r5, [pc, #48]	; (800d1f4 <xTimerGenericCommand+0x54>)
 800d1c2:	6828      	ldr	r0, [r5, #0]
 800d1c4:	b178      	cbz	r0, 800d1e6 <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d1c6:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d1c8:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d1ca:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d1ce:	dc0c      	bgt.n	800d1ea <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d1d0:	f7ff fe66 	bl	800cea0 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d1d4:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d1d6:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d1d8:	4669      	mov	r1, sp
 800d1da:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d1dc:	bf0c      	ite	eq
 800d1de:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d1e0:	461a      	movne	r2, r3
 800d1e2:	f7fe fdd8 	bl	800bd96 <xQueueGenericSend>
}
 800d1e6:	b004      	add	sp, #16
 800d1e8:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	4669      	mov	r1, sp
 800d1ee:	f7fe fe8d 	bl	800bf0c <xQueueGenericSendFromISR>
 800d1f2:	e7f8      	b.n	800d1e6 <xTimerGenericCommand+0x46>
 800d1f4:	20020fc4 	.word	0x20020fc4

0800d1f8 <prvSampleTimeNow>:
{
 800d1f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800d1fc:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800d2a4 <prvSampleTimeNow+0xac>
{
 800d200:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800d202:	f7ff fb79 	bl	800c8f8 <xTaskGetTickCount>
 800d206:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800d208:	f8d8 3000 	ldr.w	r3, [r8]
 800d20c:	4283      	cmp	r3, r0
 800d20e:	d942      	bls.n	800d296 <prvSampleTimeNow+0x9e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d210:	4f22      	ldr	r7, [pc, #136]	; (800d29c <prvSampleTimeNow+0xa4>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d212:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	b95a      	cbnz	r2, 800d234 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800d21c:	4a20      	ldr	r2, [pc, #128]	; (800d2a0 <prvSampleTimeNow+0xa8>)
 800d21e:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d220:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800d222:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800d224:	6039      	str	r1, [r7, #0]
}
 800d226:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 800d228:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800d22a:	f8c8 5000 	str.w	r5, [r8]
}
 800d22e:	b004      	add	sp, #16
 800d230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d234:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d236:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d238:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d23c:	1d21      	adds	r1, r4, #4
 800d23e:	4608      	mov	r0, r1
 800d240:	9103      	str	r1, [sp, #12]
 800d242:	f7fe fa60 	bl	800b706 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d246:	6a23      	ldr	r3, [r4, #32]
 800d248:	4620      	mov	r0, r4
 800d24a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d24c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d250:	9903      	ldr	r1, [sp, #12]
 800d252:	f013 0f04 	tst.w	r3, #4
 800d256:	d0de      	beq.n	800d216 <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d258:	69a3      	ldr	r3, [r4, #24]
 800d25a:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800d25c:	459a      	cmp	sl, r3
 800d25e:	d205      	bcs.n	800d26c <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d260:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d262:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d264:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d266:	f7fe fa37 	bl	800b6d8 <vListInsert>
 800d26a:	e7d4      	b.n	800d216 <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d26c:	2300      	movs	r3, #0
 800d26e:	4652      	mov	r2, sl
 800d270:	4620      	mov	r0, r4
 800d272:	f8cd 9000 	str.w	r9, [sp]
 800d276:	4619      	mov	r1, r3
 800d278:	f7ff ff92 	bl	800d1a0 <xTimerGenericCommand>
				configASSERT( xResult );
 800d27c:	2800      	cmp	r0, #0
 800d27e:	d1ca      	bne.n	800d216 <prvSampleTimeNow+0x1e>
 800d280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d284:	b672      	cpsid	i
 800d286:	f383 8811 	msr	BASEPRI, r3
 800d28a:	f3bf 8f6f 	isb	sy
 800d28e:	f3bf 8f4f 	dsb	sy
 800d292:	b662      	cpsie	i
 800d294:	e7fe      	b.n	800d294 <prvSampleTimeNow+0x9c>
		*pxTimerListsWereSwitched = pdFALSE;
 800d296:	2300      	movs	r3, #0
 800d298:	e7c5      	b.n	800d226 <prvSampleTimeNow+0x2e>
 800d29a:	bf00      	nop
 800d29c:	20020ea0 	.word	0x20020ea0
 800d2a0:	20020ea4 	.word	0x20020ea4
 800d2a4:	20020f70 	.word	0x20020f70

0800d2a8 <prvTimerTask>:
{
 800d2a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d2ac:	4d71      	ldr	r5, [pc, #452]	; (800d474 <prvTimerTask+0x1cc>)
{
 800d2ae:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d2b0:	4e71      	ldr	r6, [pc, #452]	; (800d478 <prvTimerTask+0x1d0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d2b2:	682b      	ldr	r3, [r5, #0]
 800d2b4:	f8d3 8000 	ldr.w	r8, [r3]
 800d2b8:	f1b8 0f00 	cmp.w	r8, #0
 800d2bc:	d037      	beq.n	800d32e <prvTimerTask+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d2be:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d2c0:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d2c2:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800d2c6:	f7ff fb0f 	bl	800c8e8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d2ca:	a804      	add	r0, sp, #16
 800d2cc:	f7ff ff94 	bl	800d1f8 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800d2d0:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d2d2:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d16b      	bne.n	800d3b0 <prvTimerTask+0x108>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d2d8:	2c00      	cmp	r4, #0
 800d2da:	d14e      	bne.n	800d37a <prvTimerTask+0xd2>
 800d2dc:	4540      	cmp	r0, r8
 800d2de:	d352      	bcc.n	800d386 <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 800d2e0:	f7ff fbb0 	bl	800ca44 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2e4:	682b      	ldr	r3, [r5, #0]
 800d2e6:	68db      	ldr	r3, [r3, #12]
 800d2e8:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d2ea:	1d38      	adds	r0, r7, #4
 800d2ec:	f7fe fa0b 	bl	800b706 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d2f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d2f4:	0758      	lsls	r0, r3, #29
 800d2f6:	d51c      	bpl.n	800d332 <prvTimerTask+0x8a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d2f8:	69b9      	ldr	r1, [r7, #24]
 800d2fa:	4643      	mov	r3, r8
 800d2fc:	464a      	mov	r2, r9
 800d2fe:	4638      	mov	r0, r7
 800d300:	4441      	add	r1, r8
 800d302:	f7ff fefb 	bl	800d0fc <prvInsertTimerInActiveList>
 800d306:	b1c0      	cbz	r0, 800d33a <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d308:	4623      	mov	r3, r4
 800d30a:	4642      	mov	r2, r8
 800d30c:	4621      	mov	r1, r4
 800d30e:	4638      	mov	r0, r7
 800d310:	9400      	str	r4, [sp, #0]
 800d312:	f7ff ff45 	bl	800d1a0 <xTimerGenericCommand>
			configASSERT( xResult );
 800d316:	b980      	cbnz	r0, 800d33a <prvTimerTask+0x92>
 800d318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31c:	b672      	cpsid	i
 800d31e:	f383 8811 	msr	BASEPRI, r3
 800d322:	f3bf 8f6f 	isb	sy
 800d326:	f3bf 8f4f 	dsb	sy
 800d32a:	b662      	cpsie	i
 800d32c:	e7fe      	b.n	800d32c <prvTimerTask+0x84>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d32e:	2401      	movs	r4, #1
 800d330:	e7c9      	b.n	800d2c6 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d332:	f023 0301 	bic.w	r3, r3, #1
 800d336:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d33a:	6a3b      	ldr	r3, [r7, #32]
 800d33c:	4638      	mov	r0, r7
 800d33e:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d340:	2200      	movs	r2, #0
 800d342:	a904      	add	r1, sp, #16
 800d344:	6830      	ldr	r0, [r6, #0]
 800d346:	f7fe fea6 	bl	800c096 <xQueueReceive>
 800d34a:	2800      	cmp	r0, #0
 800d34c:	d0b1      	beq.n	800d2b2 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d34e:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d350:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d352:	2b00      	cmp	r3, #0
 800d354:	db2f      	blt.n	800d3b6 <prvTimerTask+0x10e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d356:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d358:	6963      	ldr	r3, [r4, #20]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d132      	bne.n	800d3c4 <prvTimerTask+0x11c>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d35e:	a803      	add	r0, sp, #12
 800d360:	f7ff ff4a 	bl	800d1f8 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800d364:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d366:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800d368:	2b09      	cmp	r3, #9
 800d36a:	d8e9      	bhi.n	800d340 <prvTimerTask+0x98>
 800d36c:	e8df f003 	tbb	[pc, r3]
 800d370:	592e2e2e 	.word	0x592e2e2e
 800d374:	2e2e7a60 	.word	0x2e2e7a60
 800d378:	6059      	.short	0x6059
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d37a:	4b40      	ldr	r3, [pc, #256]	; (800d47c <prvTimerTask+0x1d4>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	681c      	ldr	r4, [r3, #0]
 800d380:	fab4 f484 	clz	r4, r4
 800d384:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d386:	4622      	mov	r2, r4
 800d388:	eba8 0109 	sub.w	r1, r8, r9
 800d38c:	6830      	ldr	r0, [r6, #0]
 800d38e:	f7ff f8a0 	bl	800c4d2 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d392:	f7ff fb57 	bl	800ca44 <xTaskResumeAll>
 800d396:	2800      	cmp	r0, #0
 800d398:	d1d2      	bne.n	800d340 <prvTimerTask+0x98>
					portYIELD_WITHIN_API();
 800d39a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d39e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d3a6:	f3bf 8f4f 	dsb	sy
 800d3aa:	f3bf 8f6f 	isb	sy
 800d3ae:	e7c7      	b.n	800d340 <prvTimerTask+0x98>
			( void ) xTaskResumeAll();
 800d3b0:	f7ff fb48 	bl	800ca44 <xTaskResumeAll>
}
 800d3b4:	e7c4      	b.n	800d340 <prvTimerTask+0x98>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d3b6:	9b05      	ldr	r3, [sp, #20]
 800d3b8:	9907      	ldr	r1, [sp, #28]
 800d3ba:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d3bc:	9b04      	ldr	r3, [sp, #16]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	dbbe      	blt.n	800d340 <prvTimerTask+0x98>
 800d3c2:	e7c8      	b.n	800d356 <prvTimerTask+0xae>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d3c4:	1d20      	adds	r0, r4, #4
 800d3c6:	f7fe f99e 	bl	800b706 <uxListRemove>
 800d3ca:	e7c8      	b.n	800d35e <prvTimerTask+0xb6>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d3cc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d3d4:	f043 0301 	orr.w	r3, r3, #1
 800d3d8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d3dc:	9b05      	ldr	r3, [sp, #20]
 800d3de:	4419      	add	r1, r3
 800d3e0:	f7ff fe8c 	bl	800d0fc <prvInsertTimerInActiveList>
 800d3e4:	2800      	cmp	r0, #0
 800d3e6:	d0ab      	beq.n	800d340 <prvTimerTask+0x98>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d3e8:	6a23      	ldr	r3, [r4, #32]
 800d3ea:	4620      	mov	r0, r4
 800d3ec:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d3ee:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d3f2:	0759      	lsls	r1, r3, #29
 800d3f4:	d5a4      	bpl.n	800d340 <prvTimerTask+0x98>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d3f6:	69a2      	ldr	r2, [r4, #24]
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	9905      	ldr	r1, [sp, #20]
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	9300      	str	r3, [sp, #0]
 800d400:	440a      	add	r2, r1
 800d402:	4619      	mov	r1, r3
 800d404:	f7ff fecc 	bl	800d1a0 <xTimerGenericCommand>
							configASSERT( xResult );
 800d408:	2800      	cmp	r0, #0
 800d40a:	d199      	bne.n	800d340 <prvTimerTask+0x98>
 800d40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d410:	b672      	cpsid	i
 800d412:	f383 8811 	msr	BASEPRI, r3
 800d416:	f3bf 8f6f 	isb	sy
 800d41a:	f3bf 8f4f 	dsb	sy
 800d41e:	b662      	cpsie	i
 800d420:	e7fe      	b.n	800d420 <prvTimerTask+0x178>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d422:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d426:	f023 0301 	bic.w	r3, r3, #1
 800d42a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800d42e:	e787      	b.n	800d340 <prvTimerTask+0x98>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d430:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d434:	f043 0301 	orr.w	r3, r3, #1
 800d438:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d43c:	9905      	ldr	r1, [sp, #20]
 800d43e:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d440:	b951      	cbnz	r1, 800d458 <prvTimerTask+0x1b0>
 800d442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d446:	b672      	cpsid	i
 800d448:	f383 8811 	msr	BASEPRI, r3
 800d44c:	f3bf 8f6f 	isb	sy
 800d450:	f3bf 8f4f 	dsb	sy
 800d454:	b662      	cpsie	i
 800d456:	e7fe      	b.n	800d456 <prvTimerTask+0x1ae>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d458:	4603      	mov	r3, r0
 800d45a:	4401      	add	r1, r0
 800d45c:	4620      	mov	r0, r4
 800d45e:	f7ff fe4d 	bl	800d0fc <prvInsertTimerInActiveList>
					break;
 800d462:	e76d      	b.n	800d340 <prvTimerTask+0x98>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d464:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d468:	079a      	lsls	r2, r3, #30
 800d46a:	d4dc      	bmi.n	800d426 <prvTimerTask+0x17e>
							vPortFree( pxTimer );
 800d46c:	4620      	mov	r0, r4
 800d46e:	f7fe f8dd 	bl	800b62c <vPortFree>
 800d472:	e765      	b.n	800d340 <prvTimerTask+0x98>
 800d474:	20020ea0 	.word	0x20020ea0
 800d478:	20020fc4 	.word	0x20020fc4
 800d47c:	20020ea4 	.word	0x20020ea4

0800d480 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800d480:	8880      	ldrh	r0, [r0, #4]
 800d482:	4770      	bx	lr

0800d484 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800d484:	2300      	movs	r3, #0
 800d486:	8083      	strh	r3, [r0, #4]
 800d488:	4770      	bx	lr
	...

0800d48c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800d48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d48e:	6803      	ldr	r3, [r0, #0]
 800d490:	460e      	mov	r6, r1
 800d492:	2100      	movs	r1, #0
 800d494:	4605      	mov	r5, r0
 800d496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d498:	4798      	blx	r3
 800d49a:	4604      	mov	r4, r0
 800d49c:	682b      	ldr	r3, [r5, #0]
 800d49e:	4628      	mov	r0, r5
 800d4a0:	1b34      	subs	r4, r6, r4
 800d4a2:	6a1b      	ldr	r3, [r3, #32]
 800d4a4:	b2a4      	uxth	r4, r4
 800d4a6:	4798      	blx	r3
 800d4a8:	88ab      	ldrh	r3, [r5, #4]
 800d4aa:	fbb4 f4f0 	udiv	r4, r4, r0
 800d4ae:	42a3      	cmp	r3, r4
 800d4b0:	d805      	bhi.n	800d4be <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 800d4b2:	4b0e      	ldr	r3, [pc, #56]	; (800d4ec <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 800d4b4:	211d      	movs	r1, #29
 800d4b6:	4a0e      	ldr	r2, [pc, #56]	; (800d4f0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800d4b8:	480e      	ldr	r0, [pc, #56]	; (800d4f4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 800d4ba:	f017 fa9d 	bl	80249f8 <__assert_func>
 800d4be:	682b      	ldr	r3, [r5, #0]
 800d4c0:	2100      	movs	r1, #0
 800d4c2:	4628      	mov	r0, r5
 800d4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c6:	4798      	blx	r3
 800d4c8:	682b      	ldr	r3, [r5, #0]
 800d4ca:	4607      	mov	r7, r0
 800d4cc:	4628      	mov	r0, r5
 800d4ce:	6a1b      	ldr	r3, [r3, #32]
 800d4d0:	4798      	blx	r3
 800d4d2:	1bf3      	subs	r3, r6, r7
 800d4d4:	b29b      	uxth	r3, r3
 800d4d6:	fbb3 f2f0 	udiv	r2, r3, r0
 800d4da:	fb02 3010 	mls	r0, r2, r0, r3
 800d4de:	b118      	cbz	r0, 800d4e8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 800d4e0:	4b05      	ldr	r3, [pc, #20]	; (800d4f8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 800d4e2:	211e      	movs	r1, #30
 800d4e4:	4a02      	ldr	r2, [pc, #8]	; (800d4f0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800d4e6:	e7e7      	b.n	800d4b8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4ec:	0802783a 	.word	0x0802783a
 800d4f0:	080279a6 	.word	0x080279a6
 800d4f4:	0802784f 	.word	0x0802784f
 800d4f8:	0802787d 	.word	0x0802787d

0800d4fc <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800d4fc:	b538      	push	{r3, r4, r5, lr}
 800d4fe:	6803      	ldr	r3, [r0, #0]
 800d500:	460d      	mov	r5, r1
 800d502:	4604      	mov	r4, r0
 800d504:	6a1b      	ldr	r3, [r3, #32]
 800d506:	4798      	blx	r3
 800d508:	4285      	cmp	r5, r0
 800d50a:	d905      	bls.n	800d518 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 800d50c:	4b0c      	ldr	r3, [pc, #48]	; (800d540 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 800d50e:	212f      	movs	r1, #47	; 0x2f
 800d510:	4a0c      	ldr	r2, [pc, #48]	; (800d544 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800d512:	480d      	ldr	r0, [pc, #52]	; (800d548 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 800d514:	f017 fa70 	bl	80249f8 <__assert_func>
 800d518:	6823      	ldr	r3, [r4, #0]
 800d51a:	4620      	mov	r0, r4
 800d51c:	88a5      	ldrh	r5, [r4, #4]
 800d51e:	69db      	ldr	r3, [r3, #28]
 800d520:	4798      	blx	r3
 800d522:	4285      	cmp	r5, r0
 800d524:	d303      	bcc.n	800d52e <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 800d526:	4b09      	ldr	r3, [pc, #36]	; (800d54c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 800d528:	2130      	movs	r1, #48	; 0x30
 800d52a:	4a06      	ldr	r2, [pc, #24]	; (800d544 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800d52c:	e7f1      	b.n	800d512 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 800d52e:	6823      	ldr	r3, [r4, #0]
 800d530:	4620      	mov	r0, r4
 800d532:	88a1      	ldrh	r1, [r4, #4]
 800d534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d536:	4798      	blx	r3
 800d538:	88a3      	ldrh	r3, [r4, #4]
 800d53a:	3301      	adds	r3, #1
 800d53c:	80a3      	strh	r3, [r4, #4]
 800d53e:	bd38      	pop	{r3, r4, r5, pc}
 800d540:	080278f7 	.word	0x080278f7
 800d544:	080279e9 	.word	0x080279e9
 800d548:	0802784f 	.word	0x0802784f
 800d54c:	0802790e 	.word	0x0802790e

0800d550 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800d550:	b570      	push	{r4, r5, r6, lr}
 800d552:	6803      	ldr	r3, [r0, #0]
 800d554:	4616      	mov	r6, r2
 800d556:	4604      	mov	r4, r0
 800d558:	460d      	mov	r5, r1
 800d55a:	6a1b      	ldr	r3, [r3, #32]
 800d55c:	4798      	blx	r3
 800d55e:	4286      	cmp	r6, r0
 800d560:	d905      	bls.n	800d56e <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 800d562:	4b06      	ldr	r3, [pc, #24]	; (800d57c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 800d564:	2139      	movs	r1, #57	; 0x39
 800d566:	4a06      	ldr	r2, [pc, #24]	; (800d580 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 800d568:	4806      	ldr	r0, [pc, #24]	; (800d584 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 800d56a:	f017 fa45 	bl	80249f8 <__assert_func>
 800d56e:	6823      	ldr	r3, [r4, #0]
 800d570:	4629      	mov	r1, r5
 800d572:	4620      	mov	r0, r4
 800d574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d576:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d57a:	4718      	bx	r3
 800d57c:	080278f7 	.word	0x080278f7
 800d580:	0802795c 	.word	0x0802795c
 800d584:	0802784f 	.word	0x0802784f

0800d588 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800d588:	4770      	bx	lr
	...

0800d58c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800d58c:	4a02      	ldr	r2, [pc, #8]	; (800d598 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800d58e:	6002      	str	r2, [r0, #0]
 800d590:	2200      	movs	r2, #0
 800d592:	8082      	strh	r2, [r0, #4]
 800d594:	4770      	bx	lr
 800d596:	bf00      	nop
 800d598:	08027930 	.word	0x08027930

0800d59c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800d59c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d59e:	2000      	movs	r0, #0
 800d5a0:	b12b      	cbz	r3, 800d5ae <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800d5a2:	b920      	cbnz	r0, 800d5ae <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800d5a4:	1a5a      	subs	r2, r3, r1
 800d5a6:	699b      	ldr	r3, [r3, #24]
 800d5a8:	4250      	negs	r0, r2
 800d5aa:	4150      	adcs	r0, r2
 800d5ac:	e7f8      	b.n	800d5a0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800d5ae:	4770      	bx	lr

0800d5b0 <_ZN8touchgfx9Container9removeAllEv>:
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d5b4:	b123      	cbz	r3, 800d5c0 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800d5b6:	6999      	ldr	r1, [r3, #24]
 800d5b8:	6281      	str	r1, [r0, #40]	; 0x28
 800d5ba:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800d5be:	e7f8      	b.n	800d5b2 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800d5c0:	4770      	bx	lr

0800d5c2 <_ZN8touchgfx9Container6unlinkEv>:
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	6283      	str	r3, [r0, #40]	; 0x28
 800d5c6:	4770      	bx	lr

0800d5c8 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	8002      	strh	r2, [r0, #0]
 800d5cc:	8042      	strh	r2, [r0, #2]
 800d5ce:	8082      	strh	r2, [r0, #4]
 800d5d0:	80c2      	strh	r2, [r0, #6]
 800d5d2:	4770      	bx	lr

0800d5d4 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800d5d4:	b570      	push	{r4, r5, r6, lr}
 800d5d6:	460d      	mov	r5, r1
 800d5d8:	4616      	mov	r6, r2
 800d5da:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d5dc:	b13c      	cbz	r4, 800d5ee <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800d5de:	6823      	ldr	r3, [r4, #0]
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	4632      	mov	r2, r6
 800d5e4:	4629      	mov	r1, r5
 800d5e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5e8:	4798      	blx	r3
 800d5ea:	69a4      	ldr	r4, [r4, #24]
 800d5ec:	e7f6      	b.n	800d5dc <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800d5ee:	bd70      	pop	{r4, r5, r6, pc}

0800d5f0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800d5f0:	b538      	push	{r3, r4, r5, lr}
 800d5f2:	460d      	mov	r5, r1
 800d5f4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d5f6:	b134      	cbz	r4, 800d606 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800d5f8:	682b      	ldr	r3, [r5, #0]
 800d5fa:	4621      	mov	r1, r4
 800d5fc:	4628      	mov	r0, r5
 800d5fe:	689b      	ldr	r3, [r3, #8]
 800d600:	4798      	blx	r3
 800d602:	69a4      	ldr	r4, [r4, #24]
 800d604:	e7f7      	b.n	800d5f6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800d606:	bd38      	pop	{r3, r4, r5, pc}

0800d608 <_ZNK8touchgfx9Container17invalidateContentEv>:
 800d608:	b510      	push	{r4, lr}
 800d60a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d60c:	b12c      	cbz	r4, 800d61a <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 800d60e:	6823      	ldr	r3, [r4, #0]
 800d610:	4620      	mov	r0, r4
 800d612:	699b      	ldr	r3, [r3, #24]
 800d614:	4798      	blx	r3
 800d616:	69a4      	ldr	r4, [r4, #24]
 800d618:	e7f8      	b.n	800d60c <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 800d61a:	bd10      	pop	{r4, pc}

0800d61c <_ZN8touchgfx9ContainerD1Ev>:
 800d61c:	4770      	bx	lr

0800d61e <_ZN8touchgfx9ContainerD0Ev>:
 800d61e:	b510      	push	{r4, lr}
 800d620:	4604      	mov	r4, r0
 800d622:	212c      	movs	r1, #44	; 0x2c
 800d624:	f017 f9b9 	bl	802499a <_ZdlPvj>
 800d628:	4620      	mov	r0, r4
 800d62a:	bd10      	pop	{r4, pc}

0800d62c <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800d62c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d62e:	b19b      	cbz	r3, 800d658 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800d630:	428b      	cmp	r3, r1
 800d632:	d109      	bne.n	800d648 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800d634:	699a      	ldr	r2, [r3, #24]
 800d636:	2100      	movs	r1, #0
 800d638:	6159      	str	r1, [r3, #20]
 800d63a:	6282      	str	r2, [r0, #40]	; 0x28
 800d63c:	b902      	cbnz	r2, 800d640 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800d63e:	4770      	bx	lr
 800d640:	6199      	str	r1, [r3, #24]
 800d642:	4770      	bx	lr
 800d644:	4613      	mov	r3, r2
 800d646:	b13a      	cbz	r2, 800d658 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800d648:	699a      	ldr	r2, [r3, #24]
 800d64a:	428a      	cmp	r2, r1
 800d64c:	d1fa      	bne.n	800d644 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800d64e:	698a      	ldr	r2, [r1, #24]
 800d650:	619a      	str	r2, [r3, #24]
 800d652:	2300      	movs	r3, #0
 800d654:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800d658:	4770      	bx	lr

0800d65a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800d65a:	b410      	push	{r4}
 800d65c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d65e:	4604      	mov	r4, r0
 800d660:	b92b      	cbnz	r3, 800d66e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800d662:	6803      	ldr	r3, [r0, #0]
 800d664:	4611      	mov	r1, r2
 800d666:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d66a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d66c:	4718      	bx	r3
 800d66e:	b941      	cbnz	r1, 800d682 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800d670:	6193      	str	r3, [r2, #24]
 800d672:	6282      	str	r2, [r0, #40]	; 0x28
 800d674:	6154      	str	r4, [r2, #20]
 800d676:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d67a:	4770      	bx	lr
 800d67c:	4603      	mov	r3, r0
 800d67e:	2800      	cmp	r0, #0
 800d680:	d0f9      	beq.n	800d676 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800d682:	4299      	cmp	r1, r3
 800d684:	6998      	ldr	r0, [r3, #24]
 800d686:	d1f9      	bne.n	800d67c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800d688:	6190      	str	r0, [r2, #24]
 800d68a:	618a      	str	r2, [r1, #24]
 800d68c:	e7f2      	b.n	800d674 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0800d690 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800d690:	4288      	cmp	r0, r1
 800d692:	b508      	push	{r3, lr}
 800d694:	d105      	bne.n	800d6a2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 800d696:	4b11      	ldr	r3, [pc, #68]	; (800d6dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 800d698:	2120      	movs	r1, #32
 800d69a:	4a11      	ldr	r2, [pc, #68]	; (800d6e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800d69c:	4811      	ldr	r0, [pc, #68]	; (800d6e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 800d69e:	f017 f9ab 	bl	80249f8 <__assert_func>
 800d6a2:	694b      	ldr	r3, [r1, #20]
 800d6a4:	b11b      	cbz	r3, 800d6ae <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800d6a6:	4b10      	ldr	r3, [pc, #64]	; (800d6e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 800d6a8:	2121      	movs	r1, #33	; 0x21
 800d6aa:	4a0d      	ldr	r2, [pc, #52]	; (800d6e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800d6ac:	e7f6      	b.n	800d69c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800d6ae:	e9c1 0305 	strd	r0, r3, [r1, #20]
 800d6b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d6b4:	b913      	cbnz	r3, 800d6bc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 800d6b6:	6281      	str	r1, [r0, #40]	; 0x28
 800d6b8:	bd08      	pop	{r3, pc}
 800d6ba:	4613      	mov	r3, r2
 800d6bc:	699a      	ldr	r2, [r3, #24]
 800d6be:	b12a      	cbz	r2, 800d6cc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 800d6c0:	428b      	cmp	r3, r1
 800d6c2:	d1fa      	bne.n	800d6ba <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 800d6c4:	4b09      	ldr	r3, [pc, #36]	; (800d6ec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800d6c6:	2132      	movs	r1, #50	; 0x32
 800d6c8:	4a05      	ldr	r2, [pc, #20]	; (800d6e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800d6ca:	e7e7      	b.n	800d69c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800d6cc:	428b      	cmp	r3, r1
 800d6ce:	d103      	bne.n	800d6d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 800d6d0:	4b06      	ldr	r3, [pc, #24]	; (800d6ec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800d6d2:	2135      	movs	r1, #53	; 0x35
 800d6d4:	4a02      	ldr	r2, [pc, #8]	; (800d6e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800d6d6:	e7e1      	b.n	800d69c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800d6d8:	6199      	str	r1, [r3, #24]
 800d6da:	e7ed      	b.n	800d6b8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 800d6dc:	08027a27 	.word	0x08027a27
 800d6e0:	08027b80 	.word	0x08027b80
 800d6e4:	08027a53 	.word	0x08027a53
 800d6e8:	08027a86 	.word	0x08027a86
 800d6ec:	08027abc 	.word	0x08027abc

0800d6f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800d6f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6f4:	461f      	mov	r7, r3
 800d6f6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800d6fa:	460d      	mov	r5, r1
 800d6fc:	4616      	mov	r6, r2
 800d6fe:	b103      	cbz	r3, 800d702 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800d700:	6038      	str	r0, [r7, #0]
 800d702:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d704:	b314      	cbz	r4, 800d74c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800d706:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800d70a:	b1eb      	cbz	r3, 800d748 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d70c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800d710:	428d      	cmp	r5, r1
 800d712:	db19      	blt.n	800d748 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d714:	b289      	uxth	r1, r1
 800d716:	8923      	ldrh	r3, [r4, #8]
 800d718:	440b      	add	r3, r1
 800d71a:	b21b      	sxth	r3, r3
 800d71c:	429d      	cmp	r5, r3
 800d71e:	da13      	bge.n	800d748 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d720:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800d724:	4296      	cmp	r6, r2
 800d726:	db0f      	blt.n	800d748 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d728:	b292      	uxth	r2, r2
 800d72a:	8963      	ldrh	r3, [r4, #10]
 800d72c:	4413      	add	r3, r2
 800d72e:	b21b      	sxth	r3, r3
 800d730:	429e      	cmp	r6, r3
 800d732:	da09      	bge.n	800d748 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d734:	6823      	ldr	r3, [r4, #0]
 800d736:	1ab2      	subs	r2, r6, r2
 800d738:	1a69      	subs	r1, r5, r1
 800d73a:	4620      	mov	r0, r4
 800d73c:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 800d740:	b212      	sxth	r2, r2
 800d742:	463b      	mov	r3, r7
 800d744:	b209      	sxth	r1, r1
 800d746:	47c0      	blx	r8
 800d748:	69a4      	ldr	r4, [r4, #24]
 800d74a:	e7db      	b.n	800d704 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800d74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d750 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800d750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d754:	4c6d      	ldr	r4, [pc, #436]	; (800d90c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800d756:	b0a1      	sub	sp, #132	; 0x84
 800d758:	4606      	mov	r6, r0
 800d75a:	6824      	ldr	r4, [r4, #0]
 800d75c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800d75e:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800d762:	2400      	movs	r4, #0
 800d764:	9303      	str	r3, [sp, #12]
 800d766:	802c      	strh	r4, [r5, #0]
 800d768:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800d76a:	802c      	strh	r4, [r5, #0]
 800d76c:	601c      	str	r4, [r3, #0]
 800d76e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800d772:	f7ff ffbd 	bl	800d6f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800d776:	f1b9 0f03 	cmp.w	r9, #3
 800d77a:	f340 80c1 	ble.w	800d900 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800d77e:	4631      	mov	r1, r6
 800d780:	a80c      	add	r0, sp, #48	; 0x30
 800d782:	f007 fa9d 	bl	8014cc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d786:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800d78a:	9306      	str	r3, [sp, #24]
 800d78c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800d790:	9307      	str	r3, [sp, #28]
 800d792:	9b03      	ldr	r3, [sp, #12]
 800d794:	f8d3 a000 	ldr.w	sl, [r3]
 800d798:	f1ba 0f00 	cmp.w	sl, #0
 800d79c:	f000 80b3 	beq.w	800d906 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800d7a0:	4651      	mov	r1, sl
 800d7a2:	a810      	add	r0, sp, #64	; 0x40
 800d7a4:	f007 fa8c 	bl	8014cc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d7a8:	2002      	movs	r0, #2
 800d7aa:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800d7ae:	9b01      	ldr	r3, [sp, #4]
 800d7b0:	9a06      	ldr	r2, [sp, #24]
 800d7b2:	fb91 f1f0 	sdiv	r1, r1, r0
 800d7b6:	189d      	adds	r5, r3, r2
 800d7b8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800d7bc:	9a07      	ldr	r2, [sp, #28]
 800d7be:	4419      	add	r1, r3
 800d7c0:	9b02      	ldr	r3, [sp, #8]
 800d7c2:	4413      	add	r3, r2
 800d7c4:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800d7c8:	1a6d      	subs	r5, r5, r1
 800d7ca:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800d7ce:	fb92 f2f0 	sdiv	r2, r2, r0
 800d7d2:	440a      	add	r2, r1
 800d7d4:	1a9b      	subs	r3, r3, r2
 800d7d6:	435b      	muls	r3, r3
 800d7d8:	fb05 3505 	mla	r5, r5, r5, r3
 800d7dc:	4f4c      	ldr	r7, [pc, #304]	; (800d910 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800d7de:	ac10      	add	r4, sp, #64	; 0x40
 800d7e0:	f1b9 0f0c 	cmp.w	r9, #12
 800d7e4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d7e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d7e8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d7ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d7ec:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d7ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d7f0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800d7f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d7f8:	f04f 0303 	mov.w	r3, #3
 800d7fc:	bfd8      	it	le
 800d7fe:	f109 32ff 	addle.w	r2, r9, #4294967295
 800d802:	f04f 0400 	mov.w	r4, #0
 800d806:	f8cd 9000 	str.w	r9, [sp]
 800d80a:	bfcc      	ite	gt
 800d80c:	4698      	movgt	r8, r3
 800d80e:	fb92 f8f3 	sdivle	r8, r2, r3
 800d812:	1c63      	adds	r3, r4, #1
 800d814:	aa10      	add	r2, sp, #64	; 0x40
 800d816:	f004 0401 	and.w	r4, r4, #1
 800d81a:	f04f 0b00 	mov.w	fp, #0
 800d81e:	9308      	str	r3, [sp, #32]
 800d820:	9b00      	ldr	r3, [sp, #0]
 800d822:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800d826:	fb93 f3f8 	sdiv	r3, r3, r8
 800d82a:	3404      	adds	r4, #4
 800d82c:	b29b      	uxth	r3, r3
 800d82e:	9304      	str	r3, [sp, #16]
 800d830:	9a04      	ldr	r2, [sp, #16]
 800d832:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d836:	fb13 f302 	smulbb	r3, r3, r2
 800d83a:	9a01      	ldr	r2, [sp, #4]
 800d83c:	b29b      	uxth	r3, r3
 800d83e:	1899      	adds	r1, r3, r2
 800d840:	9305      	str	r3, [sp, #20]
 800d842:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800d846:	b209      	sxth	r1, r1
 800d848:	4299      	cmp	r1, r3
 800d84a:	db4d      	blt.n	800d8e8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d84c:	8932      	ldrh	r2, [r6, #8]
 800d84e:	4413      	add	r3, r2
 800d850:	b21b      	sxth	r3, r3
 800d852:	4299      	cmp	r1, r3
 800d854:	da48      	bge.n	800d8e8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d856:	9b04      	ldr	r3, [sp, #16]
 800d858:	6827      	ldr	r7, [r4, #0]
 800d85a:	fb17 f703 	smulbb	r7, r7, r3
 800d85e:	9b02      	ldr	r3, [sp, #8]
 800d860:	b2bf      	uxth	r7, r7
 800d862:	18fa      	adds	r2, r7, r3
 800d864:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800d868:	b212      	sxth	r2, r2
 800d86a:	429a      	cmp	r2, r3
 800d86c:	db3c      	blt.n	800d8e8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d86e:	8970      	ldrh	r0, [r6, #10]
 800d870:	4403      	add	r3, r0
 800d872:	b21b      	sxth	r3, r3
 800d874:	429a      	cmp	r2, r3
 800d876:	da37      	bge.n	800d8e8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d878:	2300      	movs	r3, #0
 800d87a:	4630      	mov	r0, r6
 800d87c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d87e:	ab0b      	add	r3, sp, #44	; 0x2c
 800d880:	f7ff ff36 	bl	800d6f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800d884:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d886:	b37a      	cbz	r2, 800d8e8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d888:	4552      	cmp	r2, sl
 800d88a:	d02d      	beq.n	800d8e8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d88c:	4611      	mov	r1, r2
 800d88e:	a80e      	add	r0, sp, #56	; 0x38
 800d890:	9209      	str	r2, [sp, #36]	; 0x24
 800d892:	f007 fa15 	bl	8014cc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d896:	f04f 0e02 	mov.w	lr, #2
 800d89a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800d89e:	9a06      	ldr	r2, [sp, #24]
 800d8a0:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800d8a4:	9b01      	ldr	r3, [sp, #4]
 800d8a6:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800d8aa:	4413      	add	r3, r2
 800d8ac:	9a07      	ldr	r2, [sp, #28]
 800d8ae:	fb91 f1fe 	sdiv	r1, r1, lr
 800d8b2:	fb9c fcfe 	sdiv	ip, ip, lr
 800d8b6:	4401      	add	r1, r0
 800d8b8:	1a58      	subs	r0, r3, r1
 800d8ba:	9b02      	ldr	r3, [sp, #8]
 800d8bc:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800d8c0:	4413      	add	r3, r2
 800d8c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8c4:	448c      	add	ip, r1
 800d8c6:	eba3 030c 	sub.w	r3, r3, ip
 800d8ca:	435b      	muls	r3, r3
 800d8cc:	fb00 3300 	mla	r3, r0, r0, r3
 800d8d0:	42ab      	cmp	r3, r5
 800d8d2:	d208      	bcs.n	800d8e6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800d8d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d8d6:	461d      	mov	r5, r3
 800d8d8:	9803      	ldr	r0, [sp, #12]
 800d8da:	6001      	str	r1, [r0, #0]
 800d8dc:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800d8de:	9805      	ldr	r0, [sp, #20]
 800d8e0:	8008      	strh	r0, [r1, #0]
 800d8e2:	992b      	ldr	r1, [sp, #172]	; 0xac
 800d8e4:	800f      	strh	r7, [r1, #0]
 800d8e6:	4692      	mov	sl, r2
 800d8e8:	f10b 0b01 	add.w	fp, fp, #1
 800d8ec:	3408      	adds	r4, #8
 800d8ee:	f1bb 0f04 	cmp.w	fp, #4
 800d8f2:	d19d      	bne.n	800d830 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800d8f4:	9b00      	ldr	r3, [sp, #0]
 800d8f6:	9c08      	ldr	r4, [sp, #32]
 800d8f8:	444b      	add	r3, r9
 800d8fa:	4544      	cmp	r4, r8
 800d8fc:	9300      	str	r3, [sp, #0]
 800d8fe:	d188      	bne.n	800d812 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800d900:	b021      	add	sp, #132	; 0x84
 800d902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d906:	f04f 35ff 	mov.w	r5, #4294967295
 800d90a:	e767      	b.n	800d7dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800d90c:	20020fd8 	.word	0x20020fd8
 800d910:	08025d68 	.word	0x08025d68

0800d914 <_ZN8touchgfx4RectaNERKS0_>:
 800d914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d918:	f9b1 7000 	ldrsh.w	r7, [r1]
 800d91c:	888c      	ldrh	r4, [r1, #4]
 800d91e:	f9b0 9000 	ldrsh.w	r9, [r0]
 800d922:	443c      	add	r4, r7
 800d924:	b2a4      	uxth	r4, r4
 800d926:	fa0f f884 	sxth.w	r8, r4
 800d92a:	45c1      	cmp	r9, r8
 800d92c:	da2f      	bge.n	800d98e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d92e:	8882      	ldrh	r2, [r0, #4]
 800d930:	444a      	add	r2, r9
 800d932:	b292      	uxth	r2, r2
 800d934:	fa0f fe82 	sxth.w	lr, r2
 800d938:	4577      	cmp	r7, lr
 800d93a:	da28      	bge.n	800d98e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d93c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800d940:	88cb      	ldrh	r3, [r1, #6]
 800d942:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800d946:	442b      	add	r3, r5
 800d948:	b21b      	sxth	r3, r3
 800d94a:	429e      	cmp	r6, r3
 800d94c:	da1f      	bge.n	800d98e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d94e:	88c3      	ldrh	r3, [r0, #6]
 800d950:	4433      	add	r3, r6
 800d952:	b29b      	uxth	r3, r3
 800d954:	fa0f fc83 	sxth.w	ip, r3
 800d958:	4565      	cmp	r5, ip
 800d95a:	da18      	bge.n	800d98e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d95c:	454f      	cmp	r7, r9
 800d95e:	bfb8      	it	lt
 800d960:	464f      	movlt	r7, r9
 800d962:	42b5      	cmp	r5, r6
 800d964:	bfb8      	it	lt
 800d966:	4635      	movlt	r5, r6
 800d968:	45f0      	cmp	r8, lr
 800d96a:	bfd8      	it	le
 800d96c:	4622      	movle	r2, r4
 800d96e:	1bd2      	subs	r2, r2, r7
 800d970:	8082      	strh	r2, [r0, #4]
 800d972:	884a      	ldrh	r2, [r1, #2]
 800d974:	88c9      	ldrh	r1, [r1, #6]
 800d976:	8007      	strh	r7, [r0, #0]
 800d978:	440a      	add	r2, r1
 800d97a:	8045      	strh	r5, [r0, #2]
 800d97c:	b292      	uxth	r2, r2
 800d97e:	b211      	sxth	r1, r2
 800d980:	458c      	cmp	ip, r1
 800d982:	bfa8      	it	ge
 800d984:	4613      	movge	r3, r2
 800d986:	1b5b      	subs	r3, r3, r5
 800d988:	80c3      	strh	r3, [r0, #6]
 800d98a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d98e:	2300      	movs	r3, #0
 800d990:	8003      	strh	r3, [r0, #0]
 800d992:	8043      	strh	r3, [r0, #2]
 800d994:	8083      	strh	r3, [r0, #4]
 800d996:	80c3      	strh	r3, [r0, #6]
 800d998:	e7f7      	b.n	800d98a <_ZN8touchgfx4RectaNERKS0_+0x76>

0800d99a <_ZNK8touchgfx4Rect7isEmptyEv>:
 800d99a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	dd06      	ble.n	800d9b0 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800d9a2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	bfcc      	ite	gt
 800d9aa:	2000      	movgt	r0, #0
 800d9ac:	2001      	movle	r0, #1
 800d9ae:	4770      	bx	lr
 800d9b0:	2001      	movs	r0, #1
 800d9b2:	4770      	bx	lr

0800d9b4 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800d9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	4604      	mov	r4, r0
 800d9bc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800d9be:	8003      	strh	r3, [r0, #0]
 800d9c0:	8043      	strh	r3, [r0, #2]
 800d9c2:	8083      	strh	r3, [r0, #4]
 800d9c4:	80c3      	strh	r3, [r0, #6]
 800d9c6:	2d00      	cmp	r5, #0
 800d9c8:	d040      	beq.n	800da4c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800d9ca:	1d28      	adds	r0, r5, #4
 800d9cc:	f7ff ffe5 	bl	800d99a <_ZNK8touchgfx4Rect7isEmptyEv>
 800d9d0:	b988      	cbnz	r0, 800d9f6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800d9d2:	4620      	mov	r0, r4
 800d9d4:	f7ff ffe1 	bl	800d99a <_ZNK8touchgfx4Rect7isEmptyEv>
 800d9d8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800d9dc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800d9e0:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800d9e4:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800d9e8:	b138      	cbz	r0, 800d9fa <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800d9ea:	8022      	strh	r2, [r4, #0]
 800d9ec:	8063      	strh	r3, [r4, #2]
 800d9ee:	f8a4 e004 	strh.w	lr, [r4, #4]
 800d9f2:	f8a4 c006 	strh.w	ip, [r4, #6]
 800d9f6:	69ad      	ldr	r5, [r5, #24]
 800d9f8:	e7e5      	b.n	800d9c6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800d9fa:	f9b4 0000 	ldrsh.w	r0, [r4]
 800d9fe:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800da02:	4290      	cmp	r0, r2
 800da04:	4607      	mov	r7, r0
 800da06:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800da0a:	460e      	mov	r6, r1
 800da0c:	bfa8      	it	ge
 800da0e:	4617      	movge	r7, r2
 800da10:	4299      	cmp	r1, r3
 800da12:	4472      	add	r2, lr
 800da14:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800da18:	bfa8      	it	ge
 800da1a:	461e      	movge	r6, r3
 800da1c:	4440      	add	r0, r8
 800da1e:	4471      	add	r1, lr
 800da20:	4463      	add	r3, ip
 800da22:	b200      	sxth	r0, r0
 800da24:	8027      	strh	r7, [r4, #0]
 800da26:	b212      	sxth	r2, r2
 800da28:	8066      	strh	r6, [r4, #2]
 800da2a:	b209      	sxth	r1, r1
 800da2c:	b21b      	sxth	r3, r3
 800da2e:	4290      	cmp	r0, r2
 800da30:	bfac      	ite	ge
 800da32:	ebc7 0200 	rsbge	r2, r7, r0
 800da36:	ebc7 0202 	rsblt	r2, r7, r2
 800da3a:	4299      	cmp	r1, r3
 800da3c:	bfac      	ite	ge
 800da3e:	ebc6 0301 	rsbge	r3, r6, r1
 800da42:	ebc6 0303 	rsblt	r3, r6, r3
 800da46:	80a2      	strh	r2, [r4, #4]
 800da48:	80e3      	strh	r3, [r4, #6]
 800da4a:	e7d4      	b.n	800d9f6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800da4c:	4620      	mov	r0, r4
 800da4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800da52 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800da52:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800da56:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800da5a:	b383      	cbz	r3, 800dabe <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800da5c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800da5e:	b374      	cbz	r4, 800dabe <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800da60:	f9b1 5000 	ldrsh.w	r5, [r1]
 800da64:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800da68:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800da6c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800da70:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800da74:	b303      	cbz	r3, 800dab8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800da76:	4668      	mov	r0, sp
 800da78:	1d21      	adds	r1, r4, #4
 800da7a:	f8ad 5000 	strh.w	r5, [sp]
 800da7e:	f8ad 6002 	strh.w	r6, [sp, #2]
 800da82:	f8ad 7004 	strh.w	r7, [sp, #4]
 800da86:	f8ad 8006 	strh.w	r8, [sp, #6]
 800da8a:	f7ff ff43 	bl	800d914 <_ZN8touchgfx4RectaNERKS0_>
 800da8e:	4668      	mov	r0, sp
 800da90:	f7ff ff83 	bl	800d99a <_ZNK8touchgfx4Rect7isEmptyEv>
 800da94:	b980      	cbnz	r0, 800dab8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800da96:	f8bd 3000 	ldrh.w	r3, [sp]
 800da9a:	4669      	mov	r1, sp
 800da9c:	88a2      	ldrh	r2, [r4, #4]
 800da9e:	4620      	mov	r0, r4
 800daa0:	1a9b      	subs	r3, r3, r2
 800daa2:	88e2      	ldrh	r2, [r4, #6]
 800daa4:	f8ad 3000 	strh.w	r3, [sp]
 800daa8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800daac:	1a9b      	subs	r3, r3, r2
 800daae:	f8ad 3002 	strh.w	r3, [sp, #2]
 800dab2:	6823      	ldr	r3, [r4, #0]
 800dab4:	689b      	ldr	r3, [r3, #8]
 800dab6:	4798      	blx	r3
 800dab8:	69a4      	ldr	r4, [r4, #24]
 800daba:	2c00      	cmp	r4, #0
 800dabc:	d1d8      	bne.n	800da70 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800dabe:	b002      	add	sp, #8
 800dac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dac4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800dac4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dac6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800daca:	460d      	mov	r5, r1
 800dacc:	4616      	mov	r6, r2
 800dace:	b323      	cbz	r3, 800db1a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800dad0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800dad2:	b314      	cbz	r4, 800db1a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800dad4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800dad8:	b1eb      	cbz	r3, 800db16 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800dada:	6828      	ldr	r0, [r5, #0]
 800dadc:	466b      	mov	r3, sp
 800dade:	6869      	ldr	r1, [r5, #4]
 800dae0:	c303      	stmia	r3!, {r0, r1}
 800dae2:	4668      	mov	r0, sp
 800dae4:	1d21      	adds	r1, r4, #4
 800dae6:	f7ff ff15 	bl	800d914 <_ZN8touchgfx4RectaNERKS0_>
 800daea:	4668      	mov	r0, sp
 800daec:	f7ff ff55 	bl	800d99a <_ZNK8touchgfx4Rect7isEmptyEv>
 800daf0:	b988      	cbnz	r0, 800db16 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800daf2:	f8bd 3000 	ldrh.w	r3, [sp]
 800daf6:	4669      	mov	r1, sp
 800daf8:	88a2      	ldrh	r2, [r4, #4]
 800dafa:	4620      	mov	r0, r4
 800dafc:	1a9b      	subs	r3, r3, r2
 800dafe:	88e2      	ldrh	r2, [r4, #6]
 800db00:	f8ad 3000 	strh.w	r3, [sp]
 800db04:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800db08:	1a9b      	subs	r3, r3, r2
 800db0a:	4632      	mov	r2, r6
 800db0c:	f8ad 3002 	strh.w	r3, [sp, #2]
 800db10:	6823      	ldr	r3, [r4, #0]
 800db12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db14:	4798      	blx	r3
 800db16:	69a4      	ldr	r4, [r4, #24]
 800db18:	e7db      	b.n	800dad2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800db1a:	b002      	add	sp, #8
 800db1c:	bd70      	pop	{r4, r5, r6, pc}

0800db1e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800db1e:	6803      	ldr	r3, [r0, #0]
 800db20:	b513      	push	{r0, r1, r4, lr}
 800db22:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 800db26:	2300      	movs	r3, #0
 800db28:	e9cd 3300 	strd	r3, r3, [sp]
 800db2c:	466b      	mov	r3, sp
 800db2e:	47a0      	blx	r4
 800db30:	b002      	add	sp, #8
 800db32:	bd10      	pop	{r4, pc}

0800db34 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800db34:	2301      	movs	r3, #1
 800db36:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800db3a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800db3e:	4770      	bx	lr

0800db40 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800db40:	2301      	movs	r3, #1
 800db42:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800db46:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800db4a:	4770      	bx	lr

0800db4c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800db4c:	6843      	ldr	r3, [r0, #4]
 800db4e:	2201      	movs	r2, #1
 800db50:	725a      	strb	r2, [r3, #9]
 800db52:	6840      	ldr	r0, [r0, #4]
 800db54:	6803      	ldr	r3, [r0, #0]
 800db56:	691b      	ldr	r3, [r3, #16]
 800db58:	4718      	bx	r3

0800db5a <_ZN8touchgfx3HAL8flushDMAEv>:
 800db5a:	6840      	ldr	r0, [r0, #4]
 800db5c:	6803      	ldr	r3, [r0, #0]
 800db5e:	689b      	ldr	r3, [r3, #8]
 800db60:	4718      	bx	r3

0800db62 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800db62:	b530      	push	{r4, r5, lr}
 800db64:	b08b      	sub	sp, #44	; 0x2c
 800db66:	6804      	ldr	r4, [r0, #0]
 800db68:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800db6c:	9509      	str	r5, [sp, #36]	; 0x24
 800db6e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800db72:	9508      	str	r5, [sp, #32]
 800db74:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800db78:	9507      	str	r5, [sp, #28]
 800db7a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800db7e:	9506      	str	r5, [sp, #24]
 800db80:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800db84:	9505      	str	r5, [sp, #20]
 800db86:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800db8a:	9504      	str	r5, [sp, #16]
 800db8c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800db90:	9503      	str	r5, [sp, #12]
 800db92:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800db96:	9502      	str	r5, [sp, #8]
 800db98:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800db9c:	e9cd 3500 	strd	r3, r5, [sp]
 800dba0:	4613      	mov	r3, r2
 800dba2:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800dba4:	2200      	movs	r2, #0
 800dba6:	47a0      	blx	r4
 800dba8:	b00b      	add	sp, #44	; 0x2c
 800dbaa:	bd30      	pop	{r4, r5, pc}

0800dbac <_ZN8touchgfx3HAL10beginFrameEv>:
 800dbac:	4b04      	ldr	r3, [pc, #16]	; (800dbc0 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	b123      	cbz	r3, 800dbbc <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800dbb2:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800dbb6:	f080 0001 	eor.w	r0, r0, #1
 800dbba:	4770      	bx	lr
 800dbbc:	2001      	movs	r0, #1
 800dbbe:	4770      	bx	lr
 800dbc0:	20020fd6 	.word	0x20020fd6

0800dbc4 <_ZN8touchgfx3HAL8endFrameEv>:
 800dbc4:	b510      	push	{r4, lr}
 800dbc6:	4604      	mov	r4, r0
 800dbc8:	6840      	ldr	r0, [r0, #4]
 800dbca:	6803      	ldr	r3, [r0, #0]
 800dbcc:	689b      	ldr	r3, [r3, #8]
 800dbce:	4798      	blx	r3
 800dbd0:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800dbd4:	b113      	cbz	r3, 800dbdc <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800dbdc:	bd10      	pop	{r4, pc}

0800dbde <_ZN8touchgfx3HAL10initializeEv>:
 800dbde:	b510      	push	{r4, lr}
 800dbe0:	4604      	mov	r4, r0
 800dbe2:	f7f3 fbf3 	bl	80013cc <_ZN8touchgfx10OSWrappers10initializeEv>
 800dbe6:	6860      	ldr	r0, [r4, #4]
 800dbe8:	6803      	ldr	r3, [r0, #0]
 800dbea:	68db      	ldr	r3, [r3, #12]
 800dbec:	4798      	blx	r3
 800dbee:	68e0      	ldr	r0, [r4, #12]
 800dbf0:	6803      	ldr	r3, [r0, #0]
 800dbf2:	689b      	ldr	r3, [r3, #8]
 800dbf4:	4798      	blx	r3
 800dbf6:	6823      	ldr	r3, [r4, #0]
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc00:	4718      	bx	r3
	...

0800dc04 <_ZN8touchgfx3HAL4tickEv>:
 800dc04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dc06:	6803      	ldr	r3, [r0, #0]
 800dc08:	4604      	mov	r4, r0
 800dc0a:	4d5b      	ldr	r5, [pc, #364]	; (800dd78 <_ZN8touchgfx3HAL4tickEv+0x174>)
 800dc0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800dc10:	4798      	blx	r3
 800dc12:	2800      	cmp	r0, #0
 800dc14:	f000 8095 	beq.w	800dd42 <_ZN8touchgfx3HAL4tickEv+0x13e>
 800dc18:	2001      	movs	r0, #1
 800dc1a:	2600      	movs	r6, #0
 800dc1c:	f7f3 f882 	bl	8000d24 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800dc20:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800dc24:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800dc28:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800dc2c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800dc30:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800dc34:	b133      	cbz	r3, 800dc44 <_ZN8touchgfx3HAL4tickEv+0x40>
 800dc36:	6823      	ldr	r3, [r4, #0]
 800dc38:	4620      	mov	r0, r4
 800dc3a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800dc3e:	4798      	blx	r3
 800dc40:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800dc44:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800dc48:	2601      	movs	r6, #1
 800dc4a:	6862      	ldr	r2, [r4, #4]
 800dc4c:	f083 0301 	eor.w	r3, r3, #1
 800dc50:	702e      	strb	r6, [r5, #0]
 800dc52:	7253      	strb	r3, [r2, #9]
 800dc54:	f006 f80a 	bl	8013c6c <_ZN8touchgfx11Application11getInstanceEv>
 800dc58:	6803      	ldr	r3, [r0, #0]
 800dc5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc5c:	4798      	blx	r3
 800dc5e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800dc62:	b90b      	cbnz	r3, 800dc68 <_ZN8touchgfx3HAL4tickEv+0x64>
 800dc64:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800dc68:	f006 f800 	bl	8013c6c <_ZN8touchgfx11Application11getInstanceEv>
 800dc6c:	6803      	ldr	r3, [r0, #0]
 800dc6e:	695b      	ldr	r3, [r3, #20]
 800dc70:	4798      	blx	r3
 800dc72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc74:	6803      	ldr	r3, [r0, #0]
 800dc76:	691b      	ldr	r3, [r3, #16]
 800dc78:	4798      	blx	r3
 800dc7a:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800dc7e:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800dc82:	3b01      	subs	r3, #1
 800dc84:	b2db      	uxtb	r3, r3
 800dc86:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800dc8a:	b10a      	cbz	r2, 800dc90 <_ZN8touchgfx3HAL4tickEv+0x8c>
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d1eb      	bne.n	800dc68 <_ZN8touchgfx3HAL4tickEv+0x64>
 800dc90:	4a3a      	ldr	r2, [pc, #232]	; (800dd7c <_ZN8touchgfx3HAL4tickEv+0x178>)
 800dc92:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800dc96:	7813      	ldrb	r3, [r2, #0]
 800dc98:	3301      	adds	r3, #1
 800dc9a:	b25b      	sxtb	r3, r3
 800dc9c:	4299      	cmp	r1, r3
 800dc9e:	7013      	strb	r3, [r2, #0]
 800dca0:	dc10      	bgt.n	800dcc4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800dca2:	2300      	movs	r3, #0
 800dca4:	68e0      	ldr	r0, [r4, #12]
 800dca6:	a902      	add	r1, sp, #8
 800dca8:	7013      	strb	r3, [r2, #0]
 800dcaa:	aa03      	add	r2, sp, #12
 800dcac:	6803      	ldr	r3, [r0, #0]
 800dcae:	68db      	ldr	r3, [r3, #12]
 800dcb0:	4798      	blx	r3
 800dcb2:	6823      	ldr	r3, [r4, #0]
 800dcb4:	2800      	cmp	r0, #0
 800dcb6:	d050      	beq.n	800dd5a <_ZN8touchgfx3HAL4tickEv+0x156>
 800dcb8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800dcbc:	4620      	mov	r0, r4
 800dcbe:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800dcc2:	4798      	blx	r3
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	6960      	ldr	r0, [r4, #20]
 800dcc8:	f88d 3007 	strb.w	r3, [sp, #7]
 800dccc:	b158      	cbz	r0, 800dce6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800dcce:	6803      	ldr	r3, [r0, #0]
 800dcd0:	f10d 0107 	add.w	r1, sp, #7
 800dcd4:	68db      	ldr	r3, [r3, #12]
 800dcd6:	4798      	blx	r3
 800dcd8:	b128      	cbz	r0, 800dce6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800dcda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcdc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800dce0:	6803      	ldr	r3, [r0, #0]
 800dce2:	68db      	ldr	r3, [r3, #12]
 800dce4:	4798      	blx	r3
 800dce6:	f104 001c 	add.w	r0, r4, #28
 800dcea:	f015 f969 	bl	8022fc0 <_ZN8touchgfx8Gestures4tickEv>
 800dcee:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800dcf2:	b30b      	cbz	r3, 800dd38 <_ZN8touchgfx3HAL4tickEv+0x134>
 800dcf4:	6920      	ldr	r0, [r4, #16]
 800dcf6:	6803      	ldr	r3, [r0, #0]
 800dcf8:	691b      	ldr	r3, [r3, #16]
 800dcfa:	4798      	blx	r3
 800dcfc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800dcfe:	4606      	mov	r6, r0
 800dd00:	b903      	cbnz	r3, 800dd04 <_ZN8touchgfx3HAL4tickEv+0x100>
 800dd02:	6720      	str	r0, [r4, #112]	; 0x70
 800dd04:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800dd06:	4a1e      	ldr	r2, [pc, #120]	; (800dd80 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800dd08:	1af3      	subs	r3, r6, r3
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d914      	bls.n	800dd38 <_ZN8touchgfx3HAL4tickEv+0x134>
 800dd0e:	6920      	ldr	r0, [r4, #16]
 800dd10:	6803      	ldr	r3, [r0, #0]
 800dd12:	699b      	ldr	r3, [r3, #24]
 800dd14:	4798      	blx	r3
 800dd16:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800dd18:	2264      	movs	r2, #100	; 0x64
 800dd1a:	1af3      	subs	r3, r6, r3
 800dd1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd20:	fbb0 f0f3 	udiv	r0, r0, r3
 800dd24:	2800      	cmp	r0, #0
 800dd26:	dc1d      	bgt.n	800dd64 <_ZN8touchgfx3HAL4tickEv+0x160>
 800dd28:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800dd2c:	6920      	ldr	r0, [r4, #16]
 800dd2e:	2100      	movs	r1, #0
 800dd30:	6803      	ldr	r3, [r0, #0]
 800dd32:	69db      	ldr	r3, [r3, #28]
 800dd34:	4798      	blx	r3
 800dd36:	6726      	str	r6, [r4, #112]	; 0x70
 800dd38:	f005 ff98 	bl	8013c6c <_ZN8touchgfx11Application11getInstanceEv>
 800dd3c:	6803      	ldr	r3, [r0, #0]
 800dd3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd40:	4798      	blx	r3
 800dd42:	6823      	ldr	r3, [r4, #0]
 800dd44:	4620      	mov	r0, r4
 800dd46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800dd4a:	4798      	blx	r3
 800dd4c:	2001      	movs	r0, #1
 800dd4e:	f7f3 f801 	bl	8000d54 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800dd52:	2300      	movs	r3, #0
 800dd54:	702b      	strb	r3, [r5, #0]
 800dd56:	b004      	add	sp, #16
 800dd58:	bd70      	pop	{r4, r5, r6, pc}
 800dd5a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800dd5e:	4620      	mov	r0, r4
 800dd60:	4798      	blx	r3
 800dd62:	e7af      	b.n	800dcc4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800dd64:	2863      	cmp	r0, #99	; 0x63
 800dd66:	bfcb      	itete	gt
 800dd68:	2300      	movgt	r3, #0
 800dd6a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800dd6e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800dd72:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800dd76:	e7d9      	b.n	800dd2c <_ZN8touchgfx3HAL4tickEv+0x128>
 800dd78:	20020fdc 	.word	0x20020fdc
 800dd7c:	20020fdd 	.word	0x20020fdd
 800dd80:	05f5e100 	.word	0x05f5e100

0800dd84 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800dd84:	f7f3 bb52 	b.w	800142c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800dd88 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800dd88:	6581      	str	r1, [r0, #88]	; 0x58
 800dd8a:	301c      	adds	r0, #28
 800dd8c:	f015 b916 	b.w	8022fbc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800dd90 <_ZN8touchgfx3HAL5touchEll>:
 800dd90:	b530      	push	{r4, r5, lr}
 800dd92:	b087      	sub	sp, #28
 800dd94:	4604      	mov	r4, r0
 800dd96:	a804      	add	r0, sp, #16
 800dd98:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800dd9c:	f005 fd10 	bl	80137c0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800dda0:	9b04      	ldr	r3, [sp, #16]
 800dda2:	a906      	add	r1, sp, #24
 800dda4:	a803      	add	r0, sp, #12
 800dda6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ddaa:	9b05      	ldr	r3, [sp, #20]
 800ddac:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800ddb0:	f005 fd58 	bl	8013864 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800ddb4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800ddb8:	f104 001c 	add.w	r0, r4, #28
 800ddbc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800ddc0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800ddc4:	b189      	cbz	r1, 800ddea <_ZN8touchgfx3HAL5touchEll+0x5a>
 800ddc6:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800ddca:	9300      	str	r3, [sp, #0]
 800ddcc:	4613      	mov	r3, r2
 800ddce:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800ddd2:	462a      	mov	r2, r5
 800ddd4:	f015 f902 	bl	8022fdc <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800ddd8:	b128      	cbz	r0, 800dde6 <_ZN8touchgfx3HAL5touchEll+0x56>
 800ddda:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800ddde:	65e3      	str	r3, [r4, #92]	; 0x5c
 800dde0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800dde4:	6623      	str	r3, [r4, #96]	; 0x60
 800dde6:	b007      	add	sp, #28
 800dde8:	bd30      	pop	{r4, r5, pc}
 800ddea:	f015 f937 	bl	802305c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800ddee:	2301      	movs	r3, #1
 800ddf0:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800ddf4:	e7f1      	b.n	800ddda <_ZN8touchgfx3HAL5touchEll+0x4a>

0800ddf6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800ddf6:	b510      	push	{r4, lr}
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d046      	beq.n	800de8a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800ddfc:	ea81 0002 	eor.w	r0, r1, r2
 800de00:	07c4      	lsls	r4, r0, #31
 800de02:	d508      	bpl.n	800de16 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800de04:	440b      	add	r3, r1
 800de06:	3a01      	subs	r2, #1
 800de08:	428b      	cmp	r3, r1
 800de0a:	d93e      	bls.n	800de8a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800de0c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800de10:	f801 0b01 	strb.w	r0, [r1], #1
 800de14:	e7f8      	b.n	800de08 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800de16:	07d0      	lsls	r0, r2, #31
 800de18:	bf42      	ittt	mi
 800de1a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800de1e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800de22:	f801 0b01 	strbmi.w	r0, [r1], #1
 800de26:	2b01      	cmp	r3, #1
 800de28:	d911      	bls.n	800de4e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800de2a:	ea81 0402 	eor.w	r4, r1, r2
 800de2e:	4610      	mov	r0, r2
 800de30:	07a4      	lsls	r4, r4, #30
 800de32:	d022      	beq.n	800de7a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800de34:	f023 0401 	bic.w	r4, r3, #1
 800de38:	440c      	add	r4, r1
 800de3a:	428c      	cmp	r4, r1
 800de3c:	4602      	mov	r2, r0
 800de3e:	d904      	bls.n	800de4a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800de40:	8812      	ldrh	r2, [r2, #0]
 800de42:	3002      	adds	r0, #2
 800de44:	f821 2b02 	strh.w	r2, [r1], #2
 800de48:	e7f7      	b.n	800de3a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800de4a:	f003 0301 	and.w	r3, r3, #1
 800de4e:	f023 0003 	bic.w	r0, r3, #3
 800de52:	4408      	add	r0, r1
 800de54:	4288      	cmp	r0, r1
 800de56:	4614      	mov	r4, r2
 800de58:	d904      	bls.n	800de64 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800de5a:	6824      	ldr	r4, [r4, #0]
 800de5c:	3204      	adds	r2, #4
 800de5e:	f841 4b04 	str.w	r4, [r1], #4
 800de62:	e7f7      	b.n	800de54 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800de64:	f003 0303 	and.w	r3, r3, #3
 800de68:	3a01      	subs	r2, #1
 800de6a:	440b      	add	r3, r1
 800de6c:	428b      	cmp	r3, r1
 800de6e:	d90c      	bls.n	800de8a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800de70:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800de74:	f801 0b01 	strb.w	r0, [r1], #1
 800de78:	e7f8      	b.n	800de6c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800de7a:	0790      	lsls	r0, r2, #30
 800de7c:	d0e7      	beq.n	800de4e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800de7e:	f832 0b02 	ldrh.w	r0, [r2], #2
 800de82:	3b02      	subs	r3, #2
 800de84:	f821 0b02 	strh.w	r0, [r1], #2
 800de88:	e7e1      	b.n	800de4e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800de8a:	2001      	movs	r0, #1
 800de8c:	bd10      	pop	{r4, pc}

0800de8e <_ZN8touchgfx3HAL7noTouchEv>:
 800de8e:	b510      	push	{r4, lr}
 800de90:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800de94:	4604      	mov	r4, r0
 800de96:	b153      	cbz	r3, 800deae <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800de98:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800de9c:	2101      	movs	r1, #1
 800de9e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800dea2:	301c      	adds	r0, #28
 800dea4:	f015 f8da 	bl	802305c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800dea8:	2300      	movs	r3, #0
 800deaa:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800deae:	bd10      	pop	{r4, pc}

0800deb0 <_ZN8touchgfx3HAL3lcdEv>:
 800deb0:	4b04      	ldr	r3, [pc, #16]	; (800dec4 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800deb8:	b10a      	cbz	r2, 800debe <_ZN8touchgfx3HAL3lcdEv+0xe>
 800deba:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800debc:	b900      	cbnz	r0, 800dec0 <_ZN8touchgfx3HAL3lcdEv+0x10>
 800debe:	6898      	ldr	r0, [r3, #8]
 800dec0:	4770      	bx	lr
 800dec2:	bf00      	nop
 800dec4:	20020fd8 	.word	0x20020fd8

0800dec8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800dec8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800decc:	4604      	mov	r4, r0
 800dece:	6980      	ldr	r0, [r0, #24]
 800ded0:	b085      	sub	sp, #20
 800ded2:	460f      	mov	r7, r1
 800ded4:	4690      	mov	r8, r2
 800ded6:	4699      	mov	r9, r3
 800ded8:	b930      	cbnz	r0, 800dee8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 800deda:	4b1c      	ldr	r3, [pc, #112]	; (800df4c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 800dedc:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800dee0:	4a1b      	ldr	r2, [pc, #108]	; (800df50 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800dee2:	481c      	ldr	r0, [pc, #112]	; (800df54 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 800dee4:	f016 fd88 	bl	80249f8 <__assert_func>
 800dee8:	ad04      	add	r5, sp, #16
 800deea:	2600      	movs	r6, #0
 800deec:	f845 6d04 	str.w	r6, [r5, #-4]!
 800def0:	6806      	ldr	r6, [r0, #0]
 800def2:	9501      	str	r5, [sp, #4]
 800def4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800def8:	9500      	str	r5, [sp, #0]
 800defa:	6835      	ldr	r5, [r6, #0]
 800defc:	47a8      	blx	r5
 800defe:	4d16      	ldr	r5, [pc, #88]	; (800df58 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 800df00:	4606      	mov	r6, r0
 800df02:	f8a5 9000 	strh.w	r9, [r5]
 800df06:	f7ff ffd3 	bl	800deb0 <_ZN8touchgfx3HAL3lcdEv>
 800df0a:	6803      	ldr	r3, [r0, #0]
 800df0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df0e:	4798      	blx	r3
 800df10:	2801      	cmp	r0, #1
 800df12:	d012      	beq.n	800df3a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 800df14:	d306      	bcc.n	800df24 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 800df16:	280d      	cmp	r0, #13
 800df18:	d80b      	bhi.n	800df32 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800df1a:	4b10      	ldr	r3, [pc, #64]	; (800df5c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800df1c:	f240 115b 	movw	r1, #347	; 0x15b
 800df20:	4a0b      	ldr	r2, [pc, #44]	; (800df50 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800df22:	e7de      	b.n	800dee2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 800df24:	882b      	ldrh	r3, [r5, #0]
 800df26:	fb08 7203 	mla	r2, r8, r3, r7
 800df2a:	9b03      	ldr	r3, [sp, #12]
 800df2c:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800df30:	63e3      	str	r3, [r4, #60]	; 0x3c
 800df32:	4630      	mov	r0, r6
 800df34:	b005      	add	sp, #20
 800df36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df3a:	882a      	ldrh	r2, [r5, #0]
 800df3c:	9b03      	ldr	r3, [sp, #12]
 800df3e:	fb08 7202 	mla	r2, r8, r2, r7
 800df42:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800df46:	1a9a      	subs	r2, r3, r2
 800df48:	63e2      	str	r2, [r4, #60]	; 0x3c
 800df4a:	e7f2      	b.n	800df32 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800df4c:	08027d21 	.word	0x08027d21
 800df50:	08027fdf 	.word	0x08027fdf
 800df54:	08027d66 	.word	0x08027d66
 800df58:	20020fd2 	.word	0x20020fd2
 800df5c:	08027d8c 	.word	0x08027d8c

0800df60 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800df60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df62:	b08b      	sub	sp, #44	; 0x2c
 800df64:	4617      	mov	r7, r2
 800df66:	4604      	mov	r4, r0
 800df68:	460e      	mov	r6, r1
 800df6a:	461d      	mov	r5, r3
 800df6c:	f7ff ffa0 	bl	800deb0 <_ZN8touchgfx3HAL3lcdEv>
 800df70:	6803      	ldr	r3, [r0, #0]
 800df72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df74:	4798      	blx	r3
 800df76:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800df7a:	9007      	str	r0, [sp, #28]
 800df7c:	4631      	mov	r1, r6
 800df7e:	6822      	ldr	r2, [r4, #0]
 800df80:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800df84:	4b0c      	ldr	r3, [pc, #48]	; (800dfb8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800df86:	4620      	mov	r0, r4
 800df88:	881b      	ldrh	r3, [r3, #0]
 800df8a:	9306      	str	r3, [sp, #24]
 800df8c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800df90:	9305      	str	r3, [sp, #20]
 800df92:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800df96:	9304      	str	r3, [sp, #16]
 800df98:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800df9c:	9303      	str	r3, [sp, #12]
 800df9e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800dfa2:	9302      	str	r3, [sp, #8]
 800dfa4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800dfa8:	e9cd 5300 	strd	r5, r3, [sp]
 800dfac:	463b      	mov	r3, r7
 800dfae:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	47a8      	blx	r5
 800dfb4:	b00b      	add	sp, #44	; 0x2c
 800dfb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfb8:	20020fd2 	.word	0x20020fd2

0800dfbc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800dfbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfc0:	4698      	mov	r8, r3
 800dfc2:	6803      	ldr	r3, [r0, #0]
 800dfc4:	b08b      	sub	sp, #44	; 0x2c
 800dfc6:	4617      	mov	r7, r2
 800dfc8:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800dfca:	460e      	mov	r6, r1
 800dfcc:	4b13      	ldr	r3, [pc, #76]	; (800e01c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800dfce:	4604      	mov	r4, r0
 800dfd0:	f8b3 9000 	ldrh.w	r9, [r3]
 800dfd4:	f7ff ff6c 	bl	800deb0 <_ZN8touchgfx3HAL3lcdEv>
 800dfd8:	6803      	ldr	r3, [r0, #0]
 800dfda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfdc:	4798      	blx	r3
 800dfde:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	4631      	mov	r1, r6
 800dfe6:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800dfea:	2302      	movs	r3, #2
 800dfec:	4620      	mov	r0, r4
 800dfee:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800dff2:	2301      	movs	r3, #1
 800dff4:	9305      	str	r3, [sp, #20]
 800dff6:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800dffa:	9304      	str	r3, [sp, #16]
 800dffc:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800e000:	9303      	str	r3, [sp, #12]
 800e002:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800e006:	9302      	str	r3, [sp, #8]
 800e008:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800e00c:	e9cd 8300 	strd	r8, r3, [sp]
 800e010:	463b      	mov	r3, r7
 800e012:	47a8      	blx	r5
 800e014:	b00b      	add	sp, #44	; 0x2c
 800e016:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e01a:	bf00      	nop
 800e01c:	20020fd2 	.word	0x20020fd2

0800e020 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800e020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e024:	4698      	mov	r8, r3
 800e026:	6803      	ldr	r3, [r0, #0]
 800e028:	b087      	sub	sp, #28
 800e02a:	460e      	mov	r6, r1
 800e02c:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800e02e:	4617      	mov	r7, r2
 800e030:	4b0f      	ldr	r3, [pc, #60]	; (800e070 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800e032:	4604      	mov	r4, r0
 800e034:	f8b3 9000 	ldrh.w	r9, [r3]
 800e038:	f7ff ff3a 	bl	800deb0 <_ZN8touchgfx3HAL3lcdEv>
 800e03c:	6803      	ldr	r3, [r0, #0]
 800e03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e040:	4798      	blx	r3
 800e042:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800e046:	463a      	mov	r2, r7
 800e048:	4631      	mov	r1, r6
 800e04a:	f8cd 900c 	str.w	r9, [sp, #12]
 800e04e:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800e052:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800e056:	4620      	mov	r0, r4
 800e058:	9302      	str	r3, [sp, #8]
 800e05a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800e05e:	9301      	str	r3, [sp, #4]
 800e060:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800e064:	9300      	str	r3, [sp, #0]
 800e066:	4643      	mov	r3, r8
 800e068:	47a8      	blx	r5
 800e06a:	b007      	add	sp, #28
 800e06c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e070:	20020fd2 	.word	0x20020fd2

0800e074 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800e074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e078:	4604      	mov	r4, r0
 800e07a:	b08f      	sub	sp, #60	; 0x3c
 800e07c:	4610      	mov	r0, r2
 800e07e:	460d      	mov	r5, r1
 800e080:	4691      	mov	r9, r2
 800e082:	461e      	mov	r6, r3
 800e084:	f008 fe7c 	bl	8016d80 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800e088:	2800      	cmp	r0, #0
 800e08a:	f000 809c 	beq.w	800e1c6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 800e08e:	6823      	ldr	r3, [r4, #0]
 800e090:	4620      	mov	r0, r4
 800e092:	f8df b194 	ldr.w	fp, [pc, #404]	; 800e228 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 800e096:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800e09a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e09c:	4798      	blx	r3
 800e09e:	6823      	ldr	r3, [r4, #0]
 800e0a0:	4620      	mov	r0, r4
 800e0a2:	f8df a188 	ldr.w	sl, [pc, #392]	; 800e22c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800e0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0a8:	4798      	blx	r3
 800e0aa:	f8bb 3000 	ldrh.w	r3, [fp]
 800e0ae:	4f5b      	ldr	r7, [pc, #364]	; (800e21c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800e0b0:	9301      	str	r3, [sp, #4]
 800e0b2:	f8ba 3000 	ldrh.w	r3, [sl]
 800e0b6:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800e0ba:	4640      	mov	r0, r8
 800e0bc:	9302      	str	r3, [sp, #8]
 800e0be:	883b      	ldrh	r3, [r7, #0]
 800e0c0:	9303      	str	r3, [sp, #12]
 800e0c2:	4b57      	ldr	r3, [pc, #348]	; (800e220 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e0c4:	881a      	ldrh	r2, [r3, #0]
 800e0c6:	9305      	str	r3, [sp, #20]
 800e0c8:	9204      	str	r2, [sp, #16]
 800e0ca:	f008 ff09 	bl	8016ee0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e0ce:	8038      	strh	r0, [r7, #0]
 800e0d0:	4640      	mov	r0, r8
 800e0d2:	f008 ff49 	bl	8016f68 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e0d6:	9b05      	ldr	r3, [sp, #20]
 800e0d8:	8018      	strh	r0, [r3, #0]
 800e0da:	4b52      	ldr	r3, [pc, #328]	; (800e224 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d174      	bne.n	800e1cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 800e0e2:	883b      	ldrh	r3, [r7, #0]
 800e0e4:	f8aa 0000 	strh.w	r0, [sl]
 800e0e8:	f8ab 3000 	strh.w	r3, [fp]
 800e0ec:	4648      	mov	r0, r9
 800e0ee:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800e0f2:	f008 fe45 	bl	8016d80 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800e0fc:	4611      	mov	r1, r2
 800e0fe:	4628      	mov	r0, r5
 800e100:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800e104:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800e108:	f7f5 fc2a 	bl	8003960 <_ZN8touchgfx8Drawable5setXYEss>
 800e10c:	2301      	movs	r3, #1
 800e10e:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800e112:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800e116:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	dd5c      	ble.n	800e1d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800e11e:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800e122:	2b00      	cmp	r3, #0
 800e124:	dd58      	ble.n	800e1d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800e126:	462a      	mov	r2, r5
 800e128:	ab0a      	add	r3, sp, #40	; 0x28
 800e12a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800e12e:	6851      	ldr	r1, [r2, #4]
 800e130:	c303      	stmia	r3!, {r0, r1}
 800e132:	4631      	mov	r1, r6
 800e134:	a80a      	add	r0, sp, #40	; 0x28
 800e136:	f7ff fbed 	bl	800d914 <_ZN8touchgfx4RectaNERKS0_>
 800e13a:	4b38      	ldr	r3, [pc, #224]	; (800e21c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800e13c:	2100      	movs	r1, #0
 800e13e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e142:	4b37      	ldr	r3, [pc, #220]	; (800e220 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e144:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800e148:	aa0a      	add	r2, sp, #40	; 0x28
 800e14a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e14e:	910c      	str	r1, [sp, #48]	; 0x30
 800e150:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800e154:	ab08      	add	r3, sp, #32
 800e156:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e15a:	e883 0003 	stmia.w	r3, {r0, r1}
 800e15e:	4618      	mov	r0, r3
 800e160:	a90c      	add	r1, sp, #48	; 0x30
 800e162:	f7ff fbd7 	bl	800d914 <_ZN8touchgfx4RectaNERKS0_>
 800e166:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d13c      	bne.n	800e1e6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 800e16c:	2000      	movs	r0, #0
 800e16e:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800e172:	2600      	movs	r6, #0
 800e174:	696b      	ldr	r3, [r5, #20]
 800e176:	a908      	add	r1, sp, #32
 800e178:	682a      	ldr	r2, [r5, #0]
 800e17a:	4628      	mov	r0, r5
 800e17c:	9305      	str	r3, [sp, #20]
 800e17e:	616e      	str	r6, [r5, #20]
 800e180:	6892      	ldr	r2, [r2, #8]
 800e182:	4790      	blx	r2
 800e184:	9b05      	ldr	r3, [sp, #20]
 800e186:	4652      	mov	r2, sl
 800e188:	4649      	mov	r1, r9
 800e18a:	616b      	str	r3, [r5, #20]
 800e18c:	4628      	mov	r0, r5
 800e18e:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800e192:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800e196:	f7f5 fbe3 	bl	8003960 <_ZN8touchgfx8Drawable5setXYEss>
 800e19a:	9a01      	ldr	r2, [sp, #4]
 800e19c:	4b22      	ldr	r3, [pc, #136]	; (800e228 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800e19e:	4620      	mov	r0, r4
 800e1a0:	801a      	strh	r2, [r3, #0]
 800e1a2:	9a02      	ldr	r2, [sp, #8]
 800e1a4:	4b21      	ldr	r3, [pc, #132]	; (800e22c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800e1a6:	801a      	strh	r2, [r3, #0]
 800e1a8:	9a03      	ldr	r2, [sp, #12]
 800e1aa:	4b1c      	ldr	r3, [pc, #112]	; (800e21c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800e1ac:	801a      	strh	r2, [r3, #0]
 800e1ae:	4b1c      	ldr	r3, [pc, #112]	; (800e220 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e1b0:	9a04      	ldr	r2, [sp, #16]
 800e1b2:	801a      	strh	r2, [r3, #0]
 800e1b4:	6823      	ldr	r3, [r4, #0]
 800e1b6:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800e1ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1bc:	4798      	blx	r3
 800e1be:	6823      	ldr	r3, [r4, #0]
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1c4:	4798      	blx	r3
 800e1c6:	b00f      	add	sp, #60	; 0x3c
 800e1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1cc:	883b      	ldrh	r3, [r7, #0]
 800e1ce:	f8ab 0000 	strh.w	r0, [fp]
 800e1d2:	f8aa 3000 	strh.w	r3, [sl]
 800e1d6:	e789      	b.n	800e0ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 800e1d8:	462a      	mov	r2, r5
 800e1da:	ab0a      	add	r3, sp, #40	; 0x28
 800e1dc:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800e1e0:	6851      	ldr	r1, [r2, #4]
 800e1e2:	c303      	stmia	r3!, {r0, r1}
 800e1e4:	e7a9      	b.n	800e13a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 800e1e6:	a807      	add	r0, sp, #28
 800e1e8:	f009 f820 	bl	801722c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e1ec:	4606      	mov	r6, r0
 800e1ee:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800e1f0:	6803      	ldr	r3, [r0, #0]
 800e1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1f4:	4798      	blx	r3
 800e1f6:	4286      	cmp	r6, r0
 800e1f8:	d1b8      	bne.n	800e16c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 800e1fa:	f7ff fe59 	bl	800deb0 <_ZN8touchgfx3HAL3lcdEv>
 800e1fe:	6803      	ldr	r3, [r0, #0]
 800e200:	4606      	mov	r6, r0
 800e202:	a807      	add	r0, sp, #28
 800e204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e206:	9305      	str	r3, [sp, #20]
 800e208:	f009 f810 	bl	801722c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e20c:	9b05      	ldr	r3, [sp, #20]
 800e20e:	4601      	mov	r1, r0
 800e210:	4630      	mov	r0, r6
 800e212:	4798      	blx	r3
 800e214:	f080 0001 	eor.w	r0, r0, #1
 800e218:	b2c0      	uxtb	r0, r0
 800e21a:	e7a8      	b.n	800e16e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800e21c:	20020fcc 	.word	0x20020fcc
 800e220:	20020fce 	.word	0x20020fce
 800e224:	20020fd0 	.word	0x20020fd0
 800e228:	20020fd2 	.word	0x20020fd2
 800e22c:	20020fd4 	.word	0x20020fd4

0800e230 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800e230:	4b07      	ldr	r3, [pc, #28]	; (800e250 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800e232:	b510      	push	{r4, lr}
 800e234:	781b      	ldrb	r3, [r3, #0]
 800e236:	4604      	mov	r4, r0
 800e238:	b13b      	cbz	r3, 800e24a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800e23a:	6803      	ldr	r3, [r0, #0]
 800e23c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e23e:	4798      	blx	r3
 800e240:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e242:	4283      	cmp	r3, r0
 800e244:	d101      	bne.n	800e24a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800e246:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800e248:	bd10      	pop	{r4, pc}
 800e24a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800e24c:	e7fc      	b.n	800e248 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800e24e:	bf00      	nop
 800e250:	20020fd6 	.word	0x20020fd6

0800e254 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800e254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e258:	b08a      	sub	sp, #40	; 0x28
 800e25a:	4692      	mov	sl, r2
 800e25c:	461d      	mov	r5, r3
 800e25e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e262:	f8bd 9054 	ldrh.w	r9, [sp, #84]	; 0x54
 800e266:	2400      	movs	r4, #0
 800e268:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 800e26c:	4606      	mov	r6, r0
 800e26e:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800e272:	fb09 a505 	mla	r5, r9, r5, sl
 800e276:	9404      	str	r4, [sp, #16]
 800e278:	f8ad 8018 	strh.w	r8, [sp, #24]
 800e27c:	f8ad 701a 	strh.w	r7, [sp, #26]
 800e280:	f88d 4020 	strb.w	r4, [sp, #32]
 800e284:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e288:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800e28c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e290:	f7ff ffce 	bl	800e230 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e294:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800e298:	f8ad 901e 	strh.w	r9, [sp, #30]
 800e29c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800e2a0:	9505      	str	r5, [sp, #20]
 800e2a2:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 800e2a6:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800e2aa:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800e2ae:	f1b8 0f00 	cmp.w	r8, #0
 800e2b2:	d000      	beq.n	800e2b6 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x62>
 800e2b4:	b937      	cbnz	r7, 800e2c4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x70>
 800e2b6:	4b0d      	ldr	r3, [pc, #52]	; (800e2ec <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 800e2b8:	f240 2102 	movw	r1, #514	; 0x202
 800e2bc:	4a0c      	ldr	r2, [pc, #48]	; (800e2f0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 800e2be:	480d      	ldr	r0, [pc, #52]	; (800e2f4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 800e2c0:	f016 fb9a 	bl	80249f8 <__assert_func>
 800e2c4:	6833      	ldr	r3, [r6, #0]
 800e2c6:	4630      	mov	r0, r6
 800e2c8:	9c01      	ldr	r4, [sp, #4]
 800e2ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2cc:	4798      	blx	r3
 800e2ce:	4220      	tst	r0, r4
 800e2d0:	d104      	bne.n	800e2dc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x88>
 800e2d2:	4b09      	ldr	r3, [pc, #36]	; (800e2f8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa4>)
 800e2d4:	f240 2103 	movw	r1, #515	; 0x203
 800e2d8:	4a05      	ldr	r2, [pc, #20]	; (800e2f0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 800e2da:	e7f0      	b.n	800e2be <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6a>
 800e2dc:	6870      	ldr	r0, [r6, #4]
 800e2de:	a901      	add	r1, sp, #4
 800e2e0:	6803      	ldr	r3, [r0, #0]
 800e2e2:	685b      	ldr	r3, [r3, #4]
 800e2e4:	4798      	blx	r3
 800e2e6:	b00a      	add	sp, #40	; 0x28
 800e2e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2ec:	08027bbb 	.word	0x08027bbb
 800e2f0:	08027e14 	.word	0x08027e14
 800e2f4:	08027d66 	.word	0x08027d66
 800e2f8:	08027bf3 	.word	0x08027bf3

0800e2fc <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800e2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e300:	b08b      	sub	sp, #44	; 0x2c
 800e302:	4693      	mov	fp, r2
 800e304:	461d      	mov	r5, r3
 800e306:	2400      	movs	r4, #0
 800e308:	f8bd 9058 	ldrh.w	r9, [sp, #88]	; 0x58
 800e30c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e310:	468a      	mov	sl, r1
 800e312:	f8bd 8050 	ldrh.w	r8, [sp, #80]	; 0x50
 800e316:	fb09 b505 	mla	r5, r9, r5, fp
 800e31a:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
 800e31e:	4606      	mov	r6, r0
 800e320:	9404      	str	r4, [sp, #16]
 800e322:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e326:	f7ff ff83 	bl	800e230 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e32a:	f8ad 8018 	strh.w	r8, [sp, #24]
 800e32e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800e332:	f8ad 701a 	strh.w	r7, [sp, #26]
 800e336:	f8ad 401c 	strh.w	r4, [sp, #28]
 800e33a:	9505      	str	r5, [sp, #20]
 800e33c:	f8ad 901e 	strh.w	r9, [sp, #30]
 800e340:	f8cd a010 	str.w	sl, [sp, #16]
 800e344:	f8ad 4020 	strh.w	r4, [sp, #32]
 800e348:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800e34c:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800e350:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800e354:	f1b8 0f00 	cmp.w	r8, #0
 800e358:	d000      	beq.n	800e35c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x60>
 800e35a:	b937      	cbnz	r7, 800e36a <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6e>
 800e35c:	4b0d      	ldr	r3, [pc, #52]	; (800e394 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 800e35e:	f240 2119 	movw	r1, #537	; 0x219
 800e362:	4a0d      	ldr	r2, [pc, #52]	; (800e398 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 800e364:	480d      	ldr	r0, [pc, #52]	; (800e39c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 800e366:	f016 fb47 	bl	80249f8 <__assert_func>
 800e36a:	6833      	ldr	r3, [r6, #0]
 800e36c:	4630      	mov	r0, r6
 800e36e:	9c01      	ldr	r4, [sp, #4]
 800e370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e372:	4798      	blx	r3
 800e374:	4220      	tst	r0, r4
 800e376:	d104      	bne.n	800e382 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x86>
 800e378:	4b09      	ldr	r3, [pc, #36]	; (800e3a0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa4>)
 800e37a:	f240 211a 	movw	r1, #538	; 0x21a
 800e37e:	4a06      	ldr	r2, [pc, #24]	; (800e398 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 800e380:	e7f0      	b.n	800e364 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x68>
 800e382:	6870      	ldr	r0, [r6, #4]
 800e384:	a901      	add	r1, sp, #4
 800e386:	6803      	ldr	r3, [r0, #0]
 800e388:	685b      	ldr	r3, [r3, #4]
 800e38a:	4798      	blx	r3
 800e38c:	b00b      	add	sp, #44	; 0x2c
 800e38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e392:	bf00      	nop
 800e394:	08027c38 	.word	0x08027c38
 800e398:	08027e8a 	.word	0x08027e8a
 800e39c:	08027d66 	.word	0x08027d66
 800e3a0:	08027c70 	.word	0x08027c70

0800e3a4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 800e3a4:	b508      	push	{r3, lr}
 800e3a6:	290d      	cmp	r1, #13
 800e3a8:	d817      	bhi.n	800e3da <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 800e3aa:	e8df f001 	tbb	[pc, r1]
 800e3ae:	090b      	.short	0x090b
 800e3b0:	0d0d0d07 	.word	0x0d0d0d07
 800e3b4:	1414140d 	.word	0x1414140d
 800e3b8:	0d0d1414 	.word	0x0d0d1414
 800e3bc:	2020      	movs	r0, #32
 800e3be:	bd08      	pop	{r3, pc}
 800e3c0:	2018      	movs	r0, #24
 800e3c2:	e7fc      	b.n	800e3be <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800e3c4:	2010      	movs	r0, #16
 800e3c6:	e7fa      	b.n	800e3be <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800e3c8:	4b05      	ldr	r3, [pc, #20]	; (800e3e0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 800e3ca:	f240 2183 	movw	r1, #643	; 0x283
 800e3ce:	4a05      	ldr	r2, [pc, #20]	; (800e3e4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 800e3d0:	4805      	ldr	r0, [pc, #20]	; (800e3e8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 800e3d2:	f016 fb11 	bl	80249f8 <__assert_func>
 800e3d6:	2008      	movs	r0, #8
 800e3d8:	e7f1      	b.n	800e3be <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800e3da:	2000      	movs	r0, #0
 800e3dc:	e7ef      	b.n	800e3be <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800e3de:	bf00      	nop
 800e3e0:	08027de2 	.word	0x08027de2
 800e3e4:	080281b5 	.word	0x080281b5
 800e3e8:	08027d66 	.word	0x08027d66

0800e3ec <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 800e3ec:	b570      	push	{r4, r5, r6, lr}
 800e3ee:	460d      	mov	r5, r1
 800e3f0:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800e3f4:	4616      	mov	r6, r2
 800e3f6:	461c      	mov	r4, r3
 800e3f8:	f7ff ffd4 	bl	800e3a4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 800e3fc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800e400:	10c0      	asrs	r0, r0, #3
 800e402:	fb06 5101 	mla	r1, r6, r1, r5
 800e406:	fb00 4001 	mla	r0, r0, r1, r4
 800e40a:	bd70      	pop	{r4, r5, r6, pc}

0800e40c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800e40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e410:	b08c      	sub	sp, #48	; 0x30
 800e412:	f04f 0c00 	mov.w	ip, #0
 800e416:	4604      	mov	r4, r0
 800e418:	469a      	mov	sl, r3
 800e41a:	f89d 506c 	ldrb.w	r5, [sp, #108]	; 0x6c
 800e41e:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
 800e422:	2d0b      	cmp	r5, #11
 800e424:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
 800e428:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800e42c:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 800e430:	f8bd 9068 	ldrh.w	r9, [sp, #104]	; 0x68
 800e434:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 800e438:	f8cd c018 	str.w	ip, [sp, #24]
 800e43c:	d130      	bne.n	800e4a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x94>
 800e43e:	2080      	movs	r0, #128	; 0x80
 800e440:	9205      	str	r2, [sp, #20]
 800e442:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 800e446:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800e44a:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800e44e:	f8ad 7020 	strh.w	r7, [sp, #32]
 800e452:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
 800e456:	e9cd 0103 	strd	r0, r1, [sp, #12]
 800e45a:	4620      	mov	r0, r4
 800e45c:	f7ff fee8 	bl	800e230 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e460:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 800e464:	4603      	mov	r3, r0
 800e466:	4651      	mov	r1, sl
 800e468:	4620      	mov	r0, r4
 800e46a:	e9cd 9800 	strd	r9, r8, [sp]
 800e46e:	f7ff ffbd 	bl	800e3ec <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800e472:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 800e476:	9007      	str	r0, [sp, #28]
 800e478:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800e47c:	2300      	movs	r3, #0
 800e47e:	f8ad 9026 	strh.w	r9, [sp, #38]	; 0x26
 800e482:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800e486:	f88d 802a 	strb.w	r8, [sp, #42]	; 0x2a
 800e48a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800e48e:	b107      	cbz	r7, 800e492 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x86>
 800e490:	b9d6      	cbnz	r6, 800e4c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbc>
 800e492:	4b17      	ldr	r3, [pc, #92]	; (800e4f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 800e494:	f240 11c9 	movw	r1, #457	; 0x1c9
 800e498:	4a16      	ldr	r2, [pc, #88]	; (800e4f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 800e49a:	4817      	ldr	r0, [pc, #92]	; (800e4f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 800e49c:	f016 faac 	bl	80249f8 <__assert_func>
 800e4a0:	2d02      	cmp	r5, #2
 800e4a2:	d108      	bne.n	800e4b6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800e4a4:	2bff      	cmp	r3, #255	; 0xff
 800e4a6:	d104      	bne.n	800e4b2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa6>
 800e4a8:	2800      	cmp	r0, #0
 800e4aa:	bf14      	ite	ne
 800e4ac:	2040      	movne	r0, #64	; 0x40
 800e4ae:	2020      	moveq	r0, #32
 800e4b0:	e7c6      	b.n	800e440 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800e4b2:	2040      	movs	r0, #64	; 0x40
 800e4b4:	e7c4      	b.n	800e440 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800e4b6:	2bff      	cmp	r3, #255	; 0xff
 800e4b8:	d104      	bne.n	800e4c4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb8>
 800e4ba:	2800      	cmp	r0, #0
 800e4bc:	bf14      	ite	ne
 800e4be:	2004      	movne	r0, #4
 800e4c0:	2001      	moveq	r0, #1
 800e4c2:	e7bd      	b.n	800e440 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800e4c4:	2004      	movs	r0, #4
 800e4c6:	e7bb      	b.n	800e440 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800e4c8:	6823      	ldr	r3, [r4, #0]
 800e4ca:	4620      	mov	r0, r4
 800e4cc:	9d03      	ldr	r5, [sp, #12]
 800e4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4d0:	4798      	blx	r3
 800e4d2:	4228      	tst	r0, r5
 800e4d4:	d104      	bne.n	800e4e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xd4>
 800e4d6:	4b09      	ldr	r3, [pc, #36]	; (800e4fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xf0>)
 800e4d8:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 800e4dc:	4a05      	ldr	r2, [pc, #20]	; (800e4f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 800e4de:	e7dc      	b.n	800e49a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 800e4e0:	6860      	ldr	r0, [r4, #4]
 800e4e2:	a903      	add	r1, sp, #12
 800e4e4:	6803      	ldr	r3, [r0, #0]
 800e4e6:	685b      	ldr	r3, [r3, #4]
 800e4e8:	4798      	blx	r3
 800e4ea:	b00c      	add	sp, #48	; 0x30
 800e4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4f0:	08027bbb 	.word	0x08027bbb
 800e4f4:	08028043 	.word	0x08028043
 800e4f8:	08027d66 	.word	0x08027d66
 800e4fc:	08027bf3 	.word	0x08027bf3

0800e500 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800e500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e504:	b08d      	sub	sp, #52	; 0x34
 800e506:	469b      	mov	fp, r3
 800e508:	2500      	movs	r5, #0
 800e50a:	4604      	mov	r4, r0
 800e50c:	f89d 7060 	ldrb.w	r7, [sp, #96]	; 0x60
 800e510:	4692      	mov	sl, r2
 800e512:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 800e516:	4689      	mov	r9, r1
 800e518:	2fff      	cmp	r7, #255	; 0xff
 800e51a:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 800e51e:	9506      	str	r5, [sp, #24]
 800e520:	bf14      	ite	ne
 800e522:	2308      	movne	r3, #8
 800e524:	2302      	moveq	r3, #2
 800e526:	e9cd 3503 	strd	r3, r5, [sp, #12]
 800e52a:	f7ff fe81 	bl	800e230 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e52e:	465a      	mov	r2, fp
 800e530:	4603      	mov	r3, r0
 800e532:	4651      	mov	r1, sl
 800e534:	4620      	mov	r0, r4
 800e536:	e9cd 8600 	strd	r8, r6, [sp]
 800e53a:	f7ff ff57 	bl	800e3ec <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800e53e:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800e542:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
 800e546:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e54a:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 800e54e:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800e552:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800e556:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 800e55a:	9d03      	ldr	r5, [sp, #12]
 800e55c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800e560:	6823      	ldr	r3, [r4, #0]
 800e562:	9007      	str	r0, [sp, #28]
 800e564:	4620      	mov	r0, r4
 800e566:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
 800e56a:	f8cd 9018 	str.w	r9, [sp, #24]
 800e56e:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 800e572:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 800e576:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800e57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e57c:	4798      	blx	r3
 800e57e:	4228      	tst	r0, r5
 800e580:	d106      	bne.n	800e590 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x90>
 800e582:	4b07      	ldr	r3, [pc, #28]	; (800e5a0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 800e584:	f44f 710c 	mov.w	r1, #560	; 0x230
 800e588:	4a06      	ldr	r2, [pc, #24]	; (800e5a4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 800e58a:	4807      	ldr	r0, [pc, #28]	; (800e5a8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa8>)
 800e58c:	f016 fa34 	bl	80249f8 <__assert_func>
 800e590:	6860      	ldr	r0, [r4, #4]
 800e592:	a903      	add	r1, sp, #12
 800e594:	6803      	ldr	r3, [r0, #0]
 800e596:	685b      	ldr	r3, [r3, #4]
 800e598:	4798      	blx	r3
 800e59a:	b00d      	add	sp, #52	; 0x34
 800e59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5a0:	08027bf3 	.word	0x08027bf3
 800e5a4:	0802811a 	.word	0x0802811a
 800e5a8:	08027d66 	.word	0x08027d66

0800e5ac <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800e5ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e5b0:	461f      	mov	r7, r3
 800e5b2:	4b0b      	ldr	r3, [pc, #44]	; (800e5e0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800e5b4:	460d      	mov	r5, r1
 800e5b6:	4616      	mov	r6, r2
 800e5b8:	f8b3 8000 	ldrh.w	r8, [r3]
 800e5bc:	4604      	mov	r4, r0
 800e5be:	f7ff fc77 	bl	800deb0 <_ZN8touchgfx3HAL3lcdEv>
 800e5c2:	6803      	ldr	r3, [r0, #0]
 800e5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5c6:	4798      	blx	r3
 800e5c8:	463b      	mov	r3, r7
 800e5ca:	4632      	mov	r2, r6
 800e5cc:	4629      	mov	r1, r5
 800e5ce:	e9cd 8000 	strd	r8, r0, [sp]
 800e5d2:	4620      	mov	r0, r4
 800e5d4:	f7ff ff0a 	bl	800e3ec <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800e5d8:	b002      	add	sp, #8
 800e5da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5de:	bf00      	nop
 800e5e0:	20020fd2 	.word	0x20020fd2

0800e5e4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800e5e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e5e8:	b08b      	sub	sp, #44	; 0x2c
 800e5ea:	4699      	mov	r9, r3
 800e5ec:	4690      	mov	r8, r2
 800e5ee:	4604      	mov	r4, r0
 800e5f0:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 800e5f4:	2500      	movs	r5, #0
 800e5f6:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
 800e5fa:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800e5fe:	9504      	str	r5, [sp, #16]
 800e600:	f8ad 7018 	strh.w	r7, [sp, #24]
 800e604:	f8ad 601a 	strh.w	r6, [sp, #26]
 800e608:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e60c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800e610:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e614:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800e618:	f88d 3020 	strb.w	r3, [sp, #32]
 800e61c:	f7ff fe08 	bl	800e230 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e620:	464a      	mov	r2, r9
 800e622:	4603      	mov	r3, r0
 800e624:	4641      	mov	r1, r8
 800e626:	4620      	mov	r0, r4
 800e628:	f7ff ffc0 	bl	800e5ac <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e62c:	4b19      	ldr	r3, [pc, #100]	; (800e694 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 800e62e:	9005      	str	r0, [sp, #20]
 800e630:	881b      	ldrh	r3, [r3, #0]
 800e632:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e636:	f7ff fc3b 	bl	800deb0 <_ZN8touchgfx3HAL3lcdEv>
 800e63a:	6803      	ldr	r3, [r0, #0]
 800e63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e63e:	4798      	blx	r3
 800e640:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 800e644:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800e648:	b107      	cbz	r7, 800e64c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 800e64a:	b936      	cbnz	r6, 800e65a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 800e64c:	4b12      	ldr	r3, [pc, #72]	; (800e698 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 800e64e:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 800e652:	4a12      	ldr	r2, [pc, #72]	; (800e69c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 800e654:	4812      	ldr	r0, [pc, #72]	; (800e6a0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 800e656:	f016 f9cf 	bl	80249f8 <__assert_func>
 800e65a:	6823      	ldr	r3, [r4, #0]
 800e65c:	4620      	mov	r0, r4
 800e65e:	9e01      	ldr	r6, [sp, #4]
 800e660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e662:	4798      	blx	r3
 800e664:	4230      	tst	r0, r6
 800e666:	d104      	bne.n	800e672 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 800e668:	4b0e      	ldr	r3, [pc, #56]	; (800e6a4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xc0>)
 800e66a:	f240 11e7 	movw	r1, #487	; 0x1e7
 800e66e:	4a0b      	ldr	r2, [pc, #44]	; (800e69c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 800e670:	e7f0      	b.n	800e654 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 800e672:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e674:	a901      	add	r1, sp, #4
 800e676:	6860      	ldr	r0, [r4, #4]
 800e678:	9304      	str	r3, [sp, #16]
 800e67a:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800e67e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 800e682:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800e686:	6803      	ldr	r3, [r0, #0]
 800e688:	685b      	ldr	r3, [r3, #4]
 800e68a:	4798      	blx	r3
 800e68c:	b00b      	add	sp, #44	; 0x2c
 800e68e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e692:	bf00      	nop
 800e694:	20020fd2 	.word	0x20020fd2
 800e698:	08027bbb 	.word	0x08027bbb
 800e69c:	08027eef 	.word	0x08027eef
 800e6a0:	08027d66 	.word	0x08027d66
 800e6a4:	08027bf3 	.word	0x08027bf3

0800e6a8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800e6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6aa:	b08d      	sub	sp, #52	; 0x34
 800e6ac:	4604      	mov	r4, r0
 800e6ae:	466b      	mov	r3, sp
 800e6b0:	e883 0006 	stmia.w	r3, {r1, r2}
 800e6b4:	4b21      	ldr	r3, [pc, #132]	; (800e73c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 800e6b6:	781b      	ldrb	r3, [r3, #0]
 800e6b8:	b933      	cbnz	r3, 800e6c8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 800e6ba:	4b21      	ldr	r3, [pc, #132]	; (800e740 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 800e6bc:	f240 2141 	movw	r1, #577	; 0x241
 800e6c0:	4a20      	ldr	r2, [pc, #128]	; (800e744 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 800e6c2:	4821      	ldr	r0, [pc, #132]	; (800e748 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 800e6c4:	f016 f998 	bl	80249f8 <__assert_func>
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	2501      	movs	r5, #1
 800e6cc:	f8bd 6000 	ldrh.w	r6, [sp]
 800e6d0:	9306      	str	r3, [sp, #24]
 800e6d2:	6803      	ldr	r3, [r0, #0]
 800e6d4:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800e6d8:	9503      	str	r5, [sp, #12]
 800e6da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6dc:	4798      	blx	r3
 800e6de:	463a      	mov	r2, r7
 800e6e0:	4631      	mov	r1, r6
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	4620      	mov	r0, r4
 800e6e6:	f7ff ff61 	bl	800e5ac <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e6ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e6ec:	9004      	str	r0, [sp, #16]
 800e6ee:	9307      	str	r3, [sp, #28]
 800e6f0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e6f4:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e6f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e6fc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800e700:	4b12      	ldr	r3, [pc, #72]	; (800e74c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa4>)
 800e702:	881b      	ldrh	r3, [r3, #0]
 800e704:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800e708:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800e70c:	f7ff fbd0 	bl	800deb0 <_ZN8touchgfx3HAL3lcdEv>
 800e710:	6803      	ldr	r3, [r0, #0]
 800e712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e714:	4798      	blx	r3
 800e716:	23ff      	movs	r3, #255	; 0xff
 800e718:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800e71c:	a903      	add	r1, sp, #12
 800e71e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800e722:	6860      	ldr	r0, [r4, #4]
 800e724:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800e728:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800e72c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800e730:	6803      	ldr	r3, [r0, #0]
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	4798      	blx	r3
 800e736:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800e738:	b00d      	add	sp, #52	; 0x34
 800e73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e73c:	20020fd7 	.word	0x20020fd7
 800e740:	08027cba 	.word	0x08027cba
 800e744:	08027f99 	.word	0x08027f99
 800e748:	08027d66 	.word	0x08027d66
 800e74c:	20020fd2 	.word	0x20020fd2

0800e750 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800e750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e754:	b08c      	sub	sp, #48	; 0x30
 800e756:	461e      	mov	r6, r3
 800e758:	2300      	movs	r3, #0
 800e75a:	4604      	mov	r4, r0
 800e75c:	466d      	mov	r5, sp
 800e75e:	9306      	str	r3, [sp, #24]
 800e760:	6803      	ldr	r3, [r0, #0]
 800e762:	e885 0006 	stmia.w	r5, {r1, r2}
 800e766:	2501      	movs	r5, #1
 800e768:	f8bd 7000 	ldrh.w	r7, [sp]
 800e76c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800e770:	9503      	str	r5, [sp, #12]
 800e772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e774:	4798      	blx	r3
 800e776:	4642      	mov	r2, r8
 800e778:	4639      	mov	r1, r7
 800e77a:	4603      	mov	r3, r0
 800e77c:	4620      	mov	r0, r4
 800e77e:	f7ff ff15 	bl	800e5ac <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e782:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e786:	9004      	str	r0, [sp, #16]
 800e788:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e78c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e790:	9607      	str	r6, [sp, #28]
 800e792:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800e796:	4b10      	ldr	r3, [pc, #64]	; (800e7d8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800e798:	881b      	ldrh	r3, [r3, #0]
 800e79a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800e79e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e7a0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800e7a4:	f7ff fb84 	bl	800deb0 <_ZN8touchgfx3HAL3lcdEv>
 800e7a8:	6803      	ldr	r3, [r0, #0]
 800e7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7ac:	4798      	blx	r3
 800e7ae:	23ff      	movs	r3, #255	; 0xff
 800e7b0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800e7b4:	a903      	add	r1, sp, #12
 800e7b6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800e7ba:	6860      	ldr	r0, [r4, #4]
 800e7bc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800e7c0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800e7c4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800e7c8:	6803      	ldr	r3, [r0, #0]
 800e7ca:	685b      	ldr	r3, [r3, #4]
 800e7cc:	4798      	blx	r3
 800e7ce:	4630      	mov	r0, r6
 800e7d0:	b00c      	add	sp, #48	; 0x30
 800e7d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7d6:	bf00      	nop
 800e7d8:	20020fd2 	.word	0x20020fd2

0800e7dc <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800e7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7de:	b085      	sub	sp, #20
 800e7e0:	4605      	mov	r5, r0
 800e7e2:	ac02      	add	r4, sp, #8
 800e7e4:	e884 0006 	stmia.w	r4, {r1, r2}
 800e7e8:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800e7ec:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800e7f0:	f7ff fd1e 	bl	800e230 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e7f4:	4631      	mov	r1, r6
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	463a      	mov	r2, r7
 800e7fa:	4628      	mov	r0, r5
 800e7fc:	f7ff fed6 	bl	800e5ac <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e800:	4a05      	ldr	r2, [pc, #20]	; (800e818 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800e802:	682b      	ldr	r3, [r5, #0]
 800e804:	8812      	ldrh	r2, [r2, #0]
 800e806:	9200      	str	r2, [sp, #0]
 800e808:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 800e80a:	4603      	mov	r3, r0
 800e80c:	4628      	mov	r0, r5
 800e80e:	e894 0006 	ldmia.w	r4, {r1, r2}
 800e812:	47b0      	blx	r6
 800e814:	b005      	add	sp, #20
 800e816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e818:	20020fd2 	.word	0x20020fd2

0800e81c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800e81c:	b570      	push	{r4, r5, r6, lr}
 800e81e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800e822:	4604      	mov	r4, r0
 800e824:	b19b      	cbz	r3, 800e84e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800e826:	2002      	movs	r0, #2
 800e828:	f7f2 faac 	bl	8000d84 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800e82c:	2300      	movs	r3, #0
 800e82e:	4620      	mov	r0, r4
 800e830:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800e834:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800e838:	6823      	ldr	r3, [r4, #0]
 800e83a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 800e83e:	f7ff fcf7 	bl	800e230 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e842:	4601      	mov	r1, r0
 800e844:	4620      	mov	r0, r4
 800e846:	462b      	mov	r3, r5
 800e848:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e84c:	4718      	bx	r3
 800e84e:	bd70      	pop	{r4, r5, r6, pc}

0800e850 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800e850:	b570      	push	{r4, r5, r6, lr}
 800e852:	4605      	mov	r5, r0
 800e854:	460c      	mov	r4, r1
 800e856:	2003      	movs	r0, #3
 800e858:	b149      	cbz	r1, 800e86e <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800e85a:	f7f2 fa63 	bl	8000d24 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800e85e:	6928      	ldr	r0, [r5, #16]
 800e860:	b168      	cbz	r0, 800e87e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800e862:	6803      	ldr	r3, [r0, #0]
 800e864:	2101      	movs	r1, #1
 800e866:	695b      	ldr	r3, [r3, #20]
 800e868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e86c:	4718      	bx	r3
 800e86e:	f7f2 fa71 	bl	8000d54 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800e872:	6928      	ldr	r0, [r5, #16]
 800e874:	b118      	cbz	r0, 800e87e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800e876:	6803      	ldr	r3, [r0, #0]
 800e878:	4621      	mov	r1, r4
 800e87a:	695b      	ldr	r3, [r3, #20]
 800e87c:	e7f4      	b.n	800e868 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800e87e:	bd70      	pop	{r4, r5, r6, pc}

0800e880 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800e880:	b538      	push	{r3, r4, r5, lr}
 800e882:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 800e886:	4604      	mov	r4, r0
 800e888:	460d      	mov	r5, r1
 800e88a:	428b      	cmp	r3, r1
 800e88c:	d006      	beq.n	800e89c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800e88e:	6803      	ldr	r3, [r0, #0]
 800e890:	b929      	cbnz	r1, 800e89e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800e892:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e896:	4798      	blx	r3
 800e898:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800e89c:	bd38      	pop	{r3, r4, r5, pc}
 800e89e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e8a2:	e7f8      	b.n	800e896 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800e8a4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800e8a4:	4b0d      	ldr	r3, [pc, #52]	; (800e8dc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800e8a6:	b510      	push	{r4, lr}
 800e8a8:	781b      	ldrb	r3, [r3, #0]
 800e8aa:	4604      	mov	r4, r0
 800e8ac:	b95b      	cbnz	r3, 800e8c6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e8ae:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800e8b2:	2b02      	cmp	r3, #2
 800e8b4:	d007      	beq.n	800e8c6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e8b6:	6840      	ldr	r0, [r0, #4]
 800e8b8:	f000 f93c 	bl	800eb34 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800e8bc:	b118      	cbz	r0, 800e8c6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e8be:	6862      	ldr	r2, [r4, #4]
 800e8c0:	7a53      	ldrb	r3, [r2, #9]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d0fc      	beq.n	800e8c0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800e8c6:	f7f2 fda9 	bl	800141c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800e8ca:	4620      	mov	r0, r4
 800e8cc:	2100      	movs	r1, #0
 800e8ce:	f7ff ffd7 	bl	800e880 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800e8d2:	4620      	mov	r0, r4
 800e8d4:	f7ff fcac 	bl	800e230 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e8d8:	bd10      	pop	{r4, pc}
 800e8da:	bf00      	nop
 800e8dc:	20020fd6 	.word	0x20020fd6

0800e8e0 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800e8e0:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800e8e4:	1a13      	subs	r3, r2, r0
 800e8e6:	4258      	negs	r0, r3
 800e8e8:	4158      	adcs	r0, r3
 800e8ea:	4770      	bx	lr

0800e8ec <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800e8ec:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800e8f0:	1a9b      	subs	r3, r3, r2
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	bfdc      	itt	le
 800e8f6:	6882      	ldrle	r2, [r0, #8]
 800e8f8:	189b      	addle	r3, r3, r2
 800e8fa:	2b01      	cmp	r3, #1
 800e8fc:	bfcc      	ite	gt
 800e8fe:	2000      	movgt	r0, #0
 800e900:	2001      	movle	r0, #1
 800e902:	4770      	bx	lr

0800e904 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800e904:	6902      	ldr	r2, [r0, #16]
 800e906:	6843      	ldr	r3, [r0, #4]
 800e908:	2024      	movs	r0, #36	; 0x24
 800e90a:	fb00 3002 	mla	r0, r0, r2, r3
 800e90e:	4770      	bx	lr

0800e910 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800e910:	6803      	ldr	r3, [r0, #0]
 800e912:	691b      	ldr	r3, [r3, #16]
 800e914:	4718      	bx	r3

0800e916 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800e916:	4770      	bx	lr

0800e918 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800e918:	4770      	bx	lr

0800e91a <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800e91a:	4770      	bx	lr

0800e91c <_ZN8touchgfx13DMA_Interface7executeEv>:
 800e91c:	2301      	movs	r3, #1
 800e91e:	b570      	push	{r4, r5, r6, lr}
 800e920:	7203      	strb	r3, [r0, #8]
 800e922:	4604      	mov	r4, r0
 800e924:	6840      	ldr	r0, [r0, #4]
 800e926:	6803      	ldr	r3, [r0, #0]
 800e928:	699b      	ldr	r3, [r3, #24]
 800e92a:	4798      	blx	r3
 800e92c:	6803      	ldr	r3, [r0, #0]
 800e92e:	4605      	mov	r5, r0
 800e930:	2b40      	cmp	r3, #64	; 0x40
 800e932:	d039      	beq.n	800e9a8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800e934:	d815      	bhi.n	800e962 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 800e936:	2b04      	cmp	r3, #4
 800e938:	d022      	beq.n	800e980 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800e93a:	d808      	bhi.n	800e94e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e93c:	2b01      	cmp	r3, #1
 800e93e:	d033      	beq.n	800e9a8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800e940:	2b02      	cmp	r3, #2
 800e942:	d108      	bne.n	800e956 <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 800e944:	6823      	ldr	r3, [r4, #0]
 800e946:	4620      	mov	r0, r4
 800e948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e94a:	4798      	blx	r3
 800e94c:	e025      	b.n	800e99a <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 800e94e:	2b08      	cmp	r3, #8
 800e950:	d01e      	beq.n	800e990 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 800e952:	2b20      	cmp	r3, #32
 800e954:	d028      	beq.n	800e9a8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800e956:	4b17      	ldr	r3, [pc, #92]	; (800e9b4 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 800e958:	2188      	movs	r1, #136	; 0x88
 800e95a:	4a17      	ldr	r2, [pc, #92]	; (800e9b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 800e95c:	4817      	ldr	r0, [pc, #92]	; (800e9bc <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 800e95e:	f016 f84b 	bl	80249f8 <__assert_func>
 800e962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e966:	d01f      	beq.n	800e9a8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800e968:	d804      	bhi.n	800e974 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 800e96a:	2b80      	cmp	r3, #128	; 0x80
 800e96c:	d01c      	beq.n	800e9a8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800e96e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e972:	e7ef      	b.n	800e954 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 800e974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e978:	d016      	beq.n	800e9a8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800e97a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e97e:	e7e0      	b.n	800e942 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800e980:	6823      	ldr	r3, [r4, #0]
 800e982:	7f01      	ldrb	r1, [r0, #28]
 800e984:	4620      	mov	r0, r4
 800e986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e988:	4798      	blx	r3
 800e98a:	6823      	ldr	r3, [r4, #0]
 800e98c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e98e:	e006      	b.n	800e99e <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800e990:	6823      	ldr	r3, [r4, #0]
 800e992:	7f01      	ldrb	r1, [r0, #28]
 800e994:	4620      	mov	r0, r4
 800e996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e998:	4798      	blx	r3
 800e99a:	6823      	ldr	r3, [r4, #0]
 800e99c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e99e:	4629      	mov	r1, r5
 800e9a0:	4620      	mov	r0, r4
 800e9a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e9a6:	4718      	bx	r3
 800e9a8:	6823      	ldr	r3, [r4, #0]
 800e9aa:	4620      	mov	r0, r4
 800e9ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9ae:	4798      	blx	r3
 800e9b0:	e7eb      	b.n	800e98a <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 800e9b2:	bf00      	nop
 800e9b4:	080281fe 	.word	0x080281fe
 800e9b8:	080282c0 	.word	0x080282c0
 800e9bc:	08028223 	.word	0x08028223

0800e9c0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800e9c0:	b570      	push	{r4, r5, r6, lr}
 800e9c2:	4604      	mov	r4, r0
 800e9c4:	460e      	mov	r6, r1
 800e9c6:	6860      	ldr	r0, [r4, #4]
 800e9c8:	6803      	ldr	r3, [r0, #0]
 800e9ca:	685b      	ldr	r3, [r3, #4]
 800e9cc:	4798      	blx	r3
 800e9ce:	2800      	cmp	r0, #0
 800e9d0:	d1f9      	bne.n	800e9c6 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800e9d2:	4d0d      	ldr	r5, [pc, #52]	; (800ea08 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800e9d4:	6828      	ldr	r0, [r5, #0]
 800e9d6:	6803      	ldr	r3, [r0, #0]
 800e9d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9da:	4798      	blx	r3
 800e9dc:	f7f2 fd2c 	bl	8001438 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800e9e0:	6828      	ldr	r0, [r5, #0]
 800e9e2:	2101      	movs	r1, #1
 800e9e4:	f7ff ff4c 	bl	800e880 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800e9e8:	6860      	ldr	r0, [r4, #4]
 800e9ea:	4631      	mov	r1, r6
 800e9ec:	6803      	ldr	r3, [r0, #0]
 800e9ee:	689b      	ldr	r3, [r3, #8]
 800e9f0:	4798      	blx	r3
 800e9f2:	6823      	ldr	r3, [r4, #0]
 800e9f4:	4620      	mov	r0, r4
 800e9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9f8:	4798      	blx	r3
 800e9fa:	6828      	ldr	r0, [r5, #0]
 800e9fc:	6803      	ldr	r3, [r0, #0]
 800e9fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea04:	4718      	bx	r3
 800ea06:	bf00      	nop
 800ea08:	20020fd8 	.word	0x20020fd8

0800ea0c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800ea0c:	b508      	push	{r3, lr}
 800ea0e:	f7f2 fd05 	bl	800141c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800ea12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ea16:	f7f2 bd09 	b.w	800142c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800ea1a <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800ea1a:	b510      	push	{r4, lr}
 800ea1c:	4604      	mov	r4, r0
 800ea1e:	2114      	movs	r1, #20
 800ea20:	f015 ffbb 	bl	802499a <_ZdlPvj>
 800ea24:	4620      	mov	r0, r4
 800ea26:	bd10      	pop	{r4, pc}

0800ea28 <_ZN8touchgfx13DMA_Interface5startEv>:
 800ea28:	b510      	push	{r4, lr}
 800ea2a:	4604      	mov	r4, r0
 800ea2c:	6840      	ldr	r0, [r0, #4]
 800ea2e:	6803      	ldr	r3, [r0, #0]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	4798      	blx	r3
 800ea34:	b948      	cbnz	r0, 800ea4a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800ea36:	7a63      	ldrb	r3, [r4, #9]
 800ea38:	b13b      	cbz	r3, 800ea4a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800ea3a:	7a23      	ldrb	r3, [r4, #8]
 800ea3c:	b92b      	cbnz	r3, 800ea4a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800ea3e:	6823      	ldr	r3, [r4, #0]
 800ea40:	4620      	mov	r0, r4
 800ea42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea48:	4718      	bx	r3
 800ea4a:	bd10      	pop	{r4, pc}

0800ea4c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800ea4c:	b510      	push	{r4, lr}
 800ea4e:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800ea52:	1ad2      	subs	r2, r2, r3
 800ea54:	2a00      	cmp	r2, #0
 800ea56:	bfdc      	itt	le
 800ea58:	6884      	ldrle	r4, [r0, #8]
 800ea5a:	1912      	addle	r2, r2, r4
 800ea5c:	2a01      	cmp	r2, #1
 800ea5e:	dd17      	ble.n	800ea90 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x44>
 800ea60:	6842      	ldr	r2, [r0, #4]
 800ea62:	2424      	movs	r4, #36	; 0x24
 800ea64:	fb04 2303 	mla	r3, r4, r3, r2
 800ea68:	f101 0220 	add.w	r2, r1, #32
 800ea6c:	f851 4b04 	ldr.w	r4, [r1], #4
 800ea70:	4291      	cmp	r1, r2
 800ea72:	f843 4b04 	str.w	r4, [r3], #4
 800ea76:	d1f9      	bne.n	800ea6c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800ea78:	780a      	ldrb	r2, [r1, #0]
 800ea7a:	701a      	strb	r2, [r3, #0]
 800ea7c:	68c3      	ldr	r3, [r0, #12]
 800ea7e:	6882      	ldr	r2, [r0, #8]
 800ea80:	f3bf 8f5b 	dmb	ish
 800ea84:	3301      	adds	r3, #1
 800ea86:	429a      	cmp	r2, r3
 800ea88:	bfd8      	it	le
 800ea8a:	1a9b      	suble	r3, r3, r2
 800ea8c:	60c3      	str	r3, [r0, #12]
 800ea8e:	bd10      	pop	{r4, pc}
 800ea90:	4b02      	ldr	r3, [pc, #8]	; (800ea9c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 800ea92:	2136      	movs	r1, #54	; 0x36
 800ea94:	4a02      	ldr	r2, [pc, #8]	; (800eaa0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 800ea96:	4803      	ldr	r0, [pc, #12]	; (800eaa4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 800ea98:	f015 ffae 	bl	80249f8 <__assert_func>
 800ea9c:	08028249 	.word	0x08028249
 800eaa0:	080282f0 	.word	0x080282f0
 800eaa4:	08028223 	.word	0x08028223

0800eaa8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800eaa8:	b510      	push	{r4, lr}
 800eaaa:	6803      	ldr	r3, [r0, #0]
 800eaac:	4604      	mov	r4, r0
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	4798      	blx	r3
 800eab2:	b128      	cbz	r0, 800eac0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 800eab4:	4b07      	ldr	r3, [pc, #28]	; (800ead4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 800eab6:	213c      	movs	r1, #60	; 0x3c
 800eab8:	4a07      	ldr	r2, [pc, #28]	; (800ead8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 800eaba:	4808      	ldr	r0, [pc, #32]	; (800eadc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 800eabc:	f015 ff9c 	bl	80249f8 <__assert_func>
 800eac0:	6923      	ldr	r3, [r4, #16]
 800eac2:	68a2      	ldr	r2, [r4, #8]
 800eac4:	f3bf 8f5b 	dmb	ish
 800eac8:	3301      	adds	r3, #1
 800eaca:	429a      	cmp	r2, r3
 800eacc:	bfd8      	it	le
 800eace:	1a9b      	suble	r3, r3, r2
 800ead0:	6123      	str	r3, [r4, #16]
 800ead2:	bd10      	pop	{r4, pc}
 800ead4:	0802826c 	.word	0x0802826c
 800ead8:	0802833e 	.word	0x0802833e
 800eadc:	08028223 	.word	0x08028223

0800eae0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800eae0:	b570      	push	{r4, r5, r6, lr}
 800eae2:	4604      	mov	r4, r0
 800eae4:	6840      	ldr	r0, [r0, #4]
 800eae6:	6803      	ldr	r3, [r0, #0]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	4798      	blx	r3
 800eaec:	4605      	mov	r5, r0
 800eaee:	b930      	cbnz	r0, 800eafe <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800eaf0:	7a23      	ldrb	r3, [r4, #8]
 800eaf2:	b123      	cbz	r3, 800eafe <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800eaf4:	6860      	ldr	r0, [r4, #4]
 800eaf6:	6803      	ldr	r3, [r0, #0]
 800eaf8:	695b      	ldr	r3, [r3, #20]
 800eafa:	4798      	blx	r3
 800eafc:	7225      	strb	r5, [r4, #8]
 800eafe:	6860      	ldr	r0, [r4, #4]
 800eb00:	6803      	ldr	r3, [r0, #0]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	4798      	blx	r3
 800eb06:	b928      	cbnz	r0, 800eb14 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800eb08:	6823      	ldr	r3, [r4, #0]
 800eb0a:	4620      	mov	r0, r4
 800eb0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb12:	4718      	bx	r3
 800eb14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb18:	f7f2 bc96 	b.w	8001448 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800eb1c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800eb1c:	b510      	push	{r4, lr}
 800eb1e:	6082      	str	r2, [r0, #8]
 800eb20:	2200      	movs	r2, #0
 800eb22:	4c03      	ldr	r4, [pc, #12]	; (800eb30 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800eb24:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800eb28:	e9c0 4100 	strd	r4, r1, [r0]
 800eb2c:	bd10      	pop	{r4, pc}
 800eb2e:	bf00      	nop
 800eb30:	080282a4 	.word	0x080282a4

0800eb34 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800eb34:	6840      	ldr	r0, [r0, #4]
 800eb36:	6803      	ldr	r3, [r0, #0]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	4718      	bx	r3

0800eb3c <_ZN8touchgfx21AbstractPainterRGB56510renderInitEv>:
 800eb3c:	2001      	movs	r0, #1
 800eb3e:	4770      	bx	lr

0800eb40 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh>:
 800eb40:	4413      	add	r3, r2
 800eb42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb46:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800eb4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb4c:	4d43      	ldr	r5, [pc, #268]	; (800ec5c <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x11c>)
 800eb4e:	eb01 0e43 	add.w	lr, r1, r3, lsl #1
 800eb52:	6943      	ldr	r3, [r0, #20]
 800eb54:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 800eb58:	095c      	lsrs	r4, r3, #5
 800eb5a:	ea05 2213 	and.w	r2, r5, r3, lsr #8
 800eb5e:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800eb62:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800eb66:	4322      	orrs	r2, r4
 800eb68:	7a04      	ldrb	r4, [r0, #8]
 800eb6a:	431a      	orrs	r2, r3
 800eb6c:	2cff      	cmp	r4, #255	; 0xff
 800eb6e:	b292      	uxth	r2, r2
 800eb70:	d017      	beq.n	800eba2 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x62>
 800eb72:	ea02 0305 	and.w	r3, r2, r5
 800eb76:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800eb7a:	f402 6afc 	and.w	sl, r2, #2016	; 0x7e0
 800eb7e:	f002 0b1f 	and.w	fp, r2, #31
 800eb82:	9301      	str	r3, [sp, #4]
 800eb84:	7a04      	ldrb	r4, [r0, #8]
 800eb86:	f818 3b01 	ldrb.w	r3, [r8], #1
 800eb8a:	4363      	muls	r3, r4
 800eb8c:	1c5c      	adds	r4, r3, #1
 800eb8e:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 800eb92:	121b      	asrs	r3, r3, #8
 800eb94:	2bff      	cmp	r3, #255	; 0xff
 800eb96:	d13e      	bne.n	800ec16 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0xd6>
 800eb98:	800a      	strh	r2, [r1, #0]
 800eb9a:	3102      	adds	r1, #2
 800eb9c:	458e      	cmp	lr, r1
 800eb9e:	d8f1      	bhi.n	800eb84 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x44>
 800eba0:	e00d      	b.n	800ebbe <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x7e>
 800eba2:	ea02 0605 	and.w	r6, r2, r5
 800eba6:	f402 67fc 	and.w	r7, r2, #2016	; 0x7e0
 800ebaa:	f002 0c1f 	and.w	ip, r2, #31
 800ebae:	f818 0b01 	ldrb.w	r0, [r8], #1
 800ebb2:	28ff      	cmp	r0, #255	; 0xff
 800ebb4:	d106      	bne.n	800ebc4 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x84>
 800ebb6:	800a      	strh	r2, [r1, #0]
 800ebb8:	3102      	adds	r1, #2
 800ebba:	458e      	cmp	lr, r1
 800ebbc:	d8f7      	bhi.n	800ebae <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x6e>
 800ebbe:	b003      	add	sp, #12
 800ebc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebc4:	f8b1 a000 	ldrh.w	sl, [r1]
 800ebc8:	ea6f 0900 	mvn.w	r9, r0
 800ebcc:	ea0a 0305 	and.w	r3, sl, r5
 800ebd0:	fa5f f989 	uxtb.w	r9, r9
 800ebd4:	fb09 f303 	mul.w	r3, r9, r3
 800ebd8:	fb00 3306 	mla	r3, r0, r6, r3
 800ebdc:	fb93 f3f4 	sdiv	r3, r3, r4
 800ebe0:	ea03 0b05 	and.w	fp, r3, r5
 800ebe4:	f40a 63fc 	and.w	r3, sl, #2016	; 0x7e0
 800ebe8:	f00a 0a1f 	and.w	sl, sl, #31
 800ebec:	fb09 f303 	mul.w	r3, r9, r3
 800ebf0:	fb09 f90a 	mul.w	r9, r9, sl
 800ebf4:	fb00 3307 	mla	r3, r0, r7, r3
 800ebf8:	fb00 900c 	mla	r0, r0, ip, r9
 800ebfc:	fb93 f3f4 	sdiv	r3, r3, r4
 800ec00:	fb90 f0f4 	sdiv	r0, r0, r4
 800ec04:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800ec08:	f000 001f 	and.w	r0, r0, #31
 800ec0c:	ea4b 0303 	orr.w	r3, fp, r3
 800ec10:	4303      	orrs	r3, r0
 800ec12:	800b      	strh	r3, [r1, #0]
 800ec14:	e7d0      	b.n	800ebb8 <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x78>
 800ec16:	f8b1 c000 	ldrh.w	ip, [r1]
 800ec1a:	43df      	mvns	r7, r3
 800ec1c:	9c01      	ldr	r4, [sp, #4]
 800ec1e:	b2ff      	uxtb	r7, r7
 800ec20:	ea0c 0605 	and.w	r6, ip, r5
 800ec24:	437e      	muls	r6, r7
 800ec26:	fb03 6604 	mla	r6, r3, r4, r6
 800ec2a:	f40c 64fc 	and.w	r4, ip, #2016	; 0x7e0
 800ec2e:	437c      	muls	r4, r7
 800ec30:	fb03 440a 	mla	r4, r3, sl, r4
 800ec34:	fb96 f6f9 	sdiv	r6, r6, r9
 800ec38:	fb94 f4f9 	sdiv	r4, r4, r9
 800ec3c:	402e      	ands	r6, r5
 800ec3e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800ec42:	4334      	orrs	r4, r6
 800ec44:	f00c 061f 	and.w	r6, ip, #31
 800ec48:	437e      	muls	r6, r7
 800ec4a:	fb03 660b 	mla	r6, r3, fp, r6
 800ec4e:	fb96 f6f9 	sdiv	r6, r6, r9
 800ec52:	f006 061f 	and.w	r6, r6, #31
 800ec56:	4334      	orrs	r4, r6
 800ec58:	800c      	strh	r4, [r1, #0]
 800ec5a:	e79e      	b.n	800eb9a <_ZN8touchgfx13PainterRGB5656renderEPhiiijPKh+0x5a>
 800ec5c:	fffff800 	.word	0xfffff800

0800ec60 <_ZN8touchgfx13PainterRGB56510renderNextERhS1_S1_S1_>:
 800ec60:	b510      	push	{r4, lr}
 800ec62:	8ac4      	ldrh	r4, [r0, #22]
 800ec64:	700c      	strb	r4, [r1, #0]
 800ec66:	6941      	ldr	r1, [r0, #20]
 800ec68:	0a09      	lsrs	r1, r1, #8
 800ec6a:	7011      	strb	r1, [r2, #0]
 800ec6c:	6942      	ldr	r2, [r0, #20]
 800ec6e:	2001      	movs	r0, #1
 800ec70:	701a      	strb	r2, [r3, #0]
 800ec72:	22ff      	movs	r2, #255	; 0xff
 800ec74:	9b02      	ldr	r3, [sp, #8]
 800ec76:	701a      	strb	r2, [r3, #0]
 800ec78:	bd10      	pop	{r4, pc}

0800ec7a <_ZN8touchgfx13PainterRGB565D1Ev>:
 800ec7a:	4770      	bx	lr

0800ec7c <_ZN8touchgfx13PainterRGB565D0Ev>:
 800ec7c:	b510      	push	{r4, lr}
 800ec7e:	4604      	mov	r4, r0
 800ec80:	2118      	movs	r1, #24
 800ec82:	f015 fe8a 	bl	802499a <_ZdlPvj>
 800ec86:	4620      	mov	r0, r4
 800ec88:	bd10      	pop	{r4, pc}

0800ec8a <_ZN8touchgfx21AbstractPainterRGB56510renderNextERhS1_S1_S1_>:
 800ec8a:	2000      	movs	r0, #0
 800ec8c:	4770      	bx	lr

0800ec8e <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh>:
 800ec8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec92:	4616      	mov	r6, r2
 800ec94:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800ec98:	b085      	sub	sp, #20
 800ec9a:	4698      	mov	r8, r3
 800ec9c:	4432      	add	r2, r6
 800ec9e:	4604      	mov	r4, r0
 800eca0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eca2:	460d      	mov	r5, r1
 800eca4:	60c2      	str	r2, [r0, #12]
 800eca6:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800ecaa:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800ecac:	441a      	add	r2, r3
 800ecae:	6803      	ldr	r3, [r0, #0]
 800ecb0:	6102      	str	r2, [r0, #16]
 800ecb2:	68db      	ldr	r3, [r3, #12]
 800ecb4:	4798      	blx	r3
 800ecb6:	2800      	cmp	r0, #0
 800ecb8:	d03a      	beq.n	800ed30 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0xa2>
 800ecba:	4446      	add	r6, r8
 800ecbc:	eb05 0546 	add.w	r5, r5, r6, lsl #1
 800ecc0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800ecc2:	eb05 0646 	add.w	r6, r5, r6, lsl #1
 800ecc6:	6823      	ldr	r3, [r4, #0]
 800ecc8:	f10d 020f 	add.w	r2, sp, #15
 800eccc:	a903      	add	r1, sp, #12
 800ecce:	4620      	mov	r0, r4
 800ecd0:	9200      	str	r2, [sp, #0]
 800ecd2:	f10d 020d 	add.w	r2, sp, #13
 800ecd6:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800ecda:	f10d 030e 	add.w	r3, sp, #14
 800ecde:	47c0      	blx	r8
 800ece0:	b1f8      	cbz	r0, 800ed22 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x94>
 800ece2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800ece6:	7a20      	ldrb	r0, [r4, #8]
 800ece8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800ecec:	4358      	muls	r0, r3
 800ecee:	f89d c00e 	ldrb.w	ip, [sp, #14]
 800ecf2:	1c43      	adds	r3, r0, #1
 800ecf4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 800ecf8:	7838      	ldrb	r0, [r7, #0]
 800ecfa:	121b      	asrs	r3, r3, #8
 800ecfc:	fb10 f003 	smulbb	r0, r0, r3
 800ed00:	b283      	uxth	r3, r0
 800ed02:	1c58      	adds	r0, r3, #1
 800ed04:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 800ed08:	6823      	ldr	r3, [r4, #0]
 800ed0a:	1200      	asrs	r0, r0, #8
 800ed0c:	f8d3 8014 	ldr.w	r8, [r3, #20]
 800ed10:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800ed14:	28ff      	cmp	r0, #255	; 0xff
 800ed16:	d10e      	bne.n	800ed36 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0xa8>
 800ed18:	f8cd c000 	str.w	ip, [sp]
 800ed1c:	4629      	mov	r1, r5
 800ed1e:	4620      	mov	r0, r4
 800ed20:	47c0      	blx	r8
 800ed22:	68e3      	ldr	r3, [r4, #12]
 800ed24:	3502      	adds	r5, #2
 800ed26:	3701      	adds	r7, #1
 800ed28:	3301      	adds	r3, #1
 800ed2a:	42ae      	cmp	r6, r5
 800ed2c:	60e3      	str	r3, [r4, #12]
 800ed2e:	d8ca      	bhi.n	800ecc6 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x38>
 800ed30:	b005      	add	sp, #20
 800ed32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed36:	8829      	ldrh	r1, [r5, #0]
 800ed38:	fa1f fe80 	uxth.w	lr, r0
 800ed3c:	43c0      	mvns	r0, r0
 800ed3e:	fb12 f20e 	smulbb	r2, r2, lr
 800ed42:	ea4f 2921 	mov.w	r9, r1, asr #8
 800ed46:	fb13 f30e 	smulbb	r3, r3, lr
 800ed4a:	b2c0      	uxtb	r0, r0
 800ed4c:	fb1c fc0e 	smulbb	ip, ip, lr
 800ed50:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 800ed54:	fb09 2200 	mla	r2, r9, r0, r2
 800ed58:	ea4f 09e1 	mov.w	r9, r1, asr #3
 800ed5c:	00c9      	lsls	r1, r1, #3
 800ed5e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 800ed62:	b292      	uxth	r2, r2
 800ed64:	b2c9      	uxtb	r1, r1
 800ed66:	fb09 3300 	mla	r3, r9, r0, r3
 800ed6a:	fb01 c000 	mla	r0, r1, r0, ip
 800ed6e:	b29b      	uxth	r3, r3
 800ed70:	b280      	uxth	r0, r0
 800ed72:	1c59      	adds	r1, r3, #1
 800ed74:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 800ed78:	1c51      	adds	r1, r2, #1
 800ed7a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800ed7e:	1c41      	adds	r1, r0, #1
 800ed80:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800ed84:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 800ed88:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800ed8c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800ed90:	9000      	str	r0, [sp, #0]
 800ed92:	e7c3      	b.n	800ed1c <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x8e>

0800ed94 <_ZN8touchgfx21AbstractPainterRGB56511renderPixelEPthhh>:
 800ed94:	00db      	lsls	r3, r3, #3
 800ed96:	f89d 0000 	ldrb.w	r0, [sp]
 800ed9a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800ed9e:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 800eda2:	4803      	ldr	r0, [pc, #12]	; (800edb0 <_ZN8touchgfx21AbstractPainterRGB56511renderPixelEPthhh+0x1c>)
 800eda4:	ea00 2202 	and.w	r2, r0, r2, lsl #8
 800eda8:	4313      	orrs	r3, r2
 800edaa:	800b      	strh	r3, [r1, #0]
 800edac:	4770      	bx	lr
 800edae:	bf00      	nop
 800edb0:	fffff800 	.word	0xfffff800

0800edb4 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>:
 800edb4:	4770      	bx	lr

0800edb6 <_ZN8touchgfx21AbstractPainterRGB565D0Ev>:
 800edb6:	b510      	push	{r4, lr}
 800edb8:	4604      	mov	r4, r0
 800edba:	2114      	movs	r1, #20
 800edbc:	f015 fded 	bl	802499a <_ZdlPvj>
 800edc0:	4620      	mov	r0, r4
 800edc2:	bd10      	pop	{r4, pc}

0800edc4 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 800edc4:	6281      	str	r1, [r0, #40]	; 0x28
 800edc6:	4770      	bx	lr

0800edc8 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 800edc8:	b510      	push	{r4, lr}
 800edca:	2200      	movs	r2, #0
 800edcc:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 800edd0:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 800edd4:	8002      	strh	r2, [r0, #0]
 800edd6:	8042      	strh	r2, [r0, #2]
 800edd8:	8084      	strh	r4, [r0, #4]
 800edda:	80c1      	strh	r1, [r0, #6]
 800eddc:	bd10      	pop	{r4, pc}

0800edde <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 800edde:	2200      	movs	r2, #0
 800ede0:	8002      	strh	r2, [r0, #0]
 800ede2:	8042      	strh	r2, [r0, #2]
 800ede4:	8082      	strh	r2, [r0, #4]
 800ede6:	80c2      	strh	r2, [r0, #6]
 800ede8:	4770      	bx	lr
	...

0800edec <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 800edec:	b508      	push	{r3, lr}
 800edee:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800edf0:	b928      	cbnz	r0, 800edfe <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 800edf2:	4b03      	ldr	r3, [pc, #12]	; (800ee00 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 800edf4:	2123      	movs	r1, #35	; 0x23
 800edf6:	4a03      	ldr	r2, [pc, #12]	; (800ee04 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 800edf8:	4803      	ldr	r0, [pc, #12]	; (800ee08 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 800edfa:	f015 fdfd 	bl	80249f8 <__assert_func>
 800edfe:	bd08      	pop	{r3, pc}
 800ee00:	080283b0 	.word	0x080283b0
 800ee04:	08028494 	.word	0x08028494
 800ee08:	080283d7 	.word	0x080283d7

0800ee0c <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800ee0c:	b510      	push	{r4, lr}
 800ee0e:	f9b1 4000 	ldrsh.w	r4, [r1]
 800ee12:	888a      	ldrh	r2, [r1, #4]
 800ee14:	f9b0 3000 	ldrsh.w	r3, [r0]
 800ee18:	4422      	add	r2, r4
 800ee1a:	b212      	sxth	r2, r2
 800ee1c:	4293      	cmp	r3, r2
 800ee1e:	da15      	bge.n	800ee4c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800ee20:	8882      	ldrh	r2, [r0, #4]
 800ee22:	4413      	add	r3, r2
 800ee24:	b21b      	sxth	r3, r3
 800ee26:	429c      	cmp	r4, r3
 800ee28:	da10      	bge.n	800ee4c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800ee2a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800ee2e:	88c9      	ldrh	r1, [r1, #6]
 800ee30:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800ee34:	4419      	add	r1, r3
 800ee36:	b209      	sxth	r1, r1
 800ee38:	428a      	cmp	r2, r1
 800ee3a:	da07      	bge.n	800ee4c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800ee3c:	88c0      	ldrh	r0, [r0, #6]
 800ee3e:	4410      	add	r0, r2
 800ee40:	b200      	sxth	r0, r0
 800ee42:	4283      	cmp	r3, r0
 800ee44:	bfac      	ite	ge
 800ee46:	2000      	movge	r0, #0
 800ee48:	2001      	movlt	r0, #1
 800ee4a:	bd10      	pop	{r4, pc}
 800ee4c:	2000      	movs	r0, #0
 800ee4e:	e7fc      	b.n	800ee4a <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800ee50 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 800ee50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee54:	b08b      	sub	sp, #44	; 0x2c
 800ee56:	4604      	mov	r4, r0
 800ee58:	6808      	ldr	r0, [r1, #0]
 800ee5a:	f04f 0a00 	mov.w	sl, #0
 800ee5e:	6849      	ldr	r1, [r1, #4]
 800ee60:	ab04      	add	r3, sp, #16
 800ee62:	f647 7bff 	movw	fp, #32767	; 0x7fff
 800ee66:	c303      	stmia	r3!, {r0, r1}
 800ee68:	4b35      	ldr	r3, [pc, #212]	; (800ef40 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf0>)
 800ee6a:	4621      	mov	r1, r4
 800ee6c:	a806      	add	r0, sp, #24
 800ee6e:	781b      	ldrb	r3, [r3, #0]
 800ee70:	2b01      	cmp	r3, #1
 800ee72:	6823      	ldr	r3, [r4, #0]
 800ee74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee76:	bf1f      	itttt	ne
 800ee78:	f10d 090e 	addne.w	r9, sp, #14
 800ee7c:	ae05      	addne	r6, sp, #20
 800ee7e:	f10d 0516 	addne.w	r5, sp, #22
 800ee82:	f10d 0812 	addne.w	r8, sp, #18
 800ee86:	bf01      	itttt	eq
 800ee88:	f10d 0916 	addeq.w	r9, sp, #22
 800ee8c:	f10d 060e 	addeq.w	r6, sp, #14
 800ee90:	ad05      	addeq	r5, sp, #20
 800ee92:	f10d 0810 	addeq.w	r8, sp, #16
 800ee96:	4798      	blx	r3
 800ee98:	f9b5 3000 	ldrsh.w	r3, [r5]
 800ee9c:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d042      	beq.n	800ef2a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xda>
 800eea4:	4293      	cmp	r3, r2
 800eea6:	bfa8      	it	ge
 800eea8:	4613      	movge	r3, r2
 800eeaa:	f8ad 300e 	strh.w	r3, [sp, #14]
 800eeae:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 800eeb2:	2f00      	cmp	r7, #0
 800eeb4:	dd21      	ble.n	800eefa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xaa>
 800eeb6:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 800eeba:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 800eebe:	f9b6 2000 	ldrsh.w	r2, [r6]
 800eec2:	f9b9 3000 	ldrsh.w	r3, [r9]
 800eec6:	f8ad 0020 	strh.w	r0, [sp, #32]
 800eeca:	a808      	add	r0, sp, #32
 800eecc:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 800eed0:	a906      	add	r1, sp, #24
 800eed2:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800eed6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800eeda:	f7ff ff97 	bl	800ee0c <_ZNK8touchgfx4Rect9intersectERKS0_>
 800eede:	9001      	str	r0, [sp, #4]
 800eee0:	b1d0      	cbz	r0, 800ef18 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 800eee2:	6822      	ldr	r2, [r4, #0]
 800eee4:	a908      	add	r1, sp, #32
 800eee6:	4620      	mov	r0, r4
 800eee8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800eeea:	4790      	blx	r2
 800eeec:	b9a0      	cbnz	r0, 800ef18 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 800eeee:	107f      	asrs	r7, r7, #1
 800eef0:	9b01      	ldr	r3, [sp, #4]
 800eef2:	f8ad 700e 	strh.w	r7, [sp, #14]
 800eef6:	469a      	mov	sl, r3
 800eef8:	e7d9      	b.n	800eeae <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 800eefa:	d10d      	bne.n	800ef18 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 800eefc:	2301      	movs	r3, #1
 800eefe:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ef02:	f8b8 2000 	ldrh.w	r2, [r8]
 800ef06:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800ef0a:	440a      	add	r2, r1
 800ef0c:	f8a8 2000 	strh.w	r2, [r8]
 800ef10:	882b      	ldrh	r3, [r5, #0]
 800ef12:	1a5b      	subs	r3, r3, r1
 800ef14:	802b      	strh	r3, [r5, #0]
 800ef16:	e7bf      	b.n	800ee98 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800ef18:	f1ba 0f00 	cmp.w	sl, #0
 800ef1c:	d0f1      	beq.n	800ef02 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 800ef1e:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 800ef22:	455b      	cmp	r3, fp
 800ef24:	bf08      	it	eq
 800ef26:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 800ef28:	e7eb      	b.n	800ef02 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 800ef2a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800ef2e:	429a      	cmp	r2, r3
 800ef30:	bf04      	itt	eq
 800ef32:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 800ef36:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 800ef38:	b00b      	add	sp, #44	; 0x2c
 800ef3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef3e:	bf00      	nop
 800ef40:	20020fd0 	.word	0x20020fd0

0800ef44 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 800ef44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef46:	b085      	sub	sp, #20
 800ef48:	6803      	ldr	r3, [r0, #0]
 800ef4a:	4604      	mov	r4, r0
 800ef4c:	4601      	mov	r1, r0
 800ef4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef50:	4668      	mov	r0, sp
 800ef52:	4798      	blx	r3
 800ef54:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 800ef58:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	a902      	add	r1, sp, #8
 800ef60:	4668      	mov	r0, sp
 800ef62:	9302      	str	r3, [sp, #8]
 800ef64:	f8ad 600c 	strh.w	r6, [sp, #12]
 800ef68:	f8ad 500e 	strh.w	r5, [sp, #14]
 800ef6c:	f7ff ff4e 	bl	800ee0c <_ZNK8touchgfx4Rect9intersectERKS0_>
 800ef70:	b340      	cbz	r0, 800efc4 <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x80>
 800ef72:	f9bd 2000 	ldrsh.w	r2, [sp]
 800ef76:	f8bd 7004 	ldrh.w	r7, [sp, #4]
 800ef7a:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800ef7e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 800ef82:	443a      	add	r2, r7
 800ef84:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 800ef88:	f8ad 0000 	strh.w	r0, [sp]
 800ef8c:	b292      	uxth	r2, r2
 800ef8e:	f8ad 1002 	strh.w	r1, [sp, #2]
 800ef92:	b217      	sxth	r7, r2
 800ef94:	42be      	cmp	r6, r7
 800ef96:	bfd8      	it	le
 800ef98:	b2b2      	uxthle	r2, r6
 800ef9a:	1a12      	subs	r2, r2, r0
 800ef9c:	f8ad 2004 	strh.w	r2, [sp, #4]
 800efa0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800efa4:	4413      	add	r3, r2
 800efa6:	b29b      	uxth	r3, r3
 800efa8:	b21a      	sxth	r2, r3
 800efaa:	4295      	cmp	r5, r2
 800efac:	bfd8      	it	le
 800efae:	b2ab      	uxthle	r3, r5
 800efb0:	1a5b      	subs	r3, r3, r1
 800efb2:	f8ad 3006 	strh.w	r3, [sp, #6]
 800efb6:	6823      	ldr	r3, [r4, #0]
 800efb8:	4669      	mov	r1, sp
 800efba:	4620      	mov	r0, r4
 800efbc:	691b      	ldr	r3, [r3, #16]
 800efbe:	4798      	blx	r3
 800efc0:	b005      	add	sp, #20
 800efc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efc4:	e9cd 0000 	strd	r0, r0, [sp]
 800efc8:	e7f5      	b.n	800efb6 <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x72>
	...

0800efcc <_ZN8touchgfx12CanvasWidgetC1Ev>:
 800efcc:	2101      	movs	r1, #1
 800efce:	2200      	movs	r2, #0
 800efd0:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 800efd4:	490c      	ldr	r1, [pc, #48]	; (800f008 <_ZN8touchgfx12CanvasWidgetC1Ev+0x3c>)
 800efd6:	8082      	strh	r2, [r0, #4]
 800efd8:	80c2      	strh	r2, [r0, #6]
 800efda:	8102      	strh	r2, [r0, #8]
 800efdc:	8142      	strh	r2, [r0, #10]
 800efde:	8182      	strh	r2, [r0, #12]
 800efe0:	81c2      	strh	r2, [r0, #14]
 800efe2:	8202      	strh	r2, [r0, #16]
 800efe4:	8242      	strh	r2, [r0, #18]
 800efe6:	61c2      	str	r2, [r0, #28]
 800efe8:	8402      	strh	r2, [r0, #32]
 800efea:	8442      	strh	r2, [r0, #34]	; 0x22
 800efec:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 800eff0:	6001      	str	r1, [r0, #0]
 800eff2:	21ff      	movs	r1, #255	; 0xff
 800eff4:	6282      	str	r2, [r0, #40]	; 0x28
 800eff6:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 800effa:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800effe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f002:	8582      	strh	r2, [r0, #44]	; 0x2c
 800f004:	4770      	bx	lr
 800f006:	bf00      	nop
 800f008:	0802841c 	.word	0x0802841c

0800f00c <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
 800f00c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800f00e:	4770      	bx	lr

0800f010 <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
 800f010:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800f012:	4770      	bx	lr

0800f014 <_ZN8touchgfx16DynamicDataGraph14beforeAddValueEv>:
 800f014:	4770      	bx	lr

0800f016 <_ZNK8touchgfx16DynamicDataGraph18indexToGlobalIndexEs>:
 800f016:	4608      	mov	r0, r1
 800f018:	4770      	bx	lr

0800f01a <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 800f01a:	b530      	push	{r4, r5, lr}
 800f01c:	460d      	mov	r5, r1
 800f01e:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 800f020:	8949      	ldrh	r1, [r1, #10]
 800f022:	b085      	sub	sp, #20
 800f024:	4604      	mov	r4, r0
 800f026:	1ac9      	subs	r1, r1, r3
 800f028:	6803      	ldr	r3, [r0, #0]
 800f02a:	f10d 0206 	add.w	r2, sp, #6
 800f02e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800f032:	b209      	sxth	r1, r1
 800f034:	4798      	blx	r3
 800f036:	b1a0      	cbz	r0, 800f062 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 800f038:	792b      	ldrb	r3, [r5, #4]
 800f03a:	b993      	cbnz	r3, 800f062 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 800f03c:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 800f040:	b178      	cbz	r0, 800f062 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 800f042:	6803      	ldr	r3, [r0, #0]
 800f044:	68db      	ldr	r3, [r3, #12]
 800f046:	4798      	blx	r3
 800f048:	b158      	cbz	r0, 800f062 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 800f04a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800f04e:	aa02      	add	r2, sp, #8
 800f050:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 800f054:	4621      	mov	r1, r4
 800f056:	f8ad 3008 	strh.w	r3, [sp, #8]
 800f05a:	9503      	str	r5, [sp, #12]
 800f05c:	6803      	ldr	r3, [r0, #0]
 800f05e:	689b      	ldr	r3, [r3, #8]
 800f060:	4798      	blx	r3
 800f062:	b005      	add	sp, #20
 800f064:	bd30      	pop	{r4, r5, pc}
	...

0800f068 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
 800f068:	b508      	push	{r3, lr}
 800f06a:	b929      	cbnz	r1, 800f078 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib+0x10>
 800f06c:	4b03      	ldr	r3, [pc, #12]	; (800f07c <_ZN8touchgfx17AbstractDataGraph9setScaleXEib+0x14>)
 800f06e:	2171      	movs	r1, #113	; 0x71
 800f070:	4a03      	ldr	r2, [pc, #12]	; (800f080 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib+0x18>)
 800f072:	4804      	ldr	r0, [pc, #16]	; (800f084 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib+0x1c>)
 800f074:	f015 fcc0 	bl	80249f8 <__assert_func>
 800f078:	6301      	str	r1, [r0, #48]	; 0x30
 800f07a:	bd08      	pop	{r3, pc}
 800f07c:	0802852b 	.word	0x0802852b
 800f080:	0802889e 	.word	0x0802889e
 800f084:	08026db0 	.word	0x08026db0

0800f088 <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
 800f088:	b508      	push	{r3, lr}
 800f08a:	b929      	cbnz	r1, 800f098 <_ZN8touchgfx17AbstractDataGraph9setScaleYEib+0x10>
 800f08c:	4b03      	ldr	r3, [pc, #12]	; (800f09c <_ZN8touchgfx17AbstractDataGraph9setScaleYEib+0x14>)
 800f08e:	2193      	movs	r1, #147	; 0x93
 800f090:	4a03      	ldr	r2, [pc, #12]	; (800f0a0 <_ZN8touchgfx17AbstractDataGraph9setScaleYEib+0x18>)
 800f092:	4804      	ldr	r0, [pc, #16]	; (800f0a4 <_ZN8touchgfx17AbstractDataGraph9setScaleYEib+0x1c>)
 800f094:	f015 fcb0 	bl	80249f8 <__assert_func>
 800f098:	6341      	str	r1, [r0, #52]	; 0x34
 800f09a:	bd08      	pop	{r3, pc}
 800f09c:	0802852b 	.word	0x0802852b
 800f0a0:	080288dd 	.word	0x080288dd
 800f0a4:	08026db0 	.word	0x08026db0

0800f0a8 <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	3038      	adds	r0, #56	; 0x38
 800f0ac:	f8a0 30e6 	strh.w	r3, [r0, #230]	; 0xe6
 800f0b0:	f005 bd6a 	b.w	8014b88 <_ZNK8touchgfx8Drawable10invalidateEv>

0800f0b4 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi>:
 800f0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0b8:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 800f0bc:	4605      	mov	r5, r0
 800f0be:	4688      	mov	r8, r1
 800f0c0:	4617      	mov	r7, r2
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d03f      	beq.n	800f146 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x92>
 800f0c6:	6803      	ldr	r3, [r0, #0]
 800f0c8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800f0cc:	4798      	blx	r3
 800f0ce:	682b      	ldr	r3, [r5, #0]
 800f0d0:	4604      	mov	r4, r0
 800f0d2:	4628      	mov	r0, r5
 800f0d4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800f0d8:	4798      	blx	r3
 800f0da:	4284      	cmp	r4, r0
 800f0dc:	f9b5 611e 	ldrsh.w	r6, [r5, #286]	; 0x11e
 800f0e0:	bfc4      	itt	gt
 800f0e2:	b223      	sxthgt	r3, r4
 800f0e4:	4604      	movgt	r4, r0
 800f0e6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800f0ea:	bfc8      	it	gt
 800f0ec:	4618      	movgt	r0, r3
 800f0ee:	42b4      	cmp	r4, r6
 800f0f0:	da29      	bge.n	800f146 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x92>
 800f0f2:	42b0      	cmp	r0, r6
 800f0f4:	bfa8      	it	ge
 800f0f6:	4630      	movge	r0, r6
 800f0f8:	2800      	cmp	r0, #0
 800f0fa:	db24      	blt.n	800f146 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x92>
 800f0fc:	f1b8 0f00 	cmp.w	r8, #0
 800f100:	d11e      	bne.n	800f140 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8c>
 800f102:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
 800f106:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800f10a:	4619      	mov	r1, r3
 800f10c:	b224      	sxth	r4, r4
 800f10e:	42a0      	cmp	r0, r4
 800f110:	dd0b      	ble.n	800f12a <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x76>
 800f112:	f8d5 2144 	ldr.w	r2, [r5, #324]	; 0x144
 800f116:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800f11a:	3401      	adds	r4, #1
 800f11c:	4291      	cmp	r1, r2
 800f11e:	bfa8      	it	ge
 800f120:	4611      	movge	r1, r2
 800f122:	4293      	cmp	r3, r2
 800f124:	bfb8      	it	lt
 800f126:	4613      	movlt	r3, r2
 800f128:	e7f0      	b.n	800f10c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x58>
 800f12a:	1bc9      	subs	r1, r1, r7
 800f12c:	18fa      	adds	r2, r7, r3
 800f12e:	4291      	cmp	r1, r2
 800f130:	d009      	beq.n	800f146 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x92>
 800f132:	682b      	ldr	r3, [r5, #0]
 800f134:	4628      	mov	r0, r5
 800f136:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f13a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f13e:	4718      	bx	r3
 800f140:	427b      	negs	r3, r7
 800f142:	4639      	mov	r1, r7
 800f144:	e7e2      	b.n	800f10c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x58>
 800f146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800f14c <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
 800f14c:	4291      	cmp	r1, r2
 800f14e:	b510      	push	{r4, lr}
 800f150:	4604      	mov	r4, r0
 800f152:	d106      	bne.n	800f162 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x16>
 800f154:	4b12      	ldr	r3, [pc, #72]	; (800f1a0 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x54>)
 800f156:	f240 1111 	movw	r1, #273	; 0x111
 800f15a:	4a12      	ldr	r2, [pc, #72]	; (800f1a4 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x58>)
 800f15c:	4812      	ldr	r0, [pc, #72]	; (800f1a8 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x5c>)
 800f15e:	f015 fc4b 	bl	80249f8 <__assert_func>
 800f162:	bfc2      	ittt	gt
 800f164:	460b      	movgt	r3, r1
 800f166:	4611      	movgt	r1, r2
 800f168:	461a      	movgt	r2, r3
 800f16a:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 800f16e:	428b      	cmp	r3, r1
 800f170:	d103      	bne.n	800f17a <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x2e>
 800f172:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 800f176:	4293      	cmp	r3, r2
 800f178:	d011      	beq.n	800f19e <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x52>
 800f17a:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 800f17e:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 800f182:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
 800f186:	f005 fcff 	bl	8014b88 <_ZNK8touchgfx8Drawable10invalidateEv>
 800f18a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800f18e:	f005 fcfb 	bl	8014b88 <_ZNK8touchgfx8Drawable10invalidateEv>
 800f192:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800f196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f19a:	f005 bcf5 	b.w	8014b88 <_ZNK8touchgfx8Drawable10invalidateEv>
 800f19e:	bd10      	pop	{r4, pc}
 800f1a0:	080284e2 	.word	0x080284e2
 800f1a4:	0802880c 	.word	0x0802880c
 800f1a8:	080284ed 	.word	0x080284ed

0800f1ac <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
 800f1ac:	4291      	cmp	r1, r2
 800f1ae:	b510      	push	{r4, lr}
 800f1b0:	4604      	mov	r4, r0
 800f1b2:	d106      	bne.n	800f1c2 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x16>
 800f1b4:	4b12      	ldr	r3, [pc, #72]	; (800f200 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x54>)
 800f1b6:	f44f 7192 	mov.w	r1, #292	; 0x124
 800f1ba:	4a12      	ldr	r2, [pc, #72]	; (800f204 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x58>)
 800f1bc:	4812      	ldr	r0, [pc, #72]	; (800f208 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x5c>)
 800f1be:	f015 fc1b 	bl	80249f8 <__assert_func>
 800f1c2:	bfc2      	ittt	gt
 800f1c4:	460b      	movgt	r3, r1
 800f1c6:	4611      	movgt	r1, r2
 800f1c8:	461a      	movgt	r2, r3
 800f1ca:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 800f1ce:	428b      	cmp	r3, r1
 800f1d0:	d103      	bne.n	800f1da <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x2e>
 800f1d2:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 800f1d6:	4293      	cmp	r3, r2
 800f1d8:	d011      	beq.n	800f1fe <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x52>
 800f1da:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
 800f1de:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800f1e2:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
 800f1e6:	f005 fccf 	bl	8014b88 <_ZNK8touchgfx8Drawable10invalidateEv>
 800f1ea:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800f1ee:	f005 fccb 	bl	8014b88 <_ZNK8touchgfx8Drawable10invalidateEv>
 800f1f2:	f104 0090 	add.w	r0, r4, #144	; 0x90
 800f1f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1fa:	f005 bcc5 	b.w	8014b88 <_ZNK8touchgfx8Drawable10invalidateEv>
 800f1fe:	bd10      	pop	{r4, pc}
 800f200:	080284e2 	.word	0x080284e2
 800f204:	08028855 	.word	0x08028855
 800f208:	080284ed 	.word	0x080284ed

0800f20c <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 800f20c:	b530      	push	{r4, r5, lr}
 800f20e:	790b      	ldrb	r3, [r1, #4]
 800f210:	b085      	sub	sp, #20
 800f212:	4604      	mov	r4, r0
 800f214:	460d      	mov	r5, r1
 800f216:	2b02      	cmp	r3, #2
 800f218:	d020      	beq.n	800f25c <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800f21a:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 800f21c:	f10d 0206 	add.w	r2, sp, #6
 800f220:	88c9      	ldrh	r1, [r1, #6]
 800f222:	1ac9      	subs	r1, r1, r3
 800f224:	6803      	ldr	r3, [r0, #0]
 800f226:	b209      	sxth	r1, r1
 800f228:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800f22c:	4798      	blx	r3
 800f22e:	b1a8      	cbz	r0, 800f25c <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800f230:	792b      	ldrb	r3, [r5, #4]
 800f232:	2b01      	cmp	r3, #1
 800f234:	d812      	bhi.n	800f25c <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800f236:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 800f23a:	b178      	cbz	r0, 800f25c <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800f23c:	6803      	ldr	r3, [r0, #0]
 800f23e:	68db      	ldr	r3, [r3, #12]
 800f240:	4798      	blx	r3
 800f242:	b158      	cbz	r0, 800f25c <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800f244:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800f248:	aa02      	add	r2, sp, #8
 800f24a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 800f24e:	4621      	mov	r1, r4
 800f250:	f8ad 3008 	strh.w	r3, [sp, #8]
 800f254:	9503      	str	r5, [sp, #12]
 800f256:	6803      	ldr	r3, [r0, #0]
 800f258:	689b      	ldr	r3, [r3, #8]
 800f25a:	4798      	blx	r3
 800f25c:	b005      	add	sp, #20
 800f25e:	bd30      	pop	{r4, r5, pc}

0800f260 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 800f260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f264:	4604      	mov	r4, r0
 800f266:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 800f26a:	4690      	mov	r8, r2
 800f26c:	461f      	mov	r7, r3
 800f26e:	9e06      	ldr	r6, [sp, #24]
 800f270:	b928      	cbnz	r0, 800f27e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 800f272:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f276:	8033      	strh	r3, [r6, #0]
 800f278:	803b      	strh	r3, [r7, #0]
 800f27a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f27e:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 800f282:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	; 0x116
 800f286:	1883      	adds	r3, r0, r2
 800f288:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 800f28c:	1ad2      	subs	r2, r2, r3
 800f28e:	b212      	sxth	r2, r2
 800f290:	2a01      	cmp	r2, #1
 800f292:	dc07      	bgt.n	800f2a4 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 800f294:	2300      	movs	r3, #0
 800f296:	803b      	strh	r3, [r7, #0]
 800f298:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 800f29c:	3b01      	subs	r3, #1
 800f29e:	8033      	strh	r3, [r6, #0]
 800f2a0:	2001      	movs	r0, #1
 800f2a2:	e7ea      	b.n	800f27a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 800f2a4:	1a08      	subs	r0, r1, r0
 800f2a6:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800f2aa:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 800f2ae:	0140      	lsls	r0, r0, #5
 800f2b0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f2b2:	1a5b      	subs	r3, r3, r1
 800f2b4:	d459      	bmi.n	800f36a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
 800f2b6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800f2ba:	fb93 f1f5 	sdiv	r1, r3, r5
 800f2be:	2302      	movs	r3, #2
 800f2c0:	fb91 f1f3 	sdiv	r1, r1, r3
 800f2c4:	3a01      	subs	r2, #1
 800f2c6:	f005 fe4a 	bl	8014f5e <_ZN8touchgfx6muldivElll>
 800f2ca:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 800f2ce:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30
 800f2d2:	2900      	cmp	r1, #0
 800f2d4:	db55      	blt.n	800f382 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
 800f2d6:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
 800f2da:	2502      	movs	r5, #2
 800f2dc:	fb93 f3fc 	sdiv	r3, r3, ip
 800f2e0:	fb93 f3f5 	sdiv	r3, r3, r5
 800f2e4:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 800f2e8:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
 800f2ec:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
 800f2f0:	1a52      	subs	r2, r2, r1
 800f2f2:	eba8 0003 	sub.w	r0, r8, r3
 800f2f6:	ea4f 1040 	mov.w	r0, r0, lsl #5
 800f2fa:	d44e      	bmi.n	800f39a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x13a>
 800f2fc:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800f300:	fb92 f1fc 	sdiv	r1, r2, ip
 800f304:	2202      	movs	r2, #2
 800f306:	fb91 f1f2 	sdiv	r1, r1, r2
 800f30a:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 800f30e:	4413      	add	r3, r2
 800f310:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 800f314:	1ad2      	subs	r2, r2, r3
 800f316:	b212      	sxth	r2, r2
 800f318:	3a01      	subs	r2, #1
 800f31a:	f005 fe20 	bl	8014f5e <_ZN8touchgfx6muldivElll>
 800f31e:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800f322:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f324:	2b00      	cmp	r3, #0
 800f326:	db44      	blt.n	800f3b2 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x152>
 800f328:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800f32c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f330:	2202      	movs	r2, #2
 800f332:	fb93 f3f2 	sdiv	r3, r3, r2
 800f336:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800f33a:	2020      	movs	r0, #32
 800f33c:	429d      	cmp	r5, r3
 800f33e:	bfde      	ittt	le
 800f340:	461a      	movle	r2, r3
 800f342:	462b      	movle	r3, r5
 800f344:	4615      	movle	r5, r2
 800f346:	b21b      	sxth	r3, r3
 800f348:	2d00      	cmp	r5, #0
 800f34a:	bfaa      	itet	ge
 800f34c:	351f      	addge	r5, #31
 800f34e:	fb95 f5f0 	sdivlt	r5, r5, r0
 800f352:	116d      	asrge	r5, r5, #5
 800f354:	fb93 f3f0 	sdiv	r3, r3, r0
 800f358:	b22d      	sxth	r5, r5
 800f35a:	803b      	strh	r3, [r7, #0]
 800f35c:	2d00      	cmp	r5, #0
 800f35e:	8035      	strh	r5, [r6, #0]
 800f360:	da33      	bge.n	800f3ca <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x16a>
 800f362:	2000      	movs	r0, #0
 800f364:	8030      	strh	r0, [r6, #0]
 800f366:	8038      	strh	r0, [r7, #0]
 800f368:	e787      	b.n	800f27a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 800f36a:	f06f 0101 	mvn.w	r1, #1
 800f36e:	fb01 5303 	mla	r3, r1, r3, r5
 800f372:	1e59      	subs	r1, r3, #1
 800f374:	2302      	movs	r3, #2
 800f376:	fb91 f1f5 	sdiv	r1, r1, r5
 800f37a:	fb91 f1f3 	sdiv	r1, r1, r3
 800f37e:	4249      	negs	r1, r1
 800f380:	e7a0      	b.n	800f2c4 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x64>
 800f382:	f06f 0301 	mvn.w	r3, #1
 800f386:	2502      	movs	r5, #2
 800f388:	fb03 c301 	mla	r3, r3, r1, ip
 800f38c:	3b01      	subs	r3, #1
 800f38e:	fb93 f3fc 	sdiv	r3, r3, ip
 800f392:	fb93 f3f5 	sdiv	r3, r3, r5
 800f396:	425b      	negs	r3, r3
 800f398:	e7a4      	b.n	800f2e4 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x84>
 800f39a:	f06f 0101 	mvn.w	r1, #1
 800f39e:	fb01 c202 	mla	r2, r1, r2, ip
 800f3a2:	1e51      	subs	r1, r2, #1
 800f3a4:	2202      	movs	r2, #2
 800f3a6:	fb91 f1fc 	sdiv	r1, r1, ip
 800f3aa:	fb91 f1f2 	sdiv	r1, r1, r2
 800f3ae:	4249      	negs	r1, r1
 800f3b0:	e7ab      	b.n	800f30a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xaa>
 800f3b2:	f06f 0101 	mvn.w	r1, #1
 800f3b6:	fb01 2303 	mla	r3, r1, r3, r2
 800f3ba:	3b01      	subs	r3, #1
 800f3bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800f3c0:	2202      	movs	r2, #2
 800f3c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800f3c6:	425b      	negs	r3, r3
 800f3c8:	e7b5      	b.n	800f336 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd6>
 800f3ca:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800f3ce:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f3d2:	4293      	cmp	r3, r2
 800f3d4:	dc05      	bgt.n	800f3e2 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x182>
 800f3d6:	3b01      	subs	r3, #1
 800f3d8:	2000      	movs	r0, #0
 800f3da:	b21b      	sxth	r3, r3
 800f3dc:	8033      	strh	r3, [r6, #0]
 800f3de:	803b      	strh	r3, [r7, #0]
 800f3e0:	e74b      	b.n	800f27a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 800f3e2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800f3e6:	803a      	strh	r2, [r7, #0]
 800f3e8:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800f3ec:	f9b6 2000 	ldrsh.w	r2, [r6]
 800f3f0:	4293      	cmp	r3, r2
 800f3f2:	bfdc      	itt	le
 800f3f4:	f103 33ff 	addle.w	r3, r3, #4294967295
 800f3f8:	b21a      	sxthle	r2, r3
 800f3fa:	8032      	strh	r2, [r6, #0]
 800f3fc:	e750      	b.n	800f2a0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>
	...

0800f400 <_ZN8touchgfx9ContainerC1Ev>:
 800f400:	2101      	movs	r1, #1
 800f402:	2200      	movs	r2, #0
 800f404:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 800f408:	4909      	ldr	r1, [pc, #36]	; (800f430 <_ZN8touchgfx9ContainerC1Ev+0x30>)
 800f40a:	8082      	strh	r2, [r0, #4]
 800f40c:	80c2      	strh	r2, [r0, #6]
 800f40e:	8102      	strh	r2, [r0, #8]
 800f410:	8142      	strh	r2, [r0, #10]
 800f412:	8182      	strh	r2, [r0, #12]
 800f414:	81c2      	strh	r2, [r0, #14]
 800f416:	8202      	strh	r2, [r0, #16]
 800f418:	8242      	strh	r2, [r0, #18]
 800f41a:	61c2      	str	r2, [r0, #28]
 800f41c:	8402      	strh	r2, [r0, #32]
 800f41e:	8442      	strh	r2, [r0, #34]	; 0x22
 800f420:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 800f424:	6001      	str	r1, [r0, #0]
 800f426:	6282      	str	r2, [r0, #40]	; 0x28
 800f428:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800f42c:	4770      	bx	lr
 800f42e:	bf00      	nop
 800f430:	08027af8 	.word	0x08027af8

0800f434 <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
 800f434:	6800      	ldr	r0, [r0, #0]
 800f436:	2800      	cmp	r0, #0
 800f438:	bfbd      	ittte	lt
 800f43a:	380f      	sublt	r0, #15
 800f43c:	2320      	movlt	r3, #32
 800f43e:	fb90 f0f3 	sdivlt	r0, r0, r3
 800f442:	3010      	addge	r0, #16
 800f444:	bfa8      	it	ge
 800f446:	1140      	asrge	r0, r0, #5
 800f448:	4770      	bx	lr

0800f44a <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 800f44a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f44e:	4605      	mov	r5, r0
 800f450:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 800f454:	4688      	mov	r8, r1
 800f456:	4691      	mov	r9, r2
 800f458:	469a      	mov	sl, r3
 800f45a:	b360      	cbz	r0, 800f4b6 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
 800f45c:	2700      	movs	r7, #0
 800f45e:	f04f 3bff 	mov.w	fp, #4294967295
 800f462:	b23e      	sxth	r6, r7
 800f464:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	; 0x11e
 800f468:	42b3      	cmp	r3, r6
 800f46a:	dd23      	ble.n	800f4b4 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
 800f46c:	682b      	ldr	r3, [r5, #0]
 800f46e:	4631      	mov	r1, r6
 800f470:	4628      	mov	r0, r5
 800f472:	3701      	adds	r7, #1
 800f474:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800f478:	4798      	blx	r3
 800f47a:	9001      	str	r0, [sp, #4]
 800f47c:	a801      	add	r0, sp, #4
 800f47e:	f7ff ffd9 	bl	800f434 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f482:	682b      	ldr	r3, [r5, #0]
 800f484:	eba0 0008 	sub.w	r0, r0, r8
 800f488:	4631      	mov	r1, r6
 800f48a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800f48e:	b204      	sxth	r4, r0
 800f490:	4628      	mov	r0, r5
 800f492:	4798      	blx	r3
 800f494:	9001      	str	r0, [sp, #4]
 800f496:	a801      	add	r0, sp, #4
 800f498:	f7ff ffcc 	bl	800f434 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f49c:	eba0 0009 	sub.w	r0, r0, r9
 800f4a0:	fb10 f000 	smulbb	r0, r0, r0
 800f4a4:	fb04 0404 	mla	r4, r4, r4, r0
 800f4a8:	455c      	cmp	r4, fp
 800f4aa:	bf3c      	itt	cc
 800f4ac:	f8aa 6000 	strhcc.w	r6, [sl]
 800f4b0:	46a3      	movcc	fp, r4
 800f4b2:	e7d6      	b.n	800f462 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 800f4b4:	2001      	movs	r0, #1
 800f4b6:	b003      	add	sp, #12
 800f4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f4bc <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 800f4bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f4c0:	4604      	mov	r4, r0
 800f4c2:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 800f4c6:	4688      	mov	r8, r1
 800f4c8:	4691      	mov	r9, r2
 800f4ca:	b1f8      	cbz	r0, 800f50c <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x50>
 800f4cc:	2500      	movs	r5, #0
 800f4ce:	f04f 37ff 	mov.w	r7, #4294967295
 800f4d2:	b22e      	sxth	r6, r5
 800f4d4:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800f4d8:	42b3      	cmp	r3, r6
 800f4da:	dd16      	ble.n	800f50a <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x4e>
 800f4dc:	6823      	ldr	r3, [r4, #0]
 800f4de:	4631      	mov	r1, r6
 800f4e0:	4620      	mov	r0, r4
 800f4e2:	3501      	adds	r5, #1
 800f4e4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800f4e8:	4798      	blx	r3
 800f4ea:	9001      	str	r0, [sp, #4]
 800f4ec:	a801      	add	r0, sp, #4
 800f4ee:	f7ff ffa1 	bl	800f434 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f4f2:	b200      	sxth	r0, r0
 800f4f4:	eba0 0008 	sub.w	r0, r0, r8
 800f4f8:	2800      	cmp	r0, #0
 800f4fa:	bfb8      	it	lt
 800f4fc:	4240      	neglt	r0, r0
 800f4fe:	42b8      	cmp	r0, r7
 800f500:	bf3c      	itt	cc
 800f502:	f8a9 6000 	strhcc.w	r6, [r9]
 800f506:	4607      	movcc	r7, r0
 800f508:	e7e3      	b.n	800f4d2 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x16>
 800f50a:	2001      	movs	r0, #1
 800f50c:	b003      	add	sp, #12
 800f50e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800f512 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 800f512:	f8a0 3118 	strh.w	r3, [r0, #280]	; 0x118
 800f516:	f9bd 3000 	ldrsh.w	r3, [sp]
 800f51a:	f8a0 1114 	strh.w	r1, [r0, #276]	; 0x114
 800f51e:	f8a0 2116 	strh.w	r2, [r0, #278]	; 0x116
 800f522:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
 800f526:	4770      	bx	lr

0800f528 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 800f528:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f52a:	4604      	mov	r4, r0
 800f52c:	3038      	adds	r0, #56	; 0x38
 800f52e:	460d      	mov	r5, r1
 800f530:	f7fe f8ae 	bl	800d690 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800f534:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 800f538:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800f53c:	4628      	mov	r0, r5
 800f53e:	9200      	str	r2, [sp, #0]
 800f540:	2200      	movs	r2, #0
 800f542:	4611      	mov	r1, r2
 800f544:	f7f4 fa19 	bl	800397a <_ZN8touchgfx8Drawable11setPositionEssss>
 800f548:	b003      	add	sp, #12
 800f54a:	bd30      	pop	{r4, r5, pc}

0800f54c <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>:
 800f54c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f54e:	4604      	mov	r4, r0
 800f550:	3064      	adds	r0, #100	; 0x64
 800f552:	460d      	mov	r5, r1
 800f554:	f7fe f89c 	bl	800d690 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800f558:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
 800f55c:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 800f560:	4628      	mov	r0, r5
 800f562:	9200      	str	r2, [sp, #0]
 800f564:	2200      	movs	r2, #0
 800f566:	4611      	mov	r1, r2
 800f568:	f7f4 fa07 	bl	800397a <_ZN8touchgfx8Drawable11setPositionEssss>
 800f56c:	b003      	add	sp, #12
 800f56e:	bd30      	pop	{r4, r5, pc}

0800f570 <_ZN8touchgfx17AbstractDataGraph16addBottomElementERNS_23AbstractGraphDecorationE>:
 800f570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f572:	4604      	mov	r4, r0
 800f574:	30e8      	adds	r0, #232	; 0xe8
 800f576:	460d      	mov	r5, r1
 800f578:	f7fe f88a 	bl	800d690 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800f57c:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
 800f580:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	; 0xf0
 800f584:	4628      	mov	r0, r5
 800f586:	9200      	str	r2, [sp, #0]
 800f588:	2200      	movs	r2, #0
 800f58a:	4611      	mov	r1, r2
 800f58c:	f7f4 f9f5 	bl	800397a <_ZN8touchgfx8Drawable11setPositionEssss>
 800f590:	b003      	add	sp, #12
 800f592:	bd30      	pop	{r4, r5, pc}

0800f594 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 800f594:	b538      	push	{r3, r4, r5, lr}
 800f596:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 800f59a:	460d      	mov	r5, r1
 800f59c:	428b      	cmp	r3, r1
 800f59e:	dd08      	ble.n	800f5b2 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 800f5a0:	6e04      	ldr	r4, [r0, #96]	; 0x60
 800f5a2:	b134      	cbz	r4, 800f5b2 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 800f5a4:	6823      	ldr	r3, [r4, #0]
 800f5a6:	4620      	mov	r0, r4
 800f5a8:	4629      	mov	r1, r5
 800f5aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f5ac:	4798      	blx	r3
 800f5ae:	69a4      	ldr	r4, [r4, #24]
 800f5b0:	e7f7      	b.n	800f5a2 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 800f5b2:	bd38      	pop	{r3, r4, r5, pc}

0800f5b4 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
 800f5b4:	b570      	push	{r4, r5, r6, lr}
 800f5b6:	4606      	mov	r6, r0
 800f5b8:	460d      	mov	r5, r1
 800f5ba:	f8d0 40e4 	ldr.w	r4, [r0, #228]	; 0xe4
 800f5be:	b134      	cbz	r4, 800f5ce <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
 800f5c0:	6823      	ldr	r3, [r4, #0]
 800f5c2:	4620      	mov	r0, r4
 800f5c4:	4629      	mov	r1, r5
 800f5c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f5c8:	4798      	blx	r3
 800f5ca:	69a4      	ldr	r4, [r4, #24]
 800f5cc:	e7f7      	b.n	800f5be <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
 800f5ce:	f8d6 4110 	ldr.w	r4, [r6, #272]	; 0x110
 800f5d2:	b134      	cbz	r4, 800f5e2 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
 800f5d4:	6823      	ldr	r3, [r4, #0]
 800f5d6:	4620      	mov	r0, r4
 800f5d8:	4629      	mov	r1, r5
 800f5da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f5dc:	4798      	blx	r3
 800f5de:	69a4      	ldr	r4, [r4, #24]
 800f5e0:	e7f7      	b.n	800f5d2 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
 800f5e2:	bd70      	pop	{r4, r5, r6, pc}

0800f5e4 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>:
 800f5e4:	b538      	push	{r3, r4, r5, lr}
 800f5e6:	4604      	mov	r4, r0
 800f5e8:	2500      	movs	r5, #0
 800f5ea:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800f5ee:	42ab      	cmp	r3, r5
 800f5f0:	db05      	blt.n	800f5fe <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x1a>
 800f5f2:	b229      	sxth	r1, r5
 800f5f4:	4620      	mov	r0, r4
 800f5f6:	f7ff ffdd 	bl	800f5b4 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 800f5fa:	3501      	adds	r5, #1
 800f5fc:	e7f5      	b.n	800f5ea <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x6>
 800f5fe:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 800f602:	f005 fac1 	bl	8014b88 <_ZNK8touchgfx8Drawable10invalidateEv>
 800f606:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800f60a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f60e:	f005 babb 	b.w	8014b88 <_ZNK8touchgfx8Drawable10invalidateEv>

0800f612 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 800f612:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f614:	4604      	mov	r4, r0
 800f616:	6e05      	ldr	r5, [r0, #96]	; 0x60
 800f618:	b15d      	cbz	r5, 800f632 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 800f61a:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 800f61e:	4628      	mov	r0, r5
 800f620:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800f624:	9200      	str	r2, [sp, #0]
 800f626:	2200      	movs	r2, #0
 800f628:	4611      	mov	r1, r2
 800f62a:	f7f4 f9a6 	bl	800397a <_ZN8touchgfx8Drawable11setPositionEssss>
 800f62e:	69ad      	ldr	r5, [r5, #24]
 800f630:	e7f2      	b.n	800f618 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 800f632:	f8d4 50e4 	ldr.w	r5, [r4, #228]	; 0xe4
 800f636:	b15d      	cbz	r5, 800f650 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 800f638:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	; 0xc6
 800f63c:	4628      	mov	r0, r5
 800f63e:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	; 0xc4
 800f642:	9200      	str	r2, [sp, #0]
 800f644:	2200      	movs	r2, #0
 800f646:	4611      	mov	r1, r2
 800f648:	f7f4 f997 	bl	800397a <_ZN8touchgfx8Drawable11setPositionEssss>
 800f64c:	69ad      	ldr	r5, [r5, #24]
 800f64e:	e7f2      	b.n	800f636 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 800f650:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
 800f654:	b15d      	cbz	r5, 800f66e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 800f656:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
 800f65a:	4628      	mov	r0, r5
 800f65c:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 800f660:	9200      	str	r2, [sp, #0]
 800f662:	2200      	movs	r2, #0
 800f664:	4611      	mov	r1, r2
 800f666:	f7f4 f988 	bl	800397a <_ZN8touchgfx8Drawable11setPositionEssss>
 800f66a:	69ad      	ldr	r5, [r5, #24]
 800f66c:	e7f2      	b.n	800f654 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 800f66e:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800f672:	b15d      	cbz	r5, 800f68c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 800f674:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 800f678:	4628      	mov	r0, r5
 800f67a:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	; 0x98
 800f67e:	9200      	str	r2, [sp, #0]
 800f680:	2200      	movs	r2, #0
 800f682:	4611      	mov	r1, r2
 800f684:	f7f4 f979 	bl	800397a <_ZN8touchgfx8Drawable11setPositionEssss>
 800f688:	69ad      	ldr	r5, [r5, #24]
 800f68a:	e7f2      	b.n	800f672 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 800f68c:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 800f690:	b15d      	cbz	r5, 800f6aa <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 800f692:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
 800f696:	4628      	mov	r0, r5
 800f698:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	; 0xf0
 800f69c:	9200      	str	r2, [sp, #0]
 800f69e:	2200      	movs	r2, #0
 800f6a0:	4611      	mov	r1, r2
 800f6a2:	f7f4 f96a 	bl	800397a <_ZN8touchgfx8Drawable11setPositionEssss>
 800f6a6:	69ad      	ldr	r5, [r5, #24]
 800f6a8:	e7f2      	b.n	800f690 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 800f6aa:	6823      	ldr	r3, [r4, #0]
 800f6ac:	4620      	mov	r0, r4
 800f6ae:	695b      	ldr	r3, [r3, #20]
 800f6b0:	b003      	add	sp, #12
 800f6b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f6b6:	4718      	bx	r3

0800f6b8 <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 800f6b8:	b430      	push	{r4, r5}
 800f6ba:	b28a      	uxth	r2, r1
 800f6bc:	f8b0 4098 	ldrh.w	r4, [r0, #152]	; 0x98
 800f6c0:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
 800f6c4:	1b15      	subs	r5, r2, r4
 800f6c6:	f8a0 10f0 	strh.w	r1, [r0, #240]	; 0xf0
 800f6ca:	8101      	strh	r1, [r0, #8]
 800f6cc:	f8a0 5094 	strh.w	r5, [r0, #148]	; 0x94
 800f6d0:	f8b0 506c 	ldrh.w	r5, [r0, #108]	; 0x6c
 800f6d4:	442c      	add	r4, r5
 800f6d6:	1b12      	subs	r2, r2, r4
 800f6d8:	bc30      	pop	{r4, r5}
 800f6da:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800f6de:	f7ff bf98 	b.w	800f612 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

0800f6e2 <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 800f6e2:	b430      	push	{r4, r5}
 800f6e4:	b28a      	uxth	r2, r1
 800f6e6:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	; 0xf2
 800f6ea:	f8a0 106e 	strh.w	r1, [r0, #110]	; 0x6e
 800f6ee:	1b15      	subs	r5, r2, r4
 800f6f0:	f8a0 109a 	strh.w	r1, [r0, #154]	; 0x9a
 800f6f4:	8141      	strh	r1, [r0, #10]
 800f6f6:	f8a0 50ee 	strh.w	r5, [r0, #238]	; 0xee
 800f6fa:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	; 0xc6
 800f6fe:	442c      	add	r4, r5
 800f700:	1b12      	subs	r2, r2, r4
 800f702:	bc30      	pop	{r4, r5}
 800f704:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
 800f708:	f7ff bf83 	b.w	800f612 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

0800f70c <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 800f70c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800f710:	fa1f fa83 	uxth.w	sl, r3
 800f714:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 800f718:	4615      	mov	r5, r2
 800f71a:	4699      	mov	r9, r3
 800f71c:	fa1f f887 	uxth.w	r8, r7
 800f720:	8903      	ldrh	r3, [r0, #8]
 800f722:	4452      	add	r2, sl
 800f724:	4604      	mov	r4, r0
 800f726:	8940      	ldrh	r0, [r0, #10]
 800f728:	460e      	mov	r6, r1
 800f72a:	1a9b      	subs	r3, r3, r2
 800f72c:	eb08 0201 	add.w	r2, r8, r1
 800f730:	1a80      	subs	r0, r0, r2
 800f732:	b21b      	sxth	r3, r3
 800f734:	460a      	mov	r2, r1
 800f736:	4629      	mov	r1, r5
 800f738:	b200      	sxth	r0, r0
 800f73a:	9000      	str	r0, [sp, #0]
 800f73c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800f740:	f7f4 f91b 	bl	800397a <_ZN8touchgfx8Drawable11setPositionEssss>
 800f744:	2200      	movs	r2, #0
 800f746:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800f74a:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 800f74e:	4611      	mov	r1, r2
 800f750:	9600      	str	r6, [sp, #0]
 800f752:	f7f4 f912 	bl	800397a <_ZN8touchgfx8Drawable11setPositionEssss>
 800f756:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800f75a:	2200      	movs	r2, #0
 800f75c:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800f760:	9300      	str	r3, [sp, #0]
 800f762:	462b      	mov	r3, r5
 800f764:	4611      	mov	r1, r2
 800f766:	f7f4 f908 	bl	800397a <_ZN8touchgfx8Drawable11setPositionEssss>
 800f76a:	8921      	ldrh	r1, [r4, #8]
 800f76c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800f770:	f104 0090 	add.w	r0, r4, #144	; 0x90
 800f774:	eba1 010a 	sub.w	r1, r1, sl
 800f778:	2200      	movs	r2, #0
 800f77a:	9300      	str	r3, [sp, #0]
 800f77c:	464b      	mov	r3, r9
 800f77e:	b209      	sxth	r1, r1
 800f780:	f7f4 f8fb 	bl	800397a <_ZN8touchgfx8Drawable11setPositionEssss>
 800f784:	8962      	ldrh	r2, [r4, #10]
 800f786:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800f78a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800f78e:	eba2 0208 	sub.w	r2, r2, r8
 800f792:	9700      	str	r7, [sp, #0]
 800f794:	2100      	movs	r1, #0
 800f796:	b212      	sxth	r2, r2
 800f798:	f7f4 f8ef 	bl	800397a <_ZN8touchgfx8Drawable11setPositionEssss>
 800f79c:	4620      	mov	r0, r4
 800f79e:	b002      	add	sp, #8
 800f7a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7a4:	f7ff bf35 	b.w	800f612 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

0800f7a8 <_ZN8touchgfx17AbstractDataGraphC1Es>:
 800f7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ac:	b085      	sub	sp, #20
 800f7ae:	4604      	mov	r4, r0
 800f7b0:	2601      	movs	r6, #1
 800f7b2:	2500      	movs	r5, #0
 800f7b4:	9103      	str	r1, [sp, #12]
 800f7b6:	f7ff fe23 	bl	800f400 <_ZN8touchgfx9ContainerC1Ev>
 800f7ba:	4b30      	ldr	r3, [pc, #192]	; (800f87c <_ZN8touchgfx17AbstractDataGraphC1Es+0xd4>)
 800f7bc:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 800f7c0:	f104 0964 	add.w	r9, r4, #100	; 0x64
 800f7c4:	f104 0890 	add.w	r8, r4, #144	; 0x90
 800f7c8:	6023      	str	r3, [r4, #0]
 800f7ca:	23ff      	movs	r3, #255	; 0xff
 800f7cc:	4658      	mov	r0, fp
 800f7ce:	f104 0abc 	add.w	sl, r4, #188	; 0xbc
 800f7d2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800f7d6:	f104 07e8 	add.w	r7, r4, #232	; 0xe8
 800f7da:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 800f7de:	f7ff fe0f 	bl	800f400 <_ZN8touchgfx9ContainerC1Ev>
 800f7e2:	4648      	mov	r0, r9
 800f7e4:	f7ff fe0c 	bl	800f400 <_ZN8touchgfx9ContainerC1Ev>
 800f7e8:	4640      	mov	r0, r8
 800f7ea:	f7ff fe09 	bl	800f400 <_ZN8touchgfx9ContainerC1Ev>
 800f7ee:	4650      	mov	r0, sl
 800f7f0:	f7ff fe06 	bl	800f400 <_ZN8touchgfx9ContainerC1Ev>
 800f7f4:	4638      	mov	r0, r7
 800f7f6:	f7ff fe03 	bl	800f400 <_ZN8touchgfx9ContainerC1Ev>
 800f7fa:	9903      	ldr	r1, [sp, #12]
 800f7fc:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 800f800:	42a9      	cmp	r1, r5
 800f802:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
 800f806:	f8a4 111c 	strh.w	r1, [r4, #284]	; 0x11c
 800f80a:	f8a4 511e 	strh.w	r5, [r4, #286]	; 0x11e
 800f80e:	f8a4 5120 	strh.w	r5, [r4, #288]	; 0x120
 800f812:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 800f816:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
 800f81a:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 800f81e:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 800f822:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 800f826:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
 800f82a:	dc05      	bgt.n	800f838 <_ZN8touchgfx17AbstractDataGraphC1Es+0x90>
 800f82c:	4b14      	ldr	r3, [pc, #80]	; (800f880 <_ZN8touchgfx17AbstractDataGraphC1Es+0xd8>)
 800f82e:	211d      	movs	r1, #29
 800f830:	4a14      	ldr	r2, [pc, #80]	; (800f884 <_ZN8touchgfx17AbstractDataGraphC1Es+0xdc>)
 800f832:	4815      	ldr	r0, [pc, #84]	; (800f888 <_ZN8touchgfx17AbstractDataGraphC1Es+0xe0>)
 800f834:	f015 f8e0 	bl	80249f8 <__assert_func>
 800f838:	4659      	mov	r1, fp
 800f83a:	4620      	mov	r0, r4
 800f83c:	f7fd ff28 	bl	800d690 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800f840:	4651      	mov	r1, sl
 800f842:	4620      	mov	r0, r4
 800f844:	f7fd ff24 	bl	800d690 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800f848:	4649      	mov	r1, r9
 800f84a:	4620      	mov	r0, r4
 800f84c:	f7fd ff20 	bl	800d690 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800f850:	4641      	mov	r1, r8
 800f852:	4620      	mov	r0, r4
 800f854:	f7fd ff1c 	bl	800d690 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800f858:	4639      	mov	r1, r7
 800f85a:	4620      	mov	r0, r4
 800f85c:	f7fd ff18 	bl	800d690 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800f860:	4620      	mov	r0, r4
 800f862:	9500      	str	r5, [sp, #0]
 800f864:	462b      	mov	r3, r5
 800f866:	462a      	mov	r2, r5
 800f868:	4629      	mov	r1, r5
 800f86a:	f7ff ff4f 	bl	800f70c <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 800f86e:	4620      	mov	r0, r4
 800f870:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 800f874:	b005      	add	sp, #20
 800f876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f87a:	bf00      	nop
 800f87c:	080286e4 	.word	0x080286e4
 800f880:	08028536 	.word	0x08028536
 800f884:	0802891c 	.word	0x0802891c
 800f888:	080284ed 	.word	0x080284ed

0800f88c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
 800f88c:	4291      	cmp	r1, r2
 800f88e:	4613      	mov	r3, r2
 800f890:	d003      	beq.n	800f89a <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
 800f892:	460a      	mov	r2, r1
 800f894:	4619      	mov	r1, r3
 800f896:	f005 bb62 	b.w	8014f5e <_ZN8touchgfx6muldivElll>
 800f89a:	4770      	bx	lr

0800f89c <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>:
 800f89c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8a0:	6803      	ldr	r3, [r0, #0]
 800f8a2:	460d      	mov	r5, r1
 800f8a4:	4604      	mov	r4, r0
 800f8a6:	4617      	mov	r7, r2
 800f8a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f8ac:	4798      	blx	r3
 800f8ae:	42a8      	cmp	r0, r5
 800f8b0:	4606      	mov	r6, r0
 800f8b2:	d028      	beq.n	800f906 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib+0x6a>
 800f8b4:	6823      	ldr	r3, [r4, #0]
 800f8b6:	4601      	mov	r1, r0
 800f8b8:	462a      	mov	r2, r5
 800f8ba:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 800f8be:	f8d3 80a4 	ldr.w	r8, [r3, #164]	; 0xa4
 800f8c2:	f7ff ffe3 	bl	800f88c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800f8c6:	4681      	mov	r9, r0
 800f8c8:	462a      	mov	r2, r5
 800f8ca:	4631      	mov	r1, r6
 800f8cc:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 800f8d0:	f7ff ffdc 	bl	800f88c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800f8d4:	4649      	mov	r1, r9
 800f8d6:	4602      	mov	r2, r0
 800f8d8:	4620      	mov	r0, r4
 800f8da:	47c0      	blx	r8
 800f8dc:	462a      	mov	r2, r5
 800f8de:	4631      	mov	r1, r6
 800f8e0:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 800f8e4:	f7ff ffd2 	bl	800f88c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800f8e8:	462a      	mov	r2, r5
 800f8ea:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
 800f8ee:	4631      	mov	r1, r6
 800f8f0:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 800f8f4:	f7ff ffca 	bl	800f88c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800f8f8:	463a      	mov	r2, r7
 800f8fa:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
 800f8fe:	4629      	mov	r1, r5
 800f900:	4620      	mov	r0, r4
 800f902:	f7ff fbb1 	bl	800f068 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>
 800f906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f90a <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>:
 800f90a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f90e:	4604      	mov	r4, r0
 800f910:	460f      	mov	r7, r1
 800f912:	b1b2      	cbz	r2, 800f942 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 800f914:	6803      	ldr	r3, [r0, #0]
 800f916:	2600      	movs	r6, #0
 800f918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f91c:	4798      	blx	r3
 800f91e:	4681      	mov	r9, r0
 800f920:	b235      	sxth	r5, r6
 800f922:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800f926:	3601      	adds	r6, #1
 800f928:	42ab      	cmp	r3, r5
 800f92a:	dd0a      	ble.n	800f942 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 800f92c:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144
 800f930:	463a      	mov	r2, r7
 800f932:	4649      	mov	r1, r9
 800f934:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 800f938:	f7ff ffa8 	bl	800f88c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800f93c:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 800f940:	e7ee      	b.n	800f920 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x16>
 800f942:	2200      	movs	r2, #0
 800f944:	4639      	mov	r1, r7
 800f946:	4620      	mov	r0, r4
 800f948:	f7ff fb9e 	bl	800f088 <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>
 800f94c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f950 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>:
 800f950:	b570      	push	{r4, r5, r6, lr}
 800f952:	6803      	ldr	r3, [r0, #0]
 800f954:	4604      	mov	r4, r0
 800f956:	460d      	mov	r5, r1
 800f958:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800f95c:	4798      	blx	r3
 800f95e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800f962:	4629      	mov	r1, r5
 800f964:	4620      	mov	r0, r4
 800f966:	3301      	adds	r3, #1
 800f968:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 800f96c:	6823      	ldr	r3, [r4, #0]
 800f96e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f972:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800f976:	4718      	bx	r3

0800f978 <_ZN8touchgfx16GraphElementLineD1Ev>:
 800f978:	4770      	bx	lr

0800f97a <_ZN8touchgfx16GraphElementLineD0Ev>:
 800f97a:	b510      	push	{r4, lr}
 800f97c:	4604      	mov	r4, r0
 800f97e:	2130      	movs	r1, #48	; 0x30
 800f980:	f015 f80b 	bl	802499a <_ZdlPvj>
 800f984:	4620      	mov	r0, r4
 800f986:	bd10      	pop	{r4, pc}

0800f988 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800f988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f98a:	4604      	mov	r4, r0
 800f98c:	4608      	mov	r0, r1
 800f98e:	460d      	mov	r5, r1
 800f990:	f7fe f803 	bl	800d99a <_ZNK8touchgfx4Rect7isEmptyEv>
 800f994:	b978      	cbnz	r0, 800f9b6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800f996:	4620      	mov	r0, r4
 800f998:	f7fd ffff 	bl	800d99a <_ZNK8touchgfx4Rect7isEmptyEv>
 800f99c:	f9b5 6000 	ldrsh.w	r6, [r5]
 800f9a0:	b150      	cbz	r0, 800f9b8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800f9a2:	8026      	strh	r6, [r4, #0]
 800f9a4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800f9a8:	8063      	strh	r3, [r4, #2]
 800f9aa:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800f9ae:	80a3      	strh	r3, [r4, #4]
 800f9b0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800f9b4:	80e3      	strh	r3, [r4, #6]
 800f9b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9b8:	f9b4 1000 	ldrsh.w	r1, [r4]
 800f9bc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800f9c0:	42b1      	cmp	r1, r6
 800f9c2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800f9c6:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800f9ca:	460f      	mov	r7, r1
 800f9cc:	88ed      	ldrh	r5, [r5, #6]
 800f9ce:	bfa8      	it	ge
 800f9d0:	4637      	movge	r7, r6
 800f9d2:	4293      	cmp	r3, r2
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	4466      	add	r6, ip
 800f9d8:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800f9dc:	bfa8      	it	ge
 800f9de:	4610      	movge	r0, r2
 800f9e0:	442a      	add	r2, r5
 800f9e2:	88e5      	ldrh	r5, [r4, #6]
 800f9e4:	4461      	add	r1, ip
 800f9e6:	b236      	sxth	r6, r6
 800f9e8:	8027      	strh	r7, [r4, #0]
 800f9ea:	442b      	add	r3, r5
 800f9ec:	b209      	sxth	r1, r1
 800f9ee:	b212      	sxth	r2, r2
 800f9f0:	8060      	strh	r0, [r4, #2]
 800f9f2:	b21b      	sxth	r3, r3
 800f9f4:	428e      	cmp	r6, r1
 800f9f6:	bfac      	ite	ge
 800f9f8:	ebc7 0106 	rsbge	r1, r7, r6
 800f9fc:	ebc7 0101 	rsblt	r1, r7, r1
 800fa00:	429a      	cmp	r2, r3
 800fa02:	bfac      	ite	ge
 800fa04:	ebc0 0202 	rsbge	r2, r0, r2
 800fa08:	ebc0 0203 	rsblt	r2, r0, r3
 800fa0c:	80a1      	strh	r1, [r4, #4]
 800fa0e:	80e2      	strh	r2, [r4, #6]
 800fa10:	e7d1      	b.n	800f9b6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

0800fa12 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 800fa12:	6800      	ldr	r0, [r0, #0]
 800fa14:	2800      	cmp	r0, #0
 800fa16:	bfb9      	ittee	lt
 800fa18:	2320      	movlt	r3, #32
 800fa1a:	fb90 f0f3 	sdivlt	r0, r0, r3
 800fa1e:	301f      	addge	r0, #31
 800fa20:	1140      	asrge	r0, r0, #5
 800fa22:	4770      	bx	lr

0800fa24 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE>:
 800fa24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa28:	6803      	ldr	r3, [r0, #0]
 800fa2a:	b093      	sub	sp, #76	; 0x4c
 800fa2c:	6945      	ldr	r5, [r0, #20]
 800fa2e:	4604      	mov	r4, r0
 800fa30:	460f      	mov	r7, r1
 800fa32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa34:	2d00      	cmp	r5, #0
 800fa36:	f000 81ad 	beq.w	800fd94 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x370>
 800fa3a:	696d      	ldr	r5, [r5, #20]
 800fa3c:	4798      	blx	r3
 800fa3e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d077      	beq.n	800fb36 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800fa46:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800fa4a:	fb13 f000 	smulbb	r0, r3, r0
 800fa4e:	b283      	uxth	r3, r0
 800fa50:	1c58      	adds	r0, r3, #1
 800fa52:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 800fa56:	1200      	asrs	r0, r0, #8
 800fa58:	d06d      	beq.n	800fb36 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800fa5a:	b2c3      	uxtb	r3, r0
 800fa5c:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 800fa60:	462a      	mov	r2, r5
 800fa62:	4621      	mov	r1, r4
 800fa64:	9308      	str	r3, [sp, #32]
 800fa66:	4640      	mov	r0, r8
 800fa68:	6823      	ldr	r3, [r4, #0]
 800fa6a:	ae0e      	add	r6, sp, #56	; 0x38
 800fa6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa70:	4798      	blx	r3
 800fa72:	e898 0003 	ldmia.w	r8, {r0, r1}
 800fa76:	e886 0003 	stmia.w	r6, {r0, r1}
 800fa7a:	4639      	mov	r1, r7
 800fa7c:	4630      	mov	r0, r6
 800fa7e:	f7fd ff49 	bl	800d914 <_ZN8touchgfx4RectaNERKS0_>
 800fa82:	6823      	ldr	r3, [r4, #0]
 800fa84:	4629      	mov	r1, r5
 800fa86:	4620      	mov	r0, r4
 800fa88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa8c:	4798      	blx	r3
 800fa8e:	6823      	ldr	r3, [r4, #0]
 800fa90:	4607      	mov	r7, r0
 800fa92:	4629      	mov	r1, r5
 800fa94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa98:	4620      	mov	r0, r4
 800fa9a:	4798      	blx	r3
 800fa9c:	4681      	mov	r9, r0
 800fa9e:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 800faa2:	4629      	mov	r1, r5
 800faa4:	0103      	lsls	r3, r0, #4
 800faa6:	4620      	mov	r0, r4
 800faa8:	9309      	str	r3, [sp, #36]	; 0x24
 800faaa:	6823      	ldr	r3, [r4, #0]
 800faac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fab0:	4798      	blx	r3
 800fab2:	4629      	mov	r1, r5
 800fab4:	b203      	sxth	r3, r0
 800fab6:	4620      	mov	r0, r4
 800fab8:	9306      	str	r3, [sp, #24]
 800faba:	6823      	ldr	r3, [r4, #0]
 800fabc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fac0:	4798      	blx	r3
 800fac2:	2f00      	cmp	r7, #0
 800fac4:	b203      	sxth	r3, r0
 800fac6:	9307      	str	r3, [sp, #28]
 800fac8:	d138      	bne.n	800fb3c <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x118>
 800faca:	f1b9 0f00 	cmp.w	r9, #0
 800face:	d132      	bne.n	800fb36 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800fad0:	6823      	ldr	r3, [r4, #0]
 800fad2:	464a      	mov	r2, r9
 800fad4:	4629      	mov	r1, r5
 800fad6:	4620      	mov	r0, r4
 800fad8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800fadc:	4798      	blx	r3
 800fade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fae0:	1ac0      	subs	r0, r0, r3
 800fae2:	9010      	str	r0, [sp, #64]	; 0x40
 800fae4:	4640      	mov	r0, r8
 800fae6:	f7ff fca5 	bl	800f434 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800faea:	6823      	ldr	r3, [r4, #0]
 800faec:	4607      	mov	r7, r0
 800faee:	4629      	mov	r1, r5
 800faf0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800faf4:	4620      	mov	r0, r4
 800faf6:	4798      	blx	r3
 800faf8:	1a38      	subs	r0, r7, r0
 800fafa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800fafe:	fa0f f880 	sxth.w	r8, r0
 800fb02:	eb13 0f08 	cmn.w	r3, r8
 800fb06:	d416      	bmi.n	800fb36 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800fb08:	6823      	ldr	r3, [r4, #0]
 800fb0a:	4629      	mov	r1, r5
 800fb0c:	4620      	mov	r0, r4
 800fb0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800fb12:	4798      	blx	r3
 800fb14:	4580      	cmp	r8, r0
 800fb16:	da0e      	bge.n	800fb36 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800fb18:	9a08      	ldr	r2, [sp, #32]
 800fb1a:	b23f      	sxth	r7, r7
 800fb1c:	6823      	ldr	r3, [r4, #0]
 800fb1e:	4631      	mov	r1, r6
 800fb20:	9202      	str	r2, [sp, #8]
 800fb22:	4620      	mov	r0, r4
 800fb24:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 800fb28:	9700      	str	r7, [sp, #0]
 800fb2a:	9201      	str	r2, [sp, #4]
 800fb2c:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c
 800fb30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fb34:	47a8      	blx	r5
 800fb36:	b013      	add	sp, #76	; 0x4c
 800fb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb3c:	ddfb      	ble.n	800fb36 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800fb3e:	6823      	ldr	r3, [r4, #0]
 800fb40:	4629      	mov	r1, r5
 800fb42:	4620      	mov	r0, r4
 800fb44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fb48:	4798      	blx	r3
 800fb4a:	6823      	ldr	r3, [r4, #0]
 800fb4c:	4683      	mov	fp, r0
 800fb4e:	4629      	mov	r1, r5
 800fb50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fb54:	4620      	mov	r0, r4
 800fb56:	4798      	blx	r3
 800fb58:	eba0 030b 	sub.w	r3, r0, fp
 800fb5c:	4680      	mov	r8, r0
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	bfb8      	it	lt
 800fb62:	425b      	neglt	r3, r3
 800fb64:	fb93 f3f7 	sdiv	r3, r3, r7
 800fb68:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800fb6c:	dce3      	bgt.n	800fb36 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800fb6e:	6823      	ldr	r3, [r4, #0]
 800fb70:	465a      	mov	r2, fp
 800fb72:	4629      	mov	r1, r5
 800fb74:	4620      	mov	r0, r4
 800fb76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800fb7a:	4798      	blx	r3
 800fb7c:	6823      	ldr	r3, [r4, #0]
 800fb7e:	4606      	mov	r6, r0
 800fb80:	4642      	mov	r2, r8
 800fb82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800fb86:	4629      	mov	r1, r5
 800fb88:	4620      	mov	r0, r4
 800fb8a:	4798      	blx	r3
 800fb8c:	42b0      	cmp	r0, r6
 800fb8e:	bfa2      	ittt	ge
 800fb90:	4643      	movge	r3, r8
 800fb92:	46d8      	movge	r8, fp
 800fb94:	469b      	movge	fp, r3
 800fb96:	fb98 f6f7 	sdiv	r6, r8, r7
 800fb9a:	fb9b f2f7 	sdiv	r2, fp, r7
 800fb9e:	45d8      	cmp	r8, fp
 800fba0:	bfac      	ite	ge
 800fba2:	f04f 33ff 	movge.w	r3, #4294967295
 800fba6:	2301      	movlt	r3, #1
 800fba8:	1af6      	subs	r6, r6, r3
 800fbaa:	441a      	add	r2, r3
 800fbac:	4296      	cmp	r6, r2
 800fbae:	bfac      	ite	ge
 800fbb0:	f04f 3aff 	movge.w	sl, #4294967295
 800fbb4:	f04f 0a01 	movlt.w	sl, #1
 800fbb8:	f1b9 0f00 	cmp.w	r9, #0
 800fbbc:	d13e      	bne.n	800fc3c <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x218>
 800fbbe:	fb07 fb0a 	mul.w	fp, r7, sl
 800fbc2:	eb0a 0802 	add.w	r8, sl, r2
 800fbc6:	4377      	muls	r7, r6
 800fbc8:	45b0      	cmp	r8, r6
 800fbca:	d0b4      	beq.n	800fb36 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800fbcc:	6823      	ldr	r3, [r4, #0]
 800fbce:	463a      	mov	r2, r7
 800fbd0:	4629      	mov	r1, r5
 800fbd2:	4620      	mov	r0, r4
 800fbd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800fbd8:	4798      	blx	r3
 800fbda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbdc:	1ac0      	subs	r0, r0, r3
 800fbde:	9010      	str	r0, [sp, #64]	; 0x40
 800fbe0:	a810      	add	r0, sp, #64	; 0x40
 800fbe2:	f7ff fc27 	bl	800f434 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800fbe6:	6823      	ldr	r3, [r4, #0]
 800fbe8:	4681      	mov	r9, r0
 800fbea:	4629      	mov	r1, r5
 800fbec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800fbf0:	4620      	mov	r0, r4
 800fbf2:	4798      	blx	r3
 800fbf4:	eba9 0000 	sub.w	r0, r9, r0
 800fbf8:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 800fbfc:	b203      	sxth	r3, r0
 800fbfe:	42da      	cmn	r2, r3
 800fc00:	9304      	str	r3, [sp, #16]
 800fc02:	d418      	bmi.n	800fc36 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 800fc04:	6822      	ldr	r2, [r4, #0]
 800fc06:	4629      	mov	r1, r5
 800fc08:	4620      	mov	r0, r4
 800fc0a:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 800fc0e:	4790      	blx	r2
 800fc10:	9b04      	ldr	r3, [sp, #16]
 800fc12:	4283      	cmp	r3, r0
 800fc14:	da0f      	bge.n	800fc36 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 800fc16:	9b08      	ldr	r3, [sp, #32]
 800fc18:	a90e      	add	r1, sp, #56	; 0x38
 800fc1a:	6822      	ldr	r2, [r4, #0]
 800fc1c:	4620      	mov	r0, r4
 800fc1e:	9302      	str	r3, [sp, #8]
 800fc20:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800fc24:	9301      	str	r3, [sp, #4]
 800fc26:	fa0f f389 	sxth.w	r3, r9
 800fc2a:	9300      	str	r3, [sp, #0]
 800fc2c:	f8d2 908c 	ldr.w	r9, [r2, #140]	; 0x8c
 800fc30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fc34:	47c8      	blx	r9
 800fc36:	4456      	add	r6, sl
 800fc38:	445f      	add	r7, fp
 800fc3a:	e7c5      	b.n	800fbc8 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x1a4>
 800fc3c:	fb98 f8f9 	sdiv	r8, r8, r9
 800fc40:	eba8 0203 	sub.w	r2, r8, r3
 800fc44:	4629      	mov	r1, r5
 800fc46:	4620      	mov	r0, r4
 800fc48:	9204      	str	r2, [sp, #16]
 800fc4a:	fb9b f8f9 	sdiv	r8, fp, r9
 800fc4e:	4498      	add	r8, r3
 800fc50:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 800fc54:	4542      	cmp	r2, r8
 800fc56:	bfac      	ite	ge
 800fc58:	f04f 33ff 	movge.w	r3, #4294967295
 800fc5c:	2301      	movlt	r3, #1
 800fc5e:	fb02 f209 	mul.w	r2, r2, r9
 800fc62:	930a      	str	r3, [sp, #40]	; 0x28
 800fc64:	6823      	ldr	r3, [r4, #0]
 800fc66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800fc6a:	4798      	blx	r3
 800fc6c:	f84b 0d08 	str.w	r0, [fp, #-8]!
 800fc70:	4658      	mov	r0, fp
 800fc72:	f7ff fbdf 	bl	800f434 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800fc76:	fb06 f207 	mul.w	r2, r6, r7
 800fc7a:	b203      	sxth	r3, r0
 800fc7c:	4629      	mov	r1, r5
 800fc7e:	4620      	mov	r0, r4
 800fc80:	9305      	str	r3, [sp, #20]
 800fc82:	6823      	ldr	r3, [r4, #0]
 800fc84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800fc88:	4798      	blx	r3
 800fc8a:	9010      	str	r0, [sp, #64]	; 0x40
 800fc8c:	4658      	mov	r0, fp
 800fc8e:	f7ff fbd1 	bl	800f434 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800fc92:	fb07 f20a 	mul.w	r2, r7, sl
 800fc96:	b203      	sxth	r3, r0
 800fc98:	920b      	str	r2, [sp, #44]	; 0x2c
 800fc9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fc9c:	4442      	add	r2, r8
 800fc9e:	920c      	str	r2, [sp, #48]	; 0x30
 800fca0:	9a05      	ldr	r2, [sp, #20]
 800fca2:	429a      	cmp	r2, r3
 800fca4:	dc16      	bgt.n	800fcd4 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x2b0>
 800fca6:	eb06 080a 	add.w	r8, r6, sl
 800fcaa:	fb07 f808 	mul.w	r8, r7, r8
 800fcae:	9a05      	ldr	r2, [sp, #20]
 800fcb0:	429a      	cmp	r2, r3
 800fcb2:	db54      	blt.n	800fd5e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x33a>
 800fcb4:	6823      	ldr	r3, [r4, #0]
 800fcb6:	4642      	mov	r2, r8
 800fcb8:	4629      	mov	r1, r5
 800fcba:	4620      	mov	r0, r4
 800fcbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800fcc0:	4456      	add	r6, sl
 800fcc2:	4798      	blx	r3
 800fcc4:	9010      	str	r0, [sp, #64]	; 0x40
 800fcc6:	4658      	mov	r0, fp
 800fcc8:	f7ff fbb4 	bl	800f434 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800fccc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fcce:	b203      	sxth	r3, r0
 800fcd0:	4490      	add	r8, r2
 800fcd2:	e7ec      	b.n	800fcae <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x28a>
 800fcd4:	6823      	ldr	r3, [r4, #0]
 800fcd6:	fb07 f206 	mul.w	r2, r7, r6
 800fcda:	4629      	mov	r1, r5
 800fcdc:	4620      	mov	r0, r4
 800fcde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800fce2:	4798      	blx	r3
 800fce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fce6:	1ac0      	subs	r0, r0, r3
 800fce8:	9010      	str	r0, [sp, #64]	; 0x40
 800fcea:	4658      	mov	r0, fp
 800fcec:	f7ff fba2 	bl	800f434 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800fcf0:	6823      	ldr	r3, [r4, #0]
 800fcf2:	4680      	mov	r8, r0
 800fcf4:	4629      	mov	r1, r5
 800fcf6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800fcfa:	4620      	mov	r0, r4
 800fcfc:	4798      	blx	r3
 800fcfe:	eba8 0000 	sub.w	r0, r8, r0
 800fd02:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 800fd06:	b203      	sxth	r3, r0
 800fd08:	42da      	cmn	r2, r3
 800fd0a:	930d      	str	r3, [sp, #52]	; 0x34
 800fd0c:	d418      	bmi.n	800fd40 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 800fd0e:	6822      	ldr	r2, [r4, #0]
 800fd10:	4629      	mov	r1, r5
 800fd12:	4620      	mov	r0, r4
 800fd14:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 800fd18:	4790      	blx	r2
 800fd1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd1c:	4283      	cmp	r3, r0
 800fd1e:	da0f      	bge.n	800fd40 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 800fd20:	9b08      	ldr	r3, [sp, #32]
 800fd22:	a90e      	add	r1, sp, #56	; 0x38
 800fd24:	6822      	ldr	r2, [r4, #0]
 800fd26:	4620      	mov	r0, r4
 800fd28:	9302      	str	r3, [sp, #8]
 800fd2a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800fd2e:	9301      	str	r3, [sp, #4]
 800fd30:	fa0f f388 	sxth.w	r3, r8
 800fd34:	9300      	str	r3, [sp, #0]
 800fd36:	f8d2 808c 	ldr.w	r8, [r2, #140]	; 0x8c
 800fd3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fd3e:	47c0      	blx	r8
 800fd40:	6823      	ldr	r3, [r4, #0]
 800fd42:	4456      	add	r6, sl
 800fd44:	4629      	mov	r1, r5
 800fd46:	4620      	mov	r0, r4
 800fd48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800fd4c:	fb06 f207 	mul.w	r2, r6, r7
 800fd50:	4798      	blx	r3
 800fd52:	9010      	str	r0, [sp, #64]	; 0x40
 800fd54:	4658      	mov	r0, fp
 800fd56:	f7ff fb6d 	bl	800f434 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800fd5a:	b203      	sxth	r3, r0
 800fd5c:	e7a0      	b.n	800fca0 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 800fd5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd60:	930d      	str	r3, [sp, #52]	; 0x34
 800fd62:	9b04      	ldr	r3, [sp, #16]
 800fd64:	4413      	add	r3, r2
 800fd66:	9304      	str	r3, [sp, #16]
 800fd68:	9a04      	ldr	r2, [sp, #16]
 800fd6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd6c:	4293      	cmp	r3, r2
 800fd6e:	f43f aee2 	beq.w	800fb36 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800fd72:	9b04      	ldr	r3, [sp, #16]
 800fd74:	4629      	mov	r1, r5
 800fd76:	6822      	ldr	r2, [r4, #0]
 800fd78:	4620      	mov	r0, r4
 800fd7a:	f8d2 80b0 	ldr.w	r8, [r2, #176]	; 0xb0
 800fd7e:	fb03 f209 	mul.w	r2, r3, r9
 800fd82:	47c0      	blx	r8
 800fd84:	9010      	str	r0, [sp, #64]	; 0x40
 800fd86:	4658      	mov	r0, fp
 800fd88:	f7ff fb54 	bl	800f434 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800fd8c:	b203      	sxth	r3, r0
 800fd8e:	9305      	str	r3, [sp, #20]
 800fd90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd92:	e785      	b.n	800fca0 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 800fd94:	4798      	blx	r3
 800fd96:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800fd9a:	deff      	udf	#255	; 0xff

0800fd9c <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 800fd9c:	b510      	push	{r4, lr}
 800fd9e:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 800fda2:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 800fda6:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 800fdaa:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 800fdae:	139b      	asrs	r3, r3, #14
 800fdb0:	13a4      	asrs	r4, r4, #14
 800fdb2:	429c      	cmp	r4, r3
 800fdb4:	bfb8      	it	lt
 800fdb6:	461c      	movlt	r4, r3
 800fdb8:	2c01      	cmp	r4, #1
 800fdba:	dd07      	ble.n	800fdcc <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 800fdbc:	fb91 f1f4 	sdiv	r1, r1, r4
 800fdc0:	fb90 f0f4 	sdiv	r0, r0, r4
 800fdc4:	f7ff ffea 	bl	800fd9c <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 800fdc8:	4360      	muls	r0, r4
 800fdca:	bd10      	pop	{r4, pc}
 800fdcc:	4340      	muls	r0, r0
 800fdce:	fb01 0101 	mla	r1, r1, r1, r0
 800fdd2:	2000      	movs	r0, #0
 800fdd4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800fdd8:	bfb4      	ite	lt
 800fdda:	f44f 4380 	movlt.w	r3, #16384	; 0x4000
 800fdde:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 800fde2:	18c2      	adds	r2, r0, r3
 800fde4:	428a      	cmp	r2, r1
 800fde6:	bf9c      	itt	ls
 800fde8:	1898      	addls	r0, r3, r2
 800fdea:	1a89      	subls	r1, r1, r2
 800fdec:	089b      	lsrs	r3, r3, #2
 800fdee:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800fdf2:	d1f6      	bne.n	800fde2 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
 800fdf4:	e7e9      	b.n	800fdca <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

0800fdf6 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 800fdf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdf8:	9906      	ldr	r1, [sp, #24]
 800fdfa:	4606      	mov	r6, r0
 800fdfc:	461c      	mov	r4, r3
 800fdfe:	2020      	movs	r0, #32
 800fe00:	4291      	cmp	r1, r2
 800fe02:	bfbc      	itt	lt
 800fe04:	9206      	strlt	r2, [sp, #24]
 800fe06:	460a      	movlt	r2, r1
 800fe08:	9907      	ldr	r1, [sp, #28]
 800fe0a:	428b      	cmp	r3, r1
 800fe0c:	bfc4      	itt	gt
 800fe0e:	460c      	movgt	r4, r1
 800fe10:	9307      	strgt	r3, [sp, #28]
 800fe12:	fb92 f5f0 	sdiv	r5, r2, r0
 800fe16:	fb94 f4f0 	sdiv	r4, r4, r0
 800fe1a:	a806      	add	r0, sp, #24
 800fe1c:	f7ff fdf9 	bl	800fa12 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 800fe20:	4607      	mov	r7, r0
 800fe22:	a807      	add	r0, sp, #28
 800fe24:	f7ff fdf5 	bl	800fa12 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 800fe28:	1b7a      	subs	r2, r7, r5
 800fe2a:	1b00      	subs	r0, r0, r4
 800fe2c:	8035      	strh	r5, [r6, #0]
 800fe2e:	8074      	strh	r4, [r6, #2]
 800fe30:	80f0      	strh	r0, [r6, #6]
 800fe32:	4630      	mov	r0, r6
 800fe34:	80b2      	strh	r2, [r6, #4]
 800fe36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fe38 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 800fe38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe3a:	9c08      	ldr	r4, [sp, #32]
 800fe3c:	2602      	movs	r6, #2
 800fe3e:	4605      	mov	r5, r0
 800fe40:	3401      	adds	r4, #1
 800fe42:	fb94 f4f6 	sdiv	r4, r4, r6
 800fe46:	18a6      	adds	r6, r4, r2
 800fe48:	191f      	adds	r7, r3, r4
 800fe4a:	1b12      	subs	r2, r2, r4
 800fe4c:	1b1b      	subs	r3, r3, r4
 800fe4e:	e9cd 6700 	strd	r6, r7, [sp]
 800fe52:	f7ff ffd0 	bl	800fdf6 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 800fe56:	4628      	mov	r0, r5
 800fe58:	b003      	add	sp, #12
 800fe5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fe5c <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 800fe5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe60:	6943      	ldr	r3, [r0, #20]
 800fe62:	b089      	sub	sp, #36	; 0x24
 800fe64:	4680      	mov	r8, r0
 800fe66:	460d      	mov	r5, r1
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	f000 8082 	beq.w	800ff72 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x116>
 800fe6e:	695c      	ldr	r4, [r3, #20]
 800fe70:	af02      	add	r7, sp, #8
 800fe72:	f890 902e 	ldrb.w	r9, [r0, #46]	; 0x2e
 800fe76:	6823      	ldr	r3, [r4, #0]
 800fe78:	4620      	mov	r0, r4
 800fe7a:	ea4f 1949 	mov.w	r9, r9, lsl #5
 800fe7e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800fe82:	4798      	blx	r3
 800fe84:	6823      	ldr	r3, [r4, #0]
 800fe86:	4606      	mov	r6, r0
 800fe88:	4629      	mov	r1, r5
 800fe8a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800fe8e:	4620      	mov	r0, r4
 800fe90:	4798      	blx	r3
 800fe92:	4632      	mov	r2, r6
 800fe94:	4603      	mov	r3, r0
 800fe96:	f8cd 9000 	str.w	r9, [sp]
 800fe9a:	4641      	mov	r1, r8
 800fe9c:	4638      	mov	r0, r7
 800fe9e:	f7ff ffcb 	bl	800fe38 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 800fea2:	2d00      	cmp	r5, #0
 800fea4:	ae06      	add	r6, sp, #24
 800fea6:	dd1c      	ble.n	800fee2 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x86>
 800fea8:	f105 3aff 	add.w	sl, r5, #4294967295
 800feac:	6823      	ldr	r3, [r4, #0]
 800feae:	4620      	mov	r0, r4
 800feb0:	fa0f fa8a 	sxth.w	sl, sl
 800feb4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800feb8:	4651      	mov	r1, sl
 800feba:	4798      	blx	r3
 800febc:	6823      	ldr	r3, [r4, #0]
 800febe:	4683      	mov	fp, r0
 800fec0:	4651      	mov	r1, sl
 800fec2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800fec6:	4620      	mov	r0, r4
 800fec8:	4798      	blx	r3
 800feca:	4641      	mov	r1, r8
 800fecc:	4603      	mov	r3, r0
 800fece:	f8cd 9000 	str.w	r9, [sp]
 800fed2:	4630      	mov	r0, r6
 800fed4:	465a      	mov	r2, fp
 800fed6:	f7ff ffaf 	bl	800fe38 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 800feda:	4631      	mov	r1, r6
 800fedc:	4638      	mov	r0, r7
 800fede:	f7ff fd53 	bl	800f988 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800fee2:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800fee6:	3b01      	subs	r3, #1
 800fee8:	429d      	cmp	r5, r3
 800feea:	da1a      	bge.n	800ff22 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xc6>
 800feec:	3501      	adds	r5, #1
 800feee:	6823      	ldr	r3, [r4, #0]
 800fef0:	4620      	mov	r0, r4
 800fef2:	b22d      	sxth	r5, r5
 800fef4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800fef8:	4629      	mov	r1, r5
 800fefa:	4798      	blx	r3
 800fefc:	6823      	ldr	r3, [r4, #0]
 800fefe:	4682      	mov	sl, r0
 800ff00:	4629      	mov	r1, r5
 800ff02:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800ff06:	4620      	mov	r0, r4
 800ff08:	4798      	blx	r3
 800ff0a:	4641      	mov	r1, r8
 800ff0c:	4603      	mov	r3, r0
 800ff0e:	f8cd 9000 	str.w	r9, [sp]
 800ff12:	4630      	mov	r0, r6
 800ff14:	4652      	mov	r2, sl
 800ff16:	f7ff ff8f 	bl	800fe38 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 800ff1a:	4631      	mov	r1, r6
 800ff1c:	4638      	mov	r0, r7
 800ff1e:	f7ff fd33 	bl	800f988 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800ff22:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
 800ff26:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 800ff2a:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 800ff2e:	18ca      	adds	r2, r1, r3
 800ff30:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800ff34:	f8ad 1012 	strh.w	r1, [sp, #18]
 800ff38:	f8ad 0014 	strh.w	r0, [sp, #20]
 800ff3c:	1a9b      	subs	r3, r3, r2
 800ff3e:	2200      	movs	r2, #0
 800ff40:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ff44:	f8ad 2010 	strh.w	r2, [sp, #16]
 800ff48:	e897 0003 	ldmia.w	r7, {r0, r1}
 800ff4c:	e886 0003 	stmia.w	r6, {r0, r1}
 800ff50:	a904      	add	r1, sp, #16
 800ff52:	4630      	mov	r0, r6
 800ff54:	f7fd fcde 	bl	800d914 <_ZN8touchgfx4RectaNERKS0_>
 800ff58:	f8d8 3000 	ldr.w	r3, [r8]
 800ff5c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ff60:	691b      	ldr	r3, [r3, #16]
 800ff62:	e887 0003 	stmia.w	r7, {r0, r1}
 800ff66:	4639      	mov	r1, r7
 800ff68:	4640      	mov	r0, r8
 800ff6a:	4798      	blx	r3
 800ff6c:	b009      	add	sp, #36	; 0x24
 800ff6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	deff      	udf	#255	; 0xff

0800ff76 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>:
 800ff76:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	da05      	bge.n	800ff8a <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x14>
 800ff7e:	b29b      	uxth	r3, r3
 800ff80:	880a      	ldrh	r2, [r1, #0]
 800ff82:	441a      	add	r2, r3
 800ff84:	425b      	negs	r3, r3
 800ff86:	800a      	strh	r2, [r1, #0]
 800ff88:	808b      	strh	r3, [r1, #4]
 800ff8a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	da05      	bge.n	800ff9e <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x28>
 800ff92:	b29b      	uxth	r3, r3
 800ff94:	884a      	ldrh	r2, [r1, #2]
 800ff96:	441a      	add	r2, r3
 800ff98:	425b      	negs	r3, r3
 800ff9a:	804a      	strh	r2, [r1, #2]
 800ff9c:	80cb      	strh	r3, [r1, #6]
 800ff9e:	4770      	bx	lr

0800ffa0 <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh>:
 800ffa0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ffa2:	4604      	mov	r4, r0
 800ffa4:	460d      	mov	r5, r1
 800ffa6:	6801      	ldr	r1, [r0, #0]
 800ffa8:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 800ffac:	9001      	str	r0, [sp, #4]
 800ffae:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 800ffb2:	9000      	str	r0, [sp, #0]
 800ffb4:	a802      	add	r0, sp, #8
 800ffb6:	f8d1 6094 	ldr.w	r6, [r1, #148]	; 0x94
 800ffba:	4621      	mov	r1, r4
 800ffbc:	47b0      	blx	r6
 800ffbe:	a902      	add	r1, sp, #8
 800ffc0:	4620      	mov	r0, r4
 800ffc2:	f7ff ffd8 	bl	800ff76 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>
 800ffc6:	a802      	add	r0, sp, #8
 800ffc8:	4629      	mov	r1, r5
 800ffca:	f7fd fca3 	bl	800d914 <_ZN8touchgfx4RectaNERKS0_>
 800ffce:	a802      	add	r0, sp, #8
 800ffd0:	f7fd fce3 	bl	800d99a <_ZNK8touchgfx4Rect7isEmptyEv>
 800ffd4:	b968      	cbnz	r0, 800fff2 <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh+0x52>
 800ffd6:	6823      	ldr	r3, [r4, #0]
 800ffd8:	a902      	add	r1, sp, #8
 800ffda:	4620      	mov	r0, r4
 800ffdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffde:	4798      	blx	r3
 800ffe0:	f7fd ff66 	bl	800deb0 <_ZN8touchgfx3HAL3lcdEv>
 800ffe4:	6803      	ldr	r3, [r0, #0]
 800ffe6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ffe8:	a902      	add	r1, sp, #8
 800ffea:	6a1d      	ldr	r5, [r3, #32]
 800ffec:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800fff0:	47a8      	blx	r5
 800fff2:	b004      	add	sp, #16
 800fff4:	bd70      	pop	{r4, r5, r6, pc}

0800fff6 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 800fff6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fffa:	b08b      	sub	sp, #44	; 0x2c
 800fffc:	461e      	mov	r6, r3
 800fffe:	4689      	mov	r9, r1
 8010000:	4615      	mov	r5, r2
 8010002:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 8010006:	429e      	cmp	r6, r3
 8010008:	9304      	str	r3, [sp, #16]
 801000a:	d072      	beq.n	80100f2 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
 801000c:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8010010:	4631      	mov	r1, r6
 8010012:	4610      	mov	r0, r2
 8010014:	4634      	mov	r4, r6
 8010016:	015b      	lsls	r3, r3, #5
 8010018:	9303      	str	r3, [sp, #12]
 801001a:	6813      	ldr	r3, [r2, #0]
 801001c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8010020:	4798      	blx	r3
 8010022:	ab0a      	add	r3, sp, #40	; 0x28
 8010024:	f843 0d10 	str.w	r0, [r3, #-16]!
 8010028:	4618      	mov	r0, r3
 801002a:	f7ff fa03 	bl	800f434 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801002e:	682b      	ldr	r3, [r5, #0]
 8010030:	4631      	mov	r1, r6
 8010032:	0147      	lsls	r7, r0, #5
 8010034:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8010038:	4628      	mov	r0, r5
 801003a:	4798      	blx	r3
 801003c:	ab0a      	add	r3, sp, #40	; 0x28
 801003e:	f843 0d0c 	str.w	r0, [r3, #-12]!
 8010042:	4618      	mov	r0, r3
 8010044:	f7ff f9f6 	bl	800f434 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8010048:	4639      	mov	r1, r7
 801004a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801004e:	4648      	mov	r0, r9
 8010050:	4642      	mov	r2, r8
 8010052:	f013 fa80 	bl	8023556 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8010056:	2301      	movs	r3, #1
 8010058:	9300      	str	r3, [sp, #0]
 801005a:	4628      	mov	r0, r5
 801005c:	9b00      	ldr	r3, [sp, #0]
 801005e:	441c      	add	r4, r3
 8010060:	682b      	ldr	r3, [r5, #0]
 8010062:	b224      	sxth	r4, r4
 8010064:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8010068:	4621      	mov	r1, r4
 801006a:	4798      	blx	r3
 801006c:	9008      	str	r0, [sp, #32]
 801006e:	a808      	add	r0, sp, #32
 8010070:	f7ff f9e0 	bl	800f434 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8010074:	4621      	mov	r1, r4
 8010076:	0143      	lsls	r3, r0, #5
 8010078:	4628      	mov	r0, r5
 801007a:	9301      	str	r3, [sp, #4]
 801007c:	682b      	ldr	r3, [r5, #0]
 801007e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8010082:	4798      	blx	r3
 8010084:	9009      	str	r0, [sp, #36]	; 0x24
 8010086:	a809      	add	r0, sp, #36	; 0x24
 8010088:	f7ff f9d4 	bl	800f434 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801008c:	0143      	lsls	r3, r0, #5
 801008e:	9302      	str	r3, [sp, #8]
 8010090:	9b01      	ldr	r3, [sp, #4]
 8010092:	eba3 0b07 	sub.w	fp, r3, r7
 8010096:	9b02      	ldr	r3, [sp, #8]
 8010098:	eba3 0a08 	sub.w	sl, r3, r8
 801009c:	4658      	mov	r0, fp
 801009e:	4651      	mov	r1, sl
 80100a0:	f7ff fe7c 	bl	800fd9c <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 80100a4:	b318      	cbz	r0, 80100ee <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xf8>
 80100a6:	4602      	mov	r2, r0
 80100a8:	4651      	mov	r1, sl
 80100aa:	9005      	str	r0, [sp, #20]
 80100ac:	9803      	ldr	r0, [sp, #12]
 80100ae:	f004 ff56 	bl	8014f5e <_ZN8touchgfx6muldivElll>
 80100b2:	2302      	movs	r3, #2
 80100b4:	4659      	mov	r1, fp
 80100b6:	fb90 faf3 	sdiv	sl, r0, r3
 80100ba:	9b05      	ldr	r3, [sp, #20]
 80100bc:	9803      	ldr	r0, [sp, #12]
 80100be:	461a      	mov	r2, r3
 80100c0:	f004 ff4d 	bl	8014f5e <_ZN8touchgfx6muldivElll>
 80100c4:	2302      	movs	r3, #2
 80100c6:	eba7 010a 	sub.w	r1, r7, sl
 80100ca:	fb90 fbf3 	sdiv	fp, r0, r3
 80100ce:	4648      	mov	r0, r9
 80100d0:	eb0b 0208 	add.w	r2, fp, r8
 80100d4:	f013 f9ce 	bl	8023474 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80100d8:	9b02      	ldr	r3, [sp, #8]
 80100da:	4648      	mov	r0, r9
 80100dc:	eb03 020b 	add.w	r2, r3, fp
 80100e0:	9b01      	ldr	r3, [sp, #4]
 80100e2:	eba3 010a 	sub.w	r1, r3, sl
 80100e6:	f013 f9c5 	bl	8023474 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80100ea:	e9dd 7801 	ldrd	r7, r8, [sp, #4]
 80100ee:	42a6      	cmp	r6, r4
 80100f0:	db02      	blt.n	80100f8 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x102>
 80100f2:	b00b      	add	sp, #44	; 0x2c
 80100f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100f8:	9b00      	ldr	r3, [sp, #0]
 80100fa:	9a04      	ldr	r2, [sp, #16]
 80100fc:	42a2      	cmp	r2, r4
 80100fe:	bf08      	it	eq
 8010100:	f04f 33ff 	moveq.w	r3, #4294967295
 8010104:	e7a8      	b.n	8010058 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x62>

08010106 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 8010106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801010a:	6943      	ldr	r3, [r0, #20]
 801010c:	b0b4      	sub	sp, #208	; 0xd0
 801010e:	4606      	mov	r6, r0
 8010110:	460f      	mov	r7, r1
 8010112:	2b00      	cmp	r3, #0
 8010114:	d06a      	beq.n	80101ec <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xe6>
 8010116:	695c      	ldr	r4, [r3, #20]
 8010118:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 801011c:	2b01      	cmp	r3, #1
 801011e:	dc04      	bgt.n	801012a <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
 8010120:	2401      	movs	r4, #1
 8010122:	4620      	mov	r0, r4
 8010124:	b034      	add	sp, #208	; 0xd0
 8010126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801012a:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 801012e:	ad34      	add	r5, sp, #208	; 0xd0
 8010130:	011b      	lsls	r3, r3, #4
 8010132:	f845 3dbc 	str.w	r3, [r5, #-188]!
 8010136:	4628      	mov	r0, r5
 8010138:	f7ff fc6b 	bl	800fa12 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801013c:	8839      	ldrh	r1, [r7, #0]
 801013e:	88ba      	ldrh	r2, [r7, #4]
 8010140:	b280      	uxth	r0, r0
 8010142:	6823      	ldr	r3, [r4, #0]
 8010144:	440a      	add	r2, r1
 8010146:	1a09      	subs	r1, r1, r0
 8010148:	4402      	add	r2, r0
 801014a:	f10d 000a 	add.w	r0, sp, #10
 801014e:	b209      	sxth	r1, r1
 8010150:	9000      	str	r0, [sp, #0]
 8010152:	b212      	sxth	r2, r2
 8010154:	f8d3 8124 	ldr.w	r8, [r3, #292]	; 0x124
 8010158:	4620      	mov	r0, r4
 801015a:	ab02      	add	r3, sp, #8
 801015c:	47c0      	blx	r8
 801015e:	2800      	cmp	r0, #0
 8010160:	d0de      	beq.n	8010120 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 8010162:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
 8010166:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 801016a:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 801016e:	18ca      	adds	r2, r1, r3
 8010170:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8010174:	f8ad 100e 	strh.w	r1, [sp, #14]
 8010178:	4639      	mov	r1, r7
 801017a:	1a9b      	subs	r3, r3, r2
 801017c:	2200      	movs	r2, #0
 801017e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8010182:	a803      	add	r0, sp, #12
 8010184:	f8ad 3012 	strh.w	r3, [sp, #18]
 8010188:	f8ad 200c 	strh.w	r2, [sp, #12]
 801018c:	f7fd fbc2 	bl	800d914 <_ZN8touchgfx4RectaNERKS0_>
 8010190:	aa03      	add	r2, sp, #12
 8010192:	4631      	mov	r1, r6
 8010194:	4628      	mov	r0, r5
 8010196:	f013 f813 	bl	80231c0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 801019a:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	; 0x120
 801019e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80101a2:	2f00      	cmp	r7, #0
 80101a4:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80101a8:	dd03      	ble.n	80101b2 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 80101aa:	42bb      	cmp	r3, r7
 80101ac:	da01      	bge.n	80101b2 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 80101ae:	42ba      	cmp	r2, r7
 80101b0:	da0f      	bge.n	80101d2 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xcc>
 80101b2:	9200      	str	r2, [sp, #0]
 80101b4:	4622      	mov	r2, r4
 80101b6:	4629      	mov	r1, r5
 80101b8:	4630      	mov	r0, r6
 80101ba:	f7ff ff1c 	bl	800fff6 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 80101be:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80101c2:	4628      	mov	r0, r5
 80101c4:	f013 facb 	bl	802375e <_ZN8touchgfx6Canvas6renderEh>
 80101c8:	4604      	mov	r4, r0
 80101ca:	4628      	mov	r0, r5
 80101cc:	f013 fb06 	bl	80237dc <_ZN8touchgfx6CanvasD1Ev>
 80101d0:	e7a7      	b.n	8010122 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
 80101d2:	1e7a      	subs	r2, r7, #1
 80101d4:	4629      	mov	r1, r5
 80101d6:	4630      	mov	r0, r6
 80101d8:	b212      	sxth	r2, r2
 80101da:	9200      	str	r2, [sp, #0]
 80101dc:	4622      	mov	r2, r4
 80101de:	f7ff ff0a 	bl	800fff6 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 80101e2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80101e6:	9300      	str	r3, [sp, #0]
 80101e8:	463b      	mov	r3, r7
 80101ea:	e7e3      	b.n	80101b4 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xae>
 80101ec:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
 80101f0:	deff      	udf	#255	; 0xff

080101f2 <_ZN8touchgfx15GraphLabelsBase22invalidateGraphPointAtEs>:
 80101f2:	4770      	bx	lr

080101f4 <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
 80101f4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80101f6:	b118      	cbz	r0, 8010200 <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 80101f8:	6803      	ldr	r3, [r0, #0]
 80101fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80101fe:	4718      	bx	r3
 8010200:	4770      	bx	lr

08010202 <_ZNK8touchgfx12GraphLabelsX22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:
 8010202:	680b      	ldr	r3, [r1, #0]
 8010204:	4608      	mov	r0, r1
 8010206:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 801020a:	4718      	bx	r3

0801020c <_ZNK8touchgfx12GraphLabelsX22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
 801020c:	680b      	ldr	r3, [r1, #0]
 801020e:	4608      	mov	r0, r1
 8010210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010214:	4718      	bx	r3

08010216 <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:
 8010216:	680b      	ldr	r3, [r1, #0]
 8010218:	4608      	mov	r0, r1
 801021a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801021e:	4718      	bx	r3

08010220 <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
 8010220:	680b      	ldr	r3, [r1, #0]
 8010222:	4608      	mov	r0, r1
 8010224:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8010228:	4718      	bx	r3

0801022a <_ZN8touchgfx12GraphLabelsYD1Ev>:
 801022a:	4770      	bx	lr

0801022c <_ZN8touchgfx12GraphLabelsXD1Ev>:
 801022c:	4770      	bx	lr

0801022e <_ZNK8touchgfx12GraphLabelsX31getCorrectlyScaledLabelIntervalEPKNS_17AbstractDataGraphE>:
 801022e:	b538      	push	{r3, r4, r5, lr}
 8010230:	680a      	ldr	r2, [r1, #0]
 8010232:	e9d0 540d 	ldrd	r5, r4, [r0, #52]	; 0x34
 8010236:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 801023a:	4608      	mov	r0, r1
 801023c:	4790      	blx	r2
 801023e:	4629      	mov	r1, r5
 8010240:	4602      	mov	r2, r0
 8010242:	4620      	mov	r0, r4
 8010244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010248:	f7ff bb20 	b.w	800f88c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

0801024c <_ZNK8touchgfx12GraphLabelsY31getCorrectlyScaledLabelIntervalEPKNS_17AbstractDataGraphE>:
 801024c:	b538      	push	{r3, r4, r5, lr}
 801024e:	680a      	ldr	r2, [r1, #0]
 8010250:	e9d0 540d 	ldrd	r5, r4, [r0, #52]	; 0x34
 8010254:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8010258:	4608      	mov	r0, r1
 801025a:	4790      	blx	r2
 801025c:	4629      	mov	r1, r5
 801025e:	4602      	mov	r2, r0
 8010260:	4620      	mov	r0, r4
 8010262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010266:	f7ff bb11 	b.w	800f88c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
	...

0801026c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE>:
 801026c:	4b3c      	ldr	r3, [pc, #240]	; (8010360 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xf4>)
 801026e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010272:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8010276:	b087      	sub	sp, #28
 8010278:	881b      	ldrh	r3, [r3, #0]
 801027a:	4604      	mov	r4, r0
 801027c:	4689      	mov	r9, r1
 801027e:	4293      	cmp	r3, r2
 8010280:	d93e      	bls.n	8010300 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x94>
 8010282:	4b38      	ldr	r3, [pc, #224]	; (8010364 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xf8>)
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	b92b      	cbnz	r3, 8010294 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x28>
 8010288:	4b37      	ldr	r3, [pc, #220]	; (8010368 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xfc>)
 801028a:	21ae      	movs	r1, #174	; 0xae
 801028c:	4a37      	ldr	r2, [pc, #220]	; (801036c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x100>)
 801028e:	4838      	ldr	r0, [pc, #224]	; (8010370 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x104>)
 8010290:	f014 fbb2 	bl	80249f8 <__assert_func>
 8010294:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8010298:	4b36      	ldr	r3, [pc, #216]	; (8010374 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x108>)
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 80102a0:	f1b8 0f00 	cmp.w	r8, #0
 80102a4:	d02c      	beq.n	8010300 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x94>
 80102a6:	6803      	ldr	r3, [r0, #0]
 80102a8:	6945      	ldr	r5, [r0, #20]
 80102aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102ac:	2d00      	cmp	r5, #0
 80102ae:	d052      	beq.n	8010356 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xea>
 80102b0:	696f      	ldr	r7, [r5, #20]
 80102b2:	4798      	blx	r3
 80102b4:	f897 502c 	ldrb.w	r5, [r7, #44]	; 0x2c
 80102b8:	fb15 f000 	smulbb	r0, r5, r0
 80102bc:	b280      	uxth	r0, r0
 80102be:	1c45      	adds	r5, r0, #1
 80102c0:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80102c4:	122d      	asrs	r5, r5, #8
 80102c6:	d01b      	beq.n	8010300 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x94>
 80102c8:	6823      	ldr	r3, [r4, #0]
 80102ca:	4639      	mov	r1, r7
 80102cc:	4620      	mov	r0, r4
 80102ce:	b2ed      	uxtb	r5, r5
 80102d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80102d4:	4798      	blx	r3
 80102d6:	6823      	ldr	r3, [r4, #0]
 80102d8:	4606      	mov	r6, r0
 80102da:	4639      	mov	r1, r7
 80102dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80102e0:	4620      	mov	r0, r4
 80102e2:	4798      	blx	r3
 80102e4:	4683      	mov	fp, r0
 80102e6:	b970      	cbnz	r0, 8010306 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x9a>
 80102e8:	b96e      	cbnz	r6, 8010306 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x9a>
 80102ea:	6823      	ldr	r3, [r4, #0]
 80102ec:	4642      	mov	r2, r8
 80102ee:	9600      	str	r6, [sp, #0]
 80102f0:	4649      	mov	r1, r9
 80102f2:	4620      	mov	r0, r4
 80102f4:	e9cd 6501 	strd	r6, r5, [sp, #4]
 80102f8:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 80102fc:	463b      	mov	r3, r7
 80102fe:	47a8      	blx	r5
 8010300:	b007      	add	sp, #28
 8010302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010306:	2e00      	cmp	r6, #0
 8010308:	ddfa      	ble.n	8010300 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x94>
 801030a:	6823      	ldr	r3, [r4, #0]
 801030c:	4639      	mov	r1, r7
 801030e:	4620      	mov	r0, r4
 8010310:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010314:	4798      	blx	r3
 8010316:	6823      	ldr	r3, [r4, #0]
 8010318:	4682      	mov	sl, r0
 801031a:	4639      	mov	r1, r7
 801031c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010320:	4620      	mov	r0, r4
 8010322:	4798      	blx	r3
 8010324:	4582      	cmp	sl, r0
 8010326:	bfde      	ittt	le
 8010328:	4603      	movle	r3, r0
 801032a:	4650      	movle	r0, sl
 801032c:	469a      	movle	sl, r3
 801032e:	ebaa 0300 	sub.w	r3, sl, r0
 8010332:	fb93 f3f6 	sdiv	r3, r3, r6
 8010336:	2b64      	cmp	r3, #100	; 0x64
 8010338:	dce2      	bgt.n	8010300 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x94>
 801033a:	6823      	ldr	r3, [r4, #0]
 801033c:	4642      	mov	r2, r8
 801033e:	9000      	str	r0, [sp, #0]
 8010340:	4649      	mov	r1, r9
 8010342:	4620      	mov	r0, r4
 8010344:	e9cd b503 	strd	fp, r5, [sp, #12]
 8010348:	e9cd a601 	strd	sl, r6, [sp, #4]
 801034c:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c
 8010350:	463b      	mov	r3, r7
 8010352:	47a8      	blx	r5
 8010354:	e7d4      	b.n	8010300 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x94>
 8010356:	4798      	blx	r3
 8010358:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 801035c:	deff      	udf	#255	; 0xff
 801035e:	bf00      	nop
 8010360:	2002104c 	.word	0x2002104c
 8010364:	20021048 	.word	0x20021048
 8010368:	08026bd0 	.word	0x08026bd0
 801036c:	08028cc4 	.word	0x08028cc4
 8010370:	08026c5e 	.word	0x08026c5e
 8010374:	20021050 	.word	0x20021050

08010378 <_ZN8touchgfx12GraphLabelsYD0Ev>:
 8010378:	b510      	push	{r4, lr}
 801037a:	4604      	mov	r4, r0
 801037c:	2150      	movs	r1, #80	; 0x50
 801037e:	f014 fb0c 	bl	802499a <_ZdlPvj>
 8010382:	4620      	mov	r0, r4
 8010384:	bd10      	pop	{r4, pc}

08010386 <_ZN8touchgfx12GraphLabelsXD0Ev>:
 8010386:	b510      	push	{r4, lr}
 8010388:	4604      	mov	r4, r0
 801038a:	2150      	movs	r1, #80	; 0x50
 801038c:	f014 fb05 	bl	802499a <_ZdlPvj>
 8010390:	4620      	mov	r0, r4
 8010392:	bd10      	pop	{r4, pc}

08010394 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>:
 8010394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010398:	b08d      	sub	sp, #52	; 0x34
 801039a:	4606      	mov	r6, r0
 801039c:	9309      	str	r3, [sp, #36]	; 0x24
 801039e:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 80103a2:	e9dd 9a18 	ldrd	r9, sl, [sp, #96]	; 0x60
 80103a6:	e9cd 1207 	strd	r1, r2, [sp, #28]
 80103aa:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 80103ae:	930a      	str	r3, [sp, #40]	; 0x28
 80103b0:	f1b9 0f00 	cmp.w	r9, #0
 80103b4:	d117      	bne.n	80103e6 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x52>
 80103b6:	2f00      	cmp	r7, #0
 80103b8:	dc7c      	bgt.n	80104b4 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x120>
 80103ba:	f1b8 0f00 	cmp.w	r8, #0
 80103be:	da01      	bge.n	80103c4 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 80103c0:	2f00      	cmp	r7, #0
 80103c2:	d17a      	bne.n	80104ba <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 80103c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103c6:	4630      	mov	r0, r6
 80103c8:	6832      	ldr	r2, [r6, #0]
 80103ca:	9318      	str	r3, [sp, #96]	; 0x60
 80103cc:	2300      	movs	r3, #0
 80103ce:	9907      	ldr	r1, [sp, #28]
 80103d0:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
 80103d4:	f8d2 4090 	ldr.w	r4, [r2, #144]	; 0x90
 80103d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80103dc:	46a4      	mov	ip, r4
 80103de:	b00d      	add	sp, #52	; 0x34
 80103e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103e4:	4760      	bx	ip
 80103e6:	fb97 f4f9 	sdiv	r4, r7, r9
 80103ea:	1e63      	subs	r3, r4, #1
 80103ec:	9305      	str	r3, [sp, #20]
 80103ee:	f1ba 0f00 	cmp.w	sl, #0
 80103f2:	d122      	bne.n	801043a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xa6>
 80103f4:	fb03 f509 	mul.w	r5, r3, r9
 80103f8:	fb98 faf9 	sdiv	sl, r8, r9
 80103fc:	f10a 0a02 	add.w	sl, sl, #2
 8010400:	9b05      	ldr	r3, [sp, #20]
 8010402:	459a      	cmp	sl, r3
 8010404:	d059      	beq.n	80104ba <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 8010406:	42af      	cmp	r7, r5
 8010408:	dc5a      	bgt.n	80104c0 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x12c>
 801040a:	45a8      	cmp	r8, r5
 801040c:	da01      	bge.n	8010412 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>
 801040e:	42af      	cmp	r7, r5
 8010410:	db0e      	blt.n	8010430 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 8010412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010414:	4630      	mov	r0, r6
 8010416:	9905      	ldr	r1, [sp, #20]
 8010418:	9302      	str	r3, [sp, #8]
 801041a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 801041c:	6832      	ldr	r2, [r6, #0]
 801041e:	434b      	muls	r3, r1
 8010420:	9907      	ldr	r1, [sp, #28]
 8010422:	e9cd 5300 	strd	r5, r3, [sp]
 8010426:	f8d2 b090 	ldr.w	fp, [r2, #144]	; 0x90
 801042a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801042e:	47d8      	blx	fp
 8010430:	9b05      	ldr	r3, [sp, #20]
 8010432:	444d      	add	r5, r9
 8010434:	3301      	adds	r3, #1
 8010436:	9305      	str	r3, [sp, #20]
 8010438:	e7e2      	b.n	8010400 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x6c>
 801043a:	fb97 f3fa 	sdiv	r3, r7, sl
 801043e:	3b01      	subs	r3, #1
 8010440:	9306      	str	r3, [sp, #24]
 8010442:	9a06      	ldr	r2, [sp, #24]
 8010444:	fb98 f3fa 	sdiv	r3, r8, sl
 8010448:	fb02 fb0a 	mul.w	fp, r2, sl
 801044c:	9a05      	ldr	r2, [sp, #20]
 801044e:	3302      	adds	r3, #2
 8010450:	fb02 f509 	mul.w	r5, r2, r9
 8010454:	930b      	str	r3, [sp, #44]	; 0x2c
 8010456:	45ab      	cmp	fp, r5
 8010458:	dd1d      	ble.n	8010496 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 801045a:	42af      	cmp	r7, r5
 801045c:	dc08      	bgt.n	8010470 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xdc>
 801045e:	45a8      	cmp	r8, r5
 8010460:	da08      	bge.n	8010474 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 8010462:	42af      	cmp	r7, r5
 8010464:	da06      	bge.n	8010474 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 8010466:	9b05      	ldr	r3, [sp, #20]
 8010468:	444d      	add	r5, r9
 801046a:	3301      	adds	r3, #1
 801046c:	9305      	str	r3, [sp, #20]
 801046e:	e7f2      	b.n	8010456 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 8010470:	45a8      	cmp	r8, r5
 8010472:	dcf8      	bgt.n	8010466 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 8010474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010476:	4630      	mov	r0, r6
 8010478:	9905      	ldr	r1, [sp, #20]
 801047a:	9302      	str	r3, [sp, #8]
 801047c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 801047e:	6832      	ldr	r2, [r6, #0]
 8010480:	434b      	muls	r3, r1
 8010482:	9907      	ldr	r1, [sp, #28]
 8010484:	e9cd 5300 	strd	r5, r3, [sp]
 8010488:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 801048c:	461c      	mov	r4, r3
 801048e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010492:	47a0      	blx	r4
 8010494:	e7e7      	b.n	8010466 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 8010496:	45ab      	cmp	fp, r5
 8010498:	db04      	blt.n	80104a4 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x110>
 801049a:	9b05      	ldr	r3, [sp, #20]
 801049c:	444d      	add	r5, r9
 801049e:	3301      	adds	r3, #1
 80104a0:	9305      	str	r3, [sp, #20]
 80104a2:	e7f8      	b.n	8010496 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 80104a4:	9b06      	ldr	r3, [sp, #24]
 80104a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80104a8:	3301      	adds	r3, #1
 80104aa:	4293      	cmp	r3, r2
 80104ac:	9306      	str	r3, [sp, #24]
 80104ae:	d004      	beq.n	80104ba <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 80104b0:	44d3      	add	fp, sl
 80104b2:	e7d0      	b.n	8010456 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 80104b4:	f1b8 0f00 	cmp.w	r8, #0
 80104b8:	dd84      	ble.n	80103c4 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 80104ba:	b00d      	add	sp, #52	; 0x34
 80104bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104c0:	45a8      	cmp	r8, r5
 80104c2:	dcb5      	bgt.n	8010430 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 80104c4:	e7a5      	b.n	8010412 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>

080104c6 <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>:
 80104c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104ca:	f9b3 4120 	ldrsh.w	r4, [r3, #288]	; 0x120
 80104ce:	b089      	sub	sp, #36	; 0x24
 80104d0:	468a      	mov	sl, r1
 80104d2:	4693      	mov	fp, r2
 80104d4:	2c00      	cmp	r4, #0
 80104d6:	9007      	str	r0, [sp, #28]
 80104d8:	461d      	mov	r5, r3
 80104da:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 80104de:	e9dd c612 	ldrd	ip, r6, [sp, #72]	; 0x48
 80104e2:	e9dd 7814 	ldrd	r7, r8, [sp, #80]	; 0x50
 80104e6:	dd03      	ble.n	80104f0 <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x2a>
 80104e8:	4564      	cmp	r4, ip
 80104ea:	dd01      	ble.n	80104f0 <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x2a>
 80104ec:	42b4      	cmp	r4, r6
 80104ee:	dd0e      	ble.n	801050e <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x48>
 80104f0:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 80104f4:	e9cd 8915 	strd	r8, r9, [sp, #84]	; 0x54
 80104f8:	e9cd 6713 	strd	r6, r7, [sp, #76]	; 0x4c
 80104fc:	462b      	mov	r3, r5
 80104fe:	465a      	mov	r2, fp
 8010500:	4651      	mov	r1, sl
 8010502:	9807      	ldr	r0, [sp, #28]
 8010504:	b009      	add	sp, #36	; 0x24
 8010506:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801050a:	f7ff bf43 	b.w	8010394 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>
 801050e:	f104 3eff 	add.w	lr, r4, #4294967295
 8010512:	9702      	str	r7, [sp, #8]
 8010514:	e9cd 8903 	strd	r8, r9, [sp, #12]
 8010518:	e9cd ce00 	strd	ip, lr, [sp]
 801051c:	f7ff ff3a 	bl	8010394 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>
 8010520:	9412      	str	r4, [sp, #72]	; 0x48
 8010522:	e9cd 8915 	strd	r8, r9, [sp, #84]	; 0x54
 8010526:	e9cd 6713 	strd	r6, r7, [sp, #76]	; 0x4c
 801052a:	e7e7      	b.n	80104fc <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x36>

0801052c <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>:
 801052c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010530:	f1b3 0900 	subs.w	r9, r3, #0
 8010534:	460d      	mov	r5, r1
 8010536:	4690      	mov	r8, r2
 8010538:	9f08      	ldr	r7, [sp, #32]
 801053a:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 801053e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010540:	da18      	bge.n	8010574 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 8010542:	2a01      	cmp	r2, #1
 8010544:	dd16      	ble.n	8010574 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 8010546:	232d      	movs	r3, #45	; 0x2d
 8010548:	f1c9 0900 	rsb	r9, r9, #0
 801054c:	2001      	movs	r0, #1
 801054e:	800b      	strh	r3, [r1, #0]
 8010550:	2f00      	cmp	r7, #0
 8010552:	d111      	bne.n	8010578 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x4c>
 8010554:	2302      	movs	r3, #2
 8010556:	eba8 0100 	sub.w	r1, r8, r0
 801055a:	4a26      	ldr	r2, [pc, #152]	; (80105f4 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 801055c:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8010560:	b289      	uxth	r1, r1
 8010562:	fb96 f3f3 	sdiv	r3, r6, r3
 8010566:	444b      	add	r3, r9
 8010568:	fb93 f3f6 	sdiv	r3, r3, r6
 801056c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010570:	f006 bbe0 	b.w	8016d34 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010574:	2000      	movs	r0, #0
 8010576:	e7eb      	b.n	8010550 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x24>
 8010578:	dd39      	ble.n	80105ee <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 801057a:	eba8 0100 	sub.w	r1, r8, r0
 801057e:	4a1d      	ldr	r2, [pc, #116]	; (80105f4 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 8010580:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8010584:	f108 38ff 	add.w	r8, r8, #4294967295
 8010588:	b289      	uxth	r1, r1
 801058a:	fb99 f4f6 	sdiv	r4, r9, r6
 801058e:	4623      	mov	r3, r4
 8010590:	f006 fbd0 	bl	8016d34 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010594:	4628      	mov	r0, r5
 8010596:	f006 f85b 	bl	8016650 <_ZN8touchgfx7Unicode6strlenEPKt>
 801059a:	4580      	cmp	r8, r0
 801059c:	dd27      	ble.n	80105ee <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 801059e:	f04f 0e02 	mov.w	lr, #2
 80105a2:	f825 a010 	strh.w	sl, [r5, r0, lsl #1]
 80105a6:	fb06 9314 	mls	r3, r6, r4, r9
 80105aa:	3001      	adds	r0, #1
 80105ac:	2200      	movs	r2, #0
 80105ae:	f04f 090a 	mov.w	r9, #10
 80105b2:	f107 3aff 	add.w	sl, r7, #4294967295
 80105b6:	fb96 fefe 	sdiv	lr, r6, lr
 80105ba:	4580      	cmp	r8, r0
 80105bc:	4684      	mov	ip, r0
 80105be:	dd13      	ble.n	80105e8 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xbc>
 80105c0:	fb09 f303 	mul.w	r3, r9, r3
 80105c4:	4592      	cmp	sl, r2
 80105c6:	f102 0201 	add.w	r2, r2, #1
 80105ca:	f100 0c01 	add.w	ip, r0, #1
 80105ce:	bf08      	it	eq
 80105d0:	4473      	addeq	r3, lr
 80105d2:	4297      	cmp	r7, r2
 80105d4:	fb93 f4f6 	sdiv	r4, r3, r6
 80105d8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80105dc:	fb06 3314 	mls	r3, r6, r4, r3
 80105e0:	f825 1010 	strh.w	r1, [r5, r0, lsl #1]
 80105e4:	4660      	mov	r0, ip
 80105e6:	d1e8      	bne.n	80105ba <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x8e>
 80105e8:	2300      	movs	r3, #0
 80105ea:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
 80105ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105f2:	bf00      	nop
 80105f4:	08028ad2 	.word	0x08028ad2

080105f8 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs>:
 80105f8:	4b88      	ldr	r3, [pc, #544]	; (801081c <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x224>)
 80105fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105fe:	460e      	mov	r6, r1
 8010600:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8010604:	8819      	ldrh	r1, [r3, #0]
 8010606:	b095      	sub	sp, #84	; 0x54
 8010608:	4604      	mov	r4, r0
 801060a:	4699      	mov	r9, r3
 801060c:	4291      	cmp	r1, r2
 801060e:	d942      	bls.n	8010696 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x9e>
 8010610:	4983      	ldr	r1, [pc, #524]	; (8010820 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x228>)
 8010612:	680b      	ldr	r3, [r1, #0]
 8010614:	468a      	mov	sl, r1
 8010616:	b92b      	cbnz	r3, 8010624 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x2c>
 8010618:	4b82      	ldr	r3, [pc, #520]	; (8010824 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x22c>)
 801061a:	21ae      	movs	r1, #174	; 0xae
 801061c:	4a82      	ldr	r2, [pc, #520]	; (8010828 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x230>)
 801061e:	4883      	ldr	r0, [pc, #524]	; (801082c <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x234>)
 8010620:	f014 f9ea 	bl	80249f8 <__assert_func>
 8010624:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8010628:	4b81      	ldr	r3, [pc, #516]	; (8010830 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x238>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8010630:	f1b8 0f00 	cmp.w	r8, #0
 8010634:	d02f      	beq.n	8010696 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x9e>
 8010636:	6803      	ldr	r3, [r0, #0]
 8010638:	6945      	ldr	r5, [r0, #20]
 801063a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801063c:	2d00      	cmp	r5, #0
 801063e:	f000 80e9 	beq.w	8010814 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x21c>
 8010642:	696f      	ldr	r7, [r5, #20]
 8010644:	4798      	blx	r3
 8010646:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801064a:	fb13 f000 	smulbb	r0, r3, r0
 801064e:	b280      	uxth	r0, r0
 8010650:	1c43      	adds	r3, r0, #1
 8010652:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8010656:	0a03      	lsrs	r3, r0, #8
 8010658:	d01d      	beq.n	8010696 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x9e>
 801065a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801065c:	4620      	mov	r0, r4
 801065e:	6823      	ldr	r3, [r4, #0]
 8010660:	434e      	muls	r6, r1
 8010662:	4639      	mov	r1, r7
 8010664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010668:	4798      	blx	r3
 801066a:	6823      	ldr	r3, [r4, #0]
 801066c:	4605      	mov	r5, r0
 801066e:	4639      	mov	r1, r7
 8010670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010674:	4620      	mov	r0, r4
 8010676:	4798      	blx	r3
 8010678:	2d00      	cmp	r5, #0
 801067a:	dd0f      	ble.n	801069c <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xa4>
 801067c:	fb96 f3f5 	sdiv	r3, r6, r5
 8010680:	436b      	muls	r3, r5
 8010682:	1b9a      	subs	r2, r3, r6
 8010684:	4253      	negs	r3, r2
 8010686:	4153      	adcs	r3, r2
 8010688:	2800      	cmp	r0, #0
 801068a:	dd09      	ble.n	80106a0 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xa8>
 801068c:	fb96 f2f0 	sdiv	r2, r6, r0
 8010690:	4350      	muls	r0, r2
 8010692:	42b0      	cmp	r0, r6
 8010694:	d10e      	bne.n	80106b4 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xbc>
 8010696:	b015      	add	sp, #84	; 0x54
 8010698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801069c:	2300      	movs	r3, #0
 801069e:	e7f3      	b.n	8010688 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x90>
 80106a0:	d108      	bne.n	80106b4 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xbc>
 80106a2:	2d00      	cmp	r5, #0
 80106a4:	f040 80b2 	bne.w	801080c <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x214>
 80106a8:	2e00      	cmp	r6, #0
 80106aa:	d037      	beq.n	801071c <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x124>
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d0f2      	beq.n	8010696 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x9e>
 80106b0:	462a      	mov	r2, r5
 80106b2:	e007      	b.n	80106c4 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xcc>
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d0ee      	beq.n	8010696 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x9e>
 80106b8:	2d00      	cmp	r5, #0
 80106ba:	d0f9      	beq.n	80106b0 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xb8>
 80106bc:	fb96 f2f5 	sdiv	r2, r6, r5
 80106c0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80106c2:	436a      	muls	r2, r5
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	4631      	mov	r1, r6
 80106c8:	4638      	mov	r0, r7
 80106ca:	f8df b16c 	ldr.w	fp, [pc, #364]	; 8010838 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x240>
 80106ce:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80106d2:	4798      	blx	r3
 80106d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80106d6:	2214      	movs	r2, #20
 80106d8:	a90a      	add	r1, sp, #40	; 0x28
 80106da:	9302      	str	r3, [sp, #8]
 80106dc:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80106e0:	9301      	str	r3, [sp, #4]
 80106e2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80106e6:	9300      	str	r3, [sp, #0]
 80106e8:	4603      	mov	r3, r0
 80106ea:	4620      	mov	r0, r4
 80106ec:	f7ff ff1e 	bl	801052c <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 80106f0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80106f4:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80106f8:	f8d8 3000 	ldr.w	r3, [r8]
 80106fc:	d13b      	bne.n	8010776 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x17e>
 80106fe:	699d      	ldr	r5, [r3, #24]
 8010700:	f8da 3000 	ldr.w	r3, [sl]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d087      	beq.n	8010618 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x20>
 8010708:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801070c:	f8b9 3000 	ldrh.w	r3, [r9]
 8010710:	428b      	cmp	r3, r1
 8010712:	d805      	bhi.n	8010720 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x128>
 8010714:	4b47      	ldr	r3, [pc, #284]	; (8010834 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x23c>)
 8010716:	21af      	movs	r1, #175	; 0xaf
 8010718:	4a43      	ldr	r2, [pc, #268]	; (8010828 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x230>)
 801071a:	e780      	b.n	801061e <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x26>
 801071c:	4632      	mov	r2, r6
 801071e:	e7d1      	b.n	80106c4 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xcc>
 8010720:	f8db 0000 	ldr.w	r0, [fp]
 8010724:	f7f4 fc7e 	bl	8005024 <_ZNK8touchgfx5Texts7getTextEt>
 8010728:	aa0a      	add	r2, sp, #40	; 0x28
 801072a:	4601      	mov	r1, r0
 801072c:	4640      	mov	r0, r8
 801072e:	47a8      	blx	r5
 8010730:	4605      	mov	r5, r0
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	4631      	mov	r1, r6
 8010736:	4638      	mov	r0, r7
 8010738:	f8b7 806c 	ldrh.w	r8, [r7, #108]	; 0x6c
 801073c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8010740:	4798      	blx	r3
 8010742:	ab14      	add	r3, sp, #80	; 0x50
 8010744:	f843 0d34 	str.w	r0, [r3, #-52]!
 8010748:	4618      	mov	r0, r3
 801074a:	f7fe fe73 	bl	800f434 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801074e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8010752:	4440      	add	r0, r8
 8010754:	2200      	movs	r2, #0
 8010756:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801075a:	a908      	add	r1, sp, #32
 801075c:	eba0 0055 	sub.w	r0, r0, r5, lsr #1
 8010760:	6823      	ldr	r3, [r4, #0]
 8010762:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 8010766:	f8ad 0020 	strh.w	r0, [sp, #32]
 801076a:	4620      	mov	r0, r4
 801076c:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
 8010770:	691b      	ldr	r3, [r3, #16]
 8010772:	4798      	blx	r3
 8010774:	e78f      	b.n	8010696 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x9e>
 8010776:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8010778:	f8da 3000 	ldr.w	r3, [sl]
 801077c:	2b00      	cmp	r3, #0
 801077e:	f43f af4b 	beq.w	8010618 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x20>
 8010782:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8010786:	f8b9 3000 	ldrh.w	r3, [r9]
 801078a:	428b      	cmp	r3, r1
 801078c:	d9c2      	bls.n	8010714 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x11c>
 801078e:	f8db 0000 	ldr.w	r0, [fp]
 8010792:	f7f4 fc47 	bl	8005024 <_ZNK8touchgfx5Texts7getTextEt>
 8010796:	aa0a      	add	r2, sp, #40	; 0x28
 8010798:	4601      	mov	r1, r0
 801079a:	4640      	mov	r0, r8
 801079c:	47a8      	blx	r5
 801079e:	f8d8 3000 	ldr.w	r3, [r8]
 80107a2:	f8da 2000 	ldr.w	r2, [sl]
 80107a6:	4605      	mov	r5, r0
 80107a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107aa:	9305      	str	r3, [sp, #20]
 80107ac:	2a00      	cmp	r2, #0
 80107ae:	f43f af33 	beq.w	8010618 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x20>
 80107b2:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80107b6:	f8b9 2000 	ldrh.w	r2, [r9]
 80107ba:	428a      	cmp	r2, r1
 80107bc:	d9aa      	bls.n	8010714 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x11c>
 80107be:	f8db 0000 	ldr.w	r0, [fp]
 80107c2:	f7f4 fc2f 	bl	8005024 <_ZNK8touchgfx5Texts7getTextEt>
 80107c6:	aa0a      	add	r2, sp, #40	; 0x28
 80107c8:	4601      	mov	r1, r0
 80107ca:	9b05      	ldr	r3, [sp, #20]
 80107cc:	4640      	mov	r0, r8
 80107ce:	4798      	blx	r3
 80107d0:	f8d8 3000 	ldr.w	r3, [r8]
 80107d4:	fb15 f500 	smulbb	r5, r5, r0
 80107d8:	f8da 2000 	ldr.w	r2, [sl]
 80107dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107de:	b2ad      	uxth	r5, r5
 80107e0:	9305      	str	r3, [sp, #20]
 80107e2:	2a00      	cmp	r2, #0
 80107e4:	f43f af18 	beq.w	8010618 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x20>
 80107e8:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80107ec:	f8b9 2000 	ldrh.w	r2, [r9]
 80107f0:	428a      	cmp	r2, r1
 80107f2:	d98f      	bls.n	8010714 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x11c>
 80107f4:	f8db 0000 	ldr.w	r0, [fp]
 80107f8:	f7f4 fc14 	bl	8005024 <_ZNK8touchgfx5Texts7getTextEt>
 80107fc:	aa0a      	add	r2, sp, #40	; 0x28
 80107fe:	4601      	mov	r1, r0
 8010800:	9b05      	ldr	r3, [sp, #20]
 8010802:	4640      	mov	r0, r8
 8010804:	4798      	blx	r3
 8010806:	4405      	add	r5, r0
 8010808:	b2ad      	uxth	r5, r5
 801080a:	e792      	b.n	8010732 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x13a>
 801080c:	2b00      	cmp	r3, #0
 801080e:	f47f af55 	bne.w	80106bc <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xc4>
 8010812:	e740      	b.n	8010696 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x9e>
 8010814:	4798      	blx	r3
 8010816:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 801081a:	deff      	udf	#255	; 0xff
 801081c:	2002104c 	.word	0x2002104c
 8010820:	20021048 	.word	0x20021048
 8010824:	08026bd0 	.word	0x08026bd0
 8010828:	08028cc4 	.word	0x08028cc4
 801082c:	08026c5e 	.word	0x08026c5e
 8010830:	20021050 	.word	0x20021050
 8010834:	08028a94 	.word	0x08028a94
 8010838:	20021054 	.word	0x20021054

0801083c <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih>:
 801083c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010840:	b09b      	sub	sp, #108	; 0x6c
 8010842:	461d      	mov	r5, r3
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	4604      	mov	r4, r0
 8010848:	f10d 0868 	add.w	r8, sp, #104	; 0x68
 801084c:	9104      	str	r1, [sp, #16]
 801084e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8010852:	4628      	mov	r0, r5
 8010854:	9924      	ldr	r1, [sp, #144]	; 0x90
 8010856:	4617      	mov	r7, r2
 8010858:	4798      	blx	r3
 801085a:	f848 0d28 	str.w	r0, [r8, #-40]!
 801085e:	4640      	mov	r0, r8
 8010860:	f7fe fde8 	bl	800f434 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8010864:	f8b5 3116 	ldrh.w	r3, [r5, #278]	; 0x116
 8010868:	1ac0      	subs	r0, r0, r3
 801086a:	b200      	sxth	r0, r0
 801086c:	2800      	cmp	r0, #0
 801086e:	f2c0 80cd 	blt.w	8010a0c <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1d0>
 8010872:	f8b5 2118 	ldrh.w	r2, [r5, #280]	; 0x118
 8010876:	441a      	add	r2, r3
 8010878:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 801087c:	1a9b      	subs	r3, r3, r2
 801087e:	b21b      	sxth	r3, r3
 8010880:	4298      	cmp	r0, r3
 8010882:	f280 80c3 	bge.w	8010a0c <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1d0>
 8010886:	682b      	ldr	r3, [r5, #0]
 8010888:	4628      	mov	r0, r5
 801088a:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8010ab8 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x27c>
 801088e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8010892:	e9dd 1224 	ldrd	r1, r2, [sp, #144]	; 0x90
 8010896:	4798      	blx	r3
 8010898:	682b      	ldr	r3, [r5, #0]
 801089a:	f8b4 9046 	ldrh.w	r9, [r4, #70]	; 0x46
 801089e:	4606      	mov	r6, r0
 80108a0:	f8b4 a048 	ldrh.w	sl, [r4, #72]	; 0x48
 80108a4:	4628      	mov	r0, r5
 80108a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80108aa:	4798      	blx	r3
 80108ac:	f8cd 9000 	str.w	r9, [sp]
 80108b0:	4633      	mov	r3, r6
 80108b2:	2214      	movs	r2, #20
 80108b4:	4641      	mov	r1, r8
 80108b6:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8010ac0 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x284>
 80108ba:	e9cd a001 	strd	sl, r0, [sp, #4]
 80108be:	4620      	mov	r0, r4
 80108c0:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 8010abc <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x280>
 80108c4:	f7ff fe32 	bl	801052c <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 80108c8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80108cc:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	f040 809e 	bne.w	8010a12 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1d6>
 80108d6:	699e      	ldr	r6, [r3, #24]
 80108d8:	f8db 3000 	ldr.w	r3, [fp]
 80108dc:	b92b      	cbnz	r3, 80108ea <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xae>
 80108de:	4b72      	ldr	r3, [pc, #456]	; (8010aa8 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x26c>)
 80108e0:	21ae      	movs	r1, #174	; 0xae
 80108e2:	4a72      	ldr	r2, [pc, #456]	; (8010aac <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x270>)
 80108e4:	4872      	ldr	r0, [pc, #456]	; (8010ab0 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x274>)
 80108e6:	f014 f887 	bl	80249f8 <__assert_func>
 80108ea:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80108ee:	f8ba 3000 	ldrh.w	r3, [sl]
 80108f2:	428b      	cmp	r3, r1
 80108f4:	d803      	bhi.n	80108fe <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xc2>
 80108f6:	4b6f      	ldr	r3, [pc, #444]	; (8010ab4 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x278>)
 80108f8:	21af      	movs	r1, #175	; 0xaf
 80108fa:	4a6c      	ldr	r2, [pc, #432]	; (8010aac <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x270>)
 80108fc:	e7f2      	b.n	80108e4 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa8>
 80108fe:	f8d9 0000 	ldr.w	r0, [r9]
 8010902:	f7f4 fb8f 	bl	8005024 <_ZNK8touchgfx5Texts7getTextEt>
 8010906:	4642      	mov	r2, r8
 8010908:	4601      	mov	r1, r0
 801090a:	4638      	mov	r0, r7
 801090c:	47b0      	blx	r6
 801090e:	4606      	mov	r6, r0
 8010910:	682b      	ldr	r3, [r5, #0]
 8010912:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8010916:	f8b5 806c 	ldrh.w	r8, [r5, #108]	; 0x6c
 801091a:	4628      	mov	r0, r5
 801091c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8010920:	ad07      	add	r5, sp, #28
 8010922:	9924      	ldr	r1, [sp, #144]	; 0x90
 8010924:	4798      	blx	r3
 8010926:	f84a 0d3c 	str.w	r0, [sl, #-60]!
 801092a:	4650      	mov	r0, sl
 801092c:	f7fe fd82 	bl	800f434 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8010930:	4440      	add	r0, r8
 8010932:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8010936:	f04f 0800 	mov.w	r8, #0
 801093a:	eba0 0056 	sub.w	r0, r0, r6, lsr #1
 801093e:	f8ad 6020 	strh.w	r6, [sp, #32]
 8010942:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8010946:	ae09      	add	r6, sp, #36	; 0x24
 8010948:	f8ad 001c 	strh.w	r0, [sp, #28]
 801094c:	f8ad 801e 	strh.w	r8, [sp, #30]
 8010950:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010954:	e886 0003 	stmia.w	r6, {r0, r1}
 8010958:	9904      	ldr	r1, [sp, #16]
 801095a:	4630      	mov	r0, r6
 801095c:	f7fc ffda 	bl	800d914 <_ZN8touchgfx4RectaNERKS0_>
 8010960:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8010964:	4543      	cmp	r3, r8
 8010966:	dd51      	ble.n	8010a0c <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1d0>
 8010968:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801096c:	4543      	cmp	r3, r8
 801096e:	dd4d      	ble.n	8010a0c <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1d0>
 8010970:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8010974:	4629      	mov	r1, r5
 8010976:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801097a:	4620      	mov	r0, r4
 801097c:	1a9b      	subs	r3, r3, r2
 801097e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8010982:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8010986:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801098a:	1a9b      	subs	r3, r3, r2
 801098c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8010990:	6823      	ldr	r3, [r4, #0]
 8010992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010994:	4798      	blx	r3
 8010996:	4b48      	ldr	r3, [pc, #288]	; (8010ab8 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x27c>)
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d09f      	beq.n	80108de <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa2>
 801099e:	4a47      	ldr	r2, [pc, #284]	; (8010abc <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x280>)
 80109a0:	f8b4 b040 	ldrh.w	fp, [r4, #64]	; 0x40
 80109a4:	8812      	ldrh	r2, [r2, #0]
 80109a6:	455a      	cmp	r2, fp
 80109a8:	d9a5      	bls.n	80108f6 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xba>
 80109aa:	eb03 034b 	add.w	r3, r3, fp, lsl #1
 80109ae:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 80109b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80109b4:	785b      	ldrb	r3, [r3, #1]
 80109b6:	920d      	str	r2, [sp, #52]	; 0x34
 80109b8:	f3c3 0001 	ubfx	r0, r3, #0, #2
 80109bc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80109c0:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
 80109c4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 80109c8:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
 80109cc:	970b      	str	r7, [sp, #44]	; 0x2c
 80109ce:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 80109d2:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
 80109d6:	f8ad 8038 	strh.w	r8, [sp, #56]	; 0x38
 80109da:	f88d 803b 	strb.w	r8, [sp, #59]	; 0x3b
 80109de:	f88d 803c 	strb.w	r8, [sp, #60]	; 0x3c
 80109e2:	f7fd fa65 	bl	800deb0 <_ZN8touchgfx3HAL3lcdEv>
 80109e6:	4659      	mov	r1, fp
 80109e8:	4604      	mov	r4, r0
 80109ea:	f8d9 0000 	ldr.w	r0, [r9]
 80109ee:	f7f4 fb19 	bl	8005024 <_ZNK8touchgfx5Texts7getTextEt>
 80109f2:	ab10      	add	r3, sp, #64	; 0x40
 80109f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80109f8:	f8cd a000 	str.w	sl, [sp]
 80109fc:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8010a00:	4633      	mov	r3, r6
 8010a02:	4620      	mov	r0, r4
 8010a04:	e895 0006 	ldmia.w	r5, {r1, r2}
 8010a08:	f7f4 fabe 	bl	8004f88 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8010a0c:	b01b      	add	sp, #108	; 0x6c
 8010a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a12:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 8010a14:	f8db 3000 	ldr.w	r3, [fp]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	f43f af60 	beq.w	80108de <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa2>
 8010a1e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8010a22:	f8ba 3000 	ldrh.w	r3, [sl]
 8010a26:	428b      	cmp	r3, r1
 8010a28:	f67f af65 	bls.w	80108f6 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xba>
 8010a2c:	f8d9 0000 	ldr.w	r0, [r9]
 8010a30:	f7f4 faf8 	bl	8005024 <_ZNK8touchgfx5Texts7getTextEt>
 8010a34:	4642      	mov	r2, r8
 8010a36:	4601      	mov	r1, r0
 8010a38:	4638      	mov	r0, r7
 8010a3a:	47b0      	blx	r6
 8010a3c:	683a      	ldr	r2, [r7, #0]
 8010a3e:	9005      	str	r0, [sp, #20]
 8010a40:	6c16      	ldr	r6, [r2, #64]	; 0x40
 8010a42:	f8db 2000 	ldr.w	r2, [fp]
 8010a46:	2a00      	cmp	r2, #0
 8010a48:	f43f af49 	beq.w	80108de <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa2>
 8010a4c:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8010a50:	f8ba 2000 	ldrh.w	r2, [sl]
 8010a54:	428a      	cmp	r2, r1
 8010a56:	f67f af4e 	bls.w	80108f6 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xba>
 8010a5a:	f8d9 0000 	ldr.w	r0, [r9]
 8010a5e:	f7f4 fae1 	bl	8005024 <_ZNK8touchgfx5Texts7getTextEt>
 8010a62:	4642      	mov	r2, r8
 8010a64:	4601      	mov	r1, r0
 8010a66:	4638      	mov	r0, r7
 8010a68:	47b0      	blx	r6
 8010a6a:	9b05      	ldr	r3, [sp, #20]
 8010a6c:	f8db 2000 	ldr.w	r2, [fp]
 8010a70:	fb13 f000 	smulbb	r0, r3, r0
 8010a74:	683b      	ldr	r3, [r7, #0]
 8010a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a78:	b286      	uxth	r6, r0
 8010a7a:	9305      	str	r3, [sp, #20]
 8010a7c:	2a00      	cmp	r2, #0
 8010a7e:	f43f af2e 	beq.w	80108de <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa2>
 8010a82:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8010a86:	f8ba 2000 	ldrh.w	r2, [sl]
 8010a8a:	428a      	cmp	r2, r1
 8010a8c:	f67f af33 	bls.w	80108f6 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xba>
 8010a90:	f8d9 0000 	ldr.w	r0, [r9]
 8010a94:	f7f4 fac6 	bl	8005024 <_ZNK8touchgfx5Texts7getTextEt>
 8010a98:	4642      	mov	r2, r8
 8010a9a:	4601      	mov	r1, r0
 8010a9c:	9b05      	ldr	r3, [sp, #20]
 8010a9e:	4638      	mov	r0, r7
 8010aa0:	4798      	blx	r3
 8010aa2:	4406      	add	r6, r0
 8010aa4:	b2b6      	uxth	r6, r6
 8010aa6:	e733      	b.n	8010910 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xd4>
 8010aa8:	08026bd0 	.word	0x08026bd0
 8010aac:	08028cc4 	.word	0x08028cc4
 8010ab0:	08026c5e 	.word	0x08026c5e
 8010ab4:	08028a94 	.word	0x08028a94
 8010ab8:	20021048 	.word	0x20021048
 8010abc:	2002104c 	.word	0x2002104c
 8010ac0:	20021054 	.word	0x20021054

08010ac4 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih>:
 8010ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ac8:	b09b      	sub	sp, #108	; 0x6c
 8010aca:	461f      	mov	r7, r3
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	4604      	mov	r4, r0
 8010ad0:	f10d 0868 	add.w	r8, sp, #104	; 0x68
 8010ad4:	9104      	str	r1, [sp, #16]
 8010ad6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8010ada:	4638      	mov	r0, r7
 8010adc:	9924      	ldr	r1, [sp, #144]	; 0x90
 8010ade:	4616      	mov	r6, r2
 8010ae0:	4798      	blx	r3
 8010ae2:	f848 0d28 	str.w	r0, [r8, #-40]!
 8010ae6:	4640      	mov	r0, r8
 8010ae8:	f7fe fca4 	bl	800f434 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8010aec:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8010af0:	1ac0      	subs	r0, r0, r3
 8010af2:	b200      	sxth	r0, r0
 8010af4:	2800      	cmp	r0, #0
 8010af6:	f2c0 80f1 	blt.w	8010cdc <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x218>
 8010afa:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
 8010afe:	441a      	add	r2, r3
 8010b00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010b04:	1a9b      	subs	r3, r3, r2
 8010b06:	b21b      	sxth	r3, r3
 8010b08:	4298      	cmp	r0, r3
 8010b0a:	f280 80e7 	bge.w	8010cdc <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x218>
 8010b0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010b10:	2214      	movs	r2, #20
 8010b12:	4641      	mov	r1, r8
 8010b14:	4620      	mov	r0, r4
 8010b16:	9302      	str	r3, [sp, #8]
 8010b18:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8010b1c:	f8df b200 	ldr.w	fp, [pc, #512]	; 8010d20 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x25c>
 8010b20:	9301      	str	r3, [sp, #4]
 8010b22:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8010b26:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 8010d24 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x260>
 8010b2a:	9300      	str	r3, [sp, #0]
 8010b2c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8010b2e:	f7ff fcfd 	bl	801052c <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 8010b32:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010b36:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 8010d28 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x264>
 8010b3a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8010b3e:	6833      	ldr	r3, [r6, #0]
 8010b40:	f040 80cf 	bne.w	8010ce2 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x21e>
 8010b44:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8010b46:	f8db 3000 	ldr.w	r3, [fp]
 8010b4a:	b92b      	cbnz	r3, 8010b58 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x94>
 8010b4c:	4b70      	ldr	r3, [pc, #448]	; (8010d10 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x24c>)
 8010b4e:	21ae      	movs	r1, #174	; 0xae
 8010b50:	4a70      	ldr	r2, [pc, #448]	; (8010d14 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x250>)
 8010b52:	4871      	ldr	r0, [pc, #452]	; (8010d18 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x254>)
 8010b54:	f013 ff50 	bl	80249f8 <__assert_func>
 8010b58:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8010b5c:	f8ba 3000 	ldrh.w	r3, [sl]
 8010b60:	428b      	cmp	r3, r1
 8010b62:	d803      	bhi.n	8010b6c <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa8>
 8010b64:	4b6d      	ldr	r3, [pc, #436]	; (8010d1c <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x258>)
 8010b66:	21af      	movs	r1, #175	; 0xaf
 8010b68:	4a6a      	ldr	r2, [pc, #424]	; (8010d14 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x250>)
 8010b6a:	e7f2      	b.n	8010b52 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x8e>
 8010b6c:	f8d9 0000 	ldr.w	r0, [r9]
 8010b70:	f7f4 fa58 	bl	8005024 <_ZNK8touchgfx5Texts7getTextEt>
 8010b74:	4642      	mov	r2, r8
 8010b76:	4601      	mov	r1, r0
 8010b78:	4630      	mov	r0, r6
 8010b7a:	47a8      	blx	r5
 8010b7c:	6832      	ldr	r2, [r6, #0]
 8010b7e:	9005      	str	r0, [sp, #20]
 8010b80:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8010b82:	f8db 2000 	ldr.w	r2, [fp]
 8010b86:	2a00      	cmp	r2, #0
 8010b88:	d0e0      	beq.n	8010b4c <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x88>
 8010b8a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8010b8e:	f8ba 2000 	ldrh.w	r2, [sl]
 8010b92:	428a      	cmp	r2, r1
 8010b94:	d9e6      	bls.n	8010b64 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa0>
 8010b96:	f8d9 0000 	ldr.w	r0, [r9]
 8010b9a:	f7f4 fa43 	bl	8005024 <_ZNK8touchgfx5Texts7getTextEt>
 8010b9e:	4642      	mov	r2, r8
 8010ba0:	4601      	mov	r1, r0
 8010ba2:	4630      	mov	r0, r6
 8010ba4:	47a8      	blx	r5
 8010ba6:	9b05      	ldr	r3, [sp, #20]
 8010ba8:	f8db 2000 	ldr.w	r2, [fp]
 8010bac:	fb13 f000 	smulbb	r0, r3, r0
 8010bb0:	6833      	ldr	r3, [r6, #0]
 8010bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bb4:	b285      	uxth	r5, r0
 8010bb6:	9305      	str	r3, [sp, #20]
 8010bb8:	2a00      	cmp	r2, #0
 8010bba:	d0c7      	beq.n	8010b4c <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x88>
 8010bbc:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8010bc0:	f8ba 2000 	ldrh.w	r2, [sl]
 8010bc4:	428a      	cmp	r2, r1
 8010bc6:	d9cd      	bls.n	8010b64 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa0>
 8010bc8:	f8d9 0000 	ldr.w	r0, [r9]
 8010bcc:	f7f4 fa2a 	bl	8005024 <_ZNK8touchgfx5Texts7getTextEt>
 8010bd0:	4642      	mov	r2, r8
 8010bd2:	4601      	mov	r1, r0
 8010bd4:	9b05      	ldr	r3, [sp, #20]
 8010bd6:	4630      	mov	r0, r6
 8010bd8:	4798      	blx	r3
 8010bda:	4405      	add	r5, r0
 8010bdc:	b2ad      	uxth	r5, r5
 8010bde:	683b      	ldr	r3, [r7, #0]
 8010be0:	f10d 0868 	add.w	r8, sp, #104	; 0x68
 8010be4:	f8b7 a0c6 	ldrh.w	sl, [r7, #198]	; 0xc6
 8010be8:	4638      	mov	r0, r7
 8010bea:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8010bee:	2700      	movs	r7, #0
 8010bf0:	9924      	ldr	r1, [sp, #144]	; 0x90
 8010bf2:	4798      	blx	r3
 8010bf4:	f848 0d3c 	str.w	r0, [r8, #-60]!
 8010bf8:	4640      	mov	r0, r8
 8010bfa:	f7fe fc1b 	bl	800f434 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8010bfe:	4450      	add	r0, sl
 8010c00:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8010c04:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
 8010c08:	eba0 0055 	sub.w	r0, r0, r5, lsr #1
 8010c0c:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 8010c10:	ad07      	add	r5, sp, #28
 8010c12:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010c16:	f8ad 701c 	strh.w	r7, [sp, #28]
 8010c1a:	f8ad 001e 	strh.w	r0, [sp, #30]
 8010c1e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010c22:	e88a 0003 	stmia.w	sl, {r0, r1}
 8010c26:	9904      	ldr	r1, [sp, #16]
 8010c28:	4650      	mov	r0, sl
 8010c2a:	f7fc fe73 	bl	800d914 <_ZN8touchgfx4RectaNERKS0_>
 8010c2e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8010c32:	42bb      	cmp	r3, r7
 8010c34:	dd52      	ble.n	8010cdc <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x218>
 8010c36:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8010c3a:	42bb      	cmp	r3, r7
 8010c3c:	dd4e      	ble.n	8010cdc <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x218>
 8010c3e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8010c42:	4629      	mov	r1, r5
 8010c44:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8010c48:	4620      	mov	r0, r4
 8010c4a:	1a9b      	subs	r3, r3, r2
 8010c4c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8010c50:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8010c54:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8010c58:	1a9b      	subs	r3, r3, r2
 8010c5a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8010c5e:	6823      	ldr	r3, [r4, #0]
 8010c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c62:	4798      	blx	r3
 8010c64:	4b2e      	ldr	r3, [pc, #184]	; (8010d20 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x25c>)
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	f43f af6f 	beq.w	8010b4c <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x88>
 8010c6e:	4a2d      	ldr	r2, [pc, #180]	; (8010d24 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x260>)
 8010c70:	f8b4 b040 	ldrh.w	fp, [r4, #64]	; 0x40
 8010c74:	8812      	ldrh	r2, [r2, #0]
 8010c76:	455a      	cmp	r2, fp
 8010c78:	f67f af74 	bls.w	8010b64 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa0>
 8010c7c:	eb03 034b 	add.w	r3, r3, fp, lsl #1
 8010c80:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 8010c84:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010c86:	785b      	ldrb	r3, [r3, #1]
 8010c88:	920d      	str	r2, [sp, #52]	; 0x34
 8010c8a:	f3c3 0001 	ubfx	r0, r3, #0, #2
 8010c8e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8010c92:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
 8010c96:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8010c9a:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
 8010c9e:	960b      	str	r6, [sp, #44]	; 0x2c
 8010ca0:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8010ca4:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
 8010ca8:	f8ad 7038 	strh.w	r7, [sp, #56]	; 0x38
 8010cac:	f88d 703b 	strb.w	r7, [sp, #59]	; 0x3b
 8010cb0:	f88d 703c 	strb.w	r7, [sp, #60]	; 0x3c
 8010cb4:	f7fd f8fc 	bl	800deb0 <_ZN8touchgfx3HAL3lcdEv>
 8010cb8:	4659      	mov	r1, fp
 8010cba:	4604      	mov	r4, r0
 8010cbc:	f8d9 0000 	ldr.w	r0, [r9]
 8010cc0:	f7f4 f9b0 	bl	8005024 <_ZNK8touchgfx5Texts7getTextEt>
 8010cc4:	ab10      	add	r3, sp, #64	; 0x40
 8010cc6:	9703      	str	r7, [sp, #12]
 8010cc8:	f8cd 8000 	str.w	r8, [sp]
 8010ccc:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8010cd0:	4653      	mov	r3, sl
 8010cd2:	4620      	mov	r0, r4
 8010cd4:	e895 0006 	ldmia.w	r5, {r1, r2}
 8010cd8:	f7f4 f956 	bl	8004f88 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8010cdc:	b01b      	add	sp, #108	; 0x6c
 8010cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ce2:	699d      	ldr	r5, [r3, #24]
 8010ce4:	f8db 3000 	ldr.w	r3, [fp]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	f43f af2f 	beq.w	8010b4c <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x88>
 8010cee:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8010cf2:	f8ba 3000 	ldrh.w	r3, [sl]
 8010cf6:	428b      	cmp	r3, r1
 8010cf8:	f67f af34 	bls.w	8010b64 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa0>
 8010cfc:	f8d9 0000 	ldr.w	r0, [r9]
 8010d00:	f7f4 f990 	bl	8005024 <_ZNK8touchgfx5Texts7getTextEt>
 8010d04:	4642      	mov	r2, r8
 8010d06:	4601      	mov	r1, r0
 8010d08:	4630      	mov	r0, r6
 8010d0a:	47a8      	blx	r5
 8010d0c:	4605      	mov	r5, r0
 8010d0e:	e766      	b.n	8010bde <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x11a>
 8010d10:	08026bd0 	.word	0x08026bd0
 8010d14:	08028cc4 	.word	0x08028cc4
 8010d18:	08026c5e 	.word	0x08026c5e
 8010d1c:	08028a94 	.word	0x08028a94
 8010d20:	20021048 	.word	0x20021048
 8010d24:	2002104c 	.word	0x2002104c
 8010d28:	20021054 	.word	0x20021054

08010d2c <_ZN8touchgfx21GraphWrapAndClearData5clearEv>:
 8010d2c:	b510      	push	{r4, lr}
 8010d2e:	4604      	mov	r4, r0
 8010d30:	f7fe fc58 	bl	800f5e4 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8010d34:	4620      	mov	r0, r4
 8010d36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d3a:	f7fe b9b5 	b.w	800f0a8 <_ZN8touchgfx17AbstractDataGraph5clearEv>

08010d3e <_ZN8touchgfx21GraphWrapAndClearData8addValueEi>:
 8010d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d40:	f9b0 511e 	ldrsh.w	r5, [r0, #286]	; 0x11e
 8010d44:	460f      	mov	r7, r1
 8010d46:	f8d0 6144 	ldr.w	r6, [r0, #324]	; 0x144
 8010d4a:	4604      	mov	r4, r0
 8010d4c:	1c6b      	adds	r3, r5, #1
 8010d4e:	4629      	mov	r1, r5
 8010d50:	f8a0 311e 	strh.w	r3, [r0, #286]	; 0x11e
 8010d54:	6803      	ldr	r3, [r0, #0]
 8010d56:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8010d5a:	4798      	blx	r3
 8010d5c:	f846 7020 	str.w	r7, [r6, r0, lsl #2]
 8010d60:	b915      	cbnz	r5, 8010d68 <_ZN8touchgfx21GraphWrapAndClearData8addValueEi+0x2a>
 8010d62:	4620      	mov	r0, r4
 8010d64:	f7fe fc3e 	bl	800f5e4 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8010d68:	4620      	mov	r0, r4
 8010d6a:	4629      	mov	r1, r5
 8010d6c:	f7fe fc12 	bl	800f594 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 8010d70:	4628      	mov	r0, r5
 8010d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010d74 <_ZN8touchgfx21GraphWrapAndClearData14beforeAddValueEv>:
 8010d74:	f9b0 111e 	ldrsh.w	r1, [r0, #286]	; 0x11e
 8010d78:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	; 0x11c
 8010d7c:	4291      	cmp	r1, r2
 8010d7e:	db03      	blt.n	8010d88 <_ZN8touchgfx21GraphWrapAndClearData14beforeAddValueEv+0x14>
 8010d80:	6803      	ldr	r3, [r0, #0]
 8010d82:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8010d86:	4718      	bx	r3
 8010d88:	4770      	bx	lr

08010d8a <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv>:
 8010d8a:	b508      	push	{r3, lr}
 8010d8c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8010d90:	b10b      	cbz	r3, 8010d96 <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv+0xc>
 8010d92:	f7f2 fdd2 	bl	800393a <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8010d96:	bd08      	pop	{r3, pc}

08010d98 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 8010d98:	6803      	ldr	r3, [r0, #0]
 8010d9a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8010d9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010da0:	4718      	bx	r3

08010da2 <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 8010da2:	4770      	bx	lr

08010da4 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 8010da4:	b510      	push	{r4, lr}
 8010da6:	4604      	mov	r4, r0
 8010da8:	212c      	movs	r1, #44	; 0x2c
 8010daa:	f013 fdf6 	bl	802499a <_ZdlPvj>
 8010dae:	4620      	mov	r0, r4
 8010db0:	bd10      	pop	{r4, pc}

08010db2 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 8010db2:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8010db6:	2bff      	cmp	r3, #255	; 0xff
 8010db8:	b510      	push	{r4, lr}
 8010dba:	d104      	bne.n	8010dc6 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 8010dbc:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 8010dbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010dc2:	429a      	cmp	r2, r3
 8010dc4:	d105      	bne.n	8010dd2 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	8003      	strh	r3, [r0, #0]
 8010dca:	8043      	strh	r3, [r0, #2]
 8010dcc:	8083      	strh	r3, [r0, #4]
 8010dce:	80c3      	strh	r3, [r0, #6]
 8010dd0:	bd10      	pop	{r4, pc}
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8010dd8:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 8010ddc:	8003      	strh	r3, [r0, #0]
 8010dde:	8043      	strh	r3, [r0, #2]
 8010de0:	8084      	strh	r4, [r0, #4]
 8010de2:	80c2      	strh	r2, [r0, #6]
 8010de4:	e7f4      	b.n	8010dd0 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

08010de6 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 8010de6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010dea:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8010dee:	b087      	sub	sp, #28
 8010df0:	4604      	mov	r4, r0
 8010df2:	4689      	mov	r9, r1
 8010df4:	b363      	cbz	r3, 8010e50 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8010df6:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8010df8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010dfc:	429a      	cmp	r2, r3
 8010dfe:	d027      	beq.n	8010e50 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8010e00:	ad06      	add	r5, sp, #24
 8010e02:	2700      	movs	r7, #0
 8010e04:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 8010e08:	4628      	mov	r0, r5
 8010e0a:	f006 f869 	bl	8016ee0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010e0e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8010e12:	a904      	add	r1, sp, #16
 8010e14:	f8ad 0014 	strh.w	r0, [sp, #20]
 8010e18:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010e1c:	4620      	mov	r0, r4
 8010e1e:	6823      	ldr	r3, [r4, #0]
 8010e20:	9704      	str	r7, [sp, #16]
 8010e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e24:	4798      	blx	r3
 8010e26:	f7fd f843 	bl	800deb0 <_ZN8touchgfx3HAL3lcdEv>
 8010e2a:	6803      	ldr	r3, [r0, #0]
 8010e2c:	4606      	mov	r6, r0
 8010e2e:	4628      	mov	r0, r5
 8010e30:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8010e34:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8010e36:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010e3a:	f006 f96d 	bl	8017118 <_ZNK8touchgfx6Bitmap7getDataEv>
 8010e3e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010e42:	4601      	mov	r1, r0
 8010e44:	9701      	str	r7, [sp, #4]
 8010e46:	aa04      	add	r2, sp, #16
 8010e48:	9300      	str	r3, [sp, #0]
 8010e4a:	4630      	mov	r0, r6
 8010e4c:	464b      	mov	r3, r9
 8010e4e:	47c0      	blx	r8
 8010e50:	b007      	add	sp, #28
 8010e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08010e56 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 8010e56:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010e58:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8010e5c:	460d      	mov	r5, r1
 8010e5e:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8010e62:	2100      	movs	r1, #0
 8010e64:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010e68:	4604      	mov	r4, r0
 8010e6a:	6803      	ldr	r3, [r0, #0]
 8010e6c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e72:	9100      	str	r1, [sp, #0]
 8010e74:	4669      	mov	r1, sp
 8010e76:	4798      	blx	r3
 8010e78:	4621      	mov	r1, r4
 8010e7a:	a802      	add	r0, sp, #8
 8010e7c:	f003 ff20 	bl	8014cc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010e80:	f7fd f816 	bl	800deb0 <_ZN8touchgfx3HAL3lcdEv>
 8010e84:	6803      	ldr	r3, [r0, #0]
 8010e86:	aa02      	add	r2, sp, #8
 8010e88:	4669      	mov	r1, sp
 8010e8a:	695e      	ldr	r6, [r3, #20]
 8010e8c:	462b      	mov	r3, r5
 8010e8e:	47b0      	blx	r6
 8010e90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010e94:	2800      	cmp	r0, #0
 8010e96:	bf08      	it	eq
 8010e98:	461d      	moveq	r5, r3
 8010e9a:	84e5      	strh	r5, [r4, #38]	; 0x26
 8010e9c:	b004      	add	sp, #16
 8010e9e:	bd70      	pop	{r4, r5, r6, pc}

08010ea0 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	8082      	strh	r2, [r0, #4]
 8010ea4:	80c2      	strh	r2, [r0, #6]
 8010ea6:	8102      	strh	r2, [r0, #8]
 8010ea8:	8142      	strh	r2, [r0, #10]
 8010eaa:	8182      	strh	r2, [r0, #12]
 8010eac:	81c2      	strh	r2, [r0, #14]
 8010eae:	8202      	strh	r2, [r0, #16]
 8010eb0:	8242      	strh	r2, [r0, #18]
 8010eb2:	61c2      	str	r2, [r0, #28]
 8010eb4:	8402      	strh	r2, [r0, #32]
 8010eb6:	8442      	strh	r2, [r0, #34]	; 0x22
 8010eb8:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8010ebc:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8010ec0:	2201      	movs	r2, #1
 8010ec2:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 8010ec6:	4a04      	ldr	r2, [pc, #16]	; (8010ed8 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x38>)
 8010ec8:	6002      	str	r2, [r0, #0]
 8010eca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010ece:	84c2      	strh	r2, [r0, #38]	; 0x26
 8010ed0:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8010ed4:	4770      	bx	lr
 8010ed6:	bf00      	nop
 8010ed8:	08028cfc 	.word	0x08028cfc

08010edc <_ZNK8touchgfx5Image17invalidateContentEv>:
 8010edc:	b508      	push	{r3, lr}
 8010ede:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8010ee2:	b10b      	cbz	r3, 8010ee8 <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
 8010ee4:	f7f2 fd29 	bl	800393a <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8010ee8:	bd08      	pop	{r3, pc}

08010eea <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 8010eea:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8010eee:	4770      	bx	lr

08010ef0 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 8010ef0:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8010ef4:	4770      	bx	lr

08010ef6 <_ZN8touchgfx13ScalableImageD1Ev>:
 8010ef6:	4770      	bx	lr

08010ef8 <_ZN8touchgfx13ScalableImageD0Ev>:
 8010ef8:	b510      	push	{r4, lr}
 8010efa:	4604      	mov	r4, r0
 8010efc:	212c      	movs	r1, #44	; 0x2c
 8010efe:	f013 fd4c 	bl	802499a <_ZdlPvj>
 8010f02:	4620      	mov	r0, r4
 8010f04:	bd10      	pop	{r4, pc}

08010f06 <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 8010f06:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010f08:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8010f0c:	4605      	mov	r5, r0
 8010f0e:	2bff      	cmp	r3, #255	; 0xff
 8010f10:	d11e      	bne.n	8010f50 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
 8010f12:	f101 0426 	add.w	r4, r1, #38	; 0x26
 8010f16:	4668      	mov	r0, sp
 8010f18:	4621      	mov	r1, r4
 8010f1a:	f006 f869 	bl	8016ff0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8010f1e:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 8010f22:	4620      	mov	r0, r4
 8010f24:	f005 ffdc 	bl	8016ee0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010f28:	4286      	cmp	r6, r0
 8010f2a:	d111      	bne.n	8010f50 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
 8010f2c:	4621      	mov	r1, r4
 8010f2e:	a802      	add	r0, sp, #8
 8010f30:	f006 f85e 	bl	8016ff0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8010f34:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8010f38:	4620      	mov	r0, r4
 8010f3a:	f006 f815 	bl	8016f68 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010f3e:	4286      	cmp	r6, r0
 8010f40:	d106      	bne.n	8010f50 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
 8010f42:	4621      	mov	r1, r4
 8010f44:	4628      	mov	r0, r5
 8010f46:	f006 f853 	bl	8016ff0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8010f4a:	4628      	mov	r0, r5
 8010f4c:	b004      	add	sp, #16
 8010f4e:	bd70      	pop	{r4, r5, r6, pc}
 8010f50:	2300      	movs	r3, #0
 8010f52:	802b      	strh	r3, [r5, #0]
 8010f54:	806b      	strh	r3, [r5, #2]
 8010f56:	80ab      	strh	r3, [r5, #4]
 8010f58:	80eb      	strh	r3, [r5, #6]
 8010f5a:	e7f6      	b.n	8010f4a <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x44>

08010f5c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 8010f5c:	b538      	push	{r3, r4, r5, lr}
 8010f5e:	2300      	movs	r3, #0
 8010f60:	2501      	movs	r5, #1
 8010f62:	4604      	mov	r4, r0
 8010f64:	8083      	strh	r3, [r0, #4]
 8010f66:	80c3      	strh	r3, [r0, #6]
 8010f68:	8103      	strh	r3, [r0, #8]
 8010f6a:	8143      	strh	r3, [r0, #10]
 8010f6c:	8183      	strh	r3, [r0, #12]
 8010f6e:	81c3      	strh	r3, [r0, #14]
 8010f70:	8203      	strh	r3, [r0, #16]
 8010f72:	8243      	strh	r3, [r0, #18]
 8010f74:	61c3      	str	r3, [r0, #28]
 8010f76:	8403      	strh	r3, [r0, #32]
 8010f78:	8443      	strh	r3, [r0, #34]	; 0x22
 8010f7a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8010f7e:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
 8010f82:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8010f86:	4b07      	ldr	r3, [pc, #28]	; (8010fa4 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 8010f88:	6003      	str	r3, [r0, #0]
 8010f8a:	880b      	ldrh	r3, [r1, #0]
 8010f8c:	84c3      	strh	r3, [r0, #38]	; 0x26
 8010f8e:	23ff      	movs	r3, #255	; 0xff
 8010f90:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8010f94:	f000 ff9d 	bl	8011ed2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8010f98:	4b03      	ldr	r3, [pc, #12]	; (8010fa8 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 8010f9a:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 8010f9e:	4620      	mov	r0, r4
 8010fa0:	6023      	str	r3, [r4, #0]
 8010fa2:	bd38      	pop	{r3, r4, r5, pc}
 8010fa4:	08028fa0 	.word	0x08028fa0
 8010fa8:	08028d6c 	.word	0x08028d6c

08010fac <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 8010fac:	4603      	mov	r3, r0
 8010fae:	3026      	adds	r0, #38	; 0x26
 8010fb0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010fb4:	b90b      	cbnz	r3, 8010fba <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 8010fb6:	f003 bf28 	b.w	8014e0a <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 8010fba:	f003 bf36 	b.w	8014e2a <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

08010fc0 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 8010fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fc4:	4604      	mov	r4, r0
 8010fc6:	469b      	mov	fp, r3
 8010fc8:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 8010fcc:	b0b3      	sub	sp, #204	; 0xcc
 8010fce:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8010fd2:	f9b1 6000 	ldrsh.w	r6, [r1]
 8010fd6:	8888      	ldrh	r0, [r1, #4]
 8010fd8:	9206      	str	r2, [sp, #24]
 8010fda:	2200      	movs	r2, #0
 8010fdc:	4430      	add	r0, r6
 8010fde:	9211      	str	r2, [sp, #68]	; 0x44
 8010fe0:	b280      	uxth	r0, r0
 8010fe2:	fa0f fe80 	sxth.w	lr, r0
 8010fe6:	4596      	cmp	lr, r2
 8010fe8:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	; 0xf0
 8010fec:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	; 0xf8
 8010ff0:	f340 811a 	ble.w	8011228 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 8010ff4:	45b4      	cmp	ip, r6
 8010ff6:	f340 8117 	ble.w	8011228 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 8010ffa:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8010ffe:	88ca      	ldrh	r2, [r1, #6]
 8011000:	442a      	add	r2, r5
 8011002:	b292      	uxth	r2, r2
 8011004:	b211      	sxth	r1, r2
 8011006:	2900      	cmp	r1, #0
 8011008:	f340 810e 	ble.w	8011228 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 801100c:	42ab      	cmp	r3, r5
 801100e:	f340 810b 	ble.w	8011228 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 8011012:	45f4      	cmp	ip, lr
 8011014:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8011018:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801101c:	bfb8      	it	lt
 801101e:	fa1f f08c 	uxthlt.w	r0, ip
 8011022:	428b      	cmp	r3, r1
 8011024:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 8011028:	bfb8      	it	lt
 801102a:	b29a      	uxthlt	r2, r3
 801102c:	1b80      	subs	r0, r0, r6
 801102e:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 8011032:	1b52      	subs	r2, r2, r5
 8011034:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 8011038:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 801103c:	ab11      	add	r3, sp, #68	; 0x44
 801103e:	ad13      	add	r5, sp, #76	; 0x4c
 8011040:	6822      	ldr	r2, [r4, #0]
 8011042:	1d26      	adds	r6, r4, #4
 8011044:	9307      	str	r3, [sp, #28]
 8011046:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011048:	e893 0003 	ldmia.w	r3, {r0, r1}
 801104c:	e885 0003 	stmia.w	r5, {r0, r1}
 8011050:	4629      	mov	r1, r5
 8011052:	4620      	mov	r0, r4
 8011054:	4790      	blx	r2
 8011056:	4621      	mov	r1, r4
 8011058:	a815      	add	r0, sp, #84	; 0x54
 801105a:	f003 fe31 	bl	8014cc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801105e:	a815      	add	r0, sp, #84	; 0x54
 8011060:	f002 fc2e 	bl	80138c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011064:	9b07      	ldr	r3, [sp, #28]
 8011066:	4631      	mov	r1, r6
 8011068:	4618      	mov	r0, r3
 801106a:	f002 fc6d 	bl	8013948 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801106e:	4628      	mov	r0, r5
 8011070:	f104 0526 	add.w	r5, r4, #38	; 0x26
 8011074:	f002 fc24 	bl	80138c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011078:	4628      	mov	r0, r5
 801107a:	f006 f84d 	bl	8017118 <_ZNK8touchgfx6Bitmap7getDataEv>
 801107e:	9007      	str	r0, [sp, #28]
 8011080:	2800      	cmp	r0, #0
 8011082:	f000 80ce 	beq.w	8011222 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x262>
 8011086:	f8db 2000 	ldr.w	r2, [fp]
 801108a:	a90d      	add	r1, sp, #52	; 0x34
 801108c:	a809      	add	r0, sp, #36	; 0x24
 801108e:	9209      	str	r2, [sp, #36]	; 0x24
 8011090:	f8db 2004 	ldr.w	r2, [fp, #4]
 8011094:	920a      	str	r2, [sp, #40]	; 0x28
 8011096:	f8db 2008 	ldr.w	r2, [fp, #8]
 801109a:	920b      	str	r2, [sp, #44]	; 0x2c
 801109c:	f8db 200c 	ldr.w	r2, [fp, #12]
 80110a0:	920c      	str	r2, [sp, #48]	; 0x30
 80110a2:	f8da 2000 	ldr.w	r2, [sl]
 80110a6:	920d      	str	r2, [sp, #52]	; 0x34
 80110a8:	f8da 2004 	ldr.w	r2, [sl, #4]
 80110ac:	920e      	str	r2, [sp, #56]	; 0x38
 80110ae:	f8da 2008 	ldr.w	r2, [sl, #8]
 80110b2:	920f      	str	r2, [sp, #60]	; 0x3c
 80110b4:	f8da 200c 	ldr.w	r2, [sl, #12]
 80110b8:	9210      	str	r2, [sp, #64]	; 0x40
 80110ba:	4632      	mov	r2, r6
 80110bc:	f002 fc28 	bl	8013910 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80110c0:	4632      	mov	r2, r6
 80110c2:	a90e      	add	r1, sp, #56	; 0x38
 80110c4:	a80a      	add	r0, sp, #40	; 0x28
 80110c6:	f002 fc23 	bl	8013910 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80110ca:	4632      	mov	r2, r6
 80110cc:	a90f      	add	r1, sp, #60	; 0x3c
 80110ce:	a80b      	add	r0, sp, #44	; 0x2c
 80110d0:	f002 fc1e 	bl	8013910 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80110d4:	4632      	mov	r2, r6
 80110d6:	a910      	add	r1, sp, #64	; 0x40
 80110d8:	a80c      	add	r0, sp, #48	; 0x30
 80110da:	f002 fc19 	bl	8013910 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80110de:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 80110e2:	edd7 3a00 	vldr	s7, [r7]
 80110e6:	eef0 6a67 	vmov.f32	s13, s15
 80110ea:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80110ee:	ed97 5a01 	vldr	s10, [r7, #4]
 80110f2:	eeb0 7a67 	vmov.f32	s14, s15
 80110f6:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80110fa:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 80110fe:	edd9 2a00 	vldr	s5, [r9]
 8011102:	eeb0 6a67 	vmov.f32	s12, s15
 8011106:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 801110a:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 801110e:	ed98 3a00 	vldr	s6, [r8]
 8011112:	ed99 4a01 	vldr	s8, [r9, #4]
 8011116:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801111a:	edd8 4a01 	vldr	s9, [r8, #4]
 801111e:	edd9 5a02 	vldr	s11, [r9, #8]
 8011122:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8011126:	ee16 6a10 	vmov	r6, s12
 801112a:	eeb0 6a67 	vmov.f32	s12, s15
 801112e:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8011132:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8011136:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801113a:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801113e:	edcd 2a20 	vstr	s5, [sp, #128]	; 0x80
 8011142:	ed8d 3a21 	vstr	s6, [sp, #132]	; 0x84
 8011146:	ee16 0a10 	vmov	r0, s12
 801114a:	eeb0 6a67 	vmov.f32	s12, s15
 801114e:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8011152:	edcd 3a22 	vstr	s7, [sp, #136]	; 0x88
 8011156:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801115a:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 801115e:	ed8d 4a25 	vstr	s8, [sp, #148]	; 0x94
 8011162:	edcd 4a26 	vstr	s9, [sp, #152]	; 0x98
 8011166:	ee16 1a10 	vmov	r1, s12
 801116a:	eeb0 6a67 	vmov.f32	s12, s15
 801116e:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8011172:	ed8d 5a27 	vstr	s10, [sp, #156]	; 0x9c
 8011176:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801117a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801117e:	f8d8 b008 	ldr.w	fp, [r8, #8]
 8011182:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8011186:	68ff      	ldr	r7, [r7, #12]
 8011188:	ee16 2a10 	vmov	r2, s12
 801118c:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 8011190:	9624      	str	r6, [sp, #144]	; 0x90
 8011192:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8011196:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 801119a:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 801119e:	4628      	mov	r0, r5
 80111a0:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 80111a4:	9b06      	ldr	r3, [sp, #24]
 80111a6:	922d      	str	r2, [sp, #180]	; 0xb4
 80111a8:	4a21      	ldr	r2, [pc, #132]	; (8011230 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x270>)
 80111aa:	9317      	str	r3, [sp, #92]	; 0x5c
 80111ac:	8812      	ldrh	r2, [r2, #0]
 80111ae:	9b07      	ldr	r3, [sp, #28]
 80111b0:	9218      	str	r2, [sp, #96]	; 0x60
 80111b2:	9319      	str	r3, [sp, #100]	; 0x64
 80111b4:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 80111b8:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 80111bc:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 80111c0:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 80111c4:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 80111c8:	9731      	str	r7, [sp, #196]	; 0xc4
 80111ca:	f005 ffd7 	bl	801717c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80111ce:	901a      	str	r0, [sp, #104]	; 0x68
 80111d0:	4628      	mov	r0, r5
 80111d2:	f005 fe85 	bl	8016ee0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80111d6:	901b      	str	r0, [sp, #108]	; 0x6c
 80111d8:	4628      	mov	r0, r5
 80111da:	f005 fec5 	bl	8016f68 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80111de:	901c      	str	r0, [sp, #112]	; 0x70
 80111e0:	4628      	mov	r0, r5
 80111e2:	f005 fe7d 	bl	8016ee0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80111e6:	4b13      	ldr	r3, [pc, #76]	; (8011234 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x274>)
 80111e8:	901d      	str	r0, [sp, #116]	; 0x74
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80111f0:	b10a      	cbz	r2, 80111f6 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x236>
 80111f2:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 80111f4:	b905      	cbnz	r5, 80111f8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x238>
 80111f6:	689d      	ldr	r5, [r3, #8]
 80111f8:	682b      	ldr	r3, [r5, #0]
 80111fa:	4620      	mov	r0, r4
 80111fc:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 80111fe:	f7ff fed5 	bl	8010fac <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 8011202:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011206:	aa1e      	add	r2, sp, #120	; 0x78
 8011208:	a917      	add	r1, sp, #92	; 0x5c
 801120a:	9304      	str	r3, [sp, #16]
 801120c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8011210:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011214:	ab13      	add	r3, sp, #76	; 0x4c
 8011216:	4628      	mov	r0, r5
 8011218:	9301      	str	r3, [sp, #4]
 801121a:	ab15      	add	r3, sp, #84	; 0x54
 801121c:	9300      	str	r3, [sp, #0]
 801121e:	ab19      	add	r3, sp, #100	; 0x64
 8011220:	47b0      	blx	r6
 8011222:	b033      	add	sp, #204	; 0xcc
 8011224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011228:	2300      	movs	r3, #0
 801122a:	9312      	str	r3, [sp, #72]	; 0x48
 801122c:	e706      	b.n	801103c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x7c>
 801122e:	bf00      	nop
 8011230:	20020fd2 	.word	0x20020fd2
 8011234:	20020fd8 	.word	0x20020fd8

08011238 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 8011238:	b570      	push	{r4, r5, r6, lr}
 801123a:	ed2d 8b04 	vpush	{d8-d9}
 801123e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8011242:	b098      	sub	sp, #96	; 0x60
 8011244:	4604      	mov	r4, r0
 8011246:	460e      	mov	r6, r1
 8011248:	2b00      	cmp	r3, #0
 801124a:	d065      	beq.n	8011318 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 801124c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8011250:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8011254:	ed9f 8a37 	vldr	s16, [pc, #220]	; 8011334 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 8011258:	ee09 3a10 	vmov	s18, r3
 801125c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8011260:	4628      	mov	r0, r5
 8011262:	ee08 3a90 	vmov	s17, r3
 8011266:	4b34      	ldr	r3, [pc, #208]	; (8011338 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 8011268:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 801126c:	930c      	str	r3, [sp, #48]	; 0x30
 801126e:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8011272:	930d      	str	r3, [sp, #52]	; 0x34
 8011274:	930e      	str	r3, [sp, #56]	; 0x38
 8011276:	ee39 9a08 	vadd.f32	s18, s18, s16
 801127a:	930f      	str	r3, [sp, #60]	; 0x3c
 801127c:	f005 fe30 	bl	8016ee0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011280:	ee07 0a90 	vmov	s15, r0
 8011284:	4628      	mov	r0, r5
 8011286:	ee78 8a88 	vadd.f32	s17, s17, s16
 801128a:	eef8 9a67 	vcvt.f32.u32	s19, s15
 801128e:	f005 fe6b 	bl	8016f68 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011292:	4b2a      	ldr	r3, [pc, #168]	; (801133c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 8011294:	ee07 0a90 	vmov	s15, r0
 8011298:	781b      	ldrb	r3, [r3, #0]
 801129a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801129e:	eef0 7a48 	vmov.f32	s15, s16
 80112a2:	2b01      	cmp	r3, #1
 80112a4:	d13c      	bne.n	8011320 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 80112a6:	eef0 6a69 	vmov.f32	s13, s19
 80112aa:	ee19 3a90 	vmov	r3, s19
 80112ae:	eeb0 6a47 	vmov.f32	s12, s14
 80112b2:	eef0 5a47 	vmov.f32	s11, s14
 80112b6:	eef0 9a48 	vmov.f32	s19, s16
 80112ba:	eeb0 7a48 	vmov.f32	s14, s16
 80112be:	9314      	str	r3, [sp, #80]	; 0x50
 80112c0:	ab14      	add	r3, sp, #80	; 0x50
 80112c2:	2200      	movs	r2, #0
 80112c4:	4631      	mov	r1, r6
 80112c6:	9303      	str	r3, [sp, #12]
 80112c8:	ab10      	add	r3, sp, #64	; 0x40
 80112ca:	4620      	mov	r0, r4
 80112cc:	edcd 7a04 	vstr	s15, [sp, #16]
 80112d0:	9302      	str	r3, [sp, #8]
 80112d2:	ab0c      	add	r3, sp, #48	; 0x30
 80112d4:	ed8d 9a05 	vstr	s18, [sp, #20]
 80112d8:	9301      	str	r3, [sp, #4]
 80112da:	ab08      	add	r3, sp, #32
 80112dc:	ed8d 9a06 	vstr	s18, [sp, #24]
 80112e0:	9300      	str	r3, [sp, #0]
 80112e2:	ab04      	add	r3, sp, #16
 80112e4:	edcd 7a07 	vstr	s15, [sp, #28]
 80112e8:	edcd 7a08 	vstr	s15, [sp, #32]
 80112ec:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 80112f0:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 80112f4:	edcd 8a0b 	vstr	s17, [sp, #44]	; 0x2c
 80112f8:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 80112fc:	edcd 9a11 	vstr	s19, [sp, #68]	; 0x44
 8011300:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
 8011304:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 8011308:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 801130c:	ed8d 7a16 	vstr	s14, [sp, #88]	; 0x58
 8011310:	edcd 6a17 	vstr	s13, [sp, #92]	; 0x5c
 8011314:	f7ff fe54 	bl	8010fc0 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8011318:	b018      	add	sp, #96	; 0x60
 801131a:	ecbd 8b04 	vpop	{d8-d9}
 801131e:	bd70      	pop	{r4, r5, r6, pc}
 8011320:	eef0 6a47 	vmov.f32	s13, s14
 8011324:	ee18 3a10 	vmov	r3, s16
 8011328:	eef0 5a69 	vmov.f32	s11, s19
 801132c:	eeb0 6a48 	vmov.f32	s12, s16
 8011330:	e7c5      	b.n	80112be <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 8011332:	bf00      	nop
 8011334:	00000000 	.word	0x00000000
 8011338:	42c80000 	.word	0x42c80000
 801133c:	20020fd0 	.word	0x20020fd0

08011340 <_ZN8touchgfx8TextArea8setWidthEs>:
 8011340:	b530      	push	{r4, r5, lr}
 8011342:	b085      	sub	sp, #20
 8011344:	6803      	ldr	r3, [r0, #0]
 8011346:	4604      	mov	r4, r0
 8011348:	8101      	strh	r1, [r0, #8]
 801134a:	466d      	mov	r5, sp
 801134c:	4601      	mov	r1, r0
 801134e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011352:	343c      	adds	r4, #60	; 0x3c
 8011354:	4628      	mov	r0, r5
 8011356:	4798      	blx	r3
 8011358:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801135c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011360:	b005      	add	sp, #20
 8011362:	bd30      	pop	{r4, r5, pc}

08011364 <_ZN8touchgfx8TextArea9setHeightEs>:
 8011364:	b530      	push	{r4, r5, lr}
 8011366:	b085      	sub	sp, #20
 8011368:	6803      	ldr	r3, [r0, #0]
 801136a:	4604      	mov	r4, r0
 801136c:	8141      	strh	r1, [r0, #10]
 801136e:	466d      	mov	r5, sp
 8011370:	4601      	mov	r1, r0
 8011372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011376:	343c      	adds	r4, #60	; 0x3c
 8011378:	4628      	mov	r0, r5
 801137a:	4798      	blx	r3
 801137c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011380:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011384:	b005      	add	sp, #20
 8011386:	bd30      	pop	{r4, r5, pc}

08011388 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8011388:	2200      	movs	r2, #0
 801138a:	8002      	strh	r2, [r0, #0]
 801138c:	8042      	strh	r2, [r0, #2]
 801138e:	8082      	strh	r2, [r0, #4]
 8011390:	80c2      	strh	r2, [r0, #6]
 8011392:	4770      	bx	lr

08011394 <_ZN8touchgfx8TextArea8setAlphaEh>:
 8011394:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
 8011398:	4770      	bx	lr

0801139a <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 801139a:	b570      	push	{r4, r5, r6, lr}
 801139c:	6803      	ldr	r3, [r0, #0]
 801139e:	4604      	mov	r4, r0
 80113a0:	4615      	mov	r5, r2
 80113a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113a4:	4798      	blx	r3
 80113a6:	6823      	ldr	r3, [r4, #0]
 80113a8:	4629      	mov	r1, r5
 80113aa:	4620      	mov	r0, r4
 80113ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80113ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80113b2:	4718      	bx	r3

080113b4 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 80113b4:	2000      	movs	r0, #0
 80113b6:	4770      	bx	lr

080113b8 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
 80113b8:	2000      	movs	r0, #0
 80113ba:	4770      	bx	lr

080113bc <_ZN8touchgfx8TextAreaD1Ev>:
 80113bc:	4770      	bx	lr
	...

080113c0 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 80113c0:	b570      	push	{r4, r5, r6, lr}
 80113c2:	6803      	ldr	r3, [r0, #0]
 80113c4:	4604      	mov	r4, r0
 80113c6:	b28d      	uxth	r5, r1
 80113c8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80113ca:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80113cc:	4b10      	ldr	r3, [pc, #64]	; (8011410 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	b92b      	cbnz	r3, 80113de <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 80113d2:	4b10      	ldr	r3, [pc, #64]	; (8011414 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 80113d4:	21ae      	movs	r1, #174	; 0xae
 80113d6:	4a10      	ldr	r2, [pc, #64]	; (8011418 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80113d8:	4810      	ldr	r0, [pc, #64]	; (801141c <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 80113da:	f013 fb0d 	bl	80249f8 <__assert_func>
 80113de:	4910      	ldr	r1, [pc, #64]	; (8011420 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 80113e0:	8809      	ldrh	r1, [r1, #0]
 80113e2:	4291      	cmp	r1, r2
 80113e4:	d803      	bhi.n	80113ee <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 80113e6:	4b0f      	ldr	r3, [pc, #60]	; (8011424 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 80113e8:	21af      	movs	r1, #175	; 0xaf
 80113ea:	4a0b      	ldr	r2, [pc, #44]	; (8011418 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80113ec:	e7f4      	b.n	80113d8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 80113ee:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80113f2:	4b0d      	ldr	r3, [pc, #52]	; (8011428 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80113fa:	6803      	ldr	r3, [r0, #0]
 80113fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113fe:	4798      	blx	r3
 8011400:	1a29      	subs	r1, r5, r0
 8011402:	4633      	mov	r3, r6
 8011404:	4620      	mov	r0, r4
 8011406:	b209      	sxth	r1, r1
 8011408:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801140c:	4718      	bx	r3
 801140e:	bf00      	nop
 8011410:	20021048 	.word	0x20021048
 8011414:	08026bd0 	.word	0x08026bd0
 8011418:	08028e68 	.word	0x08028e68
 801141c:	08026c5e 	.word	0x08026c5e
 8011420:	2002104c 	.word	0x2002104c
 8011424:	08028a94 	.word	0x08028a94
 8011428:	20021050 	.word	0x20021050

0801142c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801142c:	4b1b      	ldr	r3, [pc, #108]	; (801149c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801142e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011432:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8011434:	4604      	mov	r4, r0
 8011436:	881b      	ldrh	r3, [r3, #0]
 8011438:	428b      	cmp	r3, r1
 801143a:	d92d      	bls.n	8011498 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>
 801143c:	4b18      	ldr	r3, [pc, #96]	; (80114a0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	b92b      	cbnz	r3, 801144e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x22>
 8011442:	4b18      	ldr	r3, [pc, #96]	; (80114a4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8011444:	21ae      	movs	r1, #174	; 0xae
 8011446:	4a18      	ldr	r2, [pc, #96]	; (80114a8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8011448:	4818      	ldr	r0, [pc, #96]	; (80114ac <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 801144a:	f013 fad5 	bl	80249f8 <__assert_func>
 801144e:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8011452:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8011456:	4b16      	ldr	r3, [pc, #88]	; (80114b0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x84>)
 8011458:	7855      	ldrb	r5, [r2, #1]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8011460:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8011464:	6833      	ldr	r3, [r6, #0]
 8011466:	69df      	ldr	r7, [r3, #28]
 8011468:	4b12      	ldr	r3, [pc, #72]	; (80114b4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x88>)
 801146a:	6818      	ldr	r0, [r3, #0]
 801146c:	f7f3 fdda 	bl	8005024 <_ZNK8touchgfx5Texts7getTextEt>
 8011470:	6823      	ldr	r3, [r4, #0]
 8011472:	4680      	mov	r8, r0
 8011474:	4620      	mov	r0, r4
 8011476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011478:	4798      	blx	r3
 801147a:	6823      	ldr	r3, [r4, #0]
 801147c:	4681      	mov	r9, r0
 801147e:	4620      	mov	r0, r4
 8011480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011484:	4798      	blx	r3
 8011486:	464b      	mov	r3, r9
 8011488:	9000      	str	r0, [sp, #0]
 801148a:	4642      	mov	r2, r8
 801148c:	4629      	mov	r1, r5
 801148e:	4630      	mov	r0, r6
 8011490:	47b8      	blx	r7
 8011492:	b003      	add	sp, #12
 8011494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011498:	2000      	movs	r0, #0
 801149a:	e7fa      	b.n	8011492 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x66>
 801149c:	2002104c 	.word	0x2002104c
 80114a0:	20021048 	.word	0x20021048
 80114a4:	08026bd0 	.word	0x08026bd0
 80114a8:	08028e68 	.word	0x08028e68
 80114ac:	08026c5e 	.word	0x08026c5e
 80114b0:	20021050 	.word	0x20021050
 80114b4:	20021054 	.word	0x20021054

080114b8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 80114b8:	b40e      	push	{r1, r2, r3}
 80114ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114be:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 80115b0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>
 80114c2:	b09c      	sub	sp, #112	; 0x70
 80114c4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80114c6:	4604      	mov	r4, r0
 80114c8:	f8b9 3000 	ldrh.w	r3, [r9]
 80114cc:	4293      	cmp	r3, r2
 80114ce:	d965      	bls.n	801159c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>
 80114d0:	ab26      	add	r3, sp, #152	; 0x98
 80114d2:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 80115b4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>
 80114d6:	9302      	str	r3, [sp, #8]
 80114d8:	f8da 3000 	ldr.w	r3, [sl]
 80114dc:	b92b      	cbnz	r3, 80114ea <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x32>
 80114de:	4b30      	ldr	r3, [pc, #192]	; (80115a0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 80114e0:	21ae      	movs	r1, #174	; 0xae
 80114e2:	4a30      	ldr	r2, [pc, #192]	; (80115a4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 80114e4:	4830      	ldr	r0, [pc, #192]	; (80115a8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 80114e6:	f013 fa87 	bl	80249f8 <__assert_func>
 80114ea:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80115b8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 80114ee:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80114f2:	f8d8 3000 	ldr.w	r3, [r8]
 80114f6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80114fa:	682b      	ldr	r3, [r5, #0]
 80114fc:	4628      	mov	r0, r5
 80114fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011500:	4798      	blx	r3
 8011502:	4606      	mov	r6, r0
 8011504:	b207      	sxth	r7, r0
 8011506:	a803      	add	r0, sp, #12
 8011508:	f004 f8b9 	bl	801567e <_ZN8touchgfx12TextProviderC1Ev>
 801150c:	682b      	ldr	r3, [r5, #0]
 801150e:	4628      	mov	r0, r5
 8011510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011512:	4798      	blx	r3
 8011514:	682b      	ldr	r3, [r5, #0]
 8011516:	4683      	mov	fp, r0
 8011518:	4628      	mov	r0, r5
 801151a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801151c:	4798      	blx	r3
 801151e:	465b      	mov	r3, fp
 8011520:	9000      	str	r0, [sp, #0]
 8011522:	a803      	add	r0, sp, #12
 8011524:	9925      	ldr	r1, [sp, #148]	; 0x94
 8011526:	9a02      	ldr	r2, [sp, #8]
 8011528:	f004 f914 	bl	8015754 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801152c:	f8da 3000 	ldr.w	r3, [sl]
 8011530:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8011534:	2b00      	cmp	r3, #0
 8011536:	d0d2      	beq.n	80114de <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x26>
 8011538:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801153a:	f8b9 0000 	ldrh.w	r0, [r9]
 801153e:	4290      	cmp	r0, r2
 8011540:	d926      	bls.n	8011590 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
 8011542:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 8011546:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801154a:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 801154e:	786a      	ldrb	r2, [r5, #1]
 8011550:	8925      	ldrh	r5, [r4, #8]
 8011552:	f8d8 3000 	ldr.w	r3, [r8]
 8011556:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801155a:	eba5 050c 	sub.w	r5, r5, ip
 801155e:	b22d      	sxth	r5, r5
 8011560:	9500      	str	r5, [sp, #0]
 8011562:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011566:	a803      	add	r0, sp, #12
 8011568:	f001 fec8 	bl	80132fc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801156c:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8011570:	b203      	sxth	r3, r0
 8011572:	18b9      	adds	r1, r7, r2
 8011574:	2900      	cmp	r1, #0
 8011576:	dd0f      	ble.n	8011598 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>
 8011578:	3b01      	subs	r3, #1
 801157a:	fb13 f302 	smulbb	r3, r3, r2
 801157e:	fb16 3300 	smlabb	r3, r6, r0, r3
 8011582:	b21f      	sxth	r7, r3
 8011584:	4638      	mov	r0, r7
 8011586:	b01c      	add	sp, #112	; 0x70
 8011588:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801158c:	b003      	add	sp, #12
 801158e:	4770      	bx	lr
 8011590:	4b06      	ldr	r3, [pc, #24]	; (80115ac <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8011592:	21af      	movs	r1, #175	; 0xaf
 8011594:	4a03      	ldr	r2, [pc, #12]	; (80115a4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 8011596:	e7a5      	b.n	80114e4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2c>
 8011598:	2b00      	cmp	r3, #0
 801159a:	dcf3      	bgt.n	8011584 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 801159c:	2700      	movs	r7, #0
 801159e:	e7f1      	b.n	8011584 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 80115a0:	08026bd0 	.word	0x08026bd0
 80115a4:	08028e68 	.word	0x08028e68
 80115a8:	08026c5e 	.word	0x08026c5e
 80115ac:	08028a94 	.word	0x08028a94
 80115b0:	2002104c 	.word	0x2002104c
 80115b4:	20021048 	.word	0x20021048
 80115b8:	20021050 	.word	0x20021050

080115bc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 80115bc:	4b6d      	ldr	r3, [pc, #436]	; (8011774 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1b8>)
 80115be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115c2:	460c      	mov	r4, r1
 80115c4:	881a      	ldrh	r2, [r3, #0]
 80115c6:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 80115c8:	b0b9      	sub	sp, #228	; 0xe4
 80115ca:	4681      	mov	r9, r0
 80115cc:	428a      	cmp	r2, r1
 80115ce:	9302      	str	r3, [sp, #8]
 80115d0:	d809      	bhi.n	80115e6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2a>
 80115d2:	2300      	movs	r3, #0
 80115d4:	f04f 32ff 	mov.w	r2, #4294967295
 80115d8:	6083      	str	r3, [r0, #8]
 80115da:	e9c0 3200 	strd	r3, r2, [r0]
 80115de:	4648      	mov	r0, r9
 80115e0:	b039      	add	sp, #228	; 0xe4
 80115e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115e6:	4a64      	ldr	r2, [pc, #400]	; (8011778 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1bc>)
 80115e8:	6813      	ldr	r3, [r2, #0]
 80115ea:	4692      	mov	sl, r2
 80115ec:	b92b      	cbnz	r3, 80115fa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x3e>
 80115ee:	4b63      	ldr	r3, [pc, #396]	; (801177c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1c0>)
 80115f0:	21ae      	movs	r1, #174	; 0xae
 80115f2:	4a63      	ldr	r2, [pc, #396]	; (8011780 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1c4>)
 80115f4:	4863      	ldr	r0, [pc, #396]	; (8011784 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1c8>)
 80115f6:	f013 f9ff 	bl	80249f8 <__assert_func>
 80115fa:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 80115fe:	4b62      	ldr	r3, [pc, #392]	; (8011788 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1cc>)
 8011600:	f8df b18c 	ldr.w	fp, [pc, #396]	; 8011790 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1d4>
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	f8db 0000 	ldr.w	r0, [fp]
 801160a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801160e:	f7f3 fd09 	bl	8005024 <_ZNK8touchgfx5Texts7getTextEt>
 8011612:	4680      	mov	r8, r0
 8011614:	682b      	ldr	r3, [r5, #0]
 8011616:	4628      	mov	r0, r5
 8011618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801161a:	4798      	blx	r3
 801161c:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
 801161e:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
 8011622:	4406      	add	r6, r0
 8011624:	f8cd b00c 	str.w	fp, [sp, #12]
 8011628:	b2b6      	uxth	r6, r6
 801162a:	2f00      	cmp	r7, #0
 801162c:	f040 80b2 	bne.w	8011794 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1d8>
 8011630:	a806      	add	r0, sp, #24
 8011632:	f004 f824 	bl	801567e <_ZN8touchgfx12TextProviderC1Ev>
 8011636:	682b      	ldr	r3, [r5, #0]
 8011638:	4628      	mov	r0, r5
 801163a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801163c:	4798      	blx	r3
 801163e:	682b      	ldr	r3, [r5, #0]
 8011640:	4683      	mov	fp, r0
 8011642:	4628      	mov	r0, r5
 8011644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011646:	4798      	blx	r3
 8011648:	6822      	ldr	r2, [r4, #0]
 801164a:	9005      	str	r0, [sp, #20]
 801164c:	4620      	mov	r0, r4
 801164e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8011650:	4790      	blx	r2
 8011652:	6821      	ldr	r1, [r4, #0]
 8011654:	9004      	str	r0, [sp, #16]
 8011656:	4620      	mov	r0, r4
 8011658:	f8d1 1080 	ldr.w	r1, [r1, #128]	; 0x80
 801165c:	4788      	blx	r1
 801165e:	9a04      	ldr	r2, [sp, #16]
 8011660:	4641      	mov	r1, r8
 8011662:	46b8      	mov	r8, r7
 8011664:	9001      	str	r0, [sp, #4]
 8011666:	a806      	add	r0, sp, #24
 8011668:	9200      	str	r2, [sp, #0]
 801166a:	465a      	mov	r2, fp
 801166c:	9b05      	ldr	r3, [sp, #20]
 801166e:	f004 f886 	bl	801577e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8011672:	f8da 3000 	ldr.w	r3, [sl]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d0b9      	beq.n	80115ee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x32>
 801167a:	9902      	ldr	r1, [sp, #8]
 801167c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801167e:	8809      	ldrh	r1, [r1, #0]
 8011680:	4291      	cmp	r1, r2
 8011682:	d803      	bhi.n	801168c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xd0>
 8011684:	4b41      	ldr	r3, [pc, #260]	; (801178c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1d0>)
 8011686:	21af      	movs	r1, #175	; 0xaf
 8011688:	4a3d      	ldr	r2, [pc, #244]	; (8011780 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1c4>)
 801168a:	e7b3      	b.n	80115f4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x38>
 801168c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8011690:	4629      	mov	r1, r5
 8011692:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011696:	a806      	add	r0, sp, #24
 8011698:	785b      	ldrb	r3, [r3, #1]
 801169a:	3701      	adds	r7, #1
 801169c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80116a0:	b2bf      	uxth	r7, r7
 80116a2:	f001 fb7f 	bl	8012da4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80116a6:	4580      	cmp	r8, r0
 80116a8:	bfb8      	it	lt
 80116aa:	fa0f f880 	sxthlt.w	r8, r0
 80116ae:	a806      	add	r0, sp, #24
 80116b0:	f004 f80c 	bl	80156cc <_ZN8touchgfx12TextProvider11endOfStringEv>
 80116b4:	2800      	cmp	r0, #0
 80116b6:	d0dc      	beq.n	8011672 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xb6>
 80116b8:	fb16 f607 	smulbb	r6, r6, r7
 80116bc:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 80116be:	1bf6      	subs	r6, r6, r7
 80116c0:	b2b6      	uxth	r6, r6
 80116c2:	fa0f fb86 	sxth.w	fp, r6
 80116c6:	f1bb 0f00 	cmp.w	fp, #0
 80116ca:	dd06      	ble.n	80116da <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x11e>
 80116cc:	682b      	ldr	r3, [r5, #0]
 80116ce:	4628      	mov	r0, r5
 80116d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116d2:	4798      	blx	r3
 80116d4:	4430      	add	r0, r6
 80116d6:	fa0f fb80 	sxth.w	fp, r0
 80116da:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80116de:	4620      	mov	r0, r4
 80116e0:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80116e4:	6823      	ldr	r3, [r4, #0]
 80116e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116e8:	bf0c      	ite	eq
 80116ea:	f9b4 6008 	ldrsheq.w	r6, [r4, #8]
 80116ee:	f9b4 600a 	ldrshne.w	r6, [r4, #10]
 80116f2:	4798      	blx	r3
 80116f4:	2801      	cmp	r0, #1
 80116f6:	fa1f f288 	uxth.w	r2, r8
 80116fa:	f000 80f7 	beq.w	80118ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x330>
 80116fe:	2802      	cmp	r0, #2
 8011700:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8011704:	f000 80f9 	beq.w	80118fa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x33e>
 8011708:	7a29      	ldrb	r1, [r5, #8]
 801170a:	b21b      	sxth	r3, r3
 801170c:	7a68      	ldrb	r0, [r5, #9]
 801170e:	1a5b      	subs	r3, r3, r1
 8011710:	4401      	add	r1, r0
 8011712:	b29b      	uxth	r3, r3
 8011714:	440a      	add	r2, r1
 8011716:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 801171a:	b21e      	sxth	r6, r3
 801171c:	b292      	uxth	r2, r2
 801171e:	2902      	cmp	r1, #2
 8011720:	b217      	sxth	r7, r2
 8011722:	f000 80ed 	beq.w	8011900 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x344>
 8011726:	2903      	cmp	r1, #3
 8011728:	f000 80f3 	beq.w	8011912 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x356>
 801172c:	2901      	cmp	r1, #1
 801172e:	f040 80f9 	bne.w	8011924 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x368>
 8011732:	8923      	ldrh	r3, [r4, #8]
 8011734:	463a      	mov	r2, r7
 8011736:	4635      	mov	r5, r6
 8011738:	465f      	mov	r7, fp
 801173a:	eba3 030b 	sub.w	r3, r3, fp
 801173e:	4693      	mov	fp, r2
 8011740:	b21e      	sxth	r6, r3
 8011742:	f8da 3000 	ldr.w	r3, [sl]
 8011746:	2b00      	cmp	r3, #0
 8011748:	f43f af51 	beq.w	80115ee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x32>
 801174c:	9b02      	ldr	r3, [sp, #8]
 801174e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8011750:	881b      	ldrh	r3, [r3, #0]
 8011752:	428b      	cmp	r3, r1
 8011754:	d996      	bls.n	8011684 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xc8>
 8011756:	9b03      	ldr	r3, [sp, #12]
 8011758:	6818      	ldr	r0, [r3, #0]
 801175a:	f7f3 fc63 	bl	8005024 <_ZNK8touchgfx5Texts7getTextEt>
 801175e:	f8a9 6000 	strh.w	r6, [r9]
 8011762:	f8a9 5002 	strh.w	r5, [r9, #2]
 8011766:	f8a9 7004 	strh.w	r7, [r9, #4]
 801176a:	f8a9 b006 	strh.w	fp, [r9, #6]
 801176e:	f8c9 0008 	str.w	r0, [r9, #8]
 8011772:	e734      	b.n	80115de <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x22>
 8011774:	2002104c 	.word	0x2002104c
 8011778:	20021048 	.word	0x20021048
 801177c:	08026bd0 	.word	0x08026bd0
 8011780:	08028e68 	.word	0x08028e68
 8011784:	08026c5e 	.word	0x08026c5e
 8011788:	20021050 	.word	0x20021050
 801178c:	08028a94 	.word	0x08028a94
 8011790:	20021054 	.word	0x20021054
 8011794:	af1f      	add	r7, sp, #124	; 0x7c
 8011796:	4638      	mov	r0, r7
 8011798:	f003 ff71 	bl	801567e <_ZN8touchgfx12TextProviderC1Ev>
 801179c:	682b      	ldr	r3, [r5, #0]
 801179e:	4628      	mov	r0, r5
 80117a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117a2:	4798      	blx	r3
 80117a4:	682b      	ldr	r3, [r5, #0]
 80117a6:	4683      	mov	fp, r0
 80117a8:	4628      	mov	r0, r5
 80117aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80117ac:	4798      	blx	r3
 80117ae:	6822      	ldr	r2, [r4, #0]
 80117b0:	9005      	str	r0, [sp, #20]
 80117b2:	4620      	mov	r0, r4
 80117b4:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80117b6:	4790      	blx	r2
 80117b8:	6821      	ldr	r1, [r4, #0]
 80117ba:	9004      	str	r0, [sp, #16]
 80117bc:	4620      	mov	r0, r4
 80117be:	f8d1 1080 	ldr.w	r1, [r1, #128]	; 0x80
 80117c2:	4788      	blx	r1
 80117c4:	9a04      	ldr	r2, [sp, #16]
 80117c6:	9001      	str	r0, [sp, #4]
 80117c8:	4641      	mov	r1, r8
 80117ca:	9200      	str	r2, [sp, #0]
 80117cc:	4638      	mov	r0, r7
 80117ce:	465a      	mov	r2, fp
 80117d0:	9b05      	ldr	r3, [sp, #20]
 80117d2:	f003 ffd4 	bl	801577e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80117d6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80117da:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80117de:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80117e2:	f9b4 b008 	ldrsh.w	fp, [r4, #8]
 80117e6:	bf12      	itee	ne
 80117e8:	4613      	movne	r3, r2
 80117ea:	465b      	moveq	r3, fp
 80117ec:	4693      	moveq	fp, r2
 80117ee:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 80117f2:	1a9b      	subs	r3, r3, r2
 80117f4:	b29a      	uxth	r2, r3
 80117f6:	f8da 3000 	ldr.w	r3, [sl]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	f43f aef7 	beq.w	80115ee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x32>
 8011800:	9802      	ldr	r0, [sp, #8]
 8011802:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8011804:	8800      	ldrh	r0, [r0, #0]
 8011806:	4288      	cmp	r0, r1
 8011808:	f67f af3c 	bls.w	8011684 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xc8>
 801180c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8011810:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 8011814:	7859      	ldrb	r1, [r3, #1]
 8011816:	2300      	movs	r3, #0
 8011818:	9707      	str	r7, [sp, #28]
 801181a:	f3c1 0181 	ubfx	r1, r1, #2, #2
 801181e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011822:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8011826:	f88d 1020 	strb.w	r1, [sp, #32]
 801182a:	9509      	str	r5, [sp, #36]	; 0x24
 801182c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8011830:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8011834:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8011838:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801183c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8011840:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8011844:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8011848:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
 801184c:	b350      	cbz	r0, 80118a4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e8>
 801184e:	682b      	ldr	r3, [r5, #0]
 8011850:	4628      	mov	r0, r5
 8011852:	695b      	ldr	r3, [r3, #20]
 8011854:	4798      	blx	r3
 8011856:	4680      	mov	r8, r0
 8011858:	b320      	cbz	r0, 80118a4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e8>
 801185a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801185c:	4641      	mov	r1, r8
 801185e:	6803      	ldr	r3, [r0, #0]
 8011860:	68db      	ldr	r3, [r3, #12]
 8011862:	4798      	blx	r3
 8011864:	4607      	mov	r7, r0
 8011866:	b1e8      	cbz	r0, 80118a4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e8>
 8011868:	7b43      	ldrb	r3, [r0, #13]
 801186a:	7a82      	ldrb	r2, [r0, #10]
 801186c:	005b      	lsls	r3, r3, #1
 801186e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011872:	4313      	orrs	r3, r2
 8011874:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8011878:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 801187c:	2b04      	cmp	r3, #4
 801187e:	d111      	bne.n	80118a4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e8>
 8011880:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011882:	463a      	mov	r2, r7
 8011884:	4641      	mov	r1, r8
 8011886:	6803      	ldr	r3, [r0, #0]
 8011888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801188a:	4798      	blx	r3
 801188c:	7b7b      	ldrb	r3, [r7, #13]
 801188e:	005b      	lsls	r3, r3, #1
 8011890:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8011894:	7abb      	ldrb	r3, [r7, #10]
 8011896:	4313      	orrs	r3, r2
 8011898:	4418      	add	r0, r3
 801189a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801189e:	4418      	add	r0, r3
 80118a0:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 80118a4:	b233      	sxth	r3, r6
 80118a6:	2700      	movs	r7, #0
 80118a8:	005a      	lsls	r2, r3, #1
 80118aa:	46b8      	mov	r8, r7
 80118ac:	455a      	cmp	r2, fp
 80118ae:	a806      	add	r0, sp, #24
 80118b0:	9305      	str	r3, [sp, #20]
 80118b2:	f107 0701 	add.w	r7, r7, #1
 80118b6:	bfd4      	ite	le
 80118b8:	2100      	movle	r1, #0
 80118ba:	2101      	movgt	r1, #1
 80118bc:	9204      	str	r2, [sp, #16]
 80118be:	f001 fc4e 	bl	801315e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80118c2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80118c6:	ebab 0b06 	sub.w	fp, fp, r6
 80118ca:	b2bf      	uxth	r7, r7
 80118cc:	4588      	cmp	r8, r1
 80118ce:	fa0f fb8b 	sxth.w	fp, fp
 80118d2:	bfb8      	it	lt
 80118d4:	fa0f f881 	sxthlt.w	r8, r1
 80118d8:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80118dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80118e0:	2900      	cmp	r1, #0
 80118e2:	f43f aee9 	beq.w	80116b8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80118e6:	455b      	cmp	r3, fp
 80118e8:	dbe0      	blt.n	80118ac <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f0>
 80118ea:	e6e5      	b.n	80116b8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80118ec:	eba6 0308 	sub.w	r3, r6, r8
 80118f0:	f04f 0802 	mov.w	r8, #2
 80118f4:	fb93 f3f8 	sdiv	r3, r3, r8
 80118f8:	e706      	b.n	8011708 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14c>
 80118fa:	4413      	add	r3, r2
 80118fc:	1af3      	subs	r3, r6, r3
 80118fe:	e703      	b.n	8011708 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14c>
 8011900:	8926      	ldrh	r6, [r4, #8]
 8011902:	8965      	ldrh	r5, [r4, #10]
 8011904:	1ab2      	subs	r2, r6, r2
 8011906:	eba5 050b 	sub.w	r5, r5, fp
 801190a:	1ad3      	subs	r3, r2, r3
 801190c:	b22d      	sxth	r5, r5
 801190e:	b21e      	sxth	r6, r3
 8011910:	e717      	b.n	8011742 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x186>
 8011912:	8965      	ldrh	r5, [r4, #10]
 8011914:	2600      	movs	r6, #0
 8011916:	1aaa      	subs	r2, r5, r2
 8011918:	1ad3      	subs	r3, r2, r3
 801191a:	b21d      	sxth	r5, r3
 801191c:	463b      	mov	r3, r7
 801191e:	465f      	mov	r7, fp
 8011920:	469b      	mov	fp, r3
 8011922:	e70e      	b.n	8011742 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x186>
 8011924:	2500      	movs	r5, #0
 8011926:	e70c      	b.n	8011742 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x186>

08011928 <_ZN8touchgfx8TextAreaD0Ev>:
 8011928:	b510      	push	{r4, lr}
 801192a:	4604      	mov	r4, r0
 801192c:	2148      	movs	r1, #72	; 0x48
 801192e:	f013 f834 	bl	802499a <_ZdlPvj>
 8011932:	4620      	mov	r0, r4
 8011934:	bd10      	pop	{r4, pc}
	...

08011938 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8011938:	b508      	push	{r3, lr}
 801193a:	4b0b      	ldr	r3, [pc, #44]	; (8011968 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x30>)
 801193c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801193e:	881b      	ldrh	r3, [r3, #0]
 8011940:	4293      	cmp	r3, r2
 8011942:	d90e      	bls.n	8011962 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x2a>
 8011944:	4b09      	ldr	r3, [pc, #36]	; (801196c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x34>)
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	b92b      	cbnz	r3, 8011956 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x1e>
 801194a:	4b09      	ldr	r3, [pc, #36]	; (8011970 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x38>)
 801194c:	21ae      	movs	r1, #174	; 0xae
 801194e:	4a09      	ldr	r2, [pc, #36]	; (8011974 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x3c>)
 8011950:	4809      	ldr	r0, [pc, #36]	; (8011978 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x40>)
 8011952:	f013 f851 	bl	80249f8 <__assert_func>
 8011956:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801195a:	7858      	ldrb	r0, [r3, #1]
 801195c:	f000 0003 	and.w	r0, r0, #3
 8011960:	bd08      	pop	{r3, pc}
 8011962:	2000      	movs	r0, #0
 8011964:	e7fc      	b.n	8011960 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x28>
 8011966:	bf00      	nop
 8011968:	2002104c 	.word	0x2002104c
 801196c:	20021048 	.word	0x20021048
 8011970:	08026bd0 	.word	0x08026bd0
 8011974:	08028e68 	.word	0x08028e68
 8011978:	08026c5e 	.word	0x08026c5e

0801197c <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 801197c:	4b16      	ldr	r3, [pc, #88]	; (80119d8 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x5c>)
 801197e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011982:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8011984:	4604      	mov	r4, r0
 8011986:	881b      	ldrh	r3, [r3, #0]
 8011988:	428b      	cmp	r3, r1
 801198a:	d921      	bls.n	80119d0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x54>
 801198c:	6803      	ldr	r3, [r0, #0]
 801198e:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8011990:	4b12      	ldr	r3, [pc, #72]	; (80119dc <_ZNK8touchgfx8TextArea13getTextHeightEv+0x60>)
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	b92b      	cbnz	r3, 80119a2 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x26>
 8011996:	4b12      	ldr	r3, [pc, #72]	; (80119e0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x64>)
 8011998:	21ae      	movs	r1, #174	; 0xae
 801199a:	4a12      	ldr	r2, [pc, #72]	; (80119e4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x68>)
 801199c:	4812      	ldr	r0, [pc, #72]	; (80119e8 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x6c>)
 801199e:	f013 f82b 	bl	80249f8 <__assert_func>
 80119a2:	4b12      	ldr	r3, [pc, #72]	; (80119ec <_ZNK8touchgfx8TextArea13getTextHeightEv+0x70>)
 80119a4:	6818      	ldr	r0, [r3, #0]
 80119a6:	f7f3 fb3d 	bl	8005024 <_ZNK8touchgfx5Texts7getTextEt>
 80119aa:	6823      	ldr	r3, [r4, #0]
 80119ac:	4606      	mov	r6, r0
 80119ae:	4620      	mov	r0, r4
 80119b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80119b2:	4798      	blx	r3
 80119b4:	6823      	ldr	r3, [r4, #0]
 80119b6:	4607      	mov	r7, r0
 80119b8:	4620      	mov	r0, r4
 80119ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80119be:	4798      	blx	r3
 80119c0:	463a      	mov	r2, r7
 80119c2:	4603      	mov	r3, r0
 80119c4:	4631      	mov	r1, r6
 80119c6:	4620      	mov	r0, r4
 80119c8:	46ac      	mov	ip, r5
 80119ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119ce:	4760      	bx	ip
 80119d0:	2000      	movs	r0, #0
 80119d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119d6:	bf00      	nop
 80119d8:	2002104c 	.word	0x2002104c
 80119dc:	20021048 	.word	0x20021048
 80119e0:	08026bd0 	.word	0x08026bd0
 80119e4:	08028e68 	.word	0x08028e68
 80119e8:	08026c5e 	.word	0x08026c5e
 80119ec:	20021054 	.word	0x20021054

080119f0 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 80119f0:	b513      	push	{r0, r1, r4, lr}
 80119f2:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 80119f6:	4604      	mov	r4, r0
 80119f8:	b343      	cbz	r3, 8011a4c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x5c>
 80119fa:	4b1b      	ldr	r3, [pc, #108]	; (8011a68 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x78>)
 80119fc:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80119fe:	881b      	ldrh	r3, [r3, #0]
 8011a00:	428b      	cmp	r3, r1
 8011a02:	d923      	bls.n	8011a4c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x5c>
 8011a04:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	dd1f      	ble.n	8011a4c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x5c>
 8011a0c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	dd1b      	ble.n	8011a4c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x5c>
 8011a14:	4b15      	ldr	r3, [pc, #84]	; (8011a6c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x7c>)
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	b92b      	cbnz	r3, 8011a26 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x36>
 8011a1a:	4b15      	ldr	r3, [pc, #84]	; (8011a70 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x80>)
 8011a1c:	21ae      	movs	r1, #174	; 0xae
 8011a1e:	4a15      	ldr	r2, [pc, #84]	; (8011a74 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x84>)
 8011a20:	4815      	ldr	r0, [pc, #84]	; (8011a78 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x88>)
 8011a22:	f012 ffe9 	bl	80249f8 <__assert_func>
 8011a26:	4b15      	ldr	r3, [pc, #84]	; (8011a7c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x8c>)
 8011a28:	6818      	ldr	r0, [r3, #0]
 8011a2a:	f7f3 fafb 	bl	8005024 <_ZNK8touchgfx5Texts7getTextEt>
 8011a2e:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8011a32:	6822      	ldr	r2, [r4, #0]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	db06      	blt.n	8011a46 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x56>
 8011a38:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	db02      	blt.n	8011a46 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x56>
 8011a40:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011a42:	4298      	cmp	r0, r3
 8011a44:	d004      	beq.n	8011a50 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x60>
 8011a46:	6953      	ldr	r3, [r2, #20]
 8011a48:	4620      	mov	r0, r4
 8011a4a:	4798      	blx	r3
 8011a4c:	b002      	add	sp, #8
 8011a4e:	bd10      	pop	{r4, pc}
 8011a50:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8011a54:	466b      	mov	r3, sp
 8011a56:	6912      	ldr	r2, [r2, #16]
 8011a58:	c903      	ldmia	r1, {r0, r1}
 8011a5a:	e883 0003 	stmia.w	r3, {r0, r1}
 8011a5e:	4619      	mov	r1, r3
 8011a60:	4620      	mov	r0, r4
 8011a62:	4790      	blx	r2
 8011a64:	e7f2      	b.n	8011a4c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x5c>
 8011a66:	bf00      	nop
 8011a68:	2002104c 	.word	0x2002104c
 8011a6c:	20021048 	.word	0x20021048
 8011a70:	08026bd0 	.word	0x08026bd0
 8011a74:	08028e68 	.word	0x08028e68
 8011a78:	08026c5e 	.word	0x08026c5e
 8011a7c:	20021054 	.word	0x20021054

08011a80 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8011a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a84:	4d56      	ldr	r5, [pc, #344]	; (8011be0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x160>)
 8011a86:	b08e      	sub	sp, #56	; 0x38
 8011a88:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8011a8a:	4604      	mov	r4, r0
 8011a8c:	882b      	ldrh	r3, [r5, #0]
 8011a8e:	4293      	cmp	r3, r2
 8011a90:	f240 80a3 	bls.w	8011bda <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x15a>
 8011a94:	6808      	ldr	r0, [r1, #0]
 8011a96:	ab05      	add	r3, sp, #20
 8011a98:	6849      	ldr	r1, [r1, #4]
 8011a9a:	4e52      	ldr	r6, [pc, #328]	; (8011be4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x164>)
 8011a9c:	c303      	stmia	r3!, {r0, r1}
 8011a9e:	6833      	ldr	r3, [r6, #0]
 8011aa0:	b92b      	cbnz	r3, 8011aae <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8011aa2:	4b51      	ldr	r3, [pc, #324]	; (8011be8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x168>)
 8011aa4:	21ae      	movs	r1, #174	; 0xae
 8011aa6:	4a51      	ldr	r2, [pc, #324]	; (8011bec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x16c>)
 8011aa8:	4851      	ldr	r0, [pc, #324]	; (8011bf0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x170>)
 8011aaa:	f012 ffa5 	bl	80249f8 <__assert_func>
 8011aae:	4f51      	ldr	r7, [pc, #324]	; (8011bf4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x174>)
 8011ab0:	4611      	mov	r1, r2
 8011ab2:	6838      	ldr	r0, [r7, #0]
 8011ab4:	f7f3 fab6 	bl	8005024 <_ZNK8touchgfx5Texts7getTextEt>
 8011ab8:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	db11      	blt.n	8011ae4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x64>
 8011ac0:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	db0d      	blt.n	8011ae4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x64>
 8011ac8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011aca:	4298      	cmp	r0, r3
 8011acc:	d10a      	bne.n	8011ae4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x64>
 8011ace:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8011ad2:	ab09      	add	r3, sp, #36	; 0x24
 8011ad4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ad8:	e883 0003 	stmia.w	r3, {r0, r1}
 8011adc:	4619      	mov	r1, r3
 8011ade:	a805      	add	r0, sp, #20
 8011ae0:	f7fb ff18 	bl	800d914 <_ZN8touchgfx4RectaNERKS0_>
 8011ae4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	dd76      	ble.n	8011bda <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x15a>
 8011aec:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	dd72      	ble.n	8011bda <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x15a>
 8011af4:	6833      	ldr	r3, [r6, #0]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d0d3      	beq.n	8011aa2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x22>
 8011afa:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8011afc:	8829      	ldrh	r1, [r5, #0]
 8011afe:	4291      	cmp	r1, r2
 8011b00:	d803      	bhi.n	8011b0a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x8a>
 8011b02:	4b3d      	ldr	r3, [pc, #244]	; (8011bf8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x178>)
 8011b04:	21af      	movs	r1, #175	; 0xaf
 8011b06:	4a39      	ldr	r2, [pc, #228]	; (8011bec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x16c>)
 8011b08:	e7ce      	b.n	8011aa8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x28>
 8011b0a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8011b0e:	4b3b      	ldr	r3, [pc, #236]	; (8011bfc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x17c>)
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8011b16:	f1b8 0f00 	cmp.w	r8, #0
 8011b1a:	d05e      	beq.n	8011bda <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x15a>
 8011b1c:	6823      	ldr	r3, [r4, #0]
 8011b1e:	4620      	mov	r0, r4
 8011b20:	f894 9036 	ldrb.w	r9, [r4, #54]	; 0x36
 8011b24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b26:	4798      	blx	r3
 8011b28:	6833      	ldr	r3, [r6, #0]
 8011b2a:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 8011b2e:	f894 c038 	ldrb.w	ip, [r4, #56]	; 0x38
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d0b5      	beq.n	8011aa2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x22>
 8011b36:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8011b38:	f8b5 e000 	ldrh.w	lr, [r5]
 8011b3c:	4596      	cmp	lr, r2
 8011b3e:	d9e0      	bls.n	8011b02 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 8011b40:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8011b44:	f894 a037 	ldrb.w	sl, [r4, #55]	; 0x37
 8011b48:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011b4a:	785b      	ldrb	r3, [r3, #1]
 8011b4c:	f894 e039 	ldrb.w	lr, [r4, #57]	; 0x39
 8011b50:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8011b54:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8011b58:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 8011b5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011b60:	4b27      	ldr	r3, [pc, #156]	; (8011c00 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x180>)
 8011b62:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	920b      	str	r2, [sp, #44]	; 0x2c
 8011b6a:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 8011b6e:	f88d 9032 	strb.w	r9, [sp, #50]	; 0x32
 8011b72:	f88d a033 	strb.w	sl, [sp, #51]	; 0x33
 8011b76:	f88d e034 	strb.w	lr, [sp, #52]	; 0x34
 8011b7a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8011b7e:	b122      	cbz	r2, 8011b8a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x10a>
 8011b80:	f8d3 804c 	ldr.w	r8, [r3, #76]	; 0x4c
 8011b84:	f1b8 0f00 	cmp.w	r8, #0
 8011b88:	d101      	bne.n	8011b8e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x10e>
 8011b8a:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8011b8e:	f10d 091c 	add.w	r9, sp, #28
 8011b92:	4621      	mov	r1, r4
 8011b94:	4648      	mov	r0, r9
 8011b96:	f003 f893 	bl	8014cc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011b9a:	6833      	ldr	r3, [r6, #0]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d080      	beq.n	8011aa2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x22>
 8011ba0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8011ba2:	882b      	ldrh	r3, [r5, #0]
 8011ba4:	428b      	cmp	r3, r1
 8011ba6:	d9ac      	bls.n	8011b02 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 8011ba8:	6838      	ldr	r0, [r7, #0]
 8011baa:	f7f3 fa3b 	bl	8005024 <_ZNK8touchgfx5Texts7getTextEt>
 8011bae:	6823      	ldr	r3, [r4, #0]
 8011bb0:	4605      	mov	r5, r0
 8011bb2:	4620      	mov	r0, r4
 8011bb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011bb6:	4798      	blx	r3
 8011bb8:	6823      	ldr	r3, [r4, #0]
 8011bba:	4606      	mov	r6, r0
 8011bbc:	4620      	mov	r0, r4
 8011bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011bc2:	4798      	blx	r3
 8011bc4:	ab09      	add	r3, sp, #36	; 0x24
 8011bc6:	9501      	str	r5, [sp, #4]
 8011bc8:	9300      	str	r3, [sp, #0]
 8011bca:	ab05      	add	r3, sp, #20
 8011bcc:	e9cd 6002 	strd	r6, r0, [sp, #8]
 8011bd0:	4640      	mov	r0, r8
 8011bd2:	e899 0006 	ldmia.w	r9, {r1, r2}
 8011bd6:	f7f3 f9d7 	bl	8004f88 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8011bda:	b00e      	add	sp, #56	; 0x38
 8011bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011be0:	2002104c 	.word	0x2002104c
 8011be4:	20021048 	.word	0x20021048
 8011be8:	08026bd0 	.word	0x08026bd0
 8011bec:	08028e68 	.word	0x08028e68
 8011bf0:	08026c5e 	.word	0x08026c5e
 8011bf4:	20021054 	.word	0x20021054
 8011bf8:	08028a94 	.word	0x08028a94
 8011bfc:	20021050 	.word	0x20021050
 8011c00:	20020fd8 	.word	0x20020fd8

08011c04 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 8011c04:	b570      	push	{r4, r5, r6, lr}
 8011c06:	6803      	ldr	r3, [r0, #0]
 8011c08:	4604      	mov	r4, r0
 8011c0a:	4615      	mov	r5, r2
 8011c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c0e:	4798      	blx	r3
 8011c10:	6823      	ldr	r3, [r4, #0]
 8011c12:	4629      	mov	r1, r5
 8011c14:	4620      	mov	r0, r4
 8011c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c1c:	4718      	bx	r3
	...

08011c20 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8011c20:	b538      	push	{r3, r4, r5, lr}
 8011c22:	4b0e      	ldr	r3, [pc, #56]	; (8011c5c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8011c24:	4604      	mov	r4, r0
 8011c26:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8011c28:	881b      	ldrh	r3, [r3, #0]
 8011c2a:	429a      	cmp	r2, r3
 8011c2c:	d214      	bcs.n	8011c58 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8011c2e:	6803      	ldr	r3, [r0, #0]
 8011c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c32:	4798      	blx	r3
 8011c34:	6823      	ldr	r3, [r4, #0]
 8011c36:	4605      	mov	r5, r0
 8011c38:	4620      	mov	r0, r4
 8011c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c3c:	4798      	blx	r3
 8011c3e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011c42:	b22d      	sxth	r5, r5
 8011c44:	4601      	mov	r1, r0
 8011c46:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8011c4a:	bf06      	itte	eq
 8011c4c:	4602      	moveq	r2, r0
 8011c4e:	4629      	moveq	r1, r5
 8011c50:	462a      	movne	r2, r5
 8011c52:	4620      	mov	r0, r4
 8011c54:	f7ff ffd6 	bl	8011c04 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8011c58:	bd38      	pop	{r3, r4, r5, pc}
 8011c5a:	bf00      	nop
 8011c5c:	2002104c 	.word	0x2002104c

08011c60 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8011c60:	b530      	push	{r4, r5, lr}
 8011c62:	888b      	ldrh	r3, [r1, #4]
 8011c64:	b085      	sub	sp, #20
 8011c66:	4604      	mov	r4, r0
 8011c68:	8583      	strh	r3, [r0, #44]	; 0x2c
 8011c6a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8011c6e:	b923      	cbnz	r3, 8011c7a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8011c70:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8011c74:	b90b      	cbnz	r3, 8011c7a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8011c76:	f7ff ffd3 	bl	8011c20 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8011c7a:	6823      	ldr	r3, [r4, #0]
 8011c7c:	466d      	mov	r5, sp
 8011c7e:	4621      	mov	r1, r4
 8011c80:	343c      	adds	r4, #60	; 0x3c
 8011c82:	4628      	mov	r0, r5
 8011c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011c88:	4798      	blx	r3
 8011c8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011c8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011c92:	b005      	add	sp, #20
 8011c94:	bd30      	pop	{r4, r5, pc}

08011c96 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8011c96:	2300      	movs	r3, #0
 8011c98:	8083      	strh	r3, [r0, #4]
 8011c9a:	80c3      	strh	r3, [r0, #6]
 8011c9c:	8003      	strh	r3, [r0, #0]
 8011c9e:	8043      	strh	r3, [r0, #2]
 8011ca0:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8011ca4:	2bff      	cmp	r3, #255	; 0xff
 8011ca6:	bf01      	itttt	eq
 8011ca8:	890b      	ldrheq	r3, [r1, #8]
 8011caa:	8083      	strheq	r3, [r0, #4]
 8011cac:	894b      	ldrheq	r3, [r1, #10]
 8011cae:	80c3      	strheq	r3, [r0, #6]
 8011cb0:	4770      	bx	lr
	...

08011cb4 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8011cb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011cb6:	4604      	mov	r4, r0
 8011cb8:	466b      	mov	r3, sp
 8011cba:	6808      	ldr	r0, [r1, #0]
 8011cbc:	6849      	ldr	r1, [r1, #4]
 8011cbe:	c303      	stmia	r3!, {r0, r1}
 8011cc0:	6823      	ldr	r3, [r4, #0]
 8011cc2:	4669      	mov	r1, sp
 8011cc4:	4620      	mov	r0, r4
 8011cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cc8:	4798      	blx	r3
 8011cca:	4b08      	ldr	r3, [pc, #32]	; (8011cec <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8011cd2:	b10a      	cbz	r2, 8011cd8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8011cd4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011cd6:	b900      	cbnz	r0, 8011cda <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8011cd8:	6898      	ldr	r0, [r3, #8]
 8011cda:	6803      	ldr	r3, [r0, #0]
 8011cdc:	4669      	mov	r1, sp
 8011cde:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8011ce0:	6a1d      	ldr	r5, [r3, #32]
 8011ce2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8011ce6:	47a8      	blx	r5
 8011ce8:	b003      	add	sp, #12
 8011cea:	bd30      	pop	{r4, r5, pc}
 8011cec:	20020fd8 	.word	0x20020fd8

08011cf0 <_ZN8touchgfx3BoxD1Ev>:
 8011cf0:	4770      	bx	lr

08011cf2 <_ZN8touchgfx3BoxD0Ev>:
 8011cf2:	b510      	push	{r4, lr}
 8011cf4:	4604      	mov	r4, r0
 8011cf6:	212c      	movs	r1, #44	; 0x2c
 8011cf8:	f012 fe4f 	bl	802499a <_ZdlPvj>
 8011cfc:	4620      	mov	r0, r4
 8011cfe:	bd10      	pop	{r4, pc}

08011d00 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8011d00:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8011d04:	b12a      	cbz	r2, 8011d12 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8011d06:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8011d0a:	b112      	cbz	r2, 8011d12 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8011d0c:	6803      	ldr	r3, [r0, #0]
 8011d0e:	695b      	ldr	r3, [r3, #20]
 8011d10:	4718      	bx	r3
 8011d12:	4770      	bx	lr

08011d14 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8011d14:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8011d18:	4770      	bx	lr

08011d1a <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8011d1a:	b570      	push	{r4, r5, r6, lr}
 8011d1c:	880b      	ldrh	r3, [r1, #0]
 8011d1e:	4605      	mov	r5, r0
 8011d20:	4604      	mov	r4, r0
 8011d22:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8011d24:	8813      	ldrh	r3, [r2, #0]
 8011d26:	f825 3f30 	strh.w	r3, [r5, #48]!
 8011d2a:	4628      	mov	r0, r5
 8011d2c:	f005 f8d8 	bl	8016ee0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011d30:	4606      	mov	r6, r0
 8011d32:	4628      	mov	r0, r5
 8011d34:	f005 f918 	bl	8016f68 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011d38:	6823      	ldr	r3, [r4, #0]
 8011d3a:	4605      	mov	r5, r0
 8011d3c:	b231      	sxth	r1, r6
 8011d3e:	4620      	mov	r0, r4
 8011d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d42:	4798      	blx	r3
 8011d44:	6823      	ldr	r3, [r4, #0]
 8011d46:	b229      	sxth	r1, r5
 8011d48:	4620      	mov	r0, r4
 8011d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d50:	4718      	bx	r3

08011d52 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8011d52:	b510      	push	{r4, lr}
 8011d54:	4604      	mov	r4, r0
 8011d56:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8011d58:	b150      	cbz	r0, 8011d70 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8011d5a:	6803      	ldr	r3, [r0, #0]
 8011d5c:	68db      	ldr	r3, [r3, #12]
 8011d5e:	4798      	blx	r3
 8011d60:	b130      	cbz	r0, 8011d70 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8011d62:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8011d64:	4621      	mov	r1, r4
 8011d66:	6803      	ldr	r3, [r0, #0]
 8011d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d6c:	689b      	ldr	r3, [r3, #8]
 8011d6e:	4718      	bx	r3
 8011d70:	bd10      	pop	{r4, pc}

08011d72 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8011d72:	b510      	push	{r4, lr}
 8011d74:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8011d78:	4604      	mov	r4, r0
 8011d7a:	2bff      	cmp	r3, #255	; 0xff
 8011d7c:	d006      	beq.n	8011d8c <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8011d7e:	2300      	movs	r3, #0
 8011d80:	8003      	strh	r3, [r0, #0]
 8011d82:	8043      	strh	r3, [r0, #2]
 8011d84:	8083      	strh	r3, [r0, #4]
 8011d86:	80c3      	strh	r3, [r0, #6]
 8011d88:	4620      	mov	r0, r4
 8011d8a:	bd10      	pop	{r4, pc}
 8011d8c:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8011d90:	b11b      	cbz	r3, 8011d9a <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8011d92:	3130      	adds	r1, #48	; 0x30
 8011d94:	f005 f92c 	bl	8016ff0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8011d98:	e7f6      	b.n	8011d88 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8011d9a:	312e      	adds	r1, #46	; 0x2e
 8011d9c:	e7fa      	b.n	8011d94 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08011da0 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8011da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011da4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8011da8:	b08a      	sub	sp, #40	; 0x28
 8011daa:	4604      	mov	r4, r0
 8011dac:	4688      	mov	r8, r1
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d044      	beq.n	8011e3c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 8011db2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8011db4:	a805      	add	r0, sp, #20
 8011db6:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011dba:	f005 f891 	bl	8016ee0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011dbe:	4605      	mov	r5, r0
 8011dc0:	b206      	sxth	r6, r0
 8011dc2:	a805      	add	r0, sp, #20
 8011dc4:	f005 f8d0 	bl	8016f68 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011dc8:	f9b8 2000 	ldrsh.w	r2, [r8]
 8011dcc:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	fa0f fc80 	sxth.w	ip, r0
 8011dd6:	4417      	add	r7, r2
 8011dd8:	9306      	str	r3, [sp, #24]
 8011dda:	b2bf      	uxth	r7, r7
 8011ddc:	fa0f fe87 	sxth.w	lr, r7
 8011de0:	459e      	cmp	lr, r3
 8011de2:	dd2d      	ble.n	8011e40 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8011de4:	4296      	cmp	r6, r2
 8011de6:	dd2b      	ble.n	8011e40 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8011de8:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8011dec:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 8011df0:	4419      	add	r1, r3
 8011df2:	b289      	uxth	r1, r1
 8011df4:	fa0f f881 	sxth.w	r8, r1
 8011df8:	f1b8 0f00 	cmp.w	r8, #0
 8011dfc:	dd20      	ble.n	8011e40 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8011dfe:	459c      	cmp	ip, r3
 8011e00:	dd1e      	ble.n	8011e40 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8011e02:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8011e06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011e0a:	4576      	cmp	r6, lr
 8011e0c:	bfa8      	it	ge
 8011e0e:	463d      	movge	r5, r7
 8011e10:	45c4      	cmp	ip, r8
 8011e12:	bfa8      	it	ge
 8011e14:	4608      	movge	r0, r1
 8011e16:	f8ad 2018 	strh.w	r2, [sp, #24]
 8011e1a:	1aad      	subs	r5, r5, r2
 8011e1c:	1ac0      	subs	r0, r0, r3
 8011e1e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011e22:	f8ad 501c 	strh.w	r5, [sp, #28]
 8011e26:	f8ad 001e 	strh.w	r0, [sp, #30]
 8011e2a:	4b1f      	ldr	r3, [pc, #124]	; (8011ea8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	b953      	cbnz	r3, 8011e46 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 8011e30:	4b1e      	ldr	r3, [pc, #120]	; (8011eac <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 8011e32:	2187      	movs	r1, #135	; 0x87
 8011e34:	4a1e      	ldr	r2, [pc, #120]	; (8011eb0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 8011e36:	481f      	ldr	r0, [pc, #124]	; (8011eb4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 8011e38:	f012 fdde 	bl	80249f8 <__assert_func>
 8011e3c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8011e3e:	e7b9      	b.n	8011db4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8011e40:	2300      	movs	r3, #0
 8011e42:	9307      	str	r3, [sp, #28]
 8011e44:	e7f1      	b.n	8011e2a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 8011e46:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8011e4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011e4e:	429a      	cmp	r2, r3
 8011e50:	d026      	beq.n	8011ea0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8011e52:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	dd22      	ble.n	8011ea0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8011e5a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	dd1e      	ble.n	8011ea0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8011e62:	2300      	movs	r3, #0
 8011e64:	a908      	add	r1, sp, #32
 8011e66:	4620      	mov	r0, r4
 8011e68:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8011e6c:	6823      	ldr	r3, [r4, #0]
 8011e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e70:	4798      	blx	r3
 8011e72:	4b11      	ldr	r3, [pc, #68]	; (8011eb8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8011e7a:	b10a      	cbz	r2, 8011e80 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8011e7c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011e7e:	b900      	cbnz	r0, 8011e82 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 8011e80:	6898      	ldr	r0, [r3, #8]
 8011e82:	2501      	movs	r5, #1
 8011e84:	6801      	ldr	r1, [r0, #0]
 8011e86:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8011e8a:	9502      	str	r5, [sp, #8]
 8011e8c:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8011e90:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8011e94:	9401      	str	r4, [sp, #4]
 8011e96:	ac06      	add	r4, sp, #24
 8011e98:	9400      	str	r4, [sp, #0]
 8011e9a:	688c      	ldr	r4, [r1, #8]
 8011e9c:	a905      	add	r1, sp, #20
 8011e9e:	47a0      	blx	r4
 8011ea0:	b00a      	add	sp, #40	; 0x28
 8011ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ea6:	bf00      	nop
 8011ea8:	20021080 	.word	0x20021080
 8011eac:	08028f00 	.word	0x08028f00
 8011eb0:	08028f62 	.word	0x08028f62
 8011eb4:	08028f3c 	.word	0x08028f3c
 8011eb8:	20020fd8 	.word	0x20020fd8

08011ebc <_ZNK8touchgfx6Button17invalidateContentEv>:
 8011ebc:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 8011ec0:	b12a      	cbz	r2, 8011ece <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8011ec2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8011ec6:	b112      	cbz	r2, 8011ece <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8011ec8:	6803      	ldr	r3, [r0, #0]
 8011eca:	695b      	ldr	r3, [r3, #20]
 8011ecc:	4718      	bx	r3
 8011ece:	4770      	bx	lr

08011ed0 <_ZN8touchgfx5ImageD1Ev>:
 8011ed0:	4770      	bx	lr

08011ed2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8011ed2:	b570      	push	{r4, r5, r6, lr}
 8011ed4:	880b      	ldrh	r3, [r1, #0]
 8011ed6:	460d      	mov	r5, r1
 8011ed8:	4604      	mov	r4, r0
 8011eda:	84c3      	strh	r3, [r0, #38]	; 0x26
 8011edc:	4608      	mov	r0, r1
 8011ede:	f004 ffff 	bl	8016ee0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011ee2:	4606      	mov	r6, r0
 8011ee4:	4628      	mov	r0, r5
 8011ee6:	f005 f83f 	bl	8016f68 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011eea:	6823      	ldr	r3, [r4, #0]
 8011eec:	4605      	mov	r5, r0
 8011eee:	b231      	sxth	r1, r6
 8011ef0:	4620      	mov	r0, r4
 8011ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ef4:	4798      	blx	r3
 8011ef6:	6823      	ldr	r3, [r4, #0]
 8011ef8:	b229      	sxth	r1, r5
 8011efa:	4620      	mov	r0, r4
 8011efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011f02:	4718      	bx	r3

08011f04 <_ZN8touchgfx5ImageD0Ev>:
 8011f04:	b510      	push	{r4, lr}
 8011f06:	4604      	mov	r4, r0
 8011f08:	212c      	movs	r1, #44	; 0x2c
 8011f0a:	f012 fd46 	bl	802499a <_ZdlPvj>
 8011f0e:	4620      	mov	r0, r4
 8011f10:	bd10      	pop	{r4, pc}

08011f12 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8011f12:	b510      	push	{r4, lr}
 8011f14:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8011f18:	4604      	mov	r4, r0
 8011f1a:	2bff      	cmp	r3, #255	; 0xff
 8011f1c:	d006      	beq.n	8011f2c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8011f1e:	2300      	movs	r3, #0
 8011f20:	8003      	strh	r3, [r0, #0]
 8011f22:	8043      	strh	r3, [r0, #2]
 8011f24:	8083      	strh	r3, [r0, #4]
 8011f26:	80c3      	strh	r3, [r0, #6]
 8011f28:	4620      	mov	r0, r4
 8011f2a:	bd10      	pop	{r4, pc}
 8011f2c:	3126      	adds	r1, #38	; 0x26
 8011f2e:	f005 f85f 	bl	8016ff0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8011f32:	e7f9      	b.n	8011f28 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08011f34 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8011f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f38:	4604      	mov	r4, r0
 8011f3a:	b088      	sub	sp, #32
 8011f3c:	2500      	movs	r5, #0
 8011f3e:	460f      	mov	r7, r1
 8011f40:	f854 3b26 	ldr.w	r3, [r4], #38
 8011f44:	a904      	add	r1, sp, #16
 8011f46:	4606      	mov	r6, r0
 8011f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011f4e:	4798      	blx	r3
 8011f50:	4620      	mov	r0, r4
 8011f52:	f004 ffc5 	bl	8016ee0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011f56:	4680      	mov	r8, r0
 8011f58:	4620      	mov	r0, r4
 8011f5a:	f005 f805 	bl	8016f68 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011f5e:	9506      	str	r5, [sp, #24]
 8011f60:	ad06      	add	r5, sp, #24
 8011f62:	f8ad 001e 	strh.w	r0, [sp, #30]
 8011f66:	4639      	mov	r1, r7
 8011f68:	f8ad 801c 	strh.w	r8, [sp, #28]
 8011f6c:	4628      	mov	r0, r5
 8011f6e:	f7fb fcd1 	bl	800d914 <_ZN8touchgfx4RectaNERKS0_>
 8011f72:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	dd19      	ble.n	8011fae <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8011f7a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	dd15      	ble.n	8011fae <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8011f82:	4b0c      	ldr	r3, [pc, #48]	; (8011fb4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8011f8a:	b10a      	cbz	r2, 8011f90 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8011f8c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011f8e:	b900      	cbnz	r0, 8011f92 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8011f90:	6898      	ldr	r0, [r3, #8]
 8011f92:	2701      	movs	r7, #1
 8011f94:	6801      	ldr	r1, [r0, #0]
 8011f96:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8011f9a:	9702      	str	r7, [sp, #8]
 8011f9c:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8011fa0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8011fa4:	e9cd 5600 	strd	r5, r6, [sp]
 8011fa8:	688d      	ldr	r5, [r1, #8]
 8011faa:	4621      	mov	r1, r4
 8011fac:	47a8      	blx	r5
 8011fae:	b008      	add	sp, #32
 8011fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fb4:	20020fd8 	.word	0x20020fd8

08011fb8 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 8011fb8:	4770      	bx	lr

08011fba <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8011fba:	b510      	push	{r4, lr}
 8011fbc:	4604      	mov	r4, r0
 8011fbe:	2148      	movs	r1, #72	; 0x48
 8011fc0:	f012 fceb 	bl	802499a <_ZdlPvj>
 8011fc4:	4620      	mov	r0, r4
 8011fc6:	bd10      	pop	{r4, pc}

08011fc8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8011fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fcc:	4604      	mov	r4, r0
 8011fce:	4d57      	ldr	r5, [pc, #348]	; (801212c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x164>)
 8011fd0:	b08c      	sub	sp, #48	; 0x30
 8011fd2:	4688      	mov	r8, r1
 8011fd4:	f7ff fee4 	bl	8011da0 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8011fd8:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8011fda:	882b      	ldrh	r3, [r5, #0]
 8011fdc:	4293      	cmp	r3, r2
 8011fde:	f240 80a2 	bls.w	8012126 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x15e>
 8011fe2:	4e53      	ldr	r6, [pc, #332]	; (8012130 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>)
 8011fe4:	6833      	ldr	r3, [r6, #0]
 8011fe6:	b92b      	cbnz	r3, 8011ff4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x2c>
 8011fe8:	4b52      	ldr	r3, [pc, #328]	; (8012134 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 8011fea:	21ae      	movs	r1, #174	; 0xae
 8011fec:	4a52      	ldr	r2, [pc, #328]	; (8012138 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 8011fee:	4853      	ldr	r0, [pc, #332]	; (801213c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 8011ff0:	f012 fd02 	bl	80249f8 <__assert_func>
 8011ff4:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8011ff8:	f04f 0c02 	mov.w	ip, #2
 8011ffc:	4b50      	ldr	r3, [pc, #320]	; (8012140 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 8011ffe:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012008:	f1be 0f01 	cmp.w	lr, #1
 801200c:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8012010:	f04f 0300 	mov.w	r3, #0
 8012014:	b208      	sxth	r0, r1
 8012016:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801201a:	9303      	str	r3, [sp, #12]
 801201c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8012020:	d044      	beq.n	80120ac <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xe4>
 8012022:	f1be 0f03 	cmp.w	lr, #3
 8012026:	d041      	beq.n	80120ac <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xe4>
 8012028:	1a52      	subs	r2, r2, r1
 801202a:	f8ad 3010 	strh.w	r3, [sp, #16]
 801202e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8012032:	fb92 f2fc 	sdiv	r2, r2, ip
 8012036:	f8ad 200e 	strh.w	r2, [sp, #14]
 801203a:	f10d 090c 	add.w	r9, sp, #12
 801203e:	f10d 0a14 	add.w	sl, sp, #20
 8012042:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012046:	e88a 0003 	stmia.w	sl, {r0, r1}
 801204a:	4641      	mov	r1, r8
 801204c:	4650      	mov	r0, sl
 801204e:	f7fb fc61 	bl	800d914 <_ZN8touchgfx4RectaNERKS0_>
 8012052:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8012056:	2b00      	cmp	r3, #0
 8012058:	dd65      	ble.n	8012126 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x15e>
 801205a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801205e:	2b00      	cmp	r3, #0
 8012060:	dd61      	ble.n	8012126 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x15e>
 8012062:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8012066:	4649      	mov	r1, r9
 8012068:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801206c:	4620      	mov	r0, r4
 801206e:	1a9b      	subs	r3, r3, r2
 8012070:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8012074:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012078:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801207c:	1a9b      	subs	r3, r3, r2
 801207e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012082:	6823      	ldr	r3, [r4, #0]
 8012084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012086:	4798      	blx	r3
 8012088:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801208c:	b1c3      	cbz	r3, 80120c0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xf8>
 801208e:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8012092:	6833      	ldr	r3, [r6, #0]
 8012094:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 8012098:	2b00      	cmp	r3, #0
 801209a:	d0a5      	beq.n	8011fe8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x20>
 801209c:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801209e:	882d      	ldrh	r5, [r5, #0]
 80120a0:	428d      	cmp	r5, r1
 80120a2:	d810      	bhi.n	80120c6 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xfe>
 80120a4:	4b27      	ldr	r3, [pc, #156]	; (8012144 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 80120a6:	21af      	movs	r1, #175	; 0xaf
 80120a8:	4a23      	ldr	r2, [pc, #140]	; (8012138 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 80120aa:	e7a0      	b.n	8011fee <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x26>
 80120ac:	1a5b      	subs	r3, r3, r1
 80120ae:	f8ad 0010 	strh.w	r0, [sp, #16]
 80120b2:	f8ad 2012 	strh.w	r2, [sp, #18]
 80120b6:	fb93 f3fc 	sdiv	r3, r3, ip
 80120ba:	f8ad 300c 	strh.w	r3, [sp, #12]
 80120be:	e7bc      	b.n	801203a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x72>
 80120c0:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 80120c4:	e7e5      	b.n	8012092 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xca>
 80120c6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80120ca:	6812      	ldr	r2, [r2, #0]
 80120cc:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
 80120d0:	785b      	ldrb	r3, [r3, #1]
 80120d2:	9209      	str	r2, [sp, #36]	; 0x24
 80120d4:	f3c3 0501 	ubfx	r5, r3, #0, #2
 80120d8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80120dc:	9707      	str	r7, [sp, #28]
 80120de:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80120e2:	2300      	movs	r3, #0
 80120e4:	f88d 5020 	strb.w	r5, [sp, #32]
 80120e8:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 80120ec:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80120f0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80120f4:	4b14      	ldr	r3, [pc, #80]	; (8012148 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x180>)
 80120f6:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8012100:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8012104:	b10a      	cbz	r2, 801210a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x142>
 8012106:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012108:	b904      	cbnz	r4, 801210c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x144>
 801210a:	689c      	ldr	r4, [r3, #8]
 801210c:	4b0f      	ldr	r3, [pc, #60]	; (801214c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x184>)
 801210e:	6818      	ldr	r0, [r3, #0]
 8012110:	f7f2 ff88 	bl	8005024 <_ZNK8touchgfx5Texts7getTextEt>
 8012114:	ab07      	add	r3, sp, #28
 8012116:	9001      	str	r0, [sp, #4]
 8012118:	4620      	mov	r0, r4
 801211a:	9300      	str	r3, [sp, #0]
 801211c:	4653      	mov	r3, sl
 801211e:	e899 0006 	ldmia.w	r9, {r1, r2}
 8012122:	f7f2 ff31 	bl	8004f88 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8012126:	b00c      	add	sp, #48	; 0x30
 8012128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801212c:	2002104c 	.word	0x2002104c
 8012130:	20021048 	.word	0x20021048
 8012134:	08026bd0 	.word	0x08026bd0
 8012138:	08029078 	.word	0x08029078
 801213c:	08026c5e 	.word	0x08026c5e
 8012140:	20021050 	.word	0x20021050
 8012144:	08028a94 	.word	0x08028a94
 8012148:	20020fd8 	.word	0x20020fd8
 801214c:	20021054 	.word	0x20021054

08012150 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 8012150:	2101      	movs	r1, #1
 8012152:	2200      	movs	r2, #0
 8012154:	b510      	push	{r4, lr}
 8012156:	4c13      	ldr	r4, [pc, #76]	; (80121a4 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 8012158:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801215c:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8012160:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012164:	6004      	str	r4, [r0, #0]
 8012166:	4c10      	ldr	r4, [pc, #64]	; (80121a8 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 8012168:	8082      	strh	r2, [r0, #4]
 801216a:	80c2      	strh	r2, [r0, #6]
 801216c:	8102      	strh	r2, [r0, #8]
 801216e:	8142      	strh	r2, [r0, #10]
 8012170:	8182      	strh	r2, [r0, #12]
 8012172:	81c2      	strh	r2, [r0, #14]
 8012174:	8202      	strh	r2, [r0, #16]
 8012176:	8242      	strh	r2, [r0, #18]
 8012178:	61c2      	str	r2, [r0, #28]
 801217a:	8402      	strh	r2, [r0, #32]
 801217c:	8442      	strh	r2, [r0, #34]	; 0x22
 801217e:	6282      	str	r2, [r0, #40]	; 0x28
 8012180:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 8012184:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8012186:	8601      	strh	r1, [r0, #48]	; 0x30
 8012188:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 801218c:	6344      	str	r4, [r0, #52]	; 0x34
 801218e:	8701      	strh	r1, [r0, #56]	; 0x38
 8012190:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8012194:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 8012198:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801219c:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 80121a0:	bd10      	pop	{r4, pc}
 80121a2:	bf00      	nop
 80121a4:	0802900c 	.word	0x0802900c
 80121a8:	08026554 	.word	0x08026554

080121ac <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 80121ac:	4b02      	ldr	r3, [pc, #8]	; (80121b8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 80121ae:	6018      	str	r0, [r3, #0]
 80121b0:	4b02      	ldr	r3, [pc, #8]	; (80121bc <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 80121b2:	6019      	str	r1, [r3, #0]
 80121b4:	4770      	bx	lr
 80121b6:	bf00      	nop
 80121b8:	20020fe0 	.word	0x20020fe0
 80121bc:	20020ff4 	.word	0x20020ff4

080121c0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 80121c0:	b538      	push	{r3, r4, r5, lr}
 80121c2:	4c2b      	ldr	r4, [pc, #172]	; (8012270 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 80121c4:	4b2b      	ldr	r3, [pc, #172]	; (8012274 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 80121c6:	6821      	ldr	r1, [r4, #0]
 80121c8:	681a      	ldr	r2, [r3, #0]
 80121ca:	4281      	cmp	r1, r0
 80121cc:	4d2a      	ldr	r5, [pc, #168]	; (8012278 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 80121ce:	492b      	ldr	r1, [pc, #172]	; (801227c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 80121d0:	d108      	bne.n	80121e4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80121d2:	682b      	ldr	r3, [r5, #0]
 80121d4:	4293      	cmp	r3, r2
 80121d6:	d105      	bne.n	80121e4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80121d8:	6808      	ldr	r0, [r1, #0]
 80121da:	280f      	cmp	r0, #15
 80121dc:	bf94      	ite	ls
 80121de:	2000      	movls	r0, #0
 80121e0:	2001      	movhi	r0, #1
 80121e2:	bd38      	pop	{r3, r4, r5, pc}
 80121e4:	4b26      	ldr	r3, [pc, #152]	; (8012280 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 80121e6:	6020      	str	r0, [r4, #0]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	602a      	str	r2, [r5, #0]
 80121ec:	4298      	cmp	r0, r3
 80121ee:	d905      	bls.n	80121fc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 80121f0:	4b24      	ldr	r3, [pc, #144]	; (8012284 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80121f2:	2135      	movs	r1, #53	; 0x35
 80121f4:	4a24      	ldr	r2, [pc, #144]	; (8012288 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80121f6:	4825      	ldr	r0, [pc, #148]	; (801228c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 80121f8:	f012 fbfe 	bl	80249f8 <__assert_func>
 80121fc:	f010 0403 	ands.w	r4, r0, #3
 8012200:	bf1f      	itttt	ne
 8012202:	f1c4 0504 	rsbne	r5, r4, #4
 8012206:	3b04      	subne	r3, #4
 8012208:	1952      	addne	r2, r2, r5
 801220a:	191b      	addne	r3, r3, r4
 801220c:	4d20      	ldr	r5, [pc, #128]	; (8012290 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 801220e:	4402      	add	r2, r0
 8012210:	1a1b      	subs	r3, r3, r0
 8012212:	3001      	adds	r0, #1
 8012214:	602a      	str	r2, [r5, #0]
 8012216:	f020 0401 	bic.w	r4, r0, #1
 801221a:	42a3      	cmp	r3, r4
 801221c:	d203      	bcs.n	8012226 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 801221e:	4b19      	ldr	r3, [pc, #100]	; (8012284 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8012220:	2148      	movs	r1, #72	; 0x48
 8012222:	4a19      	ldr	r2, [pc, #100]	; (8012288 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8012224:	e7e7      	b.n	80121f6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8012226:	f010 0002 	ands.w	r0, r0, #2
 801222a:	bf1f      	itttt	ne
 801222c:	f1c0 0504 	rsbne	r5, r0, #4
 8012230:	1952      	addne	r2, r2, r5
 8012232:	1f05      	subne	r5, r0, #4
 8012234:	195b      	addne	r3, r3, r5
 8012236:	4422      	add	r2, r4
 8012238:	4d16      	ldr	r5, [pc, #88]	; (8012294 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801223a:	1b1b      	subs	r3, r3, r4
 801223c:	602a      	str	r2, [r5, #0]
 801223e:	429c      	cmp	r4, r3
 8012240:	d903      	bls.n	801224a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 8012242:	4b10      	ldr	r3, [pc, #64]	; (8012284 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8012244:	215b      	movs	r1, #91	; 0x5b
 8012246:	4a10      	ldr	r2, [pc, #64]	; (8012288 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8012248:	e7d5      	b.n	80121f6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801224a:	b120      	cbz	r0, 8012256 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 801224c:	f1c0 0504 	rsb	r5, r0, #4
 8012250:	3804      	subs	r0, #4
 8012252:	442a      	add	r2, r5
 8012254:	4403      	add	r3, r0
 8012256:	1b1b      	subs	r3, r3, r4
 8012258:	4422      	add	r2, r4
 801225a:	480f      	ldr	r0, [pc, #60]	; (8012298 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 801225c:	2b0f      	cmp	r3, #15
 801225e:	600b      	str	r3, [r1, #0]
 8012260:	6002      	str	r2, [r0, #0]
 8012262:	d803      	bhi.n	801226c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 8012264:	4b0d      	ldr	r3, [pc, #52]	; (801229c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 8012266:	216e      	movs	r1, #110	; 0x6e
 8012268:	4a07      	ldr	r2, [pc, #28]	; (8012288 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801226a:	e7c4      	b.n	80121f6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801226c:	2001      	movs	r0, #1
 801226e:	e7b8      	b.n	80121e2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 8012270:	20020fe8 	.word	0x20020fe8
 8012274:	20020fe0 	.word	0x20020fe0
 8012278:	20020ff0 	.word	0x20020ff0
 801227c:	20020ff8 	.word	0x20020ff8
 8012280:	20020ff4 	.word	0x20020ff4
 8012284:	080290a6 	.word	0x080290a6
 8012288:	0802916e 	.word	0x0802916e
 801228c:	080290df 	.word	0x080290df
 8012290:	20020ffc 	.word	0x20020ffc
 8012294:	20020fec 	.word	0x20020fec
 8012298:	20020fe4 	.word	0x20020fe4
 801229c:	08029129 	.word	0x08029129

080122a0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 80122a0:	4b04      	ldr	r3, [pc, #16]	; (80122b4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 80122a2:	6818      	ldr	r0, [r3, #0]
 80122a4:	b120      	cbz	r0, 80122b0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 80122a6:	4b04      	ldr	r3, [pc, #16]	; (80122b8 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 80122a8:	6818      	ldr	r0, [r3, #0]
 80122aa:	3000      	adds	r0, #0
 80122ac:	bf18      	it	ne
 80122ae:	2001      	movne	r0, #1
 80122b0:	4770      	bx	lr
 80122b2:	bf00      	nop
 80122b4:	20020fe0 	.word	0x20020fe0
 80122b8:	20020ff4 	.word	0x20020ff4

080122bc <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 80122bc:	4b01      	ldr	r3, [pc, #4]	; (80122c4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 80122be:	6818      	ldr	r0, [r3, #0]
 80122c0:	4770      	bx	lr
 80122c2:	bf00      	nop
 80122c4:	20020fe8 	.word	0x20020fe8

080122c8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 80122c8:	4b01      	ldr	r3, [pc, #4]	; (80122d0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 80122ca:	6818      	ldr	r0, [r3, #0]
 80122cc:	4770      	bx	lr
 80122ce:	bf00      	nop
 80122d0:	20020ff0 	.word	0x20020ff0

080122d4 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 80122d4:	4b01      	ldr	r3, [pc, #4]	; (80122dc <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 80122d6:	6818      	ldr	r0, [r3, #0]
 80122d8:	4770      	bx	lr
 80122da:	bf00      	nop
 80122dc:	20020ffc 	.word	0x20020ffc

080122e0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 80122e0:	4b01      	ldr	r3, [pc, #4]	; (80122e8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 80122e2:	6818      	ldr	r0, [r3, #0]
 80122e4:	4770      	bx	lr
 80122e6:	bf00      	nop
 80122e8:	20020fec 	.word	0x20020fec

080122ec <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80122ec:	4b01      	ldr	r3, [pc, #4]	; (80122f4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80122ee:	6818      	ldr	r0, [r3, #0]
 80122f0:	4770      	bx	lr
 80122f2:	bf00      	nop
 80122f4:	20020fe4 	.word	0x20020fe4

080122f8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 80122f8:	4b01      	ldr	r3, [pc, #4]	; (8012300 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 80122fa:	6818      	ldr	r0, [r3, #0]
 80122fc:	4770      	bx	lr
 80122fe:	bf00      	nop
 8012300:	20020ff8 	.word	0x20020ff8

08012304 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8012304:	b510      	push	{r4, lr}
 8012306:	6803      	ldr	r3, [r0, #0]
 8012308:	460c      	mov	r4, r1
 801230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801230c:	4798      	blx	r3
 801230e:	1b03      	subs	r3, r0, r4
 8012310:	4258      	negs	r0, r3
 8012312:	4158      	adcs	r0, r3
 8012314:	bd10      	pop	{r4, pc}
	...

08012318 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8012318:	4b01      	ldr	r3, [pc, #4]	; (8012320 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801231a:	6019      	str	r1, [r3, #0]
 801231c:	4770      	bx	lr
 801231e:	bf00      	nop
 8012320:	20021000 	.word	0x20021000

08012324 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8012324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012328:	4696      	mov	lr, r2
 801232a:	b097      	sub	sp, #92	; 0x5c
 801232c:	4605      	mov	r5, r0
 801232e:	4614      	mov	r4, r2
 8012330:	460e      	mov	r6, r1
 8012332:	461f      	mov	r7, r3
 8012334:	f10d 0c1c 	add.w	ip, sp, #28
 8012338:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801233c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8012340:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8012344:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012348:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801234c:	f8de 3000 	ldr.w	r3, [lr]
 8012350:	f104 0e14 	add.w	lr, r4, #20
 8012354:	f8cc 3000 	str.w	r3, [ip]
 8012358:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801235c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012360:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012364:	f8de 3000 	ldr.w	r3, [lr]
 8012368:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801236c:	f8cc 3000 	str.w	r3, [ip]
 8012370:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8012374:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012378:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801237c:	f8de 3000 	ldr.w	r3, [lr]
 8012380:	4631      	mov	r1, r6
 8012382:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012384:	4628      	mov	r0, r5
 8012386:	f8cc 3000 	str.w	r3, [ip]
 801238a:	682b      	ldr	r3, [r5, #0]
 801238c:	9201      	str	r2, [sp, #4]
 801238e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012390:	f8cd 8008 	str.w	r8, [sp, #8]
 8012394:	9200      	str	r2, [sp, #0]
 8012396:	aa07      	add	r2, sp, #28
 8012398:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801239c:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 80123a0:	463b      	mov	r3, r7
 80123a2:	47d8      	blx	fp
 80123a4:	46a6      	mov	lr, r4
 80123a6:	f10d 0c1c 	add.w	ip, sp, #28
 80123aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80123ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80123b2:	f8de 3000 	ldr.w	r3, [lr]
 80123b6:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80123ba:	343c      	adds	r4, #60	; 0x3c
 80123bc:	f8cc 3000 	str.w	r3, [ip]
 80123c0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80123c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80123c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80123cc:	f8de 3000 	ldr.w	r3, [lr]
 80123d0:	f8cc 3000 	str.w	r3, [ip]
 80123d4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80123d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80123da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80123de:	6823      	ldr	r3, [r4, #0]
 80123e0:	4631      	mov	r1, r6
 80123e2:	4628      	mov	r0, r5
 80123e4:	f8cc 3000 	str.w	r3, [ip]
 80123e8:	682b      	ldr	r3, [r5, #0]
 80123ea:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80123ee:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80123f0:	f8cd 8008 	str.w	r8, [sp, #8]
 80123f4:	9201      	str	r2, [sp, #4]
 80123f6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80123f8:	9200      	str	r2, [sp, #0]
 80123fa:	aa07      	add	r2, sp, #28
 80123fc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80123fe:	463b      	mov	r3, r7
 8012400:	47a0      	blx	r4
 8012402:	b017      	add	sp, #92	; 0x5c
 8012404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012408 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8012408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801240c:	b08d      	sub	sp, #52	; 0x34
 801240e:	4688      	mov	r8, r1
 8012410:	f8d3 c000 	ldr.w	ip, [r3]
 8012414:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012416:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801241a:	680f      	ldr	r7, [r1, #0]
 801241c:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8012420:	eba7 070c 	sub.w	r7, r7, ip
 8012424:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8012428:	edd3 6a07 	vldr	s13, [r3, #28]
 801242c:	42bc      	cmp	r4, r7
 801242e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012430:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8012434:	bfa8      	it	ge
 8012436:	463c      	movge	r4, r7
 8012438:	f9b1 9000 	ldrsh.w	r9, [r1]
 801243c:	f9ba 1000 	ldrsh.w	r1, [sl]
 8012440:	ee07 4a90 	vmov	s15, r4
 8012444:	eb09 0e0c 	add.w	lr, r9, ip
 8012448:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801244c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8012450:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8012454:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8012458:	4571      	cmp	r1, lr
 801245a:	ee25 4a04 	vmul.f32	s8, s10, s8
 801245e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8012462:	ee25 5a27 	vmul.f32	s10, s10, s15
 8012466:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801246a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801246e:	ee32 1a05 	vadd.f32	s2, s4, s10
 8012472:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8012476:	ee36 0a84 	vadd.f32	s0, s13, s8
 801247a:	ee61 1a87 	vmul.f32	s3, s3, s14
 801247e:	ee22 2a07 	vmul.f32	s4, s4, s14
 8012482:	f340 808c 	ble.w	801259e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8012486:	eba1 060e 	sub.w	r6, r1, lr
 801248a:	fb96 f5f4 	sdiv	r5, r6, r4
 801248e:	ee07 5a10 	vmov	s14, r5
 8012492:	2d00      	cmp	r5, #0
 8012494:	fb04 6615 	mls	r6, r4, r5, r6
 8012498:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801249c:	eea7 0a04 	vfma.f32	s0, s14, s8
 80124a0:	eee7 0a24 	vfma.f32	s1, s14, s9
 80124a4:	eea7 1a05 	vfma.f32	s2, s14, s10
 80124a8:	dd12      	ble.n	80124d0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80124aa:	ee70 6a44 	vsub.f32	s13, s0, s8
 80124ae:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80124b2:	ee31 2a45 	vsub.f32	s4, s2, s10
 80124b6:	eef5 6a40 	vcmp.f32	s13, #0.0
 80124ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124be:	bf14      	ite	ne
 80124c0:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80124c4:	eeb0 7a67 	vmoveq.f32	s14, s15
 80124c8:	ee61 1a87 	vmul.f32	s3, s3, s14
 80124cc:	ee22 2a07 	vmul.f32	s4, s4, s14
 80124d0:	fb05 f204 	mul.w	r2, r5, r4
 80124d4:	1abf      	subs	r7, r7, r2
 80124d6:	4494      	add	ip, r2
 80124d8:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80124dc:	4411      	add	r1, r2
 80124de:	eb09 020c 	add.w	r2, r9, ip
 80124e2:	b209      	sxth	r1, r1
 80124e4:	443a      	add	r2, r7
 80124e6:	428a      	cmp	r2, r1
 80124e8:	bfc4      	itt	gt
 80124ea:	eba1 0209 	subgt.w	r2, r1, r9
 80124ee:	eba2 070c 	subgt.w	r7, r2, ip
 80124f2:	2f00      	cmp	r7, #0
 80124f4:	dd50      	ble.n	8012598 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80124f6:	fb97 f1f4 	sdiv	r1, r7, r4
 80124fa:	fb04 7211 	mls	r2, r4, r1, r7
 80124fe:	b90a      	cbnz	r2, 8012504 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8012500:	3901      	subs	r1, #1
 8012502:	4622      	mov	r2, r4
 8012504:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8012508:	6840      	ldr	r0, [r0, #4]
 801250a:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801250e:	44b6      	add	lr, r6
 8012510:	f8d0 a000 	ldr.w	sl, [r0]
 8012514:	2900      	cmp	r1, #0
 8012516:	bfcc      	ite	gt
 8012518:	46a1      	movgt	r9, r4
 801251a:	4691      	movle	r9, r2
 801251c:	900b      	str	r0, [sp, #44]	; 0x2c
 801251e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8012520:	fb04 e505 	mla	r5, r4, r5, lr
 8012524:	eef0 6a42 	vmov.f32	s13, s4
 8012528:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801252c:	9008      	str	r0, [sp, #32]
 801252e:	eeb0 7a61 	vmov.f32	s14, s3
 8012532:	9818      	ldr	r0, [sp, #96]	; 0x60
 8012534:	695b      	ldr	r3, [r3, #20]
 8012536:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801253a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801253e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8012542:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012544:	445b      	add	r3, fp
 8012546:	9307      	str	r3, [sp, #28]
 8012548:	ee16 3a90 	vmov	r3, s13
 801254c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8012550:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8012554:	ee21 3a23 	vmul.f32	s6, s2, s7
 8012558:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801255c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8012560:	ee17 7a90 	vmov	r7, s15
 8012564:	ee73 7a42 	vsub.f32	s15, s6, s4
 8012568:	fb97 f7f4 	sdiv	r7, r7, r4
 801256c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8012570:	ee17 ca90 	vmov	ip, s15
 8012574:	fb9c fcf4 	sdiv	ip, ip, r4
 8012578:	fb0c 3306 	mla	r3, ip, r6, r3
 801257c:	9302      	str	r3, [sp, #8]
 801257e:	ee17 3a10 	vmov	r3, s14
 8012582:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8012586:	fb07 3706 	mla	r7, r7, r6, r3
 801258a:	eba9 0306 	sub.w	r3, r9, r6
 801258e:	e9cd 4700 	strd	r4, r7, [sp]
 8012592:	f8da 4008 	ldr.w	r4, [sl, #8]
 8012596:	47a0      	blx	r4
 8012598:	b00d      	add	sp, #52	; 0x34
 801259a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801259e:	2500      	movs	r5, #0
 80125a0:	462e      	mov	r6, r5
 80125a2:	e799      	b.n	80124d8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080125a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80125a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125a8:	b0db      	sub	sp, #364	; 0x16c
 80125aa:	461d      	mov	r5, r3
 80125ac:	4614      	mov	r4, r2
 80125ae:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 80125b2:	910f      	str	r1, [sp, #60]	; 0x3c
 80125b4:	4629      	mov	r1, r5
 80125b6:	930a      	str	r3, [sp, #40]	; 0x28
 80125b8:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 80125bc:	9009      	str	r0, [sp, #36]	; 0x24
 80125be:	930b      	str	r3, [sp, #44]	; 0x2c
 80125c0:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 80125c4:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 80125c8:	9310      	str	r3, [sp, #64]	; 0x40
 80125ca:	6803      	ldr	r3, [r0, #0]
 80125cc:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 80125ce:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80125d2:	47b8      	blx	r7
 80125d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125d6:	6058      	str	r0, [r3, #4]
 80125d8:	2800      	cmp	r0, #0
 80125da:	f000 83a1 	beq.w	8012d20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80125de:	682b      	ldr	r3, [r5, #0]
 80125e0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80125e4:	ed94 7a02 	vldr	s14, [r4, #8]
 80125e8:	9314      	str	r3, [sp, #80]	; 0x50
 80125ea:	686b      	ldr	r3, [r5, #4]
 80125ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80125f0:	9315      	str	r3, [sp, #84]	; 0x54
 80125f2:	4bc1      	ldr	r3, [pc, #772]	; (80128f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80125f4:	7819      	ldrb	r1, [r3, #0]
 80125f6:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80125fa:	2900      	cmp	r1, #0
 80125fc:	bf16      	itet	ne
 80125fe:	4619      	movne	r1, r3
 8012600:	4611      	moveq	r1, r2
 8012602:	4613      	movne	r3, r2
 8012604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012608:	9116      	str	r1, [sp, #88]	; 0x58
 801260a:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801260e:	f240 8387 	bls.w	8012d20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012612:	ed94 7a07 	vldr	s14, [r4, #28]
 8012616:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801261a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801261e:	f240 837f 	bls.w	8012d20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012622:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8012626:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801262a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801262e:	f240 8377 	bls.w	8012d20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012632:	6822      	ldr	r2, [r4, #0]
 8012634:	4bb1      	ldr	r3, [pc, #708]	; (80128fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8012636:	429a      	cmp	r2, r3
 8012638:	f2c0 8372 	blt.w	8012d20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801263c:	49b0      	ldr	r1, [pc, #704]	; (8012900 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801263e:	6963      	ldr	r3, [r4, #20]
 8012640:	428a      	cmp	r2, r1
 8012642:	f300 836d 	bgt.w	8012d20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012646:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801264a:	48ae      	ldr	r0, [pc, #696]	; (8012904 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801264c:	33ff      	adds	r3, #255	; 0xff
 801264e:	4283      	cmp	r3, r0
 8012650:	f200 8366 	bhi.w	8012d20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012654:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012656:	4dac      	ldr	r5, [pc, #688]	; (8012908 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8012658:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801265c:	33ff      	adds	r3, #255	; 0xff
 801265e:	42ab      	cmp	r3, r5
 8012660:	f200 835e 	bhi.w	8012d20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012664:	6862      	ldr	r2, [r4, #4]
 8012666:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801266a:	33ff      	adds	r3, #255	; 0xff
 801266c:	4283      	cmp	r3, r0
 801266e:	f200 8357 	bhi.w	8012d20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012672:	69a1      	ldr	r1, [r4, #24]
 8012674:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8012678:	33ff      	adds	r3, #255	; 0xff
 801267a:	4283      	cmp	r3, r0
 801267c:	f200 8350 	bhi.w	8012d20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012680:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012682:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8012686:	30ff      	adds	r0, #255	; 0xff
 8012688:	42a8      	cmp	r0, r5
 801268a:	f200 8349 	bhi.w	8012d20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801268e:	428a      	cmp	r2, r1
 8012690:	f280 8110 	bge.w	80128b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8012694:	429a      	cmp	r2, r3
 8012696:	f300 8119 	bgt.w	80128cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801269a:	4299      	cmp	r1, r3
 801269c:	f280 811d 	bge.w	80128da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80126a0:	2502      	movs	r5, #2
 80126a2:	2701      	movs	r7, #1
 80126a4:	46a9      	mov	r9, r5
 80126a6:	46b8      	mov	r8, r7
 80126a8:	f04f 0a00 	mov.w	sl, #0
 80126ac:	4621      	mov	r1, r4
 80126ae:	a849      	add	r0, sp, #292	; 0x124
 80126b0:	f003 fda6 	bl	8016200 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80126b4:	4622      	mov	r2, r4
 80126b6:	4653      	mov	r3, sl
 80126b8:	a949      	add	r1, sp, #292	; 0x124
 80126ba:	f8cd 9000 	str.w	r9, [sp]
 80126be:	a819      	add	r0, sp, #100	; 0x64
 80126c0:	f003 fece 	bl	8016460 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80126c4:	4622      	mov	r2, r4
 80126c6:	4653      	mov	r3, sl
 80126c8:	a949      	add	r1, sp, #292	; 0x124
 80126ca:	f8cd 8000 	str.w	r8, [sp]
 80126ce:	a829      	add	r0, sp, #164	; 0xa4
 80126d0:	f003 fec6 	bl	8016460 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80126d4:	4643      	mov	r3, r8
 80126d6:	4622      	mov	r2, r4
 80126d8:	a949      	add	r1, sp, #292	; 0x124
 80126da:	f8cd 9000 	str.w	r9, [sp]
 80126de:	a839      	add	r0, sp, #228	; 0xe4
 80126e0:	f003 febe 	bl	8016460 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80126e4:	42af      	cmp	r7, r5
 80126e6:	af12      	add	r7, sp, #72	; 0x48
 80126e8:	bfb7      	itett	lt
 80126ea:	2300      	movlt	r3, #0
 80126ec:	2301      	movge	r3, #1
 80126ee:	ad29      	addlt	r5, sp, #164	; 0xa4
 80126f0:	ac19      	addlt	r4, sp, #100	; 0x64
 80126f2:	bfb1      	iteee	lt
 80126f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80126f6:	ad19      	addge	r5, sp, #100	; 0x64
 80126f8:	930e      	strge	r3, [sp, #56]	; 0x38
 80126fa:	ac29      	addge	r4, sp, #164	; 0xa4
 80126fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80126fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012702:	e887 0003 	stmia.w	r7, {r0, r1}
 8012706:	b928      	cbnz	r0, 8012714 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8012708:	4b80      	ldr	r3, [pc, #512]	; (801290c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801270a:	6818      	ldr	r0, [r3, #0]
 801270c:	6803      	ldr	r3, [r0, #0]
 801270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012710:	4798      	blx	r3
 8012712:	6038      	str	r0, [r7, #0]
 8012714:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8012716:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801271a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801271e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8012720:	930c      	str	r3, [sp, #48]	; 0x30
 8012722:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012724:	6963      	ldr	r3, [r4, #20]
 8012726:	440b      	add	r3, r1
 8012728:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801272c:	4408      	add	r0, r1
 801272e:	b200      	sxth	r0, r0
 8012730:	4283      	cmp	r3, r0
 8012732:	900d      	str	r0, [sp, #52]	; 0x34
 8012734:	f280 80dd 	bge.w	80128f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8012738:	428b      	cmp	r3, r1
 801273a:	da08      	bge.n	801274e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801273c:	2a00      	cmp	r2, #0
 801273e:	dd06      	ble.n	801274e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8012740:	1acb      	subs	r3, r1, r3
 8012742:	429a      	cmp	r2, r3
 8012744:	f2c0 80e4 	blt.w	8012910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8012748:	2b00      	cmp	r3, #0
 801274a:	f300 80e2 	bgt.w	8012912 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801274e:	6967      	ldr	r7, [r4, #20]
 8012750:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8012754:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012756:	443b      	add	r3, r7
 8012758:	461f      	mov	r7, r3
 801275a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801275c:	1bdf      	subs	r7, r3, r7
 801275e:	4297      	cmp	r7, r2
 8012760:	bfa8      	it	ge
 8012762:	4617      	movge	r7, r2
 8012764:	2f00      	cmp	r7, #0
 8012766:	f340 8166 	ble.w	8012a36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801276a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801276c:	6829      	ldr	r1, [r5, #0]
 801276e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012772:	f9bb 3000 	ldrsh.w	r3, [fp]
 8012776:	4411      	add	r1, r2
 8012778:	6820      	ldr	r0, [r4, #0]
 801277a:	4299      	cmp	r1, r3
 801277c:	dd1a      	ble.n	80127b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801277e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8012782:	4402      	add	r2, r0
 8012784:	440b      	add	r3, r1
 8012786:	b21b      	sxth	r3, r3
 8012788:	429a      	cmp	r2, r3
 801278a:	dc13      	bgt.n	80127b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801278c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801278e:	a912      	add	r1, sp, #72	; 0x48
 8012790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012792:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	9206      	str	r2, [sp, #24]
 8012798:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801279a:	9500      	str	r5, [sp, #0]
 801279c:	9205      	str	r2, [sp, #20]
 801279e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80127a0:	e9cd b203 	strd	fp, r2, [sp, #12]
 80127a4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80127a6:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80127aa:	aa49      	add	r2, sp, #292	; 0x124
 80127ac:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80127b0:	4623      	mov	r3, r4
 80127b2:	47c8      	blx	r9
 80127b4:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80127b8:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80127bc:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80127c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80127c4:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80127c8:	68a1      	ldr	r1, [r4, #8]
 80127ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80127ce:	ed94 6a08 	vldr	s12, [r4, #32]
 80127d2:	edd4 6a07 	vldr	s13, [r4, #28]
 80127d6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80127da:	ee76 6a86 	vadd.f32	s13, s13, s12
 80127de:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80127e2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80127e6:	edc4 6a07 	vstr	s13, [r4, #28]
 80127ea:	441a      	add	r2, r3
 80127ec:	6963      	ldr	r3, [r4, #20]
 80127ee:	3301      	adds	r3, #1
 80127f0:	6022      	str	r2, [r4, #0]
 80127f2:	6163      	str	r3, [r4, #20]
 80127f4:	69a3      	ldr	r3, [r4, #24]
 80127f6:	3b01      	subs	r3, #1
 80127f8:	61a3      	str	r3, [r4, #24]
 80127fa:	6923      	ldr	r3, [r4, #16]
 80127fc:	440b      	add	r3, r1
 80127fe:	68e1      	ldr	r1, [r4, #12]
 8012800:	428b      	cmp	r3, r1
 8012802:	6123      	str	r3, [r4, #16]
 8012804:	db15      	blt.n	8012832 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8012806:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801280a:	3201      	adds	r2, #1
 801280c:	1a5b      	subs	r3, r3, r1
 801280e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012812:	6022      	str	r2, [r4, #0]
 8012814:	6123      	str	r3, [r4, #16]
 8012816:	edc4 6a07 	vstr	s13, [r4, #28]
 801281a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801281e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012822:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8012826:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801282a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801282e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8012832:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8012836:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801283a:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801283e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012842:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8012846:	68a9      	ldr	r1, [r5, #8]
 8012848:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801284c:	ed95 6a08 	vldr	s12, [r5, #32]
 8012850:	edd5 6a07 	vldr	s13, [r5, #28]
 8012854:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8012858:	ee76 6a86 	vadd.f32	s13, s13, s12
 801285c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8012860:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012864:	edc5 6a07 	vstr	s13, [r5, #28]
 8012868:	441a      	add	r2, r3
 801286a:	696b      	ldr	r3, [r5, #20]
 801286c:	3301      	adds	r3, #1
 801286e:	602a      	str	r2, [r5, #0]
 8012870:	616b      	str	r3, [r5, #20]
 8012872:	69ab      	ldr	r3, [r5, #24]
 8012874:	3b01      	subs	r3, #1
 8012876:	61ab      	str	r3, [r5, #24]
 8012878:	692b      	ldr	r3, [r5, #16]
 801287a:	440b      	add	r3, r1
 801287c:	68e9      	ldr	r1, [r5, #12]
 801287e:	428b      	cmp	r3, r1
 8012880:	612b      	str	r3, [r5, #16]
 8012882:	db15      	blt.n	80128b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8012884:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8012888:	3201      	adds	r2, #1
 801288a:	1a5b      	subs	r3, r3, r1
 801288c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012890:	602a      	str	r2, [r5, #0]
 8012892:	612b      	str	r3, [r5, #16]
 8012894:	edc5 6a07 	vstr	s13, [r5, #28]
 8012898:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801289c:	ee36 7a87 	vadd.f32	s14, s13, s14
 80128a0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80128a4:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80128a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80128ac:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80128b0:	3f01      	subs	r7, #1
 80128b2:	e757      	b.n	8012764 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80128b4:	4299      	cmp	r1, r3
 80128b6:	dc13      	bgt.n	80128e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80128b8:	429a      	cmp	r2, r3
 80128ba:	da14      	bge.n	80128e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80128bc:	2502      	movs	r5, #2
 80128be:	2703      	movs	r7, #3
 80128c0:	f04f 0800 	mov.w	r8, #0
 80128c4:	46a9      	mov	r9, r5
 80128c6:	f04f 0a01 	mov.w	sl, #1
 80128ca:	e6ef      	b.n	80126ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80128cc:	2501      	movs	r5, #1
 80128ce:	2700      	movs	r7, #0
 80128d0:	46a9      	mov	r9, r5
 80128d2:	46b8      	mov	r8, r7
 80128d4:	f04f 0a02 	mov.w	sl, #2
 80128d8:	e6e8      	b.n	80126ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80128da:	2501      	movs	r5, #1
 80128dc:	2702      	movs	r7, #2
 80128de:	e6e1      	b.n	80126a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80128e0:	2500      	movs	r5, #0
 80128e2:	2701      	movs	r7, #1
 80128e4:	e7f4      	b.n	80128d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80128e6:	2702      	movs	r7, #2
 80128e8:	2503      	movs	r5, #3
 80128ea:	f04f 0900 	mov.w	r9, #0
 80128ee:	46b8      	mov	r8, r7
 80128f0:	e7e9      	b.n	80128c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80128f2:	4613      	mov	r3, r2
 80128f4:	e728      	b.n	8012748 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80128f6:	bf00      	nop
 80128f8:	20020fd0 	.word	0x20020fd0
 80128fc:	fffd8f01 	.word	0xfffd8f01
 8012900:	00027100 	.word	0x00027100
 8012904:	0004e1ff 	.word	0x0004e1ff
 8012908:	0004e1fe 	.word	0x0004e1fe
 801290c:	20020fd8 	.word	0x20020fd8
 8012910:	4613      	mov	r3, r2
 8012912:	992b      	ldr	r1, [sp, #172]	; 0xac
 8012914:	469e      	mov	lr, r3
 8012916:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8012918:	469c      	mov	ip, r3
 801291a:	9111      	str	r1, [sp, #68]	; 0x44
 801291c:	f04f 0900 	mov.w	r9, #0
 8012920:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8012924:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8012928:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801292c:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8012930:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8012934:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8012938:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801293c:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8012940:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8012944:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8012948:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801294c:	f1bc 0f00 	cmp.w	ip, #0
 8012950:	d147      	bne.n	80129e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8012952:	eb03 0c07 	add.w	ip, r3, r7
 8012956:	1ad7      	subs	r7, r2, r3
 8012958:	f1b9 0f00 	cmp.w	r9, #0
 801295c:	d009      	beq.n	8012972 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801295e:	9029      	str	r0, [sp, #164]	; 0xa4
 8012960:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8012964:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8012968:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801296c:	912d      	str	r1, [sp, #180]	; 0xb4
 801296e:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8012972:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8012974:	f04f 0800 	mov.w	r8, #0
 8012978:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801297c:	9111      	str	r1, [sp, #68]	; 0x44
 801297e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8012982:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8012986:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801298a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801298e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8012992:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8012996:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801299a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801299e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80129a2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80129a6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80129aa:	f1be 0f00 	cmp.w	lr, #0
 80129ae:	d031      	beq.n	8012a14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80129b0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80129b2:	4450      	add	r0, sl
 80129b4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80129b8:	4431      	add	r1, r6
 80129ba:	ee37 7a04 	vadd.f32	s14, s14, s8
 80129be:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80129c2:	4549      	cmp	r1, r9
 80129c4:	db08      	blt.n	80129d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80129c6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80129ca:	3001      	adds	r0, #1
 80129cc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80129d0:	eba1 0109 	sub.w	r1, r1, r9
 80129d4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80129d8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80129dc:	f04f 0801 	mov.w	r8, #1
 80129e0:	e7e3      	b.n	80129aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80129e2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80129e4:	4450      	add	r0, sl
 80129e6:	ee37 7a24 	vadd.f32	s14, s14, s9
 80129ea:	4431      	add	r1, r6
 80129ec:	ee77 7a84 	vadd.f32	s15, s15, s8
 80129f0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80129f4:	4541      	cmp	r1, r8
 80129f6:	db08      	blt.n	8012a0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80129f8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80129fc:	3001      	adds	r0, #1
 80129fe:	ee37 7a25 	vadd.f32	s14, s14, s11
 8012a02:	eba1 0108 	sub.w	r1, r1, r8
 8012a06:	ee77 7a86 	vadd.f32	s15, s15, s12
 8012a0a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012a0e:	f04f 0901 	mov.w	r9, #1
 8012a12:	e79b      	b.n	801294c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8012a14:	449c      	add	ip, r3
 8012a16:	1aff      	subs	r7, r7, r3
 8012a18:	f1b8 0f00 	cmp.w	r8, #0
 8012a1c:	d009      	beq.n	8012a32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8012a1e:	9019      	str	r0, [sp, #100]	; 0x64
 8012a20:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8012a24:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8012a28:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8012a2c:	911d      	str	r1, [sp, #116]	; 0x74
 8012a2e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8012a32:	1ad2      	subs	r2, r2, r3
 8012a34:	e68b      	b.n	801274e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8012a36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012a38:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	f000 80d1 	beq.w	8012be2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8012a40:	ad19      	add	r5, sp, #100	; 0x64
 8012a42:	ac39      	add	r4, sp, #228	; 0xe4
 8012a44:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8012a46:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8012a4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012a4e:	930c      	str	r3, [sp, #48]	; 0x30
 8012a50:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012a52:	6963      	ldr	r3, [r4, #20]
 8012a54:	440b      	add	r3, r1
 8012a56:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8012a5a:	4408      	add	r0, r1
 8012a5c:	b200      	sxth	r0, r0
 8012a5e:	4283      	cmp	r3, r0
 8012a60:	900d      	str	r0, [sp, #52]	; 0x34
 8012a62:	f280 80c1 	bge.w	8012be8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8012a66:	428b      	cmp	r3, r1
 8012a68:	da08      	bge.n	8012a7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8012a6a:	2a00      	cmp	r2, #0
 8012a6c:	dd06      	ble.n	8012a7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8012a6e:	1acb      	subs	r3, r1, r3
 8012a70:	429a      	cmp	r2, r3
 8012a72:	f2c0 80bb 	blt.w	8012bec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	f300 80b9 	bgt.w	8012bee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8012a7c:	6967      	ldr	r7, [r4, #20]
 8012a7e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8012a82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a84:	443b      	add	r3, r7
 8012a86:	461f      	mov	r7, r3
 8012a88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a8a:	1bdf      	subs	r7, r3, r7
 8012a8c:	4297      	cmp	r7, r2
 8012a8e:	bfa8      	it	ge
 8012a90:	4617      	movge	r7, r2
 8012a92:	2f00      	cmp	r7, #0
 8012a94:	f340 813c 	ble.w	8012d10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8012a98:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8012a9a:	6829      	ldr	r1, [r5, #0]
 8012a9c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012aa0:	f9bb 3000 	ldrsh.w	r3, [fp]
 8012aa4:	4411      	add	r1, r2
 8012aa6:	6820      	ldr	r0, [r4, #0]
 8012aa8:	4299      	cmp	r1, r3
 8012aaa:	dd1a      	ble.n	8012ae2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8012aac:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8012ab0:	4402      	add	r2, r0
 8012ab2:	440b      	add	r3, r1
 8012ab4:	b21b      	sxth	r3, r3
 8012ab6:	429a      	cmp	r2, r3
 8012ab8:	dc13      	bgt.n	8012ae2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8012aba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012abc:	a912      	add	r1, sp, #72	; 0x48
 8012abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ac0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	9206      	str	r2, [sp, #24]
 8012ac6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012ac8:	9500      	str	r5, [sp, #0]
 8012aca:	9205      	str	r2, [sp, #20]
 8012acc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012ace:	e9cd b203 	strd	fp, r2, [sp, #12]
 8012ad2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8012ad4:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8012ad8:	aa49      	add	r2, sp, #292	; 0x124
 8012ada:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8012ade:	4623      	mov	r3, r4
 8012ae0:	47c8      	blx	r9
 8012ae2:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8012ae6:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8012aea:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8012aee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012af2:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8012af6:	68a1      	ldr	r1, [r4, #8]
 8012af8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012afc:	ed94 6a08 	vldr	s12, [r4, #32]
 8012b00:	edd4 6a07 	vldr	s13, [r4, #28]
 8012b04:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8012b08:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012b0c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8012b10:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012b14:	edc4 6a07 	vstr	s13, [r4, #28]
 8012b18:	441a      	add	r2, r3
 8012b1a:	6963      	ldr	r3, [r4, #20]
 8012b1c:	3301      	adds	r3, #1
 8012b1e:	6022      	str	r2, [r4, #0]
 8012b20:	6163      	str	r3, [r4, #20]
 8012b22:	69a3      	ldr	r3, [r4, #24]
 8012b24:	3b01      	subs	r3, #1
 8012b26:	61a3      	str	r3, [r4, #24]
 8012b28:	6923      	ldr	r3, [r4, #16]
 8012b2a:	440b      	add	r3, r1
 8012b2c:	68e1      	ldr	r1, [r4, #12]
 8012b2e:	428b      	cmp	r3, r1
 8012b30:	6123      	str	r3, [r4, #16]
 8012b32:	db15      	blt.n	8012b60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8012b34:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8012b38:	3201      	adds	r2, #1
 8012b3a:	1a5b      	subs	r3, r3, r1
 8012b3c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012b40:	6022      	str	r2, [r4, #0]
 8012b42:	6123      	str	r3, [r4, #16]
 8012b44:	edc4 6a07 	vstr	s13, [r4, #28]
 8012b48:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8012b4c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012b50:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8012b54:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8012b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012b5c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8012b60:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8012b64:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8012b68:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8012b6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012b70:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8012b74:	68a9      	ldr	r1, [r5, #8]
 8012b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012b7a:	ed95 6a08 	vldr	s12, [r5, #32]
 8012b7e:	edd5 6a07 	vldr	s13, [r5, #28]
 8012b82:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8012b86:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012b8a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8012b8e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012b92:	edc5 6a07 	vstr	s13, [r5, #28]
 8012b96:	441a      	add	r2, r3
 8012b98:	696b      	ldr	r3, [r5, #20]
 8012b9a:	3301      	adds	r3, #1
 8012b9c:	602a      	str	r2, [r5, #0]
 8012b9e:	616b      	str	r3, [r5, #20]
 8012ba0:	69ab      	ldr	r3, [r5, #24]
 8012ba2:	3b01      	subs	r3, #1
 8012ba4:	61ab      	str	r3, [r5, #24]
 8012ba6:	692b      	ldr	r3, [r5, #16]
 8012ba8:	440b      	add	r3, r1
 8012baa:	68e9      	ldr	r1, [r5, #12]
 8012bac:	428b      	cmp	r3, r1
 8012bae:	612b      	str	r3, [r5, #16]
 8012bb0:	db15      	blt.n	8012bde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8012bb2:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8012bb6:	3201      	adds	r2, #1
 8012bb8:	1a5b      	subs	r3, r3, r1
 8012bba:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012bbe:	602a      	str	r2, [r5, #0]
 8012bc0:	612b      	str	r3, [r5, #16]
 8012bc2:	edc5 6a07 	vstr	s13, [r5, #28]
 8012bc6:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8012bca:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012bce:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8012bd2:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8012bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012bda:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8012bde:	3f01      	subs	r7, #1
 8012be0:	e757      	b.n	8012a92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8012be2:	ad39      	add	r5, sp, #228	; 0xe4
 8012be4:	ac19      	add	r4, sp, #100	; 0x64
 8012be6:	e72d      	b.n	8012a44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8012be8:	4613      	mov	r3, r2
 8012bea:	e744      	b.n	8012a76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8012bec:	4613      	mov	r3, r2
 8012bee:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8012bf0:	469e      	mov	lr, r3
 8012bf2:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8012bf6:	461f      	mov	r7, r3
 8012bf8:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8012bfc:	f04f 0900 	mov.w	r9, #0
 8012c00:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8012c04:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8012c08:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8012c0c:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8012c10:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8012c14:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8012c16:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8012c1a:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8012c1e:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8012c22:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8012c26:	960e      	str	r6, [sp, #56]	; 0x38
 8012c28:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8012c2c:	2f00      	cmp	r7, #0
 8012c2e:	d146      	bne.n	8012cbe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8012c30:	449c      	add	ip, r3
 8012c32:	1ad7      	subs	r7, r2, r3
 8012c34:	f1b9 0f00 	cmp.w	r9, #0
 8012c38:	d009      	beq.n	8012c4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8012c3a:	9039      	str	r0, [sp, #228]	; 0xe4
 8012c3c:	913d      	str	r1, [sp, #244]	; 0xf4
 8012c3e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8012c42:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8012c46:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8012c4a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8012c4e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8012c50:	f04f 0800 	mov.w	r8, #0
 8012c54:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8012c58:	910e      	str	r1, [sp, #56]	; 0x38
 8012c5a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8012c5e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8012c62:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8012c66:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8012c6a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8012c6e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8012c72:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8012c76:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8012c7a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8012c7e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8012c82:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8012c86:	f1be 0f00 	cmp.w	lr, #0
 8012c8a:	d030      	beq.n	8012cee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8012c8c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8012c8e:	4450      	add	r0, sl
 8012c90:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8012c94:	4431      	add	r1, r6
 8012c96:	ee37 7a04 	vadd.f32	s14, s14, s8
 8012c9a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8012c9e:	4549      	cmp	r1, r9
 8012ca0:	db08      	blt.n	8012cb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8012ca2:	ee77 7a85 	vadd.f32	s15, s15, s10
 8012ca6:	3001      	adds	r0, #1
 8012ca8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012cac:	eba1 0109 	sub.w	r1, r1, r9
 8012cb0:	ee37 7a06 	vadd.f32	s14, s14, s12
 8012cb4:	f10e 3eff 	add.w	lr, lr, #4294967295
 8012cb8:	f04f 0801 	mov.w	r8, #1
 8012cbc:	e7e3      	b.n	8012c86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8012cbe:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8012cc0:	4450      	add	r0, sl
 8012cc2:	ee37 7a24 	vadd.f32	s14, s14, s9
 8012cc6:	4431      	add	r1, r6
 8012cc8:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012ccc:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8012cd0:	4541      	cmp	r1, r8
 8012cd2:	db08      	blt.n	8012ce6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8012cd4:	ee76 6a85 	vadd.f32	s13, s13, s10
 8012cd8:	3001      	adds	r0, #1
 8012cda:	ee37 7a25 	vadd.f32	s14, s14, s11
 8012cde:	eba1 0108 	sub.w	r1, r1, r8
 8012ce2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8012ce6:	3f01      	subs	r7, #1
 8012ce8:	f04f 0901 	mov.w	r9, #1
 8012cec:	e79e      	b.n	8012c2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8012cee:	449c      	add	ip, r3
 8012cf0:	1aff      	subs	r7, r7, r3
 8012cf2:	f1b8 0f00 	cmp.w	r8, #0
 8012cf6:	d009      	beq.n	8012d0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8012cf8:	9019      	str	r0, [sp, #100]	; 0x64
 8012cfa:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8012cfe:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8012d02:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8012d06:	911d      	str	r1, [sp, #116]	; 0x74
 8012d08:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8012d0c:	1ad2      	subs	r2, r2, r3
 8012d0e:	e6b5      	b.n	8012a7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8012d10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	b923      	cbnz	r3, 8012d20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012d16:	4b04      	ldr	r3, [pc, #16]	; (8012d28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8012d18:	6818      	ldr	r0, [r3, #0]
 8012d1a:	6803      	ldr	r3, [r0, #0]
 8012d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d1e:	4798      	blx	r3
 8012d20:	b05b      	add	sp, #364	; 0x16c
 8012d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d26:	bf00      	nop
 8012d28:	20020fd8 	.word	0x20020fd8

08012d2c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8012d2c:	b570      	push	{r4, r5, r6, lr}
 8012d2e:	4604      	mov	r4, r0
 8012d30:	2500      	movs	r5, #0
 8012d32:	9804      	ldr	r0, [sp, #16]
 8012d34:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8012d38:	8025      	strh	r5, [r4, #0]
 8012d3a:	6061      	str	r1, [r4, #4]
 8012d3c:	7223      	strb	r3, [r4, #8]
 8012d3e:	7266      	strb	r6, [r4, #9]
 8012d40:	60e0      	str	r0, [r4, #12]
 8012d42:	8222      	strh	r2, [r4, #16]
 8012d44:	8265      	strh	r5, [r4, #18]
 8012d46:	82a5      	strh	r5, [r4, #20]
 8012d48:	82e5      	strh	r5, [r4, #22]
 8012d4a:	8325      	strh	r5, [r4, #24]
 8012d4c:	8365      	strh	r5, [r4, #26]
 8012d4e:	83a5      	strh	r5, [r4, #28]
 8012d50:	77a5      	strb	r5, [r4, #30]
 8012d52:	b32e      	cbz	r6, 8012da0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8012d54:	6803      	ldr	r3, [r0, #0]
 8012d56:	695b      	ldr	r3, [r3, #20]
 8012d58:	4798      	blx	r3
 8012d5a:	4606      	mov	r6, r0
 8012d5c:	b300      	cbz	r0, 8012da0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8012d5e:	68e0      	ldr	r0, [r4, #12]
 8012d60:	4631      	mov	r1, r6
 8012d62:	6803      	ldr	r3, [r0, #0]
 8012d64:	68db      	ldr	r3, [r3, #12]
 8012d66:	4798      	blx	r3
 8012d68:	4605      	mov	r5, r0
 8012d6a:	b1c8      	cbz	r0, 8012da0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8012d6c:	7b43      	ldrb	r3, [r0, #13]
 8012d6e:	7a82      	ldrb	r2, [r0, #10]
 8012d70:	005b      	lsls	r3, r3, #1
 8012d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012d76:	4313      	orrs	r3, r2
 8012d78:	83a3      	strh	r3, [r4, #28]
 8012d7a:	7a63      	ldrb	r3, [r4, #9]
 8012d7c:	2b04      	cmp	r3, #4
 8012d7e:	d10f      	bne.n	8012da0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8012d80:	68e0      	ldr	r0, [r4, #12]
 8012d82:	462a      	mov	r2, r5
 8012d84:	4631      	mov	r1, r6
 8012d86:	6803      	ldr	r3, [r0, #0]
 8012d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d8a:	4798      	blx	r3
 8012d8c:	7b6b      	ldrb	r3, [r5, #13]
 8012d8e:	005b      	lsls	r3, r3, #1
 8012d90:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8012d94:	7aab      	ldrb	r3, [r5, #10]
 8012d96:	4313      	orrs	r3, r2
 8012d98:	4418      	add	r0, r3
 8012d9a:	8ba3      	ldrh	r3, [r4, #28]
 8012d9c:	4418      	add	r0, r3
 8012d9e:	83a0      	strh	r0, [r4, #28]
 8012da0:	4620      	mov	r0, r4
 8012da2:	bd70      	pop	{r4, r5, r6, pc}

08012da4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8012da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012da8:	2400      	movs	r4, #0
 8012daa:	b085      	sub	sp, #20
 8012dac:	4681      	mov	r9, r0
 8012dae:	4688      	mov	r8, r1
 8012db0:	4692      	mov	sl, r2
 8012db2:	469b      	mov	fp, r3
 8012db4:	4627      	mov	r7, r4
 8012db6:	4625      	mov	r5, r4
 8012db8:	4626      	mov	r6, r4
 8012dba:	4554      	cmp	r4, sl
 8012dbc:	da2a      	bge.n	8012e14 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	9303      	str	r3, [sp, #12]
 8012dc2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8012dc6:	429d      	cmp	r5, r3
 8012dc8:	d004      	beq.n	8012dd4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8012dca:	f242 030b 	movw	r3, #8203	; 0x200b
 8012dce:	429d      	cmp	r5, r3
 8012dd0:	bf18      	it	ne
 8012dd2:	462f      	movne	r7, r5
 8012dd4:	ab03      	add	r3, sp, #12
 8012dd6:	4642      	mov	r2, r8
 8012dd8:	4659      	mov	r1, fp
 8012dda:	4648      	mov	r0, r9
 8012ddc:	f002 ffcc 	bl	8015d78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012de0:	4605      	mov	r5, r0
 8012de2:	b1b8      	cbz	r0, 8012e14 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8012de4:	280a      	cmp	r0, #10
 8012de6:	d015      	beq.n	8012e14 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8012de8:	9a03      	ldr	r2, [sp, #12]
 8012dea:	b18a      	cbz	r2, 8012e10 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8012dec:	7b50      	ldrb	r0, [r2, #13]
 8012dee:	4639      	mov	r1, r7
 8012df0:	7a93      	ldrb	r3, [r2, #10]
 8012df2:	0040      	lsls	r0, r0, #1
 8012df4:	8895      	ldrh	r5, [r2, #4]
 8012df6:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8012dfa:	4303      	orrs	r3, r0
 8012dfc:	4640      	mov	r0, r8
 8012dfe:	9301      	str	r3, [sp, #4]
 8012e00:	f8d8 3000 	ldr.w	r3, [r8]
 8012e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e06:	4798      	blx	r3
 8012e08:	9b01      	ldr	r3, [sp, #4]
 8012e0a:	4418      	add	r0, r3
 8012e0c:	4406      	add	r6, r0
 8012e0e:	b2b6      	uxth	r6, r6
 8012e10:	3401      	adds	r4, #1
 8012e12:	e7d2      	b.n	8012dba <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8012e14:	4630      	mov	r0, r6
 8012e16:	b005      	add	sp, #20
 8012e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012e1c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8012e1c:	2a02      	cmp	r2, #2
 8012e1e:	b530      	push	{r4, r5, lr}
 8012e20:	d011      	beq.n	8012e46 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8012e22:	2a03      	cmp	r2, #3
 8012e24:	d01c      	beq.n	8012e60 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8012e26:	2a01      	cmp	r2, #1
 8012e28:	d10c      	bne.n	8012e44 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8012e2a:	888b      	ldrh	r3, [r1, #4]
 8012e2c:	8801      	ldrh	r1, [r0, #0]
 8012e2e:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8012e32:	1a5b      	subs	r3, r3, r1
 8012e34:	8844      	ldrh	r4, [r0, #2]
 8012e36:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8012e3a:	1a9b      	subs	r3, r3, r2
 8012e3c:	8004      	strh	r4, [r0, #0]
 8012e3e:	8081      	strh	r1, [r0, #4]
 8012e40:	8043      	strh	r3, [r0, #2]
 8012e42:	80c2      	strh	r2, [r0, #6]
 8012e44:	bd30      	pop	{r4, r5, pc}
 8012e46:	88cb      	ldrh	r3, [r1, #6]
 8012e48:	8842      	ldrh	r2, [r0, #2]
 8012e4a:	1a9b      	subs	r3, r3, r2
 8012e4c:	88c2      	ldrh	r2, [r0, #6]
 8012e4e:	1a9b      	subs	r3, r3, r2
 8012e50:	888a      	ldrh	r2, [r1, #4]
 8012e52:	8801      	ldrh	r1, [r0, #0]
 8012e54:	8043      	strh	r3, [r0, #2]
 8012e56:	1a52      	subs	r2, r2, r1
 8012e58:	8881      	ldrh	r1, [r0, #4]
 8012e5a:	1a52      	subs	r2, r2, r1
 8012e5c:	8002      	strh	r2, [r0, #0]
 8012e5e:	e7f1      	b.n	8012e44 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8012e60:	88cb      	ldrh	r3, [r1, #6]
 8012e62:	8841      	ldrh	r1, [r0, #2]
 8012e64:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8012e68:	1a5b      	subs	r3, r3, r1
 8012e6a:	f9b0 5000 	ldrsh.w	r5, [r0]
 8012e6e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8012e72:	1a9b      	subs	r3, r3, r2
 8012e74:	8045      	strh	r5, [r0, #2]
 8012e76:	8082      	strh	r2, [r0, #4]
 8012e78:	8003      	strh	r3, [r0, #0]
 8012e7a:	80c4      	strh	r4, [r0, #6]
 8012e7c:	e7e2      	b.n	8012e44 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08012e7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8012e7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e82:	b09f      	sub	sp, #124	; 0x7c
 8012e84:	9116      	str	r1, [sp, #88]	; 0x58
 8012e86:	9317      	str	r3, [sp, #92]	; 0x5c
 8012e88:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8012e8a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8012e8c:	8809      	ldrh	r1, [r1, #0]
 8012e8e:	889b      	ldrh	r3, [r3, #4]
 8012e90:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8012e94:	440b      	add	r3, r1
 8012e96:	9212      	str	r2, [sp, #72]	; 0x48
 8012e98:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8012e9c:	b21b      	sxth	r3, r3
 8012e9e:	9011      	str	r0, [sp, #68]	; 0x44
 8012ea0:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8012ea4:	9310      	str	r3, [sp, #64]	; 0x40
 8012ea6:	f8d8 3000 	ldr.w	r3, [r8]
 8012eaa:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	; 0xa0
 8012eae:	7a59      	ldrb	r1, [r3, #9]
 8012eb0:	7a1b      	ldrb	r3, [r3, #8]
 8012eb2:	9114      	str	r1, [sp, #80]	; 0x50
 8012eb4:	9315      	str	r3, [sp, #84]	; 0x54
 8012eb6:	2a00      	cmp	r2, #0
 8012eb8:	d067      	beq.n	8012f8a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10c>
 8012eba:	f898 3010 	ldrb.w	r3, [r8, #16]
 8012ebe:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8012ec0:	2b04      	cmp	r3, #4
 8012ec2:	bf14      	ite	ne
 8012ec4:	2301      	movne	r3, #1
 8012ec6:	2302      	moveq	r3, #2
 8012ec8:	4413      	add	r3, r2
 8012eca:	f04f 0900 	mov.w	r9, #0
 8012ece:	930f      	str	r3, [sp, #60]	; 0x3c
 8012ed0:	464c      	mov	r4, r9
 8012ed2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8012ed6:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8012eda:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8012ede:	4293      	cmp	r3, r2
 8012ee0:	f280 808c 	bge.w	8012ffc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17e>
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	931c      	str	r3, [sp, #112]	; 0x70
 8012ee8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8012eec:	429c      	cmp	r4, r3
 8012eee:	d006      	beq.n	8012efe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x80>
 8012ef0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ef2:	f242 020b 	movw	r2, #8203	; 0x200b
 8012ef6:	4294      	cmp	r4, r2
 8012ef8:	bf18      	it	ne
 8012efa:	4623      	movne	r3, r4
 8012efc:	930d      	str	r3, [sp, #52]	; 0x34
 8012efe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012f00:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8012f02:	f8d8 2000 	ldr.w	r2, [r8]
 8012f06:	428b      	cmp	r3, r1
 8012f08:	db41      	blt.n	8012f8e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x110>
 8012f0a:	6813      	ldr	r3, [r2, #0]
 8012f0c:	4610      	mov	r0, r2
 8012f0e:	695b      	ldr	r3, [r3, #20]
 8012f10:	4798      	blx	r3
 8012f12:	4604      	mov	r4, r0
 8012f14:	f8d8 0000 	ldr.w	r0, [r8]
 8012f18:	aa1d      	add	r2, sp, #116	; 0x74
 8012f1a:	4621      	mov	r1, r4
 8012f1c:	6803      	ldr	r3, [r0, #0]
 8012f1e:	689e      	ldr	r6, [r3, #8]
 8012f20:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8012f24:	47b0      	blx	r6
 8012f26:	901c      	str	r0, [sp, #112]	; 0x70
 8012f28:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8012f2c:	429c      	cmp	r4, r3
 8012f2e:	f000 80ea 	beq.w	8013106 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8012f32:	f242 030b 	movw	r3, #8203	; 0x200b
 8012f36:	429c      	cmp	r4, r3
 8012f38:	f000 80e5 	beq.w	8013106 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8012f3c:	2c00      	cmp	r4, #0
 8012f3e:	f000 80f7 	beq.w	8013130 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 8012f42:	2c0a      	cmp	r4, #10
 8012f44:	d060      	beq.n	8013008 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18a>
 8012f46:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012f48:	b36a      	cbz	r2, 8012fa6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x128>
 8012f4a:	8894      	ldrh	r4, [r2, #4]
 8012f4c:	f1bb 0f00 	cmp.w	fp, #0
 8012f50:	d03b      	beq.n	8012fca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14c>
 8012f52:	f892 900d 	ldrb.w	r9, [r2, #13]
 8012f56:	f1bb 0f01 	cmp.w	fp, #1
 8012f5a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8012f5e:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8012f62:	f892 900a 	ldrb.w	r9, [r2, #10]
 8012f66:	ea49 0903 	orr.w	r9, r9, r3
 8012f6a:	d134      	bne.n	8012fd6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x158>
 8012f6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012f6e:	eba5 0509 	sub.w	r5, r5, r9
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d14f      	bne.n	8013016 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x198>
 8012f76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012f78:	eb09 0305 	add.w	r3, r9, r5
 8012f7c:	4413      	add	r3, r2
 8012f7e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8012f80:	f9b2 2000 	ldrsh.w	r2, [r2]
 8012f84:	4293      	cmp	r3, r2
 8012f86:	da51      	bge.n	801302c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8012f88:	e038      	b.n	8012ffc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17e>
 8012f8a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8012f8c:	e79d      	b.n	8012eca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 8012f8e:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8012f92:	4659      	mov	r1, fp
 8012f94:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8012f96:	9301      	str	r3, [sp, #4]
 8012f98:	ab1d      	add	r3, sp, #116	; 0x74
 8012f9a:	9300      	str	r3, [sp, #0]
 8012f9c:	ab1c      	add	r3, sp, #112	; 0x70
 8012f9e:	f002 ff43 	bl	8015e28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8012fa2:	4604      	mov	r4, r0
 8012fa4:	e7c0      	b.n	8012f28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xaa>
 8012fa6:	f8d8 0000 	ldr.w	r0, [r8]
 8012faa:	6803      	ldr	r3, [r0, #0]
 8012fac:	691b      	ldr	r3, [r3, #16]
 8012fae:	4798      	blx	r3
 8012fb0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8012fb4:	4298      	cmp	r0, r3
 8012fb6:	f000 80a6 	beq.w	8013106 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8012fba:	f242 030b 	movw	r3, #8203	; 0x200b
 8012fbe:	4298      	cmp	r0, r3
 8012fc0:	f000 80a1 	beq.w	8013106 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8012fc4:	f1bb 0f00 	cmp.w	fp, #0
 8012fc8:	d100      	bne.n	8012fcc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 8012fca:	444d      	add	r5, r9
 8012fcc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012fce:	2a00      	cmp	r2, #0
 8012fd0:	d1bf      	bne.n	8012f52 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd4>
 8012fd2:	4691      	mov	r9, r2
 8012fd4:	e097      	b.n	8013106 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8012fd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	f000 80ab 	beq.w	8013134 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 8012fde:	f1bb 0f00 	cmp.w	fp, #0
 8012fe2:	d118      	bne.n	8013016 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x198>
 8012fe4:	f8d8 0000 	ldr.w	r0, [r8]
 8012fe8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012fea:	6803      	ldr	r3, [r0, #0]
 8012fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012fee:	4798      	blx	r3
 8012ff0:	4405      	add	r5, r0
 8012ff2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012ff4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012ff6:	1aeb      	subs	r3, r5, r3
 8012ff8:	4293      	cmp	r3, r2
 8012ffa:	dd17      	ble.n	801302c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8012ffc:	2c00      	cmp	r4, #0
 8012ffe:	f000 8097 	beq.w	8013130 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 8013002:	2c0a      	cmp	r4, #10
 8013004:	f040 8085 	bne.w	8013112 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x294>
 8013008:	240a      	movs	r4, #10
 801300a:	fab4 f084 	clz	r0, r4
 801300e:	0940      	lsrs	r0, r0, #5
 8013010:	b01f      	add	sp, #124	; 0x7c
 8013012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013016:	f8d8 0000 	ldr.w	r0, [r8]
 801301a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801301c:	6803      	ldr	r3, [r0, #0]
 801301e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013020:	4798      	blx	r3
 8013022:	f1bb 0f01 	cmp.w	fp, #1
 8013026:	eba5 0500 	sub.w	r5, r5, r0
 801302a:	d0a4      	beq.n	8012f76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf8>
 801302c:	981c      	ldr	r0, [sp, #112]	; 0x70
 801302e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8013030:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8013034:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013038:	7b43      	ldrb	r3, [r0, #13]
 801303a:	4429      	add	r1, r5
 801303c:	015b      	lsls	r3, r3, #5
 801303e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8013042:	7983      	ldrb	r3, [r0, #6]
 8013044:	4313      	orrs	r3, r2
 8013046:	440b      	add	r3, r1
 8013048:	42b3      	cmp	r3, r6
 801304a:	db5c      	blt.n	8013106 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801304c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801304e:	4299      	cmp	r1, r3
 8013050:	da59      	bge.n	8013106 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8013052:	f8d8 0000 	ldr.w	r0, [r8]
 8013056:	42ae      	cmp	r6, r5
 8013058:	6803      	ldr	r3, [r0, #0]
 801305a:	bfcc      	ite	gt
 801305c:	1b76      	subgt	r6, r6, r5
 801305e:	2600      	movle	r6, #0
 8013060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013062:	bfc8      	it	gt
 8013064:	b2b6      	uxthgt	r6, r6
 8013066:	4798      	blx	r3
 8013068:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801306a:	7b5a      	ldrb	r2, [r3, #13]
 801306c:	00d1      	lsls	r1, r2, #3
 801306e:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8013072:	7a19      	ldrb	r1, [r3, #8]
 8013074:	4339      	orrs	r1, r7
 8013076:	0657      	lsls	r7, r2, #25
 8013078:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801307a:	bf48      	it	mi
 801307c:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8013080:	4407      	add	r7, r0
 8013082:	bf48      	it	mi
 8013084:	b209      	sxthmi	r1, r1
 8013086:	1a7f      	subs	r7, r7, r1
 8013088:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801308a:	b2bf      	uxth	r7, r7
 801308c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8013090:	fa0f fa87 	sxth.w	sl, r7
 8013094:	4551      	cmp	r1, sl
 8013096:	dd3a      	ble.n	801310e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8013098:	0112      	lsls	r2, r2, #4
 801309a:	79d8      	ldrb	r0, [r3, #7]
 801309c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80130a0:	4302      	orrs	r2, r0
 80130a2:	4492      	add	sl, r2
 80130a4:	4551      	cmp	r1, sl
 80130a6:	dc2e      	bgt.n	8013106 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 80130a8:	1bcf      	subs	r7, r1, r7
 80130aa:	468a      	mov	sl, r1
 80130ac:	b2bf      	uxth	r7, r7
 80130ae:	9319      	str	r3, [sp, #100]	; 0x64
 80130b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80130b2:	f8d8 0000 	ldr.w	r0, [r8]
 80130b6:	681a      	ldr	r2, [r3, #0]
 80130b8:	6801      	ldr	r1, [r0, #0]
 80130ba:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80130bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80130be:	9313      	str	r3, [sp, #76]	; 0x4c
 80130c0:	9218      	str	r2, [sp, #96]	; 0x60
 80130c2:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80130c4:	4788      	blx	r1
 80130c6:	f898 1006 	ldrb.w	r1, [r8, #6]
 80130ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80130cc:	910b      	str	r1, [sp, #44]	; 0x2c
 80130ce:	f898 100e 	ldrb.w	r1, [r8, #14]
 80130d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80130d4:	910a      	str	r1, [sp, #40]	; 0x28
 80130d6:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 80130da:	9109      	str	r1, [sp, #36]	; 0x24
 80130dc:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80130e0:	9305      	str	r3, [sp, #20]
 80130e2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80130e4:	9206      	str	r2, [sp, #24]
 80130e6:	e9cd a601 	strd	sl, r6, [sp, #4]
 80130ea:	442e      	add	r6, r5
 80130ec:	e9cd 7303 	strd	r7, r3, [sp, #12]
 80130f0:	b236      	sxth	r6, r6
 80130f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80130f4:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80130f8:	9600      	str	r6, [sp, #0]
 80130fa:	9916      	ldr	r1, [sp, #88]	; 0x58
 80130fc:	681a      	ldr	r2, [r3, #0]
 80130fe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013100:	685b      	ldr	r3, [r3, #4]
 8013102:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8013104:	47b0      	blx	r6
 8013106:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013108:	3301      	adds	r3, #1
 801310a:	930e      	str	r3, [sp, #56]	; 0x38
 801310c:	e6e5      	b.n	8012eda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 801310e:	2700      	movs	r7, #0
 8013110:	e7cd      	b.n	80130ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x230>
 8013112:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8013114:	3501      	adds	r5, #1
 8013116:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013118:	429d      	cmp	r5, r3
 801311a:	f6bf af76 	bge.w	801300a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801311e:	4659      	mov	r1, fp
 8013120:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8013122:	f7f1 feed 	bl	8004f00 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8013126:	4604      	mov	r4, r0
 8013128:	b110      	cbz	r0, 8013130 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 801312a:	280a      	cmp	r0, #10
 801312c:	d1f2      	bne.n	8013114 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801312e:	e76b      	b.n	8013008 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18a>
 8013130:	2400      	movs	r4, #0
 8013132:	e76a      	b.n	801300a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8013134:	f1bb 0f00 	cmp.w	fp, #0
 8013138:	f43f af5b 	beq.w	8012ff2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x174>
 801313c:	e776      	b.n	801302c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

0801313e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801313e:	b530      	push	{r4, r5, lr}
 8013140:	8a44      	ldrh	r4, [r0, #18]
 8013142:	8ac5      	ldrh	r5, [r0, #22]
 8013144:	82c3      	strh	r3, [r0, #22]
 8013146:	442c      	add	r4, r5
 8013148:	1ae4      	subs	r4, r4, r3
 801314a:	8b03      	ldrh	r3, [r0, #24]
 801314c:	8244      	strh	r4, [r0, #18]
 801314e:	8a84      	ldrh	r4, [r0, #20]
 8013150:	4422      	add	r2, r4
 8013152:	440c      	add	r4, r1
 8013154:	1a59      	subs	r1, r3, r1
 8013156:	8342      	strh	r2, [r0, #26]
 8013158:	8284      	strh	r4, [r0, #20]
 801315a:	8301      	strh	r1, [r0, #24]
 801315c:	bd30      	pop	{r4, r5, pc}

0801315e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801315e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013162:	7a43      	ldrb	r3, [r0, #9]
 8013164:	b087      	sub	sp, #28
 8013166:	4604      	mov	r4, r0
 8013168:	460f      	mov	r7, r1
 801316a:	1eda      	subs	r2, r3, #3
 801316c:	b2d2      	uxtb	r2, r2
 801316e:	2900      	cmp	r1, #0
 8013170:	d036      	beq.n	80131e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8013172:	2a01      	cmp	r2, #1
 8013174:	d932      	bls.n	80131dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8013176:	1e58      	subs	r0, r3, #1
 8013178:	f1d0 0b00 	rsbs	fp, r0, #0
 801317c:	eb4b 0b00 	adc.w	fp, fp, r0
 8013180:	1e99      	subs	r1, r3, #2
 8013182:	424b      	negs	r3, r1
 8013184:	414b      	adcs	r3, r1
 8013186:	9303      	str	r3, [sp, #12]
 8013188:	2300      	movs	r3, #0
 801318a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801318e:	2500      	movs	r5, #0
 8013190:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8013194:	46a9      	mov	r9, r5
 8013196:	8265      	strh	r5, [r4, #18]
 8013198:	82a5      	strh	r5, [r4, #20]
 801319a:	2300      	movs	r3, #0
 801319c:	9305      	str	r3, [sp, #20]
 801319e:	8823      	ldrh	r3, [r4, #0]
 80131a0:	2b20      	cmp	r3, #32
 80131a2:	d02b      	beq.n	80131fc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 80131a4:	eba3 020a 	sub.w	r2, r3, sl
 80131a8:	4256      	negs	r6, r2
 80131aa:	4156      	adcs	r6, r2
 80131ac:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80131b0:	4293      	cmp	r3, r2
 80131b2:	d004      	beq.n	80131be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 80131b4:	4553      	cmp	r3, sl
 80131b6:	bf16      	itet	ne
 80131b8:	4699      	movne	r9, r3
 80131ba:	2601      	moveq	r6, #1
 80131bc:	2600      	movne	r6, #0
 80131be:	ab05      	add	r3, sp, #20
 80131c0:	68e2      	ldr	r2, [r4, #12]
 80131c2:	7a21      	ldrb	r1, [r4, #8]
 80131c4:	6860      	ldr	r0, [r4, #4]
 80131c6:	f002 fdd7 	bl	8015d78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80131ca:	8020      	strh	r0, [r4, #0]
 80131cc:	b9c8      	cbnz	r0, 8013202 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 80131ce:	8b22      	ldrh	r2, [r4, #24]
 80131d0:	2300      	movs	r3, #0
 80131d2:	4611      	mov	r1, r2
 80131d4:	4620      	mov	r0, r4
 80131d6:	f7ff ffb2 	bl	801313e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80131da:	e066      	b.n	80132aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80131dc:	468b      	mov	fp, r1
 80131de:	e7cf      	b.n	8013180 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 80131e0:	3b01      	subs	r3, #1
 80131e2:	2a01      	cmp	r2, #1
 80131e4:	9103      	str	r1, [sp, #12]
 80131e6:	468b      	mov	fp, r1
 80131e8:	bf8c      	ite	hi
 80131ea:	2200      	movhi	r2, #0
 80131ec:	2201      	movls	r2, #1
 80131ee:	2b01      	cmp	r3, #1
 80131f0:	9202      	str	r2, [sp, #8]
 80131f2:	bf8c      	ite	hi
 80131f4:	2300      	movhi	r3, #0
 80131f6:	2301      	movls	r3, #1
 80131f8:	9301      	str	r3, [sp, #4]
 80131fa:	e7c8      	b.n	801318e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 80131fc:	4699      	mov	r9, r3
 80131fe:	2601      	movs	r6, #1
 8013200:	e7dd      	b.n	80131be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8013202:	8ae3      	ldrh	r3, [r4, #22]
 8013204:	280a      	cmp	r0, #10
 8013206:	f103 0301 	add.w	r3, r3, #1
 801320a:	82e3      	strh	r3, [r4, #22]
 801320c:	d0df      	beq.n	80131ce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801320e:	9a05      	ldr	r2, [sp, #20]
 8013210:	bb42      	cbnz	r2, 8013264 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 8013212:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8013216:	4298      	cmp	r0, r3
 8013218:	d001      	beq.n	801321e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801321a:	4550      	cmp	r0, sl
 801321c:	d1bd      	bne.n	801319a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801321e:	8823      	ldrh	r3, [r4, #0]
 8013220:	8b21      	ldrh	r1, [r4, #24]
 8013222:	2b20      	cmp	r3, #32
 8013224:	d001      	beq.n	801322a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8013226:	4553      	cmp	r3, sl
 8013228:	d131      	bne.n	801328e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801322a:	2e00      	cmp	r6, #0
 801322c:	bf0a      	itet	eq
 801322e:	460d      	moveq	r5, r1
 8013230:	4630      	movne	r0, r6
 8013232:	2001      	moveq	r0, #1
 8013234:	440a      	add	r2, r1
 8013236:	8aa3      	ldrh	r3, [r4, #20]
 8013238:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801323c:	b292      	uxth	r2, r2
 801323e:	8322      	strh	r2, [r4, #24]
 8013240:	4413      	add	r3, r2
 8013242:	2f00      	cmp	r7, #0
 8013244:	d03a      	beq.n	80132bc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8013246:	f1bb 0f00 	cmp.w	fp, #0
 801324a:	d102      	bne.n	8013252 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801324c:	9903      	ldr	r1, [sp, #12]
 801324e:	b301      	cbz	r1, 8013292 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8013250:	b1f8      	cbz	r0, 8013292 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8013252:	8ba1      	ldrh	r1, [r4, #28]
 8013254:	4419      	add	r1, r3
 8013256:	458c      	cmp	ip, r1
 8013258:	da2a      	bge.n	80132b0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801325a:	8a61      	ldrh	r1, [r4, #18]
 801325c:	b341      	cbz	r1, 80132b0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801325e:	4563      	cmp	r3, ip
 8013260:	dd9b      	ble.n	801319a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8013262:	e01c      	b.n	801329e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8013264:	8893      	ldrh	r3, [r2, #4]
 8013266:	4649      	mov	r1, r9
 8013268:	8023      	strh	r3, [r4, #0]
 801326a:	f892 800d 	ldrb.w	r8, [r2, #13]
 801326e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8013272:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8013276:	f892 800a 	ldrb.w	r8, [r2, #10]
 801327a:	ea48 0800 	orr.w	r8, r8, r0
 801327e:	68e0      	ldr	r0, [r4, #12]
 8013280:	6803      	ldr	r3, [r0, #0]
 8013282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013284:	4798      	blx	r3
 8013286:	eb08 0200 	add.w	r2, r8, r0
 801328a:	b292      	uxth	r2, r2
 801328c:	e7c7      	b.n	801321e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801328e:	2000      	movs	r0, #0
 8013290:	e7d0      	b.n	8013234 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8013292:	4563      	cmp	r3, ip
 8013294:	dd81      	ble.n	801319a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8013296:	8a63      	ldrh	r3, [r4, #18]
 8013298:	2b00      	cmp	r3, #0
 801329a:	f43f af7e 	beq.w	801319a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801329e:	2301      	movs	r3, #1
 80132a0:	8ba2      	ldrh	r2, [r4, #28]
 80132a2:	77a3      	strb	r3, [r4, #30]
 80132a4:	8b63      	ldrh	r3, [r4, #26]
 80132a6:	4413      	add	r3, r2
 80132a8:	8363      	strh	r3, [r4, #26]
 80132aa:	b007      	add	sp, #28
 80132ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132b0:	2300      	movs	r3, #0
 80132b2:	4611      	mov	r1, r2
 80132b4:	4620      	mov	r0, r4
 80132b6:	f7ff ff42 	bl	801313e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80132ba:	e76e      	b.n	801319a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80132bc:	4563      	cmp	r3, ip
 80132be:	dd14      	ble.n	80132ea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 80132c0:	9b02      	ldr	r3, [sp, #8]
 80132c2:	b113      	cbz	r3, 80132ca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 80132c4:	2301      	movs	r3, #1
 80132c6:	460a      	mov	r2, r1
 80132c8:	e783      	b.n	80131d2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 80132ca:	9b01      	ldr	r3, [sp, #4]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	f43f af64 	beq.w	801319a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80132d2:	2800      	cmp	r0, #0
 80132d4:	f47f af61 	bne.w	801319a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80132d8:	b116      	cbz	r6, 80132e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 80132da:	2301      	movs	r3, #1
 80132dc:	462a      	mov	r2, r5
 80132de:	e779      	b.n	80131d4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 80132e0:	8a63      	ldrh	r3, [r4, #18]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	f43f af59 	beq.w	801319a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80132e8:	e7df      	b.n	80132aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80132ea:	2800      	cmp	r0, #0
 80132ec:	f47f af55 	bne.w	801319a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80132f0:	2e00      	cmp	r6, #0
 80132f2:	f43f af52 	beq.w	801319a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80132f6:	2301      	movs	r3, #1
 80132f8:	462a      	mov	r2, r5
 80132fa:	e7db      	b.n	80132b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

080132fc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80132fc:	b530      	push	{r4, r5, lr}
 80132fe:	4605      	mov	r5, r0
 8013300:	b08b      	sub	sp, #44	; 0x2c
 8013302:	b191      	cbz	r1, 801332a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 8013304:	2401      	movs	r4, #1
 8013306:	e9cd 3100 	strd	r3, r1, [sp]
 801330a:	4613      	mov	r3, r2
 801330c:	4601      	mov	r1, r0
 801330e:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8013312:	a802      	add	r0, sp, #8
 8013314:	f7ff fd0a 	bl	8012d2c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8013318:	2100      	movs	r1, #0
 801331a:	a802      	add	r0, sp, #8
 801331c:	f7ff ff1f 	bl	801315e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8013320:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8013324:	b163      	cbz	r3, 8013340 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8013326:	3401      	adds	r4, #1
 8013328:	e7f6      	b.n	8013318 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801332a:	2401      	movs	r4, #1
 801332c:	f002 fe1e 	bl	8015f6c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013330:	280a      	cmp	r0, #10
 8013332:	4628      	mov	r0, r5
 8013334:	bf08      	it	eq
 8013336:	3401      	addeq	r4, #1
 8013338:	f002 fe18 	bl	8015f6c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801333c:	2800      	cmp	r0, #0
 801333e:	d1f7      	bne.n	8013330 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8013340:	b2a0      	uxth	r0, r4
 8013342:	b00b      	add	sp, #44	; 0x2c
 8013344:	bd30      	pop	{r4, r5, pc}

08013346 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8013346:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801334a:	b0e5      	sub	sp, #404	; 0x194
 801334c:	4689      	mov	r9, r1
 801334e:	461c      	mov	r4, r3
 8013350:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 8013354:	900a      	str	r0, [sp, #40]	; 0x28
 8013356:	f1ba 0f00 	cmp.w	sl, #0
 801335a:	f000 80b4 	beq.w	80134c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	2b00      	cmp	r3, #0
 8013362:	f000 80b0 	beq.w	80134c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8013366:	7ba3      	ldrb	r3, [r4, #14]
 8013368:	2b00      	cmp	r3, #0
 801336a:	f000 80ac 	beq.w	80134c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801336e:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8013372:	6810      	ldr	r0, [r2, #0]
 8013374:	6851      	ldr	r1, [r2, #4]
 8013376:	2500      	movs	r5, #0
 8013378:	4643      	mov	r3, r8
 801337a:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801337e:	950f      	str	r5, [sp, #60]	; 0x3c
 8013380:	af19      	add	r7, sp, #100	; 0x64
 8013382:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8013386:	79a2      	ldrb	r2, [r4, #6]
 8013388:	c303      	stmia	r3!, {r0, r1}
 801338a:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801338e:	a90f      	add	r1, sp, #60	; 0x3c
 8013390:	4640      	mov	r0, r8
 8013392:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8013396:	f7ff fd41 	bl	8012e1c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801339a:	a90f      	add	r1, sp, #60	; 0x3c
 801339c:	79a2      	ldrb	r2, [r4, #6]
 801339e:	4608      	mov	r0, r1
 80133a0:	f7ff fd3c 	bl	8012e1c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80133a4:	4638      	mov	r0, r7
 80133a6:	f002 f96a 	bl	801567e <_ZN8touchgfx12TextProviderC1Ev>
 80133aa:	6820      	ldr	r0, [r4, #0]
 80133ac:	6803      	ldr	r3, [r0, #0]
 80133ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80133b0:	4798      	blx	r3
 80133b2:	4606      	mov	r6, r0
 80133b4:	6820      	ldr	r0, [r4, #0]
 80133b6:	6803      	ldr	r3, [r0, #0]
 80133b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80133ba:	4798      	blx	r3
 80133bc:	4633      	mov	r3, r6
 80133be:	9000      	str	r0, [sp, #0]
 80133c0:	4651      	mov	r1, sl
 80133c2:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 80133c4:	4638      	mov	r0, r7
 80133c6:	f002 f9c5 	bl	8015754 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80133ca:	7923      	ldrb	r3, [r4, #4]
 80133cc:	6820      	ldr	r0, [r4, #0]
 80133ce:	9308      	str	r3, [sp, #32]
 80133d0:	6803      	ldr	r3, [r0, #0]
 80133d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133d4:	4798      	blx	r3
 80133d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80133da:	181e      	adds	r6, r3, r0
 80133dc:	42ae      	cmp	r6, r5
 80133de:	dd06      	ble.n	80133ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 80133e0:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 80133e4:	4282      	cmp	r2, r0
 80133e6:	bfa4      	itt	ge
 80133e8:	189d      	addge	r5, r3, r2
 80133ea:	fb95 f5f6 	sdivge	r5, r5, r6
 80133ee:	a832      	add	r0, sp, #200	; 0xc8
 80133f0:	f002 f945 	bl	801567e <_ZN8touchgfx12TextProviderC1Ev>
 80133f4:	7c23      	ldrb	r3, [r4, #16]
 80133f6:	b17b      	cbz	r3, 8013418 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 80133f8:	6820      	ldr	r0, [r4, #0]
 80133fa:	6803      	ldr	r3, [r0, #0]
 80133fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80133fe:	4798      	blx	r3
 8013400:	4683      	mov	fp, r0
 8013402:	6820      	ldr	r0, [r4, #0]
 8013404:	6803      	ldr	r3, [r0, #0]
 8013406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013408:	4798      	blx	r3
 801340a:	465b      	mov	r3, fp
 801340c:	9000      	str	r0, [sp, #0]
 801340e:	4651      	mov	r1, sl
 8013410:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 8013412:	a832      	add	r0, sp, #200	; 0xc8
 8013414:	f002 f99e 	bl	8015754 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013418:	7be1      	ldrb	r1, [r4, #15]
 801341a:	a811      	add	r0, sp, #68	; 0x44
 801341c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8013420:	7963      	ldrb	r3, [r4, #5]
 8013422:	1a52      	subs	r2, r2, r1
 8013424:	7c21      	ldrb	r1, [r4, #16]
 8013426:	9101      	str	r1, [sp, #4]
 8013428:	b292      	uxth	r2, r2
 801342a:	6821      	ldr	r1, [r4, #0]
 801342c:	9100      	str	r1, [sp, #0]
 801342e:	a932      	add	r1, sp, #200	; 0xc8
 8013430:	f7ff fc7c 	bl	8012d2c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8013434:	7c23      	ldrb	r3, [r4, #16]
 8013436:	b9bb      	cbnz	r3, 8013468 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 8013438:	fa1f fa86 	uxth.w	sl, r6
 801343c:	2d00      	cmp	r5, #0
 801343e:	dd45      	ble.n	80134cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8013440:	4638      	mov	r0, r7
 8013442:	f002 fd93 	bl	8015f6c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013446:	2800      	cmp	r0, #0
 8013448:	d03d      	beq.n	80134c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801344a:	280a      	cmp	r0, #10
 801344c:	d1f6      	bne.n	801343c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801344e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8013452:	3d01      	subs	r5, #1
 8013454:	4453      	add	r3, sl
 8013456:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801345a:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801345e:	eba3 030a 	sub.w	r3, r3, sl
 8013462:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8013466:	e7e9      	b.n	801343c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8013468:	0073      	lsls	r3, r6, #1
 801346a:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801346e:	fa1f fa86 	uxth.w	sl, r6
 8013472:	9309      	str	r3, [sp, #36]	; 0x24
 8013474:	2d00      	cmp	r5, #0
 8013476:	dd29      	ble.n	80134cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8013478:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801347c:	a811      	add	r0, sp, #68	; 0x44
 801347e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013480:	428b      	cmp	r3, r1
 8013482:	bfd4      	ite	le
 8013484:	2100      	movle	r1, #0
 8013486:	2101      	movgt	r1, #1
 8013488:	f7ff fe69 	bl	801315e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801348c:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8013490:	3b01      	subs	r3, #1
 8013492:	b29b      	uxth	r3, r3
 8013494:	455b      	cmp	r3, fp
 8013496:	930b      	str	r3, [sp, #44]	; 0x2c
 8013498:	d005      	beq.n	80134a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 801349a:	7961      	ldrb	r1, [r4, #5]
 801349c:	4638      	mov	r0, r7
 801349e:	f7f1 fd2f 	bl	8004f00 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80134a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80134a4:	e7f4      	b.n	8013490 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 80134a6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80134aa:	3d01      	subs	r5, #1
 80134ac:	4453      	add	r3, sl
 80134ae:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80134b2:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 80134b6:	eba3 030a 	sub.w	r3, r3, sl
 80134ba:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80134be:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d1d6      	bne.n	8013474 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 80134c6:	b065      	add	sp, #404	; 0x194
 80134c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134cc:	0075      	lsls	r5, r6, #1
 80134ce:	f04f 0a00 	mov.w	sl, #0
 80134d2:	7c23      	ldrb	r3, [r4, #16]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d066      	beq.n	80135a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 80134d8:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80134dc:	a811      	add	r0, sp, #68	; 0x44
 80134de:	428d      	cmp	r5, r1
 80134e0:	bfd4      	ite	le
 80134e2:	2100      	movle	r1, #0
 80134e4:	2101      	movgt	r1, #1
 80134e6:	f7ff fe3a 	bl	801315e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80134ea:	9b08      	ldr	r3, [sp, #32]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d055      	beq.n	801359c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 80134f0:	f894 b010 	ldrb.w	fp, [r4, #16]
 80134f4:	2264      	movs	r2, #100	; 0x64
 80134f6:	4639      	mov	r1, r7
 80134f8:	a84b      	add	r0, sp, #300	; 0x12c
 80134fa:	f011 fbf9 	bl	8024cf0 <memcpy>
 80134fe:	f1bb 0f00 	cmp.w	fp, #0
 8013502:	d058      	beq.n	80135b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 8013504:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8013508:	7922      	ldrb	r2, [r4, #4]
 801350a:	2a01      	cmp	r2, #1
 801350c:	d13c      	bne.n	8013588 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801350e:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 8013512:	1ac0      	subs	r0, r0, r3
 8013514:	2302      	movs	r3, #2
 8013516:	fb90 f0f3 	sdiv	r0, r0, r3
 801351a:	b200      	sxth	r0, r0
 801351c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8013520:	4418      	add	r0, r3
 8013522:	7c23      	ldrb	r3, [r4, #16]
 8013524:	b200      	sxth	r0, r0
 8013526:	2b00      	cmp	r3, #0
 8013528:	d03a      	beq.n	80135a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 801352a:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801352e:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 8013532:	9000      	str	r0, [sp, #0]
 8013534:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8013538:	980a      	ldr	r0, [sp, #40]	; 0x28
 801353a:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801353e:	e9cd a703 	strd	sl, r7, [sp, #12]
 8013542:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8013546:	464a      	mov	r2, r9
 8013548:	2100      	movs	r1, #0
 801354a:	f7ff fc98 	bl	8012e7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801354e:	2800      	cmp	r0, #0
 8013550:	d1b9      	bne.n	80134c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8013552:	b2b2      	uxth	r2, r6
 8013554:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8013558:	4611      	mov	r1, r2
 801355a:	4413      	add	r3, r2
 801355c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8013560:	b21b      	sxth	r3, r3
 8013562:	1a52      	subs	r2, r2, r1
 8013564:	7c21      	ldrb	r1, [r4, #16]
 8013566:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801356a:	b212      	sxth	r2, r2
 801356c:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8013570:	b109      	cbz	r1, 8013576 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 8013572:	42b2      	cmp	r2, r6
 8013574:	dba7      	blt.n	80134c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8013576:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801357a:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801357e:	440a      	add	r2, r1
 8013580:	b212      	sxth	r2, r2
 8013582:	4293      	cmp	r3, r2
 8013584:	dda5      	ble.n	80134d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18c>
 8013586:	e79e      	b.n	80134c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8013588:	2a02      	cmp	r2, #2
 801358a:	d105      	bne.n	8013598 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801358c:	7be2      	ldrb	r2, [r4, #15]
 801358e:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8013592:	1a80      	subs	r0, r0, r2
 8013594:	1ac0      	subs	r0, r0, r3
 8013596:	e7c0      	b.n	801351a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 8013598:	2000      	movs	r0, #0
 801359a:	e7bf      	b.n	801351c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801359c:	7be0      	ldrb	r0, [r4, #15]
 801359e:	e7bd      	b.n	801351c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 80135a0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80135a4:	e7c3      	b.n	801352e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 80135a6:	9b08      	ldr	r3, [sp, #32]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d0f7      	beq.n	801359c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 80135ac:	2264      	movs	r2, #100	; 0x64
 80135ae:	4639      	mov	r1, r7
 80135b0:	a84b      	add	r0, sp, #300	; 0x12c
 80135b2:	f011 fb9d 	bl	8024cf0 <memcpy>
 80135b6:	2300      	movs	r3, #0
 80135b8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80135bc:	6821      	ldr	r1, [r4, #0]
 80135be:	a84b      	add	r0, sp, #300	; 0x12c
 80135c0:	f7ff fbf0 	bl	8012da4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80135c4:	b203      	sxth	r3, r0
 80135c6:	e79f      	b.n	8013508 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>

080135c8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80135c8:	2b02      	cmp	r3, #2
 80135ca:	b510      	push	{r4, lr}
 80135cc:	f9b0 4000 	ldrsh.w	r4, [r0]
 80135d0:	d00b      	beq.n	80135ea <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 80135d2:	2b03      	cmp	r3, #3
 80135d4:	d00e      	beq.n	80135f4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 80135d6:	2b01      	cmp	r3, #1
 80135d8:	d001      	beq.n	80135de <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 80135da:	1860      	adds	r0, r4, r1
 80135dc:	bd10      	pop	{r4, pc}
 80135de:	8880      	ldrh	r0, [r0, #4]
 80135e0:	4420      	add	r0, r4
 80135e2:	b200      	sxth	r0, r0
 80135e4:	1a80      	subs	r0, r0, r2
 80135e6:	3801      	subs	r0, #1
 80135e8:	e7f8      	b.n	80135dc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 80135ea:	8880      	ldrh	r0, [r0, #4]
 80135ec:	4420      	add	r0, r4
 80135ee:	b200      	sxth	r0, r0
 80135f0:	1a40      	subs	r0, r0, r1
 80135f2:	e7f8      	b.n	80135e6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80135f4:	18a0      	adds	r0, r4, r2
 80135f6:	e7f1      	b.n	80135dc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

080135f8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80135f8:	2b02      	cmp	r3, #2
 80135fa:	b510      	push	{r4, lr}
 80135fc:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8013600:	d006      	beq.n	8013610 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8013602:	2b03      	cmp	r3, #3
 8013604:	d00a      	beq.n	801361c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8013606:	2b01      	cmp	r3, #1
 8013608:	bf14      	ite	ne
 801360a:	18a0      	addne	r0, r4, r2
 801360c:	1860      	addeq	r0, r4, r1
 801360e:	bd10      	pop	{r4, pc}
 8013610:	88c0      	ldrh	r0, [r0, #6]
 8013612:	4420      	add	r0, r4
 8013614:	b200      	sxth	r0, r0
 8013616:	1a80      	subs	r0, r0, r2
 8013618:	3801      	subs	r0, #1
 801361a:	e7f8      	b.n	801360e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801361c:	88c0      	ldrh	r0, [r0, #6]
 801361e:	4420      	add	r0, r4
 8013620:	b200      	sxth	r0, r0
 8013622:	1a40      	subs	r0, r0, r1
 8013624:	e7f8      	b.n	8013618 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08013628 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8013628:	4b01      	ldr	r3, [pc, #4]	; (8013630 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801362a:	2200      	movs	r2, #0
 801362c:	601a      	str	r2, [r3, #0]
 801362e:	4770      	bx	lr
 8013630:	20021000 	.word	0x20021000

08013634 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8013634:	4603      	mov	r3, r0
 8013636:	b1c8      	cbz	r0, 801366c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8013638:	0c02      	lsrs	r2, r0, #16
 801363a:	0412      	lsls	r2, r2, #16
 801363c:	b9a2      	cbnz	r2, 8013668 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801363e:	0403      	lsls	r3, r0, #16
 8013640:	2010      	movs	r0, #16
 8013642:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013646:	bf04      	itt	eq
 8013648:	021b      	lsleq	r3, r3, #8
 801364a:	3008      	addeq	r0, #8
 801364c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013650:	bf04      	itt	eq
 8013652:	011b      	lsleq	r3, r3, #4
 8013654:	3004      	addeq	r0, #4
 8013656:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801365a:	bf04      	itt	eq
 801365c:	009b      	lsleq	r3, r3, #2
 801365e:	3002      	addeq	r0, #2
 8013660:	2b00      	cmp	r3, #0
 8013662:	db04      	blt.n	801366e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8013664:	3001      	adds	r0, #1
 8013666:	4770      	bx	lr
 8013668:	2000      	movs	r0, #0
 801366a:	e7ea      	b.n	8013642 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801366c:	2020      	movs	r0, #32
 801366e:	4770      	bx	lr

08013670 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8013670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013674:	b087      	sub	sp, #28
 8013676:	4681      	mov	r9, r0
 8013678:	4698      	mov	r8, r3
 801367a:	4610      	mov	r0, r2
 801367c:	460d      	mov	r5, r1
 801367e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8013682:	b981      	cbnz	r1, 80136a6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8013684:	b14b      	cbz	r3, 801369a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8013686:	460b      	mov	r3, r1
 8013688:	464a      	mov	r2, r9
 801368a:	4641      	mov	r1, r8
 801368c:	e9cd 4700 	strd	r4, r7, [sp]
 8013690:	f7ff ffee 	bl	8013670 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013694:	b007      	add	sp, #28
 8013696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801369a:	f04f 33ff 	mov.w	r3, #4294967295
 801369e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80136a2:	603b      	str	r3, [r7, #0]
 80136a4:	e7f6      	b.n	8013694 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80136a6:	fa32 fa01 	lsrs.w	sl, r2, r1
 80136aa:	d107      	bne.n	80136bc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 80136ac:	fb09 f602 	mul.w	r6, r9, r2
 80136b0:	fbb6 f0f4 	udiv	r0, r6, r4
 80136b4:	fb04 6610 	mls	r6, r4, r0, r6
 80136b8:	603e      	str	r6, [r7, #0]
 80136ba:	e7eb      	b.n	8013694 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80136bc:	2601      	movs	r6, #1
 80136be:	fa09 fb01 	lsl.w	fp, r9, r1
 80136c2:	408e      	lsls	r6, r1
 80136c4:	fbbb f3f4 	udiv	r3, fp, r4
 80136c8:	3e01      	subs	r6, #1
 80136ca:	9302      	str	r3, [sp, #8]
 80136cc:	fb0a f303 	mul.w	r3, sl, r3
 80136d0:	4016      	ands	r6, r2
 80136d2:	9303      	str	r3, [sp, #12]
 80136d4:	4630      	mov	r0, r6
 80136d6:	f7ff ffad 	bl	8013634 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80136da:	464a      	mov	r2, r9
 80136dc:	460b      	mov	r3, r1
 80136de:	4601      	mov	r1, r0
 80136e0:	4630      	mov	r0, r6
 80136e2:	e9cd 4700 	strd	r4, r7, [sp]
 80136e6:	f7ff ffc3 	bl	8013670 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80136ea:	9b02      	ldr	r3, [sp, #8]
 80136ec:	4606      	mov	r6, r0
 80136ee:	eb05 0108 	add.w	r1, r5, r8
 80136f2:	fb04 bb13 	mls	fp, r4, r3, fp
 80136f6:	4658      	mov	r0, fp
 80136f8:	f7ff ff9c 	bl	8013634 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80136fc:	ab05      	add	r3, sp, #20
 80136fe:	465a      	mov	r2, fp
 8013700:	e9cd 4300 	strd	r4, r3, [sp]
 8013704:	4603      	mov	r3, r0
 8013706:	4650      	mov	r0, sl
 8013708:	f7ff ffb2 	bl	8013670 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801370c:	6839      	ldr	r1, [r7, #0]
 801370e:	9a05      	ldr	r2, [sp, #20]
 8013710:	9b03      	ldr	r3, [sp, #12]
 8013712:	4411      	add	r1, r2
 8013714:	fbb1 f2f4 	udiv	r2, r1, r4
 8013718:	18d3      	adds	r3, r2, r3
 801371a:	fb04 1412 	mls	r4, r4, r2, r1
 801371e:	441e      	add	r6, r3
 8013720:	603c      	str	r4, [r7, #0]
 8013722:	4430      	add	r0, r6
 8013724:	e7b6      	b.n	8013694 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08013726 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8013726:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801372a:	b085      	sub	sp, #20
 801372c:	f1b0 0900 	subs.w	r9, r0, #0
 8013730:	461d      	mov	r5, r3
 8013732:	4617      	mov	r7, r2
 8013734:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8013736:	bfbb      	ittet	lt
 8013738:	f1c9 0900 	rsblt	r9, r9, #0
 801373c:	f04f 36ff 	movlt.w	r6, #4294967295
 8013740:	2601      	movge	r6, #1
 8013742:	6823      	ldrlt	r3, [r4, #0]
 8013744:	bfbc      	itt	lt
 8013746:	425b      	neglt	r3, r3
 8013748:	6023      	strlt	r3, [r4, #0]
 801374a:	2a00      	cmp	r2, #0
 801374c:	da04      	bge.n	8013758 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801374e:	6823      	ldr	r3, [r4, #0]
 8013750:	4257      	negs	r7, r2
 8013752:	4276      	negs	r6, r6
 8013754:	425b      	negs	r3, r3
 8013756:	6023      	str	r3, [r4, #0]
 8013758:	2d00      	cmp	r5, #0
 801375a:	4638      	mov	r0, r7
 801375c:	bfba      	itte	lt
 801375e:	426d      	neglt	r5, r5
 8013760:	f04f 38ff 	movlt.w	r8, #4294967295
 8013764:	f04f 0801 	movge.w	r8, #1
 8013768:	f7ff ff64 	bl	8013634 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801376c:	ab03      	add	r3, sp, #12
 801376e:	463a      	mov	r2, r7
 8013770:	e9cd 5300 	strd	r5, r3, [sp]
 8013774:	4603      	mov	r3, r0
 8013776:	4648      	mov	r0, r9
 8013778:	f7ff ff7a 	bl	8013670 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801377c:	6823      	ldr	r3, [r4, #0]
 801377e:	9a03      	ldr	r2, [sp, #12]
 8013780:	4546      	cmp	r6, r8
 8013782:	441a      	add	r2, r3
 8013784:	fb92 f3f5 	sdiv	r3, r2, r5
 8013788:	4418      	add	r0, r3
 801378a:	fb05 2313 	mls	r3, r5, r3, r2
 801378e:	bf18      	it	ne
 8013790:	4240      	negne	r0, r0
 8013792:	1c72      	adds	r2, r6, #1
 8013794:	6023      	str	r3, [r4, #0]
 8013796:	d105      	bne.n	80137a4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8013798:	2b00      	cmp	r3, #0
 801379a:	f1c3 0200 	rsb	r2, r3, #0
 801379e:	db0b      	blt.n	80137b8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80137a0:	6022      	str	r2, [r4, #0]
 80137a2:	e006      	b.n	80137b2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80137a4:	2e01      	cmp	r6, #1
 80137a6:	d104      	bne.n	80137b2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	da02      	bge.n	80137b2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80137ac:	442b      	add	r3, r5
 80137ae:	3801      	subs	r0, #1
 80137b0:	6023      	str	r3, [r4, #0]
 80137b2:	b005      	add	sp, #20
 80137b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137b8:	3801      	subs	r0, #1
 80137ba:	1b52      	subs	r2, r2, r5
 80137bc:	e7f0      	b.n	80137a0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

080137c0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80137c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80137c4:	4c1c      	ldr	r4, [pc, #112]	; (8013838 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80137c6:	4605      	mov	r5, r0
 80137c8:	6807      	ldr	r7, [r0, #0]
 80137ca:	69a3      	ldr	r3, [r4, #24]
 80137cc:	b92b      	cbnz	r3, 80137da <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80137ce:	6840      	ldr	r0, [r0, #4]
 80137d0:	e9c5 7000 	strd	r7, r0, [r5]
 80137d4:	b004      	add	sp, #16
 80137d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137da:	f04f 0802 	mov.w	r8, #2
 80137de:	68a2      	ldr	r2, [r4, #8]
 80137e0:	ae04      	add	r6, sp, #16
 80137e2:	6820      	ldr	r0, [r4, #0]
 80137e4:	fb93 f1f8 	sdiv	r1, r3, r8
 80137e8:	440a      	add	r2, r1
 80137ea:	69e1      	ldr	r1, [r4, #28]
 80137ec:	f846 2d04 	str.w	r2, [r6, #-4]!
 80137f0:	463a      	mov	r2, r7
 80137f2:	9600      	str	r6, [sp, #0]
 80137f4:	f7ff ff97 	bl	8013726 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80137f8:	69a3      	ldr	r3, [r4, #24]
 80137fa:	4607      	mov	r7, r0
 80137fc:	686a      	ldr	r2, [r5, #4]
 80137fe:	6a21      	ldr	r1, [r4, #32]
 8013800:	9600      	str	r6, [sp, #0]
 8013802:	6860      	ldr	r0, [r4, #4]
 8013804:	f7ff ff8f 	bl	8013726 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013808:	69a3      	ldr	r3, [r4, #24]
 801380a:	6962      	ldr	r2, [r4, #20]
 801380c:	4407      	add	r7, r0
 801380e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013810:	9600      	str	r6, [sp, #0]
 8013812:	68e0      	ldr	r0, [r4, #12]
 8013814:	fb93 f8f8 	sdiv	r8, r3, r8
 8013818:	4442      	add	r2, r8
 801381a:	9203      	str	r2, [sp, #12]
 801381c:	682a      	ldr	r2, [r5, #0]
 801381e:	f7ff ff82 	bl	8013726 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013822:	4680      	mov	r8, r0
 8013824:	9600      	str	r6, [sp, #0]
 8013826:	69a3      	ldr	r3, [r4, #24]
 8013828:	686a      	ldr	r2, [r5, #4]
 801382a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801382c:	6920      	ldr	r0, [r4, #16]
 801382e:	f7ff ff7a 	bl	8013726 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013832:	4440      	add	r0, r8
 8013834:	e7cc      	b.n	80137d0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8013836:	bf00      	nop
 8013838:	20021004 	.word	0x20021004

0801383c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801383c:	4b07      	ldr	r3, [pc, #28]	; (801385c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801383e:	781b      	ldrb	r3, [r3, #0]
 8013840:	2b01      	cmp	r3, #1
 8013842:	d109      	bne.n	8013858 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8013844:	f9b1 3000 	ldrsh.w	r3, [r1]
 8013848:	f9b0 2000 	ldrsh.w	r2, [r0]
 801384c:	8003      	strh	r3, [r0, #0]
 801384e:	4b04      	ldr	r3, [pc, #16]	; (8013860 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8013850:	881b      	ldrh	r3, [r3, #0]
 8013852:	3b01      	subs	r3, #1
 8013854:	1a9b      	subs	r3, r3, r2
 8013856:	800b      	strh	r3, [r1, #0]
 8013858:	4770      	bx	lr
 801385a:	bf00      	nop
 801385c:	20020fd0 	.word	0x20020fd0
 8013860:	20020fcc 	.word	0x20020fcc

08013864 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8013864:	4b07      	ldr	r3, [pc, #28]	; (8013884 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8013866:	b510      	push	{r4, lr}
 8013868:	781b      	ldrb	r3, [r3, #0]
 801386a:	2b01      	cmp	r3, #1
 801386c:	d108      	bne.n	8013880 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801386e:	4b06      	ldr	r3, [pc, #24]	; (8013888 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8013870:	880c      	ldrh	r4, [r1, #0]
 8013872:	881b      	ldrh	r3, [r3, #0]
 8013874:	f9b0 2000 	ldrsh.w	r2, [r0]
 8013878:	3b01      	subs	r3, #1
 801387a:	1b1b      	subs	r3, r3, r4
 801387c:	8003      	strh	r3, [r0, #0]
 801387e:	800a      	strh	r2, [r1, #0]
 8013880:	bd10      	pop	{r4, pc}
 8013882:	bf00      	nop
 8013884:	20020fd0 	.word	0x20020fd0
 8013888:	20020fcc 	.word	0x20020fcc

0801388c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801388c:	4b0a      	ldr	r3, [pc, #40]	; (80138b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801388e:	b510      	push	{r4, lr}
 8013890:	781b      	ldrb	r3, [r3, #0]
 8013892:	2b01      	cmp	r3, #1
 8013894:	d10e      	bne.n	80138b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8013896:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801389a:	8843      	ldrh	r3, [r0, #2]
 801389c:	f9b0 4000 	ldrsh.w	r4, [r0]
 80138a0:	18ca      	adds	r2, r1, r3
 80138a2:	4b06      	ldr	r3, [pc, #24]	; (80138bc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80138a4:	8044      	strh	r4, [r0, #2]
 80138a6:	881b      	ldrh	r3, [r3, #0]
 80138a8:	1a9b      	subs	r3, r3, r2
 80138aa:	8003      	strh	r3, [r0, #0]
 80138ac:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80138b0:	8081      	strh	r1, [r0, #4]
 80138b2:	80c3      	strh	r3, [r0, #6]
 80138b4:	bd10      	pop	{r4, pc}
 80138b6:	bf00      	nop
 80138b8:	20020fd0 	.word	0x20020fd0
 80138bc:	20020fcc 	.word	0x20020fcc

080138c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80138c0:	4b08      	ldr	r3, [pc, #32]	; (80138e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80138c2:	781b      	ldrb	r3, [r3, #0]
 80138c4:	2b01      	cmp	r3, #1
 80138c6:	d10c      	bne.n	80138e2 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80138c8:	8803      	ldrh	r3, [r0, #0]
 80138ca:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80138ce:	8842      	ldrh	r2, [r0, #2]
 80138d0:	8002      	strh	r2, [r0, #0]
 80138d2:	185a      	adds	r2, r3, r1
 80138d4:	4b04      	ldr	r3, [pc, #16]	; (80138e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80138d6:	881b      	ldrh	r3, [r3, #0]
 80138d8:	1a9b      	subs	r3, r3, r2
 80138da:	8043      	strh	r3, [r0, #2]
 80138dc:	88c3      	ldrh	r3, [r0, #6]
 80138de:	80c1      	strh	r1, [r0, #6]
 80138e0:	8083      	strh	r3, [r0, #4]
 80138e2:	4770      	bx	lr
 80138e4:	20020fd0 	.word	0x20020fd0
 80138e8:	20020fcc 	.word	0x20020fcc

080138ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80138ec:	4b07      	ldr	r3, [pc, #28]	; (801390c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80138ee:	b510      	push	{r4, lr}
 80138f0:	781b      	ldrb	r3, [r3, #0]
 80138f2:	2b01      	cmp	r3, #1
 80138f4:	d108      	bne.n	8013908 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80138f6:	f9b1 3000 	ldrsh.w	r3, [r1]
 80138fa:	f9b0 4000 	ldrsh.w	r4, [r0]
 80138fe:	8003      	strh	r3, [r0, #0]
 8013900:	8893      	ldrh	r3, [r2, #4]
 8013902:	3b01      	subs	r3, #1
 8013904:	1b1b      	subs	r3, r3, r4
 8013906:	800b      	strh	r3, [r1, #0]
 8013908:	bd10      	pop	{r4, pc}
 801390a:	bf00      	nop
 801390c:	20020fd0 	.word	0x20020fd0

08013910 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 8013910:	4b0b      	ldr	r3, [pc, #44]	; (8013940 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 8013912:	781b      	ldrb	r3, [r3, #0]
 8013914:	2b01      	cmp	r3, #1
 8013916:	d111      	bne.n	801393c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 8013918:	680b      	ldr	r3, [r1, #0]
 801391a:	ed90 7a00 	vldr	s14, [r0]
 801391e:	6003      	str	r3, [r0, #0]
 8013920:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8013924:	eddf 6a07 	vldr	s13, [pc, #28]	; 8013944 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 8013928:	ee07 3a90 	vmov	s15, r3
 801392c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013930:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013934:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013938:	edc1 7a00 	vstr	s15, [r1]
 801393c:	4770      	bx	lr
 801393e:	bf00      	nop
 8013940:	20020fd0 	.word	0x20020fd0
 8013944:	38d1b717 	.word	0x38d1b717

08013948 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8013948:	4b0a      	ldr	r3, [pc, #40]	; (8013974 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801394a:	460a      	mov	r2, r1
 801394c:	b510      	push	{r4, lr}
 801394e:	781b      	ldrb	r3, [r3, #0]
 8013950:	2b01      	cmp	r3, #1
 8013952:	d10d      	bne.n	8013970 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8013954:	8881      	ldrh	r1, [r0, #4]
 8013956:	8803      	ldrh	r3, [r0, #0]
 8013958:	440b      	add	r3, r1
 801395a:	4601      	mov	r1, r0
 801395c:	3b01      	subs	r3, #1
 801395e:	f821 3b02 	strh.w	r3, [r1], #2
 8013962:	f7ff ffc3 	bl	80138ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8013966:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801396a:	88c2      	ldrh	r2, [r0, #6]
 801396c:	80c3      	strh	r3, [r0, #6]
 801396e:	8082      	strh	r2, [r0, #4]
 8013970:	bd10      	pop	{r4, pc}
 8013972:	bf00      	nop
 8013974:	20020fd0 	.word	0x20020fd0

08013978 <_ZN8touchgfx11Application13requestRedrawEv>:
 8013978:	4b06      	ldr	r3, [pc, #24]	; (8013994 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801397a:	2100      	movs	r1, #0
 801397c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013980:	4b05      	ldr	r3, [pc, #20]	; (8013998 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8013982:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8013986:	f9b3 3000 	ldrsh.w	r3, [r3]
 801398a:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801398e:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8013992:	4770      	bx	lr
 8013994:	20020fcc 	.word	0x20020fcc
 8013998:	20020fce 	.word	0x20020fce

0801399c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801399c:	4b03      	ldr	r3, [pc, #12]	; (80139ac <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801399e:	6818      	ldr	r0, [r3, #0]
 80139a0:	b110      	cbz	r0, 80139a8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80139a2:	6803      	ldr	r3, [r0, #0]
 80139a4:	699b      	ldr	r3, [r3, #24]
 80139a6:	4718      	bx	r3
 80139a8:	4770      	bx	lr
 80139aa:	bf00      	nop
 80139ac:	20021034 	.word	0x20021034

080139b0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80139b0:	4770      	bx	lr
	...

080139b4 <_ZN8touchgfx11Application4drawEv>:
 80139b4:	4b09      	ldr	r3, [pc, #36]	; (80139dc <_ZN8touchgfx11Application4drawEv+0x28>)
 80139b6:	b507      	push	{r0, r1, r2, lr}
 80139b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80139bc:	2100      	movs	r1, #0
 80139be:	4b08      	ldr	r3, [pc, #32]	; (80139e0 <_ZN8touchgfx11Application4drawEv+0x2c>)
 80139c0:	9100      	str	r1, [sp, #0]
 80139c2:	4669      	mov	r1, sp
 80139c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80139c8:	f8ad 2004 	strh.w	r2, [sp, #4]
 80139cc:	f8ad 3006 	strh.w	r3, [sp, #6]
 80139d0:	6803      	ldr	r3, [r0, #0]
 80139d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139d4:	4798      	blx	r3
 80139d6:	b003      	add	sp, #12
 80139d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80139dc:	20020fcc 	.word	0x20020fcc
 80139e0:	20020fce 	.word	0x20020fce

080139e4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80139e4:	4b03      	ldr	r3, [pc, #12]	; (80139f4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80139e6:	6818      	ldr	r0, [r3, #0]
 80139e8:	b110      	cbz	r0, 80139f0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80139ea:	6803      	ldr	r3, [r0, #0]
 80139ec:	69db      	ldr	r3, [r3, #28]
 80139ee:	4718      	bx	r3
 80139f0:	4770      	bx	lr
 80139f2:	bf00      	nop
 80139f4:	20021034 	.word	0x20021034

080139f8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80139f8:	4b03      	ldr	r3, [pc, #12]	; (8013a08 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80139fa:	6818      	ldr	r0, [r3, #0]
 80139fc:	b110      	cbz	r0, 8013a04 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80139fe:	6803      	ldr	r3, [r0, #0]
 8013a00:	6a1b      	ldr	r3, [r3, #32]
 8013a02:	4718      	bx	r3
 8013a04:	4770      	bx	lr
 8013a06:	bf00      	nop
 8013a08:	20021034 	.word	0x20021034

08013a0c <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8013a12:	4770      	bx	lr

08013a14 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8013a14:	4b03      	ldr	r3, [pc, #12]	; (8013a24 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8013a16:	6818      	ldr	r0, [r3, #0]
 8013a18:	b110      	cbz	r0, 8013a20 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8013a1a:	6803      	ldr	r3, [r0, #0]
 8013a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a1e:	4718      	bx	r3
 8013a20:	4770      	bx	lr
 8013a22:	bf00      	nop
 8013a24:	20021034 	.word	0x20021034

08013a28 <_ZN8touchgfx11ApplicationD1Ev>:
 8013a28:	4770      	bx	lr

08013a2a <_ZN8touchgfx11ApplicationD0Ev>:
 8013a2a:	b510      	push	{r4, lr}
 8013a2c:	4604      	mov	r4, r0
 8013a2e:	f44f 719c 	mov.w	r1, #312	; 0x138
 8013a32:	f010 ffb2 	bl	802499a <_ZdlPvj>
 8013a36:	4620      	mov	r0, r4
 8013a38:	bd10      	pop	{r4, pc}
	...

08013a3c <_ZN8touchgfx11Application15handleTickEventEv>:
 8013a3c:	b570      	push	{r4, r5, r6, lr}
 8013a3e:	4d38      	ldr	r5, [pc, #224]	; (8013b20 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 8013a40:	4604      	mov	r4, r0
 8013a42:	6828      	ldr	r0, [r5, #0]
 8013a44:	b140      	cbz	r0, 8013a58 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8013a46:	7a03      	ldrb	r3, [r0, #8]
 8013a48:	b933      	cbnz	r3, 8013a58 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8013a4a:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8013a4e:	6803      	ldr	r3, [r0, #0]
 8013a50:	689b      	ldr	r3, [r3, #8]
 8013a52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a56:	4718      	bx	r3
 8013a58:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 8013a5c:	b97b      	cbnz	r3, 8013a7e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8013a5e:	b170      	cbz	r0, 8013a7e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8013a60:	7a03      	ldrb	r3, [r0, #8]
 8013a62:	b163      	cbz	r3, 8013a7e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8013a64:	4b2f      	ldr	r3, [pc, #188]	; (8013b24 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 8013a66:	6818      	ldr	r0, [r3, #0]
 8013a68:	b110      	cbz	r0, 8013a70 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8013a6a:	6803      	ldr	r3, [r0, #0]
 8013a6c:	691b      	ldr	r3, [r3, #16]
 8013a6e:	4798      	blx	r3
 8013a70:	6828      	ldr	r0, [r5, #0]
 8013a72:	6803      	ldr	r3, [r0, #0]
 8013a74:	68db      	ldr	r3, [r3, #12]
 8013a76:	4798      	blx	r3
 8013a78:	2301      	movs	r3, #1
 8013a7a:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8013a7e:	2500      	movs	r5, #0
 8013a80:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8013a84:	42a8      	cmp	r0, r5
 8013a86:	dd0c      	ble.n	8013aa2 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8013a88:	1963      	adds	r3, r4, r5
 8013a8a:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8013a8e:	b132      	cbz	r2, 8013a9e <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8013a90:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8013a94:	4413      	add	r3, r2
 8013a96:	6858      	ldr	r0, [r3, #4]
 8013a98:	6803      	ldr	r3, [r0, #0]
 8013a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013a9c:	4798      	blx	r3
 8013a9e:	3501      	adds	r5, #1
 8013aa0:	e7ee      	b.n	8013a80 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	461a      	mov	r2, r3
 8013aa6:	4298      	cmp	r0, r3
 8013aa8:	d10f      	bne.n	8013aca <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 8013aaa:	1d25      	adds	r5, r4, #4
 8013aac:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 8013ab0:	4291      	cmp	r1, r2
 8013ab2:	dd2d      	ble.n	8013b10 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 8013ab4:	1e48      	subs	r0, r1, #1
 8013ab6:	b280      	uxth	r0, r0
 8013ab8:	4288      	cmp	r0, r1
 8013aba:	d31a      	bcc.n	8013af2 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 8013abc:	4b1a      	ldr	r3, [pc, #104]	; (8013b28 <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 8013abe:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8013ac2:	4a1a      	ldr	r2, [pc, #104]	; (8013b2c <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 8013ac4:	481a      	ldr	r0, [pc, #104]	; (8013b30 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8013ac6:	f010 ff97 	bl	80249f8 <__assert_func>
 8013aca:	18e1      	adds	r1, r4, r3
 8013acc:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8013ad0:	b16d      	cbz	r5, 8013aee <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 8013ad2:	429a      	cmp	r2, r3
 8013ad4:	d00a      	beq.n	8013aec <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 8013ad6:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8013ada:	4431      	add	r1, r6
 8013adc:	684e      	ldr	r6, [r1, #4]
 8013ade:	b291      	uxth	r1, r2
 8013ae0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8013ae4:	604e      	str	r6, [r1, #4]
 8013ae6:	18a1      	adds	r1, r4, r2
 8013ae8:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8013aec:	3201      	adds	r2, #1
 8013aee:	3301      	adds	r3, #1
 8013af0:	e7d9      	b.n	8013aa6 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8013af2:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8013af6:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8013afa:	3304      	adds	r3, #4
 8013afc:	428b      	cmp	r3, r1
 8013afe:	d004      	beq.n	8013b0a <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 8013b00:	f853 6f04 	ldr.w	r6, [r3, #4]!
 8013b04:	f843 6c04 	str.w	r6, [r3, #-4]
 8013b08:	e7f8      	b.n	8013afc <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 8013b0a:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8013b0e:	e7cd      	b.n	8013aac <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 8013b10:	4b04      	ldr	r3, [pc, #16]	; (8013b24 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 8013b12:	6818      	ldr	r0, [r3, #0]
 8013b14:	b110      	cbz	r0, 8013b1c <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 8013b16:	6803      	ldr	r3, [r0, #0]
 8013b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b1a:	e79a      	b.n	8013a52 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8013b1c:	bd70      	pop	{r4, r5, r6, pc}
 8013b1e:	bf00      	nop
 8013b20:	20021038 	.word	0x20021038
 8013b24:	20021034 	.word	0x20021034
 8013b28:	080291ed 	.word	0x080291ed
 8013b2c:	080293e0 	.word	0x080293e0
 8013b30:	080291fb 	.word	0x080291fb

08013b34 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8013b34:	b570      	push	{r4, r5, r6, lr}
 8013b36:	4606      	mov	r6, r0
 8013b38:	460c      	mov	r4, r1
 8013b3a:	b929      	cbnz	r1, 8013b48 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8013b3c:	4b0c      	ldr	r3, [pc, #48]	; (8013b70 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8013b3e:	215e      	movs	r1, #94	; 0x5e
 8013b40:	4a0c      	ldr	r2, [pc, #48]	; (8013b74 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8013b42:	480d      	ldr	r0, [pc, #52]	; (8013b78 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8013b44:	f010 ff58 	bl	80249f8 <__assert_func>
 8013b48:	2300      	movs	r3, #0
 8013b4a:	4d0c      	ldr	r5, [pc, #48]	; (8013b7c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8013b4c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8013b50:	6828      	ldr	r0, [r5, #0]
 8013b52:	b110      	cbz	r0, 8013b5a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8013b54:	6803      	ldr	r3, [r0, #0]
 8013b56:	695b      	ldr	r3, [r3, #20]
 8013b58:	4798      	blx	r3
 8013b5a:	602c      	str	r4, [r5, #0]
 8013b5c:	4620      	mov	r0, r4
 8013b5e:	6823      	ldr	r3, [r4, #0]
 8013b60:	68db      	ldr	r3, [r3, #12]
 8013b62:	4798      	blx	r3
 8013b64:	6833      	ldr	r3, [r6, #0]
 8013b66:	4630      	mov	r0, r6
 8013b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013b6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b6e:	4718      	bx	r3
 8013b70:	080291b9 	.word	0x080291b9
 8013b74:	080292a0 	.word	0x080292a0
 8013b78:	080291c3 	.word	0x080291c3
 8013b7c:	20021034 	.word	0x20021034

08013b80 <_ZN8touchgfx4Rect10restrictToEss>:
 8013b80:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	b510      	push	{r4, lr}
 8013b88:	da04      	bge.n	8013b94 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8013b8a:	8884      	ldrh	r4, [r0, #4]
 8013b8c:	4423      	add	r3, r4
 8013b8e:	8083      	strh	r3, [r0, #4]
 8013b90:	2300      	movs	r3, #0
 8013b92:	8003      	strh	r3, [r0, #0]
 8013b94:	f9b0 4000 	ldrsh.w	r4, [r0]
 8013b98:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013b9c:	1b09      	subs	r1, r1, r4
 8013b9e:	428b      	cmp	r3, r1
 8013ba0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8013ba4:	bfc8      	it	gt
 8013ba6:	8081      	strhgt	r1, [r0, #4]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	da04      	bge.n	8013bb6 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8013bac:	88c1      	ldrh	r1, [r0, #6]
 8013bae:	440b      	add	r3, r1
 8013bb0:	80c3      	strh	r3, [r0, #6]
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	8043      	strh	r3, [r0, #2]
 8013bb6:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8013bba:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8013bbe:	1a52      	subs	r2, r2, r1
 8013bc0:	4293      	cmp	r3, r2
 8013bc2:	bfc8      	it	gt
 8013bc4:	80c2      	strhgt	r2, [r0, #6]
 8013bc6:	bd10      	pop	{r4, pc}

08013bc8 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8013bc8:	4b10      	ldr	r3, [pc, #64]	; (8013c0c <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8013bca:	b510      	push	{r4, lr}
 8013bcc:	460c      	mov	r4, r1
 8013bce:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013bd2:	4b0f      	ldr	r3, [pc, #60]	; (8013c10 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8013bd4:	4620      	mov	r0, r4
 8013bd6:	f9b3 1000 	ldrsh.w	r1, [r3]
 8013bda:	f7ff ffd1 	bl	8013b80 <_ZN8touchgfx4Rect10restrictToEss>
 8013bde:	4b0d      	ldr	r3, [pc, #52]	; (8013c14 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8013be0:	6818      	ldr	r0, [r3, #0]
 8013be2:	b190      	cbz	r0, 8013c0a <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8013be4:	6803      	ldr	r3, [r0, #0]
 8013be6:	4621      	mov	r1, r4
 8013be8:	689b      	ldr	r3, [r3, #8]
 8013bea:	4798      	blx	r3
 8013bec:	4b0a      	ldr	r3, [pc, #40]	; (8013c18 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8013bee:	6818      	ldr	r0, [r3, #0]
 8013bf0:	b118      	cbz	r0, 8013bfa <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8013bf2:	6803      	ldr	r3, [r0, #0]
 8013bf4:	4621      	mov	r1, r4
 8013bf6:	689b      	ldr	r3, [r3, #8]
 8013bf8:	4798      	blx	r3
 8013bfa:	4b08      	ldr	r3, [pc, #32]	; (8013c1c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8013bfc:	4621      	mov	r1, r4
 8013bfe:	6818      	ldr	r0, [r3, #0]
 8013c00:	6803      	ldr	r3, [r0, #0]
 8013c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c06:	69db      	ldr	r3, [r3, #28]
 8013c08:	4718      	bx	r3
 8013c0a:	bd10      	pop	{r4, pc}
 8013c0c:	20020fce 	.word	0x20020fce
 8013c10:	20020fcc 	.word	0x20020fcc
 8013c14:	20021034 	.word	0x20021034
 8013c18:	20021030 	.word	0x20021030
 8013c1c:	20020fd8 	.word	0x20020fd8

08013c20 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8013c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c22:	4606      	mov	r6, r0
 8013c24:	4608      	mov	r0, r1
 8013c26:	460f      	mov	r7, r1
 8013c28:	f7f9 feb7 	bl	800d99a <_ZNK8touchgfx4Rect7isEmptyEv>
 8013c2c:	b9e8      	cbnz	r0, 8013c6a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8013c2e:	f9b7 5000 	ldrsh.w	r5, [r7]
 8013c32:	f9b6 4000 	ldrsh.w	r4, [r6]
 8013c36:	42a5      	cmp	r5, r4
 8013c38:	db17      	blt.n	8013c6a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8013c3a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8013c3e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8013c42:	429a      	cmp	r2, r3
 8013c44:	db11      	blt.n	8013c6a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8013c46:	88b9      	ldrh	r1, [r7, #4]
 8013c48:	440d      	add	r5, r1
 8013c4a:	88b1      	ldrh	r1, [r6, #4]
 8013c4c:	440c      	add	r4, r1
 8013c4e:	b22d      	sxth	r5, r5
 8013c50:	b224      	sxth	r4, r4
 8013c52:	42a5      	cmp	r5, r4
 8013c54:	dc09      	bgt.n	8013c6a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8013c56:	88f8      	ldrh	r0, [r7, #6]
 8013c58:	4410      	add	r0, r2
 8013c5a:	88f2      	ldrh	r2, [r6, #6]
 8013c5c:	4413      	add	r3, r2
 8013c5e:	b200      	sxth	r0, r0
 8013c60:	b21b      	sxth	r3, r3
 8013c62:	4298      	cmp	r0, r3
 8013c64:	bfcc      	ite	gt
 8013c66:	2000      	movgt	r0, #0
 8013c68:	2001      	movle	r0, #1
 8013c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013c6c <_ZN8touchgfx11Application11getInstanceEv>:
 8013c6c:	4b01      	ldr	r3, [pc, #4]	; (8013c74 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8013c6e:	6818      	ldr	r0, [r3, #0]
 8013c70:	4770      	bx	lr
 8013c72:	bf00      	nop
 8013c74:	20021044 	.word	0x20021044

08013c78 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8013c78:	2300      	movs	r3, #0
 8013c7a:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8013c7e:	30a8      	adds	r0, #168	; 0xa8
 8013c80:	f820 3c24 	strh.w	r3, [r0, #-36]
 8013c84:	f802 3b01 	strb.w	r3, [r2], #1
 8013c88:	4282      	cmp	r2, r0
 8013c8a:	d1fb      	bne.n	8013c84 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8013c8c:	4770      	bx	lr

08013c8e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8013c8e:	4603      	mov	r3, r0
 8013c90:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8013c94:	2200      	movs	r2, #0
 8013c96:	801a      	strh	r2, [r3, #0]
 8013c98:	3308      	adds	r3, #8
 8013c9a:	f823 2c06 	strh.w	r2, [r3, #-6]
 8013c9e:	f823 2c04 	strh.w	r2, [r3, #-4]
 8013ca2:	f823 2c02 	strh.w	r2, [r3, #-2]
 8013ca6:	428b      	cmp	r3, r1
 8013ca8:	d1f5      	bne.n	8013c96 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8013caa:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8013cae:	4770      	bx	lr

08013cb0 <_ZN8touchgfx11ApplicationC1Ev>:
 8013cb0:	b570      	push	{r4, r5, r6, lr}
 8013cb2:	4b19      	ldr	r3, [pc, #100]	; (8013d18 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8013cb4:	2500      	movs	r5, #0
 8013cb6:	4604      	mov	r4, r0
 8013cb8:	30a8      	adds	r0, #168	; 0xa8
 8013cba:	f840 3ca8 	str.w	r3, [r0, #-168]
 8013cbe:	f820 5c24 	strh.w	r5, [r0, #-36]
 8013cc2:	f7ff ffe4 	bl	8013c8e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8013cc6:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8013cca:	f7ff ffe0 	bl	8013c8e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8013cce:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8013cd2:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8013cd6:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8013cda:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8013cde:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8013ce2:	490e      	ldr	r1, [pc, #56]	; (8013d1c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8013ce4:	480e      	ldr	r0, [pc, #56]	; (8013d20 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8013ce6:	f00f f917 	bl	8022f18 <CRC_Lock>
 8013cea:	4e0e      	ldr	r6, [pc, #56]	; (8013d24 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8013cec:	4b0e      	ldr	r3, [pc, #56]	; (8013d28 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8013cee:	b158      	cbz	r0, 8013d08 <_ZN8touchgfx11ApplicationC1Ev+0x58>
 8013cf0:	801d      	strh	r5, [r3, #0]
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	4a0d      	ldr	r2, [pc, #52]	; (8013d2c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8013cf6:	4620      	mov	r0, r4
 8013cf8:	6013      	str	r3, [r2, #0]
 8013cfa:	4a0d      	ldr	r2, [pc, #52]	; (8013d30 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8013cfc:	6033      	str	r3, [r6, #0]
 8013cfe:	6013      	str	r3, [r2, #0]
 8013d00:	f7ff ffba 	bl	8013c78 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8013d04:	4620      	mov	r0, r4
 8013d06:	bd70      	pop	{r4, r5, r6, pc}
 8013d08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013d0c:	2002      	movs	r0, #2
 8013d0e:	801a      	strh	r2, [r3, #0]
 8013d10:	6030      	str	r0, [r6, #0]
 8013d12:	f001 fb07 	bl	8015324 <_ZN8touchgfx6Screen4drawEv>
 8013d16:	e7ec      	b.n	8013cf2 <_ZN8touchgfx11ApplicationC1Ev+0x42>
 8013d18:	0802925c 	.word	0x0802925c
 8013d1c:	b5e8b5cd 	.word	0xb5e8b5cd
 8013d20:	f407a5c2 	.word	0xf407a5c2
 8013d24:	20021034 	.word	0x20021034
 8013d28:	20000058 	.word	0x20000058
 8013d2c:	20021044 	.word	0x20021044
 8013d30:	20021038 	.word	0x20021038

08013d34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8013d34:	b510      	push	{r4, lr}
 8013d36:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8013d3a:	428b      	cmp	r3, r1
 8013d3c:	d806      	bhi.n	8013d4c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 8013d3e:	4b0b      	ldr	r3, [pc, #44]	; (8013d6c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 8013d40:	f240 11dd 	movw	r1, #477	; 0x1dd
 8013d44:	4a0a      	ldr	r2, [pc, #40]	; (8013d70 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 8013d46:	480b      	ldr	r0, [pc, #44]	; (8013d74 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 8013d48:	f010 fe56 	bl	80249f8 <__assert_func>
 8013d4c:	3b01      	subs	r3, #1
 8013d4e:	b29b      	uxth	r3, r3
 8013d50:	428b      	cmp	r3, r1
 8013d52:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8013d56:	d908      	bls.n	8013d6a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 8013d58:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8013d5c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8013d60:	681a      	ldr	r2, [r3, #0]
 8013d62:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8013d66:	685a      	ldr	r2, [r3, #4]
 8013d68:	6062      	str	r2, [r4, #4]
 8013d6a:	bd10      	pop	{r4, pc}
 8013d6c:	080291ed 	.word	0x080291ed
 8013d70:	080292e4 	.word	0x080292e4
 8013d74:	080291fb 	.word	0x080291fb

08013d78 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8013d78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013d7a:	466b      	mov	r3, sp
 8013d7c:	4604      	mov	r4, r0
 8013d7e:	e883 0006 	stmia.w	r3, {r1, r2}
 8013d82:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8013d86:	2a07      	cmp	r2, #7
 8013d88:	d906      	bls.n	8013d98 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8013d8a:	4b09      	ldr	r3, [pc, #36]	; (8013db0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8013d8c:	f240 11a3 	movw	r1, #419	; 0x1a3
 8013d90:	4a08      	ldr	r2, [pc, #32]	; (8013db4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8013d92:	4809      	ldr	r0, [pc, #36]	; (8013db8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8013d94:	f010 fe30 	bl	80249f8 <__assert_func>
 8013d98:	1c51      	adds	r1, r2, #1
 8013d9a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8013d9e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8013da2:	cb03      	ldmia	r3!, {r0, r1}
 8013da4:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8013da8:	6069      	str	r1, [r5, #4]
 8013daa:	b003      	add	sp, #12
 8013dac:	bd30      	pop	{r4, r5, pc}
 8013dae:	bf00      	nop
 8013db0:	08029224 	.word	0x08029224
 8013db4:	0802937a 	.word	0x0802937a
 8013db8:	080291fb 	.word	0x080291fb

08013dbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8013dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dc0:	b08d      	sub	sp, #52	; 0x34
 8013dc2:	4b94      	ldr	r3, [pc, #592]	; (8014014 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 8013dc4:	4683      	mov	fp, r0
 8013dc6:	ac08      	add	r4, sp, #32
 8013dc8:	e884 0006 	stmia.w	r4, {r1, r2}
 8013dcc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013dd0:	4620      	mov	r0, r4
 8013dd2:	4b91      	ldr	r3, [pc, #580]	; (8014018 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 8013dd4:	f9b3 1000 	ldrsh.w	r1, [r3]
 8013dd8:	f7ff fed2 	bl	8013b80 <_ZN8touchgfx4Rect10restrictToEss>
 8013ddc:	4620      	mov	r0, r4
 8013dde:	f7f9 fddc 	bl	800d99a <_ZNK8touchgfx4Rect7isEmptyEv>
 8013de2:	2800      	cmp	r0, #0
 8013de4:	d16a      	bne.n	8013ebc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8013de6:	9402      	str	r4, [sp, #8]
 8013de8:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8013dec:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8013df0:	2400      	movs	r4, #0
 8013df2:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 8013df6:	9301      	str	r3, [sp, #4]
 8013df8:	36a0      	adds	r6, #160	; 0xa0
 8013dfa:	42a5      	cmp	r5, r4
 8013dfc:	d00d      	beq.n	8013e1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 8013dfe:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8013e02:	9802      	ldr	r0, [sp, #8]
 8013e04:	f7ff ff0c 	bl	8013c20 <_ZNK8touchgfx4Rect8includesERKS0_>
 8013e08:	b128      	cbz	r0, 8013e16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8013e0a:	1e69      	subs	r1, r5, #1
 8013e0c:	9801      	ldr	r0, [sp, #4]
 8013e0e:	1b09      	subs	r1, r1, r4
 8013e10:	b289      	uxth	r1, r1
 8013e12:	f7ff ff8f 	bl	8013d34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013e16:	3401      	adds	r4, #1
 8013e18:	e7ef      	b.n	8013dfa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 8013e1a:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8013e1e:	1e7b      	subs	r3, r7, #1
 8013e20:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8013e24:	9703      	str	r7, [sp, #12]
 8013e26:	9300      	str	r3, [sp, #0]
 8013e28:	2400      	movs	r4, #0
 8013e2a:	4655      	mov	r5, sl
 8013e2c:	9704      	str	r7, [sp, #16]
 8013e2e:	4626      	mov	r6, r4
 8013e30:	9b04      	ldr	r3, [sp, #16]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d078      	beq.n	8013f28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 8013e36:	9902      	ldr	r1, [sp, #8]
 8013e38:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8013e3c:	f7fa ffe6 	bl	800ee0c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013e40:	b360      	cbz	r0, 8013e9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8013e42:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8013e46:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8013e4a:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 8013e4e:	45e6      	cmp	lr, ip
 8013e50:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8013e54:	db35      	blt.n	8013ec2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8013e56:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8013e5a:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8013e5e:	4472      	add	r2, lr
 8013e60:	4463      	add	r3, ip
 8013e62:	b212      	sxth	r2, r2
 8013e64:	b21b      	sxth	r3, r3
 8013e66:	429a      	cmp	r2, r3
 8013e68:	dc2b      	bgt.n	8013ec2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8013e6a:	fa1f f288 	uxth.w	r2, r8
 8013e6e:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8013e72:	45c1      	cmp	r9, r8
 8013e74:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8013e78:	4413      	add	r3, r2
 8013e7a:	fa1f fc89 	uxth.w	ip, r9
 8013e7e:	b29b      	uxth	r3, r3
 8013e80:	fa0f fe83 	sxth.w	lr, r3
 8013e84:	db0f      	blt.n	8013ea6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8013e86:	eba3 030c 	sub.w	r3, r3, ip
 8013e8a:	1ac9      	subs	r1, r1, r3
 8013e8c:	b209      	sxth	r1, r1
 8013e8e:	2900      	cmp	r1, #0
 8013e90:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8013e94:	dd12      	ble.n	8013ebc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8013e96:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 8013e9a:	4604      	mov	r4, r0
 8013e9c:	9b04      	ldr	r3, [sp, #16]
 8013e9e:	3d08      	subs	r5, #8
 8013ea0:	3b01      	subs	r3, #1
 8013ea2:	9304      	str	r3, [sp, #16]
 8013ea4:	e7c4      	b.n	8013e30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 8013ea6:	4461      	add	r1, ip
 8013ea8:	b209      	sxth	r1, r1
 8013eaa:	4571      	cmp	r1, lr
 8013eac:	dc3a      	bgt.n	8013f24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8013eae:	eba2 020c 	sub.w	r2, r2, ip
 8013eb2:	b212      	sxth	r2, r2
 8013eb4:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8013eb8:	2a00      	cmp	r2, #0
 8013eba:	dcee      	bgt.n	8013e9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8013ebc:	b00d      	add	sp, #52	; 0x34
 8013ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ec2:	45c1      	cmp	r9, r8
 8013ec4:	db2e      	blt.n	8013f24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8013ec6:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8013eca:	4499      	add	r9, r3
 8013ecc:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8013ed0:	4498      	add	r8, r3
 8013ed2:	fa0f f989 	sxth.w	r9, r9
 8013ed6:	fa0f f888 	sxth.w	r8, r8
 8013eda:	45c1      	cmp	r9, r8
 8013edc:	dc22      	bgt.n	8013f24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8013ede:	fa1f f28c 	uxth.w	r2, ip
 8013ee2:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8013ee6:	45e6      	cmp	lr, ip
 8013ee8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8013eec:	4413      	add	r3, r2
 8013eee:	fa1f f88e 	uxth.w	r8, lr
 8013ef2:	b29b      	uxth	r3, r3
 8013ef4:	fa0f f983 	sxth.w	r9, r3
 8013ef8:	db0a      	blt.n	8013f10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 8013efa:	eba3 0308 	sub.w	r3, r3, r8
 8013efe:	1ac9      	subs	r1, r1, r3
 8013f00:	b209      	sxth	r1, r1
 8013f02:	2900      	cmp	r1, #0
 8013f04:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8013f08:	ddd8      	ble.n	8013ebc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8013f0a:	f8ad 9020 	strh.w	r9, [sp, #32]
 8013f0e:	e7c4      	b.n	8013e9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8013f10:	4441      	add	r1, r8
 8013f12:	b209      	sxth	r1, r1
 8013f14:	4549      	cmp	r1, r9
 8013f16:	dc05      	bgt.n	8013f24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8013f18:	eba2 0208 	sub.w	r2, r2, r8
 8013f1c:	b212      	sxth	r2, r2
 8013f1e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8013f22:	e7c9      	b.n	8013eb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8013f24:	4606      	mov	r6, r0
 8013f26:	e7b9      	b.n	8013e9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8013f28:	2c00      	cmp	r4, #0
 8013f2a:	f47f af7d 	bne.w	8013e28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 8013f2e:	2e00      	cmp	r6, #0
 8013f30:	f000 81e0 	beq.w	80142f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x538>
 8013f34:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 8013f38:	4655      	mov	r5, sl
 8013f3a:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8013f3e:	b2b9      	uxth	r1, r7
 8013f40:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8013f44:	b2b3      	uxth	r3, r6
 8013f46:	9104      	str	r1, [sp, #16]
 8013f48:	9804      	ldr	r0, [sp, #16]
 8013f4a:	441a      	add	r2, r3
 8013f4c:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8013f50:	b292      	uxth	r2, r2
 8013f52:	4401      	add	r1, r0
 8013f54:	fa0f f882 	sxth.w	r8, r2
 8013f58:	b289      	uxth	r1, r1
 8013f5a:	9105      	str	r1, [sp, #20]
 8013f5c:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 8013f60:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013f64:	9b03      	ldr	r3, [sp, #12]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d058      	beq.n	801401c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 8013f6a:	9902      	ldr	r1, [sp, #8]
 8013f6c:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8013f70:	f7fa ff4c 	bl	800ee0c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013f74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013f78:	b1d8      	cbz	r0, 8013fb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8013f7a:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8013f7e:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8013f82:	4576      	cmp	r6, lr
 8013f84:	dc26      	bgt.n	8013fd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8013f86:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8013f8a:	44f4      	add	ip, lr
 8013f8c:	fa0f fc8c 	sxth.w	ip, ip
 8013f90:	45e0      	cmp	r8, ip
 8013f92:	db1f      	blt.n	8013fd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8013f94:	428f      	cmp	r7, r1
 8013f96:	fa1f fc81 	uxth.w	ip, r1
 8013f9a:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8013f9e:	dc0f      	bgt.n	8013fc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 8013fa0:	9805      	ldr	r0, [sp, #20]
 8013fa2:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8013fa6:	eba0 0c0c 	sub.w	ip, r0, ip
 8013faa:	eba1 010c 	sub.w	r1, r1, ip
 8013fae:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8013fb2:	4620      	mov	r0, r4
 8013fb4:	9903      	ldr	r1, [sp, #12]
 8013fb6:	3d08      	subs	r5, #8
 8013fb8:	4604      	mov	r4, r0
 8013fba:	3901      	subs	r1, #1
 8013fbc:	9103      	str	r1, [sp, #12]
 8013fbe:	e7cf      	b.n	8013f60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 8013fc0:	4461      	add	r1, ip
 8013fc2:	b209      	sxth	r1, r1
 8013fc4:	4549      	cmp	r1, r9
 8013fc6:	dcf5      	bgt.n	8013fb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8013fc8:	9904      	ldr	r1, [sp, #16]
 8013fca:	eba1 0c0c 	sub.w	ip, r1, ip
 8013fce:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8013fd2:	e7ee      	b.n	8013fb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8013fd4:	428f      	cmp	r7, r1
 8013fd6:	dced      	bgt.n	8013fb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8013fd8:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8013fdc:	4461      	add	r1, ip
 8013fde:	b209      	sxth	r1, r1
 8013fe0:	4589      	cmp	r9, r1
 8013fe2:	dbe7      	blt.n	8013fb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8013fe4:	4576      	cmp	r6, lr
 8013fe6:	fa1f fc8e 	uxth.w	ip, lr
 8013fea:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8013fee:	dc08      	bgt.n	8014002 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8013ff0:	eba2 0c0c 	sub.w	ip, r2, ip
 8013ff4:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8013ff8:	eba1 010c 	sub.w	r1, r1, ip
 8013ffc:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8014000:	e7d7      	b.n	8013fb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8014002:	4461      	add	r1, ip
 8014004:	b209      	sxth	r1, r1
 8014006:	4588      	cmp	r8, r1
 8014008:	dbd4      	blt.n	8013fb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801400a:	eba3 0c0c 	sub.w	ip, r3, ip
 801400e:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8014012:	e7ce      	b.n	8013fb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8014014:	20020fce 	.word	0x20020fce
 8014018:	20020fcc 	.word	0x20020fcc
 801401c:	2c00      	cmp	r4, #0
 801401e:	f000 8169 	beq.w	80142f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x538>
 8014022:	9b00      	ldr	r3, [sp, #0]
 8014024:	3301      	adds	r3, #1
 8014026:	f000 8165 	beq.w	80142f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x538>
 801402a:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801402e:	9802      	ldr	r0, [sp, #8]
 8014030:	4621      	mov	r1, r4
 8014032:	f7ff fdf5 	bl	8013c20 <_ZNK8touchgfx4Rect8includesERKS0_>
 8014036:	b120      	cbz	r0, 8014042 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 8014038:	f8bd 1000 	ldrh.w	r1, [sp]
 801403c:	9801      	ldr	r0, [sp, #4]
 801403e:	f7ff fe79 	bl	8013d34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014042:	9902      	ldr	r1, [sp, #8]
 8014044:	4620      	mov	r0, r4
 8014046:	f7fa fee1 	bl	800ee0c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801404a:	2800      	cmp	r0, #0
 801404c:	f000 809b 	beq.w	8014186 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8014050:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8014054:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 8014058:	fa1f f288 	uxth.w	r2, r8
 801405c:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 8014060:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 8014064:	19d5      	adds	r5, r2, r7
 8014066:	b2a1      	uxth	r1, r4
 8014068:	45a0      	cmp	r8, r4
 801406a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801406e:	fa1f f985 	uxth.w	r9, r5
 8014072:	440b      	add	r3, r1
 8014074:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 8014078:	fa0f f589 	sxth.w	r5, r9
 801407c:	b29b      	uxth	r3, r3
 801407e:	9503      	str	r5, [sp, #12]
 8014080:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8014084:	9507      	str	r5, [sp, #28]
 8014086:	f340 809d 	ble.w	80141c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x408>
 801408a:	1a52      	subs	r2, r2, r1
 801408c:	4584      	cmp	ip, r0
 801408e:	fa0f fe83 	sxth.w	lr, r3
 8014092:	b292      	uxth	r2, r2
 8014094:	b215      	sxth	r5, r2
 8014096:	dd2f      	ble.n	80140f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33c>
 8014098:	9e00      	ldr	r6, [sp, #0]
 801409a:	fa1f fc8c 	uxth.w	ip, ip
 801409e:	b280      	uxth	r0, r0
 80140a0:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 80140a4:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 80140a8:	9e03      	ldr	r6, [sp, #12]
 80140aa:	ebac 0300 	sub.w	r3, ip, r0
 80140ae:	448c      	add	ip, r1
 80140b0:	eba6 060e 	sub.w	r6, r6, lr
 80140b4:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 80140b8:	b29b      	uxth	r3, r3
 80140ba:	4470      	add	r0, lr
 80140bc:	fa0f fc8c 	sxth.w	ip, ip
 80140c0:	b21c      	sxth	r4, r3
 80140c2:	b200      	sxth	r0, r0
 80140c4:	4366      	muls	r6, r4
 80140c6:	ebac 0000 	sub.w	r0, ip, r0
 80140ca:	4368      	muls	r0, r5
 80140cc:	4286      	cmp	r6, r0
 80140ce:	db09      	blt.n	80140e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 80140d0:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 80140d4:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 80140d8:	4417      	add	r7, r2
 80140da:	f8ad 3020 	strh.w	r3, [sp, #32]
 80140de:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 80140e2:	e681      	b.n	8013de8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80140e4:	440b      	add	r3, r1
 80140e6:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 80140ea:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80140ee:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 80140f2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80140f6:	e677      	b.n	8013de8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80140f8:	9e03      	ldr	r6, [sp, #12]
 80140fa:	45b6      	cmp	lr, r6
 80140fc:	da28      	bge.n	8014150 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 80140fe:	9b00      	ldr	r3, [sp, #0]
 8014100:	eba6 060e 	sub.w	r6, r6, lr
 8014104:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 8014108:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801410c:	eb04 030c 	add.w	r3, r4, ip
 8014110:	fa1f f883 	uxth.w	r8, r3
 8014114:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 8014118:	4403      	add	r3, r0
 801411a:	fa0f f988 	sxth.w	r9, r8
 801411e:	eba0 000c 	sub.w	r0, r0, ip
 8014122:	eba3 0308 	sub.w	r3, r3, r8
 8014126:	4368      	muls	r0, r5
 8014128:	b29b      	uxth	r3, r3
 801412a:	fa0f f883 	sxth.w	r8, r3
 801412e:	fb08 f606 	mul.w	r6, r8, r6
 8014132:	42b0      	cmp	r0, r6
 8014134:	dc06      	bgt.n	8014144 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8014136:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 801413a:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801413e:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 8014142:	e7c9      	b.n	80140d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31c>
 8014144:	4423      	add	r3, r4
 8014146:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 801414a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801414e:	e64b      	b.n	8013de8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8014150:	eba3 0309 	sub.w	r3, r3, r9
 8014154:	9807      	ldr	r0, [sp, #28]
 8014156:	b29b      	uxth	r3, r3
 8014158:	2806      	cmp	r0, #6
 801415a:	fa0f fc83 	sxth.w	ip, r3
 801415e:	d818      	bhi.n	8014192 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 8014160:	4652      	mov	r2, sl
 8014162:	ab0a      	add	r3, sp, #40	; 0x28
 8014164:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 8014168:	6851      	ldr	r1, [r2, #4]
 801416a:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801416e:	c303      	stmia	r3!, {r0, r1}
 8014170:	9b03      	ldr	r3, [sp, #12]
 8014172:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 8014176:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801417a:	ab0a      	add	r3, sp, #40	; 0x28
 801417c:	9801      	ldr	r0, [sp, #4]
 801417e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8014182:	f7ff fdf9 	bl	8013d78 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8014186:	9b00      	ldr	r3, [sp, #0]
 8014188:	f1aa 0a08 	sub.w	sl, sl, #8
 801418c:	3b01      	subs	r3, #1
 801418e:	9300      	str	r3, [sp, #0]
 8014190:	e747      	b.n	8014022 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 8014192:	9800      	ldr	r0, [sp, #0]
 8014194:	45ac      	cmp	ip, r5
 8014196:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801419a:	db0c      	blt.n	80141b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fa>
 801419c:	4417      	add	r7, r2
 801419e:	4458      	add	r0, fp
 80141a0:	f8ad 4020 	strh.w	r4, [sp, #32]
 80141a4:	b2bf      	uxth	r7, r7
 80141a6:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 80141aa:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 80141ae:	440f      	add	r7, r1
 80141b0:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 80141b4:	e618      	b.n	8013de8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80141b6:	4458      	add	r0, fp
 80141b8:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 80141bc:	443b      	add	r3, r7
 80141be:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80141c2:	e611      	b.n	8013de8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80141c4:	fa1f f18c 	uxth.w	r1, ip
 80141c8:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 80141cc:	b282      	uxth	r2, r0
 80141ce:	4584      	cmp	ip, r0
 80141d0:	eb01 0e05 	add.w	lr, r1, r5
 80141d4:	9204      	str	r2, [sp, #16]
 80141d6:	fa1f fe8e 	uxth.w	lr, lr
 80141da:	9e04      	ldr	r6, [sp, #16]
 80141dc:	fa0f f28e 	sxth.w	r2, lr
 80141e0:	9205      	str	r2, [sp, #20]
 80141e2:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 80141e6:	4432      	add	r2, r6
 80141e8:	b292      	uxth	r2, r2
 80141ea:	9206      	str	r2, [sp, #24]
 80141ec:	da26      	bge.n	801423c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x480>
 80141ee:	eba3 0309 	sub.w	r3, r3, r9
 80141f2:	eba2 020e 	sub.w	r2, r2, lr
 80141f6:	eba0 000c 	sub.w	r0, r0, ip
 80141fa:	eba4 0408 	sub.w	r4, r4, r8
 80141fe:	b29b      	uxth	r3, r3
 8014200:	b292      	uxth	r2, r2
 8014202:	fa0f fa83 	sxth.w	sl, r3
 8014206:	b211      	sxth	r1, r2
 8014208:	fb0a f000 	mul.w	r0, sl, r0
 801420c:	434c      	muls	r4, r1
 801420e:	42a0      	cmp	r0, r4
 8014210:	9800      	ldr	r0, [sp, #0]
 8014212:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8014216:	dc06      	bgt.n	8014226 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 8014218:	4458      	add	r0, fp
 801421a:	9a05      	ldr	r2, [sp, #20]
 801421c:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 8014220:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8014224:	e7ca      	b.n	80141bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x400>
 8014226:	eb0b 0300 	add.w	r3, fp, r0
 801422a:	9903      	ldr	r1, [sp, #12]
 801422c:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 8014230:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 8014234:	442a      	add	r2, r5
 8014236:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801423a:	e5d5      	b.n	8013de8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801423c:	9e04      	ldr	r6, [sp, #16]
 801423e:	9a03      	ldr	r2, [sp, #12]
 8014240:	1b89      	subs	r1, r1, r6
 8014242:	b21e      	sxth	r6, r3
 8014244:	b289      	uxth	r1, r1
 8014246:	4296      	cmp	r6, r2
 8014248:	fa0f fc81 	sxth.w	ip, r1
 801424c:	dd25      	ble.n	801429a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4de>
 801424e:	eba3 0309 	sub.w	r3, r3, r9
 8014252:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8014256:	9e05      	ldr	r6, [sp, #20]
 8014258:	eba4 0408 	sub.w	r4, r4, r8
 801425c:	b29b      	uxth	r3, r3
 801425e:	eba6 0902 	sub.w	r9, r6, r2
 8014262:	fb0c f404 	mul.w	r4, ip, r4
 8014266:	b218      	sxth	r0, r3
 8014268:	9a00      	ldr	r2, [sp, #0]
 801426a:	fb00 f909 	mul.w	r9, r0, r9
 801426e:	00d2      	lsls	r2, r2, #3
 8014270:	454c      	cmp	r4, r9
 8014272:	db03      	blt.n	801427c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 8014274:	445a      	add	r2, fp
 8014276:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 801427a:	e79f      	b.n	80141bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x400>
 801427c:	eb0b 0302 	add.w	r3, fp, r2
 8014280:	9a03      	ldr	r2, [sp, #12]
 8014282:	4429      	add	r1, r5
 8014284:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8014288:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 801428c:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8014290:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8014294:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014298:	e5a6      	b.n	8013de8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801429a:	9b06      	ldr	r3, [sp, #24]
 801429c:	9c07      	ldr	r4, [sp, #28]
 801429e:	eba3 020e 	sub.w	r2, r3, lr
 80142a2:	2c06      	cmp	r4, #6
 80142a4:	b292      	uxth	r2, r2
 80142a6:	b213      	sxth	r3, r2
 80142a8:	d80d      	bhi.n	80142c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50a>
 80142aa:	4651      	mov	r1, sl
 80142ac:	aa0a      	add	r2, sp, #40	; 0x28
 80142ae:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 80142b2:	6849      	ldr	r1, [r1, #4]
 80142b4:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 80142b8:	9b05      	ldr	r3, [sp, #20]
 80142ba:	c203      	stmia	r2!, {r0, r1}
 80142bc:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 80142c0:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 80142c4:	e759      	b.n	801417a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 80142c6:	9c00      	ldr	r4, [sp, #0]
 80142c8:	4563      	cmp	r3, ip
 80142ca:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80142ce:	db0d      	blt.n	80142ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x530>
 80142d0:	4429      	add	r1, r5
 80142d2:	9a04      	ldr	r2, [sp, #16]
 80142d4:	445c      	add	r4, fp
 80142d6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80142da:	b289      	uxth	r1, r1
 80142dc:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 80142e0:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 80142e4:	4411      	add	r1, r2
 80142e6:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 80142ea:	e57d      	b.n	8013de8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80142ec:	445c      	add	r4, fp
 80142ee:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 80142f2:	e79f      	b.n	8014234 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x478>
 80142f4:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 80142f8:	2f07      	cmp	r7, #7
 80142fa:	d806      	bhi.n	801430a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54e>
 80142fc:	ab08      	add	r3, sp, #32
 80142fe:	9801      	ldr	r0, [sp, #4]
 8014300:	e893 0006 	ldmia.w	r3, {r1, r2}
 8014304:	f7ff fd38 	bl	8013d78 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8014308:	e5d8      	b.n	8013ebc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801430a:	f107 39ff 	add.w	r9, r7, #4294967295
 801430e:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8014312:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 8014316:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801431a:	f04f 35ff 	mov.w	r5, #4294967295
 801431e:	2400      	movs	r4, #0
 8014320:	9304      	str	r3, [sp, #16]
 8014322:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8014326:	f109 32ff 	add.w	r2, r9, #4294967295
 801432a:	9300      	str	r3, [sp, #0]
 801432c:	4690      	mov	r8, r2
 801432e:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8014332:	9303      	str	r3, [sp, #12]
 8014334:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8014338:	f1b8 3fff 	cmp.w	r8, #4294967295
 801433c:	6818      	ldr	r0, [r3, #0]
 801433e:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8014342:	9206      	str	r2, [sp, #24]
 8014344:	bf16      	itet	ne
 8014346:	9904      	ldrne	r1, [sp, #16]
 8014348:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801434c:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 8014350:	9305      	str	r3, [sp, #20]
 8014352:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8014356:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801435a:	fb16 f601 	smulbb	r6, r6, r1
 801435e:	6859      	ldr	r1, [r3, #4]
 8014360:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8014364:	4671      	mov	r1, lr
 8014366:	a80a      	add	r0, sp, #40	; 0x28
 8014368:	f7fb fb0e 	bl	800f988 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801436c:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8014370:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8014374:	9b03      	ldr	r3, [sp, #12]
 8014376:	9a00      	ldr	r2, [sp, #0]
 8014378:	fb11 f100 	smulbb	r1, r1, r0
 801437c:	2008      	movs	r0, #8
 801437e:	fb02 6603 	mla	r6, r2, r3, r6
 8014382:	1b8e      	subs	r6, r1, r6
 8014384:	fb91 f1f0 	sdiv	r1, r1, r0
 8014388:	42b1      	cmp	r1, r6
 801438a:	dc21      	bgt.n	80143d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x614>
 801438c:	4556      	cmp	r6, sl
 801438e:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8014392:	da03      	bge.n	801439c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e0>
 8014394:	b1e6      	cbz	r6, 80143d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x614>
 8014396:	46b2      	mov	sl, r6
 8014398:	4645      	mov	r5, r8
 801439a:	464c      	mov	r4, r9
 801439c:	f108 38ff 	add.w	r8, r8, #4294967295
 80143a0:	f118 0f02 	cmn.w	r8, #2
 80143a4:	d1c8      	bne.n	8014338 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57c>
 80143a6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80143aa:	f1a7 0708 	sub.w	r7, r7, #8
 80143ae:	4691      	mov	r9, r2
 80143b0:	d1b7      	bne.n	8014322 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x566>
 80143b2:	9b01      	ldr	r3, [sp, #4]
 80143b4:	b2a6      	uxth	r6, r4
 80143b6:	00e4      	lsls	r4, r4, #3
 80143b8:	1918      	adds	r0, r3, r4
 80143ba:	1c6b      	adds	r3, r5, #1
 80143bc:	d10b      	bne.n	80143d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x61a>
 80143be:	4601      	mov	r1, r0
 80143c0:	9802      	ldr	r0, [sp, #8]
 80143c2:	f7fb fae1 	bl	800f988 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80143c6:	4631      	mov	r1, r6
 80143c8:	9801      	ldr	r0, [sp, #4]
 80143ca:	f7ff fcb3 	bl	8013d34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80143ce:	e50b      	b.n	8013de8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80143d0:	4645      	mov	r5, r8
 80143d2:	464c      	mov	r4, r9
 80143d4:	e7ed      	b.n	80143b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f6>
 80143d6:	9b01      	ldr	r3, [sp, #4]
 80143d8:	00ed      	lsls	r5, r5, #3
 80143da:	445c      	add	r4, fp
 80143dc:	1959      	adds	r1, r3, r5
 80143de:	445d      	add	r5, fp
 80143e0:	f7fb fad2 	bl	800f988 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80143e4:	9b02      	ldr	r3, [sp, #8]
 80143e6:	cb03      	ldmia	r3!, {r0, r1}
 80143e8:	9b02      	ldr	r3, [sp, #8]
 80143ea:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 80143ee:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 80143f2:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 80143f6:	6861      	ldr	r1, [r4, #4]
 80143f8:	c303      	stmia	r3!, {r0, r1}
 80143fa:	e7e4      	b.n	80143c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x60a>

080143fc <_ZN8touchgfx11Application10invalidateEv>:
 80143fc:	4b09      	ldr	r3, [pc, #36]	; (8014424 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 80143fe:	b082      	sub	sp, #8
 8014400:	2100      	movs	r1, #0
 8014402:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014406:	4b08      	ldr	r3, [pc, #32]	; (8014428 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8014408:	9100      	str	r1, [sp, #0]
 801440a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801440e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014412:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014416:	ab02      	add	r3, sp, #8
 8014418:	e913 0006 	ldmdb	r3, {r1, r2}
 801441c:	b002      	add	sp, #8
 801441e:	f7ff bccd 	b.w	8013dbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8014422:	bf00      	nop
 8014424:	20020fcc 	.word	0x20020fcc
 8014428:	20020fce 	.word	0x20020fce

0801442c <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801442c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014430:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8014434:	b09b      	sub	sp, #108	; 0x6c
 8014436:	4604      	mov	r4, r0
 8014438:	4630      	mov	r0, r6
 801443a:	f7f9 faae 	bl	800d99a <_ZNK8touchgfx4Rect7isEmptyEv>
 801443e:	4605      	mov	r5, r0
 8014440:	b940      	cbnz	r0, 8014454 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8014442:	4620      	mov	r0, r4
 8014444:	e896 0006 	ldmia.w	r6, {r1, r2}
 8014448:	f7ff fcb8 	bl	8013dbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801444c:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8014450:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8014454:	4bc6      	ldr	r3, [pc, #792]	; (8014770 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	b33b      	cbz	r3, 80144aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x7e>
 801445a:	4dc6      	ldr	r5, [pc, #792]	; (8014774 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801445c:	4628      	mov	r0, r5
 801445e:	f7f9 fa9c 	bl	800d99a <_ZNK8touchgfx4Rect7isEmptyEv>
 8014462:	4606      	mov	r6, r0
 8014464:	bb08      	cbnz	r0, 80144aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x7e>
 8014466:	4628      	mov	r0, r5
 8014468:	f7ff fa10 	bl	801388c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801446c:	6829      	ldr	r1, [r5, #0]
 801446e:	686a      	ldr	r2, [r5, #4]
 8014470:	4620      	mov	r0, r4
 8014472:	f7ff fca3 	bl	8013dbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8014476:	802e      	strh	r6, [r5, #0]
 8014478:	806e      	strh	r6, [r5, #2]
 801447a:	80ae      	strh	r6, [r5, #4]
 801447c:	80ee      	strh	r6, [r5, #6]
 801447e:	4dbe      	ldr	r5, [pc, #760]	; (8014778 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8014480:	a809      	add	r0, sp, #36	; 0x24
 8014482:	f7ff fc04 	bl	8013c8e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8014486:	882f      	ldrh	r7, [r5, #0]
 8014488:	463e      	mov	r6, r7
 801448a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801448e:	42b3      	cmp	r3, r6
 8014490:	d912      	bls.n	80144b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x8c>
 8014492:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8014496:	3601      	adds	r6, #1
 8014498:	a809      	add	r0, sp, #36	; 0x24
 801449a:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801449e:	b2b6      	uxth	r6, r6
 80144a0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80144a4:	f7ff fc68 	bl	8013d78 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80144a8:	e7ef      	b.n	801448a <_ZN8touchgfx11Application15drawCachedAreasEv+0x5e>
 80144aa:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d1e5      	bne.n	801447e <_ZN8touchgfx11Application15drawCachedAreasEv+0x52>
 80144b2:	b01b      	add	sp, #108	; 0x6c
 80144b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144b8:	463e      	mov	r6, r7
 80144ba:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 80144be:	42b3      	cmp	r3, r6
 80144c0:	d90b      	bls.n	80144da <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 80144c2:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80144c6:	3601      	adds	r6, #1
 80144c8:	4620      	mov	r0, r4
 80144ca:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 80144ce:	b2b6      	uxth	r6, r6
 80144d0:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 80144d4:	f7ff fc72 	bl	8013dbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80144d8:	e7ef      	b.n	80144ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x8e>
 80144da:	4ea8      	ldr	r6, [pc, #672]	; (801477c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 80144dc:	6833      	ldr	r3, [r6, #0]
 80144de:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80144e2:	2b01      	cmp	r3, #1
 80144e4:	f040 80d2 	bne.w	801468c <_ZN8touchgfx11Application15drawCachedAreasEv+0x260>
 80144e8:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 80144ec:	4639      	mov	r1, r7
 80144ee:	f8b4 c0e8 	ldrh.w	ip, [r4, #232]	; 0xe8
 80144f2:	2700      	movs	r7, #0
 80144f4:	33aa      	adds	r3, #170	; 0xaa
 80144f6:	458c      	cmp	ip, r1
 80144f8:	f103 0308 	add.w	r3, r3, #8
 80144fc:	dd0a      	ble.n	8014514 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe8>
 80144fe:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8014502:	3101      	adds	r1, #1
 8014504:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8014508:	4402      	add	r2, r0
 801450a:	b212      	sxth	r2, r2
 801450c:	4297      	cmp	r7, r2
 801450e:	bfb8      	it	lt
 8014510:	4617      	movlt	r7, r2
 8014512:	e7f0      	b.n	80144f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 8014514:	4b9a      	ldr	r3, [pc, #616]	; (8014780 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8014516:	f8b3 9000 	ldrh.w	r9, [r3]
 801451a:	2300      	movs	r3, #0
 801451c:	f1b9 0f0f 	cmp.w	r9, #15
 8014520:	bf8c      	ite	hi
 8014522:	ea4f 09d9 	movhi.w	r9, r9, lsr #3
 8014526:	f04f 0901 	movls.w	r9, #1
 801452a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801452e:	f8bd 801a 	ldrh.w	r8, [sp, #26]
 8014532:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8014536:	4440      	add	r0, r8
 8014538:	fa0f f880 	sxth.w	r8, r0
 801453c:	6830      	ldr	r0, [r6, #0]
 801453e:	4547      	cmp	r7, r8
 8014540:	6803      	ldr	r3, [r0, #0]
 8014542:	f340 8086 	ble.w	8014652 <_ZN8touchgfx11Application15drawCachedAreasEv+0x226>
 8014546:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801454a:	4798      	blx	r3
 801454c:	eb08 0309 	add.w	r3, r8, r9
 8014550:	4298      	cmp	r0, r3
 8014552:	da08      	bge.n	8014566 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 8014554:	4287      	cmp	r7, r0
 8014556:	dd06      	ble.n	8014566 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 8014558:	4580      	cmp	r8, r0
 801455a:	dd70      	ble.n	801463e <_ZN8touchgfx11Application15drawCachedAreasEv+0x212>
 801455c:	f1b8 0f00 	cmp.w	r8, #0
 8014560:	dd6d      	ble.n	801463e <_ZN8touchgfx11Application15drawCachedAreasEv+0x212>
 8014562:	4638      	mov	r0, r7
 8014564:	e004      	b.n	8014570 <_ZN8touchgfx11Application15drawCachedAreasEv+0x144>
 8014566:	4580      	cmp	r8, r0
 8014568:	dcfb      	bgt.n	8014562 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801456a:	42b8      	cmp	r0, r7
 801456c:	bfa8      	it	ge
 801456e:	4638      	movge	r0, r7
 8014570:	4b84      	ldr	r3, [pc, #528]	; (8014784 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8014572:	eba0 0008 	sub.w	r0, r0, r8
 8014576:	2200      	movs	r2, #0
 8014578:	f8ad 8016 	strh.w	r8, [sp, #22]
 801457c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014580:	f8b5 8000 	ldrh.w	r8, [r5]
 8014584:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014588:	f8ad 3018 	strh.w	r3, [sp, #24]
 801458c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8014590:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8014594:	4543      	cmp	r3, r8
 8014596:	d9ca      	bls.n	801452e <_ZN8touchgfx11Application15drawCachedAreasEv+0x102>
 8014598:	eb04 02c8 	add.w	r2, r4, r8, lsl #3
 801459c:	ab07      	add	r3, sp, #28
 801459e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80145a2:	6851      	ldr	r1, [r2, #4]
 80145a4:	c303      	stmia	r3!, {r0, r1}
 80145a6:	a905      	add	r1, sp, #20
 80145a8:	a807      	add	r0, sp, #28
 80145aa:	f7fa fc2f 	bl	800ee0c <_ZNK8touchgfx4Rect9intersectERKS0_>
 80145ae:	2800      	cmp	r0, #0
 80145b0:	d04c      	beq.n	801464c <_ZN8touchgfx11Application15drawCachedAreasEv+0x220>
 80145b2:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80145b6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80145ba:	f8bd a020 	ldrh.w	sl, [sp, #32]
 80145be:	4686      	mov	lr, r0
 80145c0:	4290      	cmp	r0, r2
 80145c2:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 80145c6:	4450      	add	r0, sl
 80145c8:	f8bd a018 	ldrh.w	sl, [sp, #24]
 80145cc:	bfb8      	it	lt
 80145ce:	4696      	movlt	lr, r2
 80145d0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80145d4:	4452      	add	r2, sl
 80145d6:	b280      	uxth	r0, r0
 80145d8:	4299      	cmp	r1, r3
 80145da:	468c      	mov	ip, r1
 80145dc:	b292      	uxth	r2, r2
 80145de:	f8ad e01c 	strh.w	lr, [sp, #28]
 80145e2:	fa0f fb80 	sxth.w	fp, r0
 80145e6:	bfb8      	it	lt
 80145e8:	469c      	movlt	ip, r3
 80145ea:	fa0f fa82 	sxth.w	sl, r2
 80145ee:	f8ad c01e 	strh.w	ip, [sp, #30]
 80145f2:	45d3      	cmp	fp, sl
 80145f4:	bfb8      	it	lt
 80145f6:	4602      	movlt	r2, r0
 80145f8:	eba2 020e 	sub.w	r2, r2, lr
 80145fc:	f8ad 2020 	strh.w	r2, [sp, #32]
 8014600:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8014604:	4411      	add	r1, r2
 8014606:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801460a:	4413      	add	r3, r2
 801460c:	b289      	uxth	r1, r1
 801460e:	b29b      	uxth	r3, r3
 8014610:	b208      	sxth	r0, r1
 8014612:	b21a      	sxth	r2, r3
 8014614:	4290      	cmp	r0, r2
 8014616:	bfb8      	it	lt
 8014618:	460b      	movlt	r3, r1
 801461a:	eba3 030c 	sub.w	r3, r3, ip
 801461e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014622:	a807      	add	r0, sp, #28
 8014624:	f7f9 f9b9 	bl	800d99a <_ZNK8touchgfx4Rect7isEmptyEv>
 8014628:	b920      	cbnz	r0, 8014634 <_ZN8touchgfx11Application15drawCachedAreasEv+0x208>
 801462a:	6823      	ldr	r3, [r4, #0]
 801462c:	a907      	add	r1, sp, #28
 801462e:	4620      	mov	r0, r4
 8014630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014632:	4798      	blx	r3
 8014634:	f108 0801 	add.w	r8, r8, #1
 8014638:	fa1f f888 	uxth.w	r8, r8
 801463c:	e7a8      	b.n	8014590 <_ZN8touchgfx11Application15drawCachedAreasEv+0x164>
 801463e:	6830      	ldr	r0, [r6, #0]
 8014640:	2101      	movs	r1, #1
 8014642:	6803      	ldr	r3, [r0, #0]
 8014644:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014648:	4798      	blx	r3
 801464a:	e770      	b.n	801452e <_ZN8touchgfx11Application15drawCachedAreasEv+0x102>
 801464c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8014650:	e7e7      	b.n	8014622 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1f6>
 8014652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014654:	4798      	blx	r3
 8014656:	4b4c      	ldr	r3, [pc, #304]	; (8014788 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8014658:	781b      	ldrb	r3, [r3, #0]
 801465a:	2b00      	cmp	r3, #0
 801465c:	f43f af29 	beq.w	80144b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 8014660:	2300      	movs	r3, #0
 8014662:	882d      	ldrh	r5, [r5, #0]
 8014664:	34ea      	adds	r4, #234	; 0xea
 8014666:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801466a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801466e:	42ab      	cmp	r3, r5
 8014670:	f67f af1f 	bls.w	80144b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 8014674:	ab1a      	add	r3, sp, #104	; 0x68
 8014676:	4620      	mov	r0, r4
 8014678:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801467c:	3501      	adds	r5, #1
 801467e:	3b44      	subs	r3, #68	; 0x44
 8014680:	b2ad      	uxth	r5, r5
 8014682:	e893 0006 	ldmia.w	r3, {r1, r2}
 8014686:	f7ff fb77 	bl	8013d78 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801468a:	e7ee      	b.n	801466a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 801468c:	2b02      	cmp	r3, #2
 801468e:	f040 8137 	bne.w	8014900 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4d4>
 8014692:	4b3e      	ldr	r3, [pc, #248]	; (801478c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8014694:	781b      	ldrb	r3, [r3, #0]
 8014696:	2b01      	cmp	r3, #1
 8014698:	d02c      	beq.n	80146f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c8>
 801469a:	f104 0aa8 	add.w	sl, r4, #168	; 0xa8
 801469e:	882a      	ldrh	r2, [r5, #0]
 80146a0:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 80146a4:	3201      	adds	r2, #1
 80146a6:	b292      	uxth	r2, r2
 80146a8:	2900      	cmp	r1, #0
 80146aa:	d0d4      	beq.n	8014656 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22a>
 80146ac:	f8b4 70aa 	ldrh.w	r7, [r4, #170]	; 0xaa
 80146b0:	4610      	mov	r0, r2
 80146b2:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 80146b6:	f04f 0900 	mov.w	r9, #0
 80146ba:	441f      	add	r7, r3
 80146bc:	b23f      	sxth	r7, r7
 80146be:	b283      	uxth	r3, r0
 80146c0:	ea4f 08c9 	mov.w	r8, r9, lsl #3
 80146c4:	4299      	cmp	r1, r3
 80146c6:	f240 80c5 	bls.w	8014854 <_ZN8touchgfx11Application15drawCachedAreasEv+0x428>
 80146ca:	44a0      	add	r8, r4
 80146cc:	eb04 0bc0 	add.w	fp, r4, r0, lsl #3
 80146d0:	4684      	mov	ip, r0
 80146d2:	f9b8 30aa 	ldrsh.w	r3, [r8, #170]	; 0xaa
 80146d6:	f9bb e0aa 	ldrsh.w	lr, [fp, #170]	; 0xaa
 80146da:	4573      	cmp	r3, lr
 80146dc:	f340 80a7 	ble.w	801482e <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 80146e0:	f8bb 70ae 	ldrh.w	r7, [fp, #174]	; 0xae
 80146e4:	4477      	add	r7, lr
 80146e6:	b23f      	sxth	r7, r7
 80146e8:	429f      	cmp	r7, r3
 80146ea:	bfa8      	it	ge
 80146ec:	461f      	movge	r7, r3
 80146ee:	3001      	adds	r0, #1
 80146f0:	46e1      	mov	r9, ip
 80146f2:	e7e4      	b.n	80146be <_ZN8touchgfx11Application15drawCachedAreasEv+0x292>
 80146f4:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 80146f8:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 80146fc:	f1bb 0f00 	cmp.w	fp, #0
 8014700:	d0a9      	beq.n	8014656 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22a>
 8014702:	882b      	ldrh	r3, [r5, #0]
 8014704:	f04f 0800 	mov.w	r8, #0
 8014708:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801470c:	3301      	adds	r3, #1
 801470e:	b29b      	uxth	r3, r3
 8014710:	b299      	uxth	r1, r3
 8014712:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8014716:	458b      	cmp	fp, r1
 8014718:	d93a      	bls.n	8014790 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>
 801471a:	4427      	add	r7, r4
 801471c:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8014720:	469c      	mov	ip, r3
 8014722:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8014726:	f8b7 00a8 	ldrh.w	r0, [r7, #168]	; 0xa8
 801472a:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801472e:	4408      	add	r0, r1
 8014730:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8014734:	4471      	add	r1, lr
 8014736:	b200      	sxth	r0, r0
 8014738:	b209      	sxth	r1, r1
 801473a:	4288      	cmp	r0, r1
 801473c:	da06      	bge.n	801474c <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801473e:	4586      	cmp	lr, r0
 8014740:	4672      	mov	r2, lr
 8014742:	bfb8      	it	lt
 8014744:	4602      	movlt	r2, r0
 8014746:	3301      	adds	r3, #1
 8014748:	46e0      	mov	r8, ip
 801474a:	e7e1      	b.n	8014710 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e4>
 801474c:	d10b      	bne.n	8014766 <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 801474e:	f9b7 c0ae 	ldrsh.w	ip, [r7, #174]	; 0xae
 8014752:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8014756:	458c      	cmp	ip, r1
 8014758:	bfb4      	ite	lt
 801475a:	469c      	movlt	ip, r3
 801475c:	46c4      	movge	ip, r8
 801475e:	4572      	cmp	r2, lr
 8014760:	bfb8      	it	lt
 8014762:	4672      	movlt	r2, lr
 8014764:	e7ef      	b.n	8014746 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31a>
 8014766:	428a      	cmp	r2, r1
 8014768:	46c4      	mov	ip, r8
 801476a:	bfb8      	it	lt
 801476c:	460a      	movlt	r2, r1
 801476e:	e7ea      	b.n	8014746 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31a>
 8014770:	20021030 	.word	0x20021030
 8014774:	2002103c 	.word	0x2002103c
 8014778:	20000058 	.word	0x20000058
 801477c:	20020fd8 	.word	0x20020fd8
 8014780:	20020fce 	.word	0x20020fce
 8014784:	20020fcc 	.word	0x20020fcc
 8014788:	20020fd6 	.word	0x20020fd6
 801478c:	20020fd0 	.word	0x20020fd0
 8014790:	19e1      	adds	r1, r4, r7
 8014792:	ab07      	add	r3, sp, #28
 8014794:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8014798:	6849      	ldr	r1, [r1, #4]
 801479a:	c303      	stmia	r3!, {r0, r1}
 801479c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80147a0:	a807      	add	r0, sp, #28
 80147a2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80147a6:	2b13      	cmp	r3, #19
 80147a8:	440b      	add	r3, r1
 80147aa:	bfd8      	it	le
 80147ac:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 80147b0:	1a9b      	subs	r3, r3, r2
 80147b2:	f8ad 201c 	strh.w	r2, [sp, #28]
 80147b6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80147ba:	f7ff f881 	bl	80138c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80147be:	a807      	add	r0, sp, #28
 80147c0:	f7f9 f8eb 	bl	800d99a <_ZNK8touchgfx4Rect7isEmptyEv>
 80147c4:	2800      	cmp	r0, #0
 80147c6:	d197      	bne.n	80146f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2cc>
 80147c8:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 80147cc:	4427      	add	r7, r4
 80147ce:	6830      	ldr	r0, [r6, #0]
 80147d0:	f1bc 0f14 	cmp.w	ip, #20
 80147d4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80147d8:	f8d0 e000 	ldr.w	lr, [r0]
 80147dc:	bfa8      	it	ge
 80147de:	f04f 0c14 	movge.w	ip, #20
 80147e2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80147e6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80147ea:	fa1f fc8c 	uxth.w	ip, ip
 80147ee:	f8cd c000 	str.w	ip, [sp]
 80147f2:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 80147f6:	47d0      	blx	sl
 80147f8:	4682      	mov	sl, r0
 80147fa:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80147fe:	a807      	add	r0, sp, #28
 8014800:	f7ff f844 	bl	801388c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8014804:	6823      	ldr	r3, [r4, #0]
 8014806:	4620      	mov	r0, r4
 8014808:	a907      	add	r1, sp, #28
 801480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801480c:	4798      	blx	r3
 801480e:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	; 0xac
 8014812:	eba0 000a 	sub.w	r0, r0, sl
 8014816:	b200      	sxth	r0, r0
 8014818:	f8a7 00ac 	strh.w	r0, [r7, #172]	; 0xac
 801481c:	2800      	cmp	r0, #0
 801481e:	f47f af6b 	bne.w	80146f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2cc>
 8014822:	fa1f f188 	uxth.w	r1, r8
 8014826:	4648      	mov	r0, r9
 8014828:	f7ff fa84 	bl	8013d34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801482c:	e764      	b.n	80146f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2cc>
 801482e:	d10c      	bne.n	801484a <_ZN8touchgfx11Application15drawCachedAreasEv+0x41e>
 8014830:	f9b8 e0ac 	ldrsh.w	lr, [r8, #172]	; 0xac
 8014834:	f9bb c0ac 	ldrsh.w	ip, [fp, #172]	; 0xac
 8014838:	45e6      	cmp	lr, ip
 801483a:	bfb4      	ite	lt
 801483c:	4684      	movlt	ip, r0
 801483e:	46cc      	movge	ip, r9
 8014840:	f8bb e0ae 	ldrh.w	lr, [fp, #174]	; 0xae
 8014844:	4473      	add	r3, lr
 8014846:	b21b      	sxth	r3, r3
 8014848:	e74e      	b.n	80146e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2bc>
 801484a:	4577      	cmp	r7, lr
 801484c:	46cc      	mov	ip, r9
 801484e:	bfa8      	it	ge
 8014850:	4677      	movge	r7, lr
 8014852:	e74c      	b.n	80146ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c2>
 8014854:	eb0a 0008 	add.w	r0, sl, r8
 8014858:	44a0      	add	r8, r4
 801485a:	f9b8 b0ae 	ldrsh.w	fp, [r8, #174]	; 0xae
 801485e:	f1bb 0f13 	cmp.w	fp, #19
 8014862:	bfdc      	itt	le
 8014864:	f8b8 70aa 	ldrhle.w	r7, [r8, #170]	; 0xaa
 8014868:	445f      	addle	r7, fp
 801486a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801486e:	bfd8      	it	le
 8014870:	b23f      	sxthle	r7, r7
 8014872:	f7f9 f892 	bl	800d99a <_ZNK8touchgfx4Rect7isEmptyEv>
 8014876:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801487a:	2800      	cmp	r0, #0
 801487c:	f47f af14 	bne.w	80146a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x27c>
 8014880:	f9b8 20aa 	ldrsh.w	r2, [r8, #170]	; 0xaa
 8014884:	fa1f fb8b 	uxth.w	fp, fp
 8014888:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801488c:	1abf      	subs	r7, r7, r2
 801488e:	f9b8 10a8 	ldrsh.w	r1, [r8, #168]	; 0xa8
 8014892:	f9b8 30ac 	ldrsh.w	r3, [r8, #172]	; 0xac
 8014896:	2f14      	cmp	r7, #20
 8014898:	6830      	ldr	r0, [r6, #0]
 801489a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801489e:	b289      	uxth	r1, r1
 80148a0:	bfa8      	it	ge
 80148a2:	2714      	movge	r7, #20
 80148a4:	f8ad 201e 	strh.w	r2, [sp, #30]
 80148a8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80148ac:	b292      	uxth	r2, r2
 80148ae:	f8d0 c000 	ldr.w	ip, [r0]
 80148b2:	b2bf      	uxth	r7, r7
 80148b4:	b29b      	uxth	r3, r3
 80148b6:	455f      	cmp	r7, fp
 80148b8:	bf94      	ite	ls
 80148ba:	9700      	strls	r7, [sp, #0]
 80148bc:	f8cd b000 	strhi.w	fp, [sp]
 80148c0:	f8dc 7090 	ldr.w	r7, [ip, #144]	; 0x90
 80148c4:	47b8      	blx	r7
 80148c6:	6823      	ldr	r3, [r4, #0]
 80148c8:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80148cc:	a907      	add	r1, sp, #28
 80148ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148d0:	4620      	mov	r0, r4
 80148d2:	4798      	blx	r3
 80148d4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80148d8:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 80148dc:	f8b8 20aa 	ldrh.w	r2, [r8, #170]	; 0xaa
 80148e0:	1a5b      	subs	r3, r3, r1
 80148e2:	440a      	add	r2, r1
 80148e4:	b21b      	sxth	r3, r3
 80148e6:	f8a8 20aa 	strh.w	r2, [r8, #170]	; 0xaa
 80148ea:	f8a8 30ae 	strh.w	r3, [r8, #174]	; 0xae
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	f47f aed5 	bne.w	801469e <_ZN8touchgfx11Application15drawCachedAreasEv+0x272>
 80148f4:	fa1f f189 	uxth.w	r1, r9
 80148f8:	4650      	mov	r0, sl
 80148fa:	f7ff fa1b 	bl	8013d34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80148fe:	e6ce      	b.n	801469e <_ZN8touchgfx11Application15drawCachedAreasEv+0x272>
 8014900:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8014904:	42bb      	cmp	r3, r7
 8014906:	f67f aea6 	bls.w	8014656 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22a>
 801490a:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801490e:	ab07      	add	r3, sp, #28
 8014910:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8014914:	6851      	ldr	r1, [r2, #4]
 8014916:	c303      	stmia	r3!, {r0, r1}
 8014918:	a807      	add	r0, sp, #28
 801491a:	f7f9 f83e 	bl	800d99a <_ZNK8touchgfx4Rect7isEmptyEv>
 801491e:	b920      	cbnz	r0, 801492a <_ZN8touchgfx11Application15drawCachedAreasEv+0x4fe>
 8014920:	6823      	ldr	r3, [r4, #0]
 8014922:	a907      	add	r1, sp, #28
 8014924:	4620      	mov	r0, r4
 8014926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014928:	4798      	blx	r3
 801492a:	3701      	adds	r7, #1
 801492c:	b2bf      	uxth	r7, r7
 801492e:	e7e7      	b.n	8014900 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4d4>

08014930 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8014930:	4b03      	ldr	r3, [pc, #12]	; (8014940 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8014932:	2200      	movs	r2, #0
 8014934:	801a      	strh	r2, [r3, #0]
 8014936:	805a      	strh	r2, [r3, #2]
 8014938:	809a      	strh	r2, [r3, #4]
 801493a:	80da      	strh	r2, [r3, #6]
 801493c:	4770      	bx	lr
 801493e:	bf00      	nop
 8014940:	2002103c 	.word	0x2002103c

08014944 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8014944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014948:	b09d      	sub	sp, #116	; 0x74
 801494a:	4606      	mov	r6, r0
 801494c:	4614      	mov	r4, r2
 801494e:	468a      	mov	sl, r1
 8014950:	a803      	add	r0, sp, #12
 8014952:	461d      	mov	r5, r3
 8014954:	f000 fe93 	bl	801567e <_ZN8touchgfx12TextProviderC1Ev>
 8014958:	6833      	ldr	r3, [r6, #0]
 801495a:	4630      	mov	r0, r6
 801495c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8014960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014962:	4798      	blx	r3
 8014964:	6833      	ldr	r3, [r6, #0]
 8014966:	4607      	mov	r7, r0
 8014968:	4630      	mov	r0, r6
 801496a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801496c:	4798      	blx	r3
 801496e:	462a      	mov	r2, r5
 8014970:	2500      	movs	r5, #0
 8014972:	4621      	mov	r1, r4
 8014974:	9000      	str	r0, [sp, #0]
 8014976:	463b      	mov	r3, r7
 8014978:	462c      	mov	r4, r5
 801497a:	46a9      	mov	r9, r5
 801497c:	46a8      	mov	r8, r5
 801497e:	a803      	add	r0, sp, #12
 8014980:	f000 fee8 	bl	8015754 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014984:	2300      	movs	r3, #0
 8014986:	9302      	str	r3, [sp, #8]
 8014988:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801498c:	429c      	cmp	r4, r3
 801498e:	d002      	beq.n	8014996 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8014990:	455c      	cmp	r4, fp
 8014992:	bf18      	it	ne
 8014994:	4625      	movne	r5, r4
 8014996:	ab02      	add	r3, sp, #8
 8014998:	4632      	mov	r2, r6
 801499a:	4651      	mov	r1, sl
 801499c:	a803      	add	r0, sp, #12
 801499e:	f001 f9eb 	bl	8015d78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80149a2:	4604      	mov	r4, r0
 80149a4:	b108      	cbz	r0, 80149aa <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80149a6:	280a      	cmp	r0, #10
 80149a8:	d10a      	bne.n	80149c0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80149aa:	45c1      	cmp	r9, r8
 80149ac:	bf38      	it	cc
 80149ae:	46c1      	movcc	r9, r8
 80149b0:	f04f 0800 	mov.w	r8, #0
 80149b4:	2c00      	cmp	r4, #0
 80149b6:	d1e5      	bne.n	8014984 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80149b8:	4648      	mov	r0, r9
 80149ba:	b01d      	add	sp, #116	; 0x74
 80149bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149c0:	9a02      	ldr	r2, [sp, #8]
 80149c2:	2a00      	cmp	r2, #0
 80149c4:	d0de      	beq.n	8014984 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80149c6:	7b57      	ldrb	r7, [r2, #13]
 80149c8:	4629      	mov	r1, r5
 80149ca:	6833      	ldr	r3, [r6, #0]
 80149cc:	007f      	lsls	r7, r7, #1
 80149ce:	8894      	ldrh	r4, [r2, #4]
 80149d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80149d2:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80149d6:	7a97      	ldrb	r7, [r2, #10]
 80149d8:	4307      	orrs	r7, r0
 80149da:	4630      	mov	r0, r6
 80149dc:	4798      	blx	r3
 80149de:	4438      	add	r0, r7
 80149e0:	4480      	add	r8, r0
 80149e2:	fa1f f888 	uxth.w	r8, r8
 80149e6:	e7e5      	b.n	80149b4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080149e8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80149e8:	b508      	push	{r3, lr}
 80149ea:	6803      	ldr	r3, [r0, #0]
 80149ec:	68db      	ldr	r3, [r3, #12]
 80149ee:	4798      	blx	r3
 80149f0:	b128      	cbz	r0, 80149fe <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80149f2:	7b43      	ldrb	r3, [r0, #13]
 80149f4:	7a80      	ldrb	r0, [r0, #10]
 80149f6:	005b      	lsls	r3, r3, #1
 80149f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80149fc:	4318      	orrs	r0, r3
 80149fe:	bd08      	pop	{r3, pc}

08014a00 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8014a00:	b40e      	push	{r1, r2, r3}
 8014a02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a04:	b09e      	sub	sp, #120	; 0x78
 8014a06:	4605      	mov	r5, r0
 8014a08:	ab23      	add	r3, sp, #140	; 0x8c
 8014a0a:	a805      	add	r0, sp, #20
 8014a0c:	f853 4b04 	ldr.w	r4, [r3], #4
 8014a10:	9303      	str	r3, [sp, #12]
 8014a12:	f000 fe34 	bl	801567e <_ZN8touchgfx12TextProviderC1Ev>
 8014a16:	682b      	ldr	r3, [r5, #0]
 8014a18:	4628      	mov	r0, r5
 8014a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014a1c:	4798      	blx	r3
 8014a1e:	682b      	ldr	r3, [r5, #0]
 8014a20:	4606      	mov	r6, r0
 8014a22:	4628      	mov	r0, r5
 8014a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014a26:	4798      	blx	r3
 8014a28:	4633      	mov	r3, r6
 8014a2a:	4621      	mov	r1, r4
 8014a2c:	ae1e      	add	r6, sp, #120	; 0x78
 8014a2e:	2400      	movs	r4, #0
 8014a30:	9000      	str	r0, [sp, #0]
 8014a32:	9a03      	ldr	r2, [sp, #12]
 8014a34:	a805      	add	r0, sp, #20
 8014a36:	f000 fe8d 	bl	8015754 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014a3a:	f846 4d68 	str.w	r4, [r6, #-104]!
 8014a3e:	462a      	mov	r2, r5
 8014a40:	4633      	mov	r3, r6
 8014a42:	4621      	mov	r1, r4
 8014a44:	a805      	add	r0, sp, #20
 8014a46:	f001 f997 	bl	8015d78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014a4a:	b300      	cbz	r0, 8014a8e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8014a4c:	280a      	cmp	r0, #10
 8014a4e:	d01a      	beq.n	8014a86 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8014a50:	9f04      	ldr	r7, [sp, #16]
 8014a52:	b1c7      	cbz	r7, 8014a86 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8014a54:	7b78      	ldrb	r0, [r7, #13]
 8014a56:	7a3b      	ldrb	r3, [r7, #8]
 8014a58:	00c1      	lsls	r1, r0, #3
 8014a5a:	88aa      	ldrh	r2, [r5, #4]
 8014a5c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8014a60:	4319      	orrs	r1, r3
 8014a62:	0643      	lsls	r3, r0, #25
 8014a64:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8014a68:	bf48      	it	mi
 8014a6a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8014a6e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8014a72:	bf48      	it	mi
 8014a74:	b219      	sxthmi	r1, r3
 8014a76:	79fb      	ldrb	r3, [r7, #7]
 8014a78:	4303      	orrs	r3, r0
 8014a7a:	4413      	add	r3, r2
 8014a7c:	1a5b      	subs	r3, r3, r1
 8014a7e:	b29b      	uxth	r3, r3
 8014a80:	42a3      	cmp	r3, r4
 8014a82:	bfc8      	it	gt
 8014a84:	b21c      	sxthgt	r4, r3
 8014a86:	4633      	mov	r3, r6
 8014a88:	462a      	mov	r2, r5
 8014a8a:	2100      	movs	r1, #0
 8014a8c:	e7da      	b.n	8014a44 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8014a8e:	b2a0      	uxth	r0, r4
 8014a90:	b01e      	add	sp, #120	; 0x78
 8014a92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014a96:	b003      	add	sp, #12
 8014a98:	4770      	bx	lr

08014a9a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8014a9a:	b40e      	push	{r1, r2, r3}
 8014a9c:	b570      	push	{r4, r5, r6, lr}
 8014a9e:	b09d      	sub	sp, #116	; 0x74
 8014aa0:	4604      	mov	r4, r0
 8014aa2:	ab21      	add	r3, sp, #132	; 0x84
 8014aa4:	a803      	add	r0, sp, #12
 8014aa6:	f853 5b04 	ldr.w	r5, [r3], #4
 8014aaa:	9302      	str	r3, [sp, #8]
 8014aac:	f000 fde7 	bl	801567e <_ZN8touchgfx12TextProviderC1Ev>
 8014ab0:	6823      	ldr	r3, [r4, #0]
 8014ab2:	4620      	mov	r0, r4
 8014ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014ab6:	4798      	blx	r3
 8014ab8:	6823      	ldr	r3, [r4, #0]
 8014aba:	4606      	mov	r6, r0
 8014abc:	4620      	mov	r0, r4
 8014abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014ac0:	2401      	movs	r4, #1
 8014ac2:	4798      	blx	r3
 8014ac4:	4633      	mov	r3, r6
 8014ac6:	9000      	str	r0, [sp, #0]
 8014ac8:	4629      	mov	r1, r5
 8014aca:	9a02      	ldr	r2, [sp, #8]
 8014acc:	a803      	add	r0, sp, #12
 8014ace:	f000 fe41 	bl	8015754 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014ad2:	a803      	add	r0, sp, #12
 8014ad4:	f001 fa4a 	bl	8015f6c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014ad8:	b2a3      	uxth	r3, r4
 8014ada:	b138      	cbz	r0, 8014aec <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8014adc:	280a      	cmp	r0, #10
 8014ade:	a803      	add	r0, sp, #12
 8014ae0:	bf04      	itt	eq
 8014ae2:	3301      	addeq	r3, #1
 8014ae4:	b21c      	sxtheq	r4, r3
 8014ae6:	f001 fa41 	bl	8015f6c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014aea:	e7f5      	b.n	8014ad8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8014aec:	4618      	mov	r0, r3
 8014aee:	b01d      	add	sp, #116	; 0x74
 8014af0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014af4:	b003      	add	sp, #12
 8014af6:	4770      	bx	lr

08014af8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8014af8:	b40e      	push	{r1, r2, r3}
 8014afa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014afc:	b09e      	sub	sp, #120	; 0x78
 8014afe:	4604      	mov	r4, r0
 8014b00:	ab23      	add	r3, sp, #140	; 0x8c
 8014b02:	a805      	add	r0, sp, #20
 8014b04:	f853 5b04 	ldr.w	r5, [r3], #4
 8014b08:	9303      	str	r3, [sp, #12]
 8014b0a:	f000 fdb8 	bl	801567e <_ZN8touchgfx12TextProviderC1Ev>
 8014b0e:	6823      	ldr	r3, [r4, #0]
 8014b10:	4620      	mov	r0, r4
 8014b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b14:	4798      	blx	r3
 8014b16:	6823      	ldr	r3, [r4, #0]
 8014b18:	4606      	mov	r6, r0
 8014b1a:	4620      	mov	r0, r4
 8014b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014b1e:	4798      	blx	r3
 8014b20:	4633      	mov	r3, r6
 8014b22:	4629      	mov	r1, r5
 8014b24:	9000      	str	r0, [sp, #0]
 8014b26:	9a03      	ldr	r2, [sp, #12]
 8014b28:	a805      	add	r0, sp, #20
 8014b2a:	f000 fe13 	bl	8015754 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014b2e:	ad1e      	add	r5, sp, #120	; 0x78
 8014b30:	2100      	movs	r1, #0
 8014b32:	26ff      	movs	r6, #255	; 0xff
 8014b34:	4622      	mov	r2, r4
 8014b36:	a805      	add	r0, sp, #20
 8014b38:	f845 1d68 	str.w	r1, [r5, #-104]!
 8014b3c:	462b      	mov	r3, r5
 8014b3e:	f001 f91b 	bl	8015d78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014b42:	b1d8      	cbz	r0, 8014b7c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8014b44:	280a      	cmp	r0, #10
 8014b46:	d012      	beq.n	8014b6e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8014b48:	9804      	ldr	r0, [sp, #16]
 8014b4a:	b180      	cbz	r0, 8014b6e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8014b4c:	7b47      	ldrb	r7, [r0, #13]
 8014b4e:	7922      	ldrb	r2, [r4, #4]
 8014b50:	00fb      	lsls	r3, r7, #3
 8014b52:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8014b56:	7a03      	ldrb	r3, [r0, #8]
 8014b58:	430b      	orrs	r3, r1
 8014b5a:	0679      	lsls	r1, r7, #25
 8014b5c:	bf44      	itt	mi
 8014b5e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014b62:	b21b      	sxthmi	r3, r3
 8014b64:	1ad3      	subs	r3, r2, r3
 8014b66:	b2db      	uxtb	r3, r3
 8014b68:	429e      	cmp	r6, r3
 8014b6a:	bf28      	it	cs
 8014b6c:	461e      	movcs	r6, r3
 8014b6e:	462b      	mov	r3, r5
 8014b70:	4622      	mov	r2, r4
 8014b72:	2100      	movs	r1, #0
 8014b74:	a805      	add	r0, sp, #20
 8014b76:	f001 f8ff 	bl	8015d78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014b7a:	e7e2      	b.n	8014b42 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8014b7c:	4630      	mov	r0, r6
 8014b7e:	b01e      	add	sp, #120	; 0x78
 8014b80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014b84:	b003      	add	sp, #12
 8014b86:	4770      	bx	lr

08014b88 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8014b88:	b513      	push	{r0, r1, r4, lr}
 8014b8a:	6803      	ldr	r3, [r0, #0]
 8014b8c:	2400      	movs	r4, #0
 8014b8e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8014b92:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014b96:	f8ad 1004 	strh.w	r1, [sp, #4]
 8014b9a:	4669      	mov	r1, sp
 8014b9c:	691b      	ldr	r3, [r3, #16]
 8014b9e:	9400      	str	r4, [sp, #0]
 8014ba0:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014ba4:	4798      	blx	r3
 8014ba6:	b002      	add	sp, #8
 8014ba8:	bd10      	pop	{r4, pc}

08014baa <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8014baa:	b538      	push	{r3, r4, r5, lr}
 8014bac:	680b      	ldr	r3, [r1, #0]
 8014bae:	460c      	mov	r4, r1
 8014bb0:	4605      	mov	r5, r0
 8014bb2:	68db      	ldr	r3, [r3, #12]
 8014bb4:	4798      	blx	r3
 8014bb6:	6823      	ldr	r3, [r4, #0]
 8014bb8:	4620      	mov	r0, r4
 8014bba:	4629      	mov	r1, r5
 8014bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bbe:	4798      	blx	r3
 8014bc0:	4628      	mov	r0, r5
 8014bc2:	bd38      	pop	{r3, r4, r5, pc}

08014bc4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8014bc4:	b410      	push	{r4}
 8014bc6:	880a      	ldrh	r2, [r1, #0]
 8014bc8:	8884      	ldrh	r4, [r0, #4]
 8014bca:	4422      	add	r2, r4
 8014bcc:	800a      	strh	r2, [r1, #0]
 8014bce:	884a      	ldrh	r2, [r1, #2]
 8014bd0:	88c4      	ldrh	r4, [r0, #6]
 8014bd2:	4422      	add	r2, r4
 8014bd4:	804a      	strh	r2, [r1, #2]
 8014bd6:	6940      	ldr	r0, [r0, #20]
 8014bd8:	b120      	cbz	r0, 8014be4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8014bda:	6803      	ldr	r3, [r0, #0]
 8014bdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014be2:	4718      	bx	r3
 8014be4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014be8:	4770      	bx	lr

08014bea <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8014bea:	b570      	push	{r4, r5, r6, lr}
 8014bec:	8882      	ldrh	r2, [r0, #4]
 8014bee:	460c      	mov	r4, r1
 8014bf0:	880b      	ldrh	r3, [r1, #0]
 8014bf2:	4605      	mov	r5, r0
 8014bf4:	4413      	add	r3, r2
 8014bf6:	800b      	strh	r3, [r1, #0]
 8014bf8:	884b      	ldrh	r3, [r1, #2]
 8014bfa:	88c2      	ldrh	r2, [r0, #6]
 8014bfc:	4413      	add	r3, r2
 8014bfe:	804b      	strh	r3, [r1, #2]
 8014c00:	1d01      	adds	r1, r0, #4
 8014c02:	4620      	mov	r0, r4
 8014c04:	f7f8 fe86 	bl	800d914 <_ZN8touchgfx4RectaNERKS0_>
 8014c08:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	dd0b      	ble.n	8014c28 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8014c10:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	dd07      	ble.n	8014c28 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8014c18:	6968      	ldr	r0, [r5, #20]
 8014c1a:	b128      	cbz	r0, 8014c28 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8014c1c:	6803      	ldr	r3, [r0, #0]
 8014c1e:	4621      	mov	r1, r4
 8014c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c26:	4718      	bx	r3
 8014c28:	bd70      	pop	{r4, r5, r6, pc}
	...

08014c2c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8014c2c:	b570      	push	{r4, r5, r6, lr}
 8014c2e:	8882      	ldrh	r2, [r0, #4]
 8014c30:	460c      	mov	r4, r1
 8014c32:	880b      	ldrh	r3, [r1, #0]
 8014c34:	4605      	mov	r5, r0
 8014c36:	4413      	add	r3, r2
 8014c38:	800b      	strh	r3, [r1, #0]
 8014c3a:	884b      	ldrh	r3, [r1, #2]
 8014c3c:	88c2      	ldrh	r2, [r0, #6]
 8014c3e:	4413      	add	r3, r2
 8014c40:	804b      	strh	r3, [r1, #2]
 8014c42:	1d01      	adds	r1, r0, #4
 8014c44:	4620      	mov	r0, r4
 8014c46:	f7f8 fe65 	bl	800d914 <_ZN8touchgfx4RectaNERKS0_>
 8014c4a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	dd18      	ble.n	8014c84 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8014c52:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	dd14      	ble.n	8014c84 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8014c5a:	6968      	ldr	r0, [r5, #20]
 8014c5c:	b128      	cbz	r0, 8014c6a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8014c5e:	6803      	ldr	r3, [r0, #0]
 8014c60:	4621      	mov	r1, r4
 8014c62:	691b      	ldr	r3, [r3, #16]
 8014c64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c68:	4718      	bx	r3
 8014c6a:	4b07      	ldr	r3, [pc, #28]	; (8014c88 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	3304      	adds	r3, #4
 8014c70:	429d      	cmp	r5, r3
 8014c72:	d107      	bne.n	8014c84 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8014c74:	f7fe fffa 	bl	8013c6c <_ZN8touchgfx11Application11getInstanceEv>
 8014c78:	6821      	ldr	r1, [r4, #0]
 8014c7a:	6862      	ldr	r2, [r4, #4]
 8014c7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c80:	f7ff b89c 	b.w	8013dbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8014c84:	bd70      	pop	{r4, r5, r6, pc}
 8014c86:	bf00      	nop
 8014c88:	20021034 	.word	0x20021034

08014c8c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8014c8c:	b570      	push	{r4, r5, r6, lr}
 8014c8e:	4604      	mov	r4, r0
 8014c90:	4616      	mov	r6, r2
 8014c92:	460d      	mov	r5, r1
 8014c94:	b901      	cbnz	r1, 8014c98 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8014c96:	b192      	cbz	r2, 8014cbe <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8014c98:	6823      	ldr	r3, [r4, #0]
 8014c9a:	4620      	mov	r0, r4
 8014c9c:	699b      	ldr	r3, [r3, #24]
 8014c9e:	4798      	blx	r3
 8014ca0:	88e2      	ldrh	r2, [r4, #6]
 8014ca2:	88a1      	ldrh	r1, [r4, #4]
 8014ca4:	4620      	mov	r0, r4
 8014ca6:	4432      	add	r2, r6
 8014ca8:	4429      	add	r1, r5
 8014caa:	b212      	sxth	r2, r2
 8014cac:	b209      	sxth	r1, r1
 8014cae:	f7ee fe57 	bl	8003960 <_ZN8touchgfx8Drawable5setXYEss>
 8014cb2:	6823      	ldr	r3, [r4, #0]
 8014cb4:	4620      	mov	r0, r4
 8014cb6:	699b      	ldr	r3, [r3, #24]
 8014cb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014cbc:	4718      	bx	r3
 8014cbe:	bd70      	pop	{r4, r5, r6, pc}

08014cc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8014cc0:	b510      	push	{r4, lr}
 8014cc2:	2300      	movs	r3, #0
 8014cc4:	4604      	mov	r4, r0
 8014cc6:	4608      	mov	r0, r1
 8014cc8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8014ccc:	8023      	strh	r3, [r4, #0]
 8014cce:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014cd2:	8063      	strh	r3, [r4, #2]
 8014cd4:	6803      	ldr	r3, [r0, #0]
 8014cd6:	80a1      	strh	r1, [r4, #4]
 8014cd8:	4621      	mov	r1, r4
 8014cda:	80e2      	strh	r2, [r4, #6]
 8014cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cde:	4798      	blx	r3
 8014ce0:	4620      	mov	r0, r4
 8014ce2:	bd10      	pop	{r4, pc}

08014ce4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8014ce4:	b530      	push	{r4, r5, lr}
 8014ce6:	8083      	strh	r3, [r0, #4]
 8014ce8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8014cec:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8014cf0:	7183      	strb	r3, [r0, #6]
 8014cf2:	79c3      	ldrb	r3, [r0, #7]
 8014cf4:	6101      	str	r1, [r0, #16]
 8014cf6:	f365 0306 	bfi	r3, r5, #0, #7
 8014cfa:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8014cfe:	8282      	strh	r2, [r0, #20]
 8014d00:	f365 13c7 	bfi	r3, r5, #7, #1
 8014d04:	71c3      	strb	r3, [r0, #7]
 8014d06:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8014d0a:	7203      	strb	r3, [r0, #8]
 8014d0c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8014d10:	7243      	strb	r3, [r0, #9]
 8014d12:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8014d16:	8143      	strh	r3, [r0, #10]
 8014d18:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8014d1c:	8183      	strh	r3, [r0, #12]
 8014d1e:	4b01      	ldr	r3, [pc, #4]	; (8014d24 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8014d20:	6003      	str	r3, [r0, #0]
 8014d22:	bd30      	pop	{r4, r5, pc}
 8014d24:	0802947c 	.word	0x0802947c

08014d28 <_ZNK8touchgfx9ConstFont4findEt>:
 8014d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d2a:	6904      	ldr	r4, [r0, #16]
 8014d2c:	b3bc      	cbz	r4, 8014d9e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014d2e:	88a3      	ldrh	r3, [r4, #4]
 8014d30:	8a82      	ldrh	r2, [r0, #20]
 8014d32:	1acb      	subs	r3, r1, r3
 8014d34:	f102 32ff 	add.w	r2, r2, #4294967295
 8014d38:	d431      	bmi.n	8014d9e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014d3a:	4293      	cmp	r3, r2
 8014d3c:	dd0c      	ble.n	8014d58 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8014d3e:	230e      	movs	r3, #14
 8014d40:	fb03 4302 	mla	r3, r3, r2, r4
 8014d44:	889b      	ldrh	r3, [r3, #4]
 8014d46:	1a5b      	subs	r3, r3, r1
 8014d48:	1ad3      	subs	r3, r2, r3
 8014d4a:	429a      	cmp	r2, r3
 8014d4c:	db27      	blt.n	8014d9e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	bfbc      	itt	lt
 8014d52:	2302      	movlt	r3, #2
 8014d54:	fb92 f3f3 	sdivlt	r3, r2, r3
 8014d58:	2500      	movs	r5, #0
 8014d5a:	260e      	movs	r6, #14
 8014d5c:	4295      	cmp	r5, r2
 8014d5e:	dc1e      	bgt.n	8014d9e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014d60:	fb06 4003 	mla	r0, r6, r3, r4
 8014d64:	8887      	ldrh	r7, [r0, #4]
 8014d66:	42b9      	cmp	r1, r7
 8014d68:	d01a      	beq.n	8014da0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8014d6a:	d20d      	bcs.n	8014d88 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8014d6c:	1e5a      	subs	r2, r3, #1
 8014d6e:	4295      	cmp	r5, r2
 8014d70:	dc15      	bgt.n	8014d9e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014d72:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8014d76:	1a5b      	subs	r3, r3, r1
 8014d78:	1ad3      	subs	r3, r2, r3
 8014d7a:	429a      	cmp	r2, r3
 8014d7c:	db0f      	blt.n	8014d9e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014d7e:	429d      	cmp	r5, r3
 8014d80:	ddec      	ble.n	8014d5c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8014d82:	1953      	adds	r3, r2, r5
 8014d84:	105b      	asrs	r3, r3, #1
 8014d86:	e7e9      	b.n	8014d5c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8014d88:	1c5d      	adds	r5, r3, #1
 8014d8a:	42aa      	cmp	r2, r5
 8014d8c:	db07      	blt.n	8014d9e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014d8e:	8a43      	ldrh	r3, [r0, #18]
 8014d90:	1acb      	subs	r3, r1, r3
 8014d92:	442b      	add	r3, r5
 8014d94:	429d      	cmp	r5, r3
 8014d96:	dc02      	bgt.n	8014d9e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014d98:	429a      	cmp	r2, r3
 8014d9a:	dadf      	bge.n	8014d5c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8014d9c:	e7f1      	b.n	8014d82 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8014d9e:	2000      	movs	r0, #0
 8014da0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014da2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8014da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014da4:	4604      	mov	r4, r0
 8014da6:	4617      	mov	r7, r2
 8014da8:	461e      	mov	r6, r3
 8014daa:	b911      	cbnz	r1, 8014db2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8014dac:	2500      	movs	r5, #0
 8014dae:	4628      	mov	r0, r5
 8014db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014db2:	290a      	cmp	r1, #10
 8014db4:	d0fa      	beq.n	8014dac <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8014db6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8014dba:	4291      	cmp	r1, r2
 8014dbc:	d0f6      	beq.n	8014dac <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8014dbe:	f242 020b 	movw	r2, #8203	; 0x200b
 8014dc2:	4291      	cmp	r1, r2
 8014dc4:	d0f2      	beq.n	8014dac <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8014dc6:	f7ff ffaf 	bl	8014d28 <_ZNK8touchgfx9ConstFont4findEt>
 8014dca:	4605      	mov	r5, r0
 8014dcc:	b950      	cbnz	r0, 8014de4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8014dce:	6823      	ldr	r3, [r4, #0]
 8014dd0:	4620      	mov	r0, r4
 8014dd2:	691b      	ldr	r3, [r3, #16]
 8014dd4:	4798      	blx	r3
 8014dd6:	4601      	mov	r1, r0
 8014dd8:	4620      	mov	r0, r4
 8014dda:	f7ff ffa5 	bl	8014d28 <_ZNK8touchgfx9ConstFont4findEt>
 8014dde:	4605      	mov	r5, r0
 8014de0:	2800      	cmp	r0, #0
 8014de2:	d0e3      	beq.n	8014dac <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8014de4:	6823      	ldr	r3, [r4, #0]
 8014de6:	4629      	mov	r1, r5
 8014de8:	4620      	mov	r0, r4
 8014dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014dec:	4798      	blx	r3
 8014dee:	6038      	str	r0, [r7, #0]
 8014df0:	6823      	ldr	r3, [r4, #0]
 8014df2:	4620      	mov	r0, r4
 8014df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014df6:	4798      	blx	r3
 8014df8:	7030      	strb	r0, [r6, #0]
 8014dfa:	e7d8      	b.n	8014dae <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08014dfc <_ZN8touchgfx6memsetEPvhm>:
 8014dfc:	4402      	add	r2, r0
 8014dfe:	4290      	cmp	r0, r2
 8014e00:	d002      	beq.n	8014e08 <_ZN8touchgfx6memsetEPvhm+0xc>
 8014e02:	f800 1b01 	strb.w	r1, [r0], #1
 8014e06:	e7fa      	b.n	8014dfe <_ZN8touchgfx6memsetEPvhm+0x2>
 8014e08:	4770      	bx	lr

08014e0a <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 8014e0a:	b538      	push	{r3, r4, r5, lr}
 8014e0c:	4605      	mov	r5, r0
 8014e0e:	f002 fa0d 	bl	801722c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014e12:	4604      	mov	r4, r0
 8014e14:	4628      	mov	r0, r5
 8014e16:	f002 f945 	bl	80170a4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8014e1a:	2800      	cmp	r0, #0
 8014e1c:	bf14      	ite	ne
 8014e1e:	2002      	movne	r0, #2
 8014e20:	2000      	moveq	r0, #0
 8014e22:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8014e26:	b280      	uxth	r0, r0
 8014e28:	bd38      	pop	{r3, r4, r5, pc}

08014e2a <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 8014e2a:	b538      	push	{r3, r4, r5, lr}
 8014e2c:	4605      	mov	r5, r0
 8014e2e:	f002 f9fd 	bl	801722c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014e32:	4604      	mov	r4, r0
 8014e34:	4628      	mov	r0, r5
 8014e36:	f002 f935 	bl	80170a4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8014e3a:	2800      	cmp	r0, #0
 8014e3c:	bf14      	ite	ne
 8014e3e:	2002      	movne	r0, #2
 8014e40:	2000      	moveq	r0, #0
 8014e42:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8014e46:	f040 0001 	orr.w	r0, r0, #1
 8014e4a:	b280      	uxth	r0, r0
 8014e4c:	bd38      	pop	{r3, r4, r5, pc}

08014e4e <_ZN8touchgfx4clzuEm>:
 8014e4e:	4603      	mov	r3, r0
 8014e50:	b1c8      	cbz	r0, 8014e86 <_ZN8touchgfx4clzuEm+0x38>
 8014e52:	0c02      	lsrs	r2, r0, #16
 8014e54:	0412      	lsls	r2, r2, #16
 8014e56:	b9a2      	cbnz	r2, 8014e82 <_ZN8touchgfx4clzuEm+0x34>
 8014e58:	0403      	lsls	r3, r0, #16
 8014e5a:	2010      	movs	r0, #16
 8014e5c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014e60:	bf04      	itt	eq
 8014e62:	021b      	lsleq	r3, r3, #8
 8014e64:	3008      	addeq	r0, #8
 8014e66:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014e6a:	bf04      	itt	eq
 8014e6c:	011b      	lsleq	r3, r3, #4
 8014e6e:	3004      	addeq	r0, #4
 8014e70:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014e74:	bf04      	itt	eq
 8014e76:	009b      	lsleq	r3, r3, #2
 8014e78:	3002      	addeq	r0, #2
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	db04      	blt.n	8014e88 <_ZN8touchgfx4clzuEm+0x3a>
 8014e7e:	3001      	adds	r0, #1
 8014e80:	4770      	bx	lr
 8014e82:	2000      	movs	r0, #0
 8014e84:	e7ea      	b.n	8014e5c <_ZN8touchgfx4clzuEm+0xe>
 8014e86:	2020      	movs	r0, #32
 8014e88:	4770      	bx	lr

08014e8a <_ZN8touchgfx7muldivuEmmmRm>:
 8014e8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e8e:	4680      	mov	r8, r0
 8014e90:	460f      	mov	r7, r1
 8014e92:	4615      	mov	r5, r2
 8014e94:	461e      	mov	r6, r3
 8014e96:	f7ff ffda 	bl	8014e4e <_ZN8touchgfx4clzuEm>
 8014e9a:	b998      	cbnz	r0, 8014ec4 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 8014e9c:	4608      	mov	r0, r1
 8014e9e:	f7ff ffd6 	bl	8014e4e <_ZN8touchgfx4clzuEm>
 8014ea2:	2800      	cmp	r0, #0
 8014ea4:	dd08      	ble.n	8014eb8 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 8014ea6:	4633      	mov	r3, r6
 8014ea8:	462a      	mov	r2, r5
 8014eaa:	4641      	mov	r1, r8
 8014eac:	4638      	mov	r0, r7
 8014eae:	f7ff ffec 	bl	8014e8a <_ZN8touchgfx7muldivuEmmmRm>
 8014eb2:	b003      	add	sp, #12
 8014eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8014ebc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8014ec0:	6033      	str	r3, [r6, #0]
 8014ec2:	e7f6      	b.n	8014eb2 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8014ec4:	fa31 f900 	lsrs.w	r9, r1, r0
 8014ec8:	fb01 f308 	mul.w	r3, r1, r8
 8014ecc:	d105      	bne.n	8014eda <_ZN8touchgfx7muldivuEmmmRm+0x50>
 8014ece:	fbb3 f0f5 	udiv	r0, r3, r5
 8014ed2:	fb05 3510 	mls	r5, r5, r0, r3
 8014ed6:	6035      	str	r5, [r6, #0]
 8014ed8:	e7eb      	b.n	8014eb2 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8014eda:	2301      	movs	r3, #1
 8014edc:	fa08 fb00 	lsl.w	fp, r8, r0
 8014ee0:	462a      	mov	r2, r5
 8014ee2:	4641      	mov	r1, r8
 8014ee4:	fa03 f000 	lsl.w	r0, r3, r0
 8014ee8:	4633      	mov	r3, r6
 8014eea:	fbbb faf5 	udiv	sl, fp, r5
 8014eee:	3801      	subs	r0, #1
 8014ef0:	fb09 f40a 	mul.w	r4, r9, sl
 8014ef4:	4038      	ands	r0, r7
 8014ef6:	f7ff ffc8 	bl	8014e8a <_ZN8touchgfx7muldivuEmmmRm>
 8014efa:	462a      	mov	r2, r5
 8014efc:	4607      	mov	r7, r0
 8014efe:	ab01      	add	r3, sp, #4
 8014f00:	fb05 b11a 	mls	r1, r5, sl, fp
 8014f04:	4648      	mov	r0, r9
 8014f06:	f7ff ffc0 	bl	8014e8a <_ZN8touchgfx7muldivuEmmmRm>
 8014f0a:	9b01      	ldr	r3, [sp, #4]
 8014f0c:	6832      	ldr	r2, [r6, #0]
 8014f0e:	441a      	add	r2, r3
 8014f10:	fbb2 f3f5 	udiv	r3, r2, r5
 8014f14:	441c      	add	r4, r3
 8014f16:	fb05 2513 	mls	r5, r5, r3, r2
 8014f1a:	443c      	add	r4, r7
 8014f1c:	4420      	add	r0, r4
 8014f1e:	e7da      	b.n	8014ed6 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

08014f20 <_ZN8touchgfx6muldivElllRl>:
 8014f20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014f22:	2800      	cmp	r0, #0
 8014f24:	461e      	mov	r6, r3
 8014f26:	bfba      	itte	lt
 8014f28:	4240      	neglt	r0, r0
 8014f2a:	f04f 34ff 	movlt.w	r4, #4294967295
 8014f2e:	2401      	movge	r4, #1
 8014f30:	2900      	cmp	r1, #0
 8014f32:	bfbc      	itt	lt
 8014f34:	4249      	neglt	r1, r1
 8014f36:	4264      	neglt	r4, r4
 8014f38:	2a00      	cmp	r2, #0
 8014f3a:	bfb6      	itet	lt
 8014f3c:	4265      	neglt	r5, r4
 8014f3e:	4625      	movge	r5, r4
 8014f40:	4252      	neglt	r2, r2
 8014f42:	4288      	cmp	r0, r1
 8014f44:	bfc2      	ittt	gt
 8014f46:	4603      	movgt	r3, r0
 8014f48:	4608      	movgt	r0, r1
 8014f4a:	4619      	movgt	r1, r3
 8014f4c:	ab01      	add	r3, sp, #4
 8014f4e:	f7ff ff9c 	bl	8014e8a <_ZN8touchgfx7muldivuEmmmRm>
 8014f52:	9b01      	ldr	r3, [sp, #4]
 8014f54:	4368      	muls	r0, r5
 8014f56:	435c      	muls	r4, r3
 8014f58:	6034      	str	r4, [r6, #0]
 8014f5a:	b002      	add	sp, #8
 8014f5c:	bd70      	pop	{r4, r5, r6, pc}

08014f5e <_ZN8touchgfx6muldivElll>:
 8014f5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014f60:	4606      	mov	r6, r0
 8014f62:	ab01      	add	r3, sp, #4
 8014f64:	460d      	mov	r5, r1
 8014f66:	4614      	mov	r4, r2
 8014f68:	f7ff ffda 	bl	8014f20 <_ZN8touchgfx6muldivElllRl>
 8014f6c:	2e00      	cmp	r6, #0
 8014f6e:	db20      	blt.n	8014fb2 <_ZN8touchgfx6muldivElll+0x54>
 8014f70:	bf14      	ite	ne
 8014f72:	2301      	movne	r3, #1
 8014f74:	2300      	moveq	r3, #0
 8014f76:	2d00      	cmp	r5, #0
 8014f78:	db1e      	blt.n	8014fb8 <_ZN8touchgfx6muldivElll+0x5a>
 8014f7a:	bf14      	ite	ne
 8014f7c:	2201      	movne	r2, #1
 8014f7e:	2200      	moveq	r2, #0
 8014f80:	2c00      	cmp	r4, #0
 8014f82:	fb03 f202 	mul.w	r2, r3, r2
 8014f86:	db1a      	blt.n	8014fbe <_ZN8touchgfx6muldivElll+0x60>
 8014f88:	bf14      	ite	ne
 8014f8a:	2301      	movne	r3, #1
 8014f8c:	2300      	moveq	r3, #0
 8014f8e:	4353      	muls	r3, r2
 8014f90:	2b01      	cmp	r3, #1
 8014f92:	d117      	bne.n	8014fc4 <_ZN8touchgfx6muldivElll+0x66>
 8014f94:	2c00      	cmp	r4, #0
 8014f96:	9b01      	ldr	r3, [sp, #4]
 8014f98:	bfb8      	it	lt
 8014f9a:	4264      	neglt	r4, r4
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	f104 0401 	add.w	r4, r4, #1
 8014fa2:	bfb8      	it	lt
 8014fa4:	425b      	neglt	r3, r3
 8014fa6:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8014faa:	db00      	blt.n	8014fae <_ZN8touchgfx6muldivElll+0x50>
 8014fac:	3001      	adds	r0, #1
 8014fae:	b002      	add	sp, #8
 8014fb0:	bd70      	pop	{r4, r5, r6, pc}
 8014fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8014fb6:	e7de      	b.n	8014f76 <_ZN8touchgfx6muldivElll+0x18>
 8014fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8014fbc:	e7e0      	b.n	8014f80 <_ZN8touchgfx6muldivElll+0x22>
 8014fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8014fc2:	e7e4      	b.n	8014f8e <_ZN8touchgfx6muldivElll+0x30>
 8014fc4:	3301      	adds	r3, #1
 8014fc6:	d1f2      	bne.n	8014fae <_ZN8touchgfx6muldivElll+0x50>
 8014fc8:	9b01      	ldr	r3, [sp, #4]
 8014fca:	2c00      	cmp	r4, #0
 8014fcc:	bfb8      	it	lt
 8014fce:	4264      	neglt	r4, r4
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	bfb8      	it	lt
 8014fd4:	425b      	neglt	r3, r3
 8014fd6:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8014fda:	bfc8      	it	gt
 8014fdc:	f100 30ff 	addgt.w	r0, r0, #4294967295
 8014fe0:	e7e5      	b.n	8014fae <_ZN8touchgfx6muldivElll+0x50>

08014fe2 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8014fe2:	2000      	movs	r0, #0
 8014fe4:	4770      	bx	lr

08014fe6 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8014fe6:	2001      	movs	r0, #1
 8014fe8:	4770      	bx	lr

08014fea <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8014fea:	2002      	movs	r0, #2
 8014fec:	4770      	bx	lr

08014fee <_ZN8touchgfx6ScreenD1Ev>:
 8014fee:	4770      	bx	lr

08014ff0 <_ZN8touchgfx12GestureEventD1Ev>:
 8014ff0:	4770      	bx	lr

08014ff2 <_ZN8touchgfx9DragEventD1Ev>:
 8014ff2:	4770      	bx	lr

08014ff4 <_ZN8touchgfx10ClickEventD1Ev>:
 8014ff4:	4770      	bx	lr

08014ff6 <_ZN8touchgfx10ClickEventD0Ev>:
 8014ff6:	b510      	push	{r4, lr}
 8014ff8:	4604      	mov	r4, r0
 8014ffa:	210c      	movs	r1, #12
 8014ffc:	f00f fccd 	bl	802499a <_ZdlPvj>
 8015000:	4620      	mov	r0, r4
 8015002:	bd10      	pop	{r4, pc}

08015004 <_ZN8touchgfx9DragEventD0Ev>:
 8015004:	b510      	push	{r4, lr}
 8015006:	4604      	mov	r4, r0
 8015008:	2110      	movs	r1, #16
 801500a:	f00f fcc6 	bl	802499a <_ZdlPvj>
 801500e:	4620      	mov	r0, r4
 8015010:	bd10      	pop	{r4, pc}

08015012 <_ZN8touchgfx12GestureEventD0Ev>:
 8015012:	b510      	push	{r4, lr}
 8015014:	4604      	mov	r4, r0
 8015016:	210c      	movs	r1, #12
 8015018:	f00f fcbf 	bl	802499a <_ZdlPvj>
 801501c:	4620      	mov	r0, r4
 801501e:	bd10      	pop	{r4, pc}

08015020 <_ZN8touchgfx6ScreenD0Ev>:
 8015020:	b510      	push	{r4, lr}
 8015022:	4604      	mov	r4, r0
 8015024:	213c      	movs	r1, #60	; 0x3c
 8015026:	f00f fcb8 	bl	802499a <_ZdlPvj>
 801502a:	4620      	mov	r0, r4
 801502c:	bd10      	pop	{r4, pc}
	...

08015030 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8015030:	b530      	push	{r4, r5, lr}
 8015032:	460d      	mov	r5, r1
 8015034:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8015036:	b087      	sub	sp, #28
 8015038:	4604      	mov	r4, r0
 801503a:	b301      	cbz	r1, 801507e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801503c:	a801      	add	r0, sp, #4
 801503e:	f7ff fe3f 	bl	8014cc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015042:	892a      	ldrh	r2, [r5, #8]
 8015044:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015048:	7928      	ldrb	r0, [r5, #4]
 801504a:	1ad2      	subs	r2, r2, r3
 801504c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801504e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8015052:	441a      	add	r2, r3
 8015054:	896b      	ldrh	r3, [r5, #10]
 8015056:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801505a:	f88d 0010 	strb.w	r0, [sp, #16]
 801505e:	1b5b      	subs	r3, r3, r5
 8015060:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8015062:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8015064:	442b      	add	r3, r5
 8015066:	4d07      	ldr	r5, [pc, #28]	; (8015084 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8015068:	f8ad 1012 	strh.w	r1, [sp, #18]
 801506c:	a903      	add	r1, sp, #12
 801506e:	9503      	str	r5, [sp, #12]
 8015070:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015074:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015078:	6803      	ldr	r3, [r0, #0]
 801507a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801507c:	4798      	blx	r3
 801507e:	b007      	add	sp, #28
 8015080:	bd30      	pop	{r4, r5, pc}
 8015082:	bf00      	nop
 8015084:	080294fc 	.word	0x080294fc

08015088 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8015088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801508c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801508e:	b08a      	sub	sp, #40	; 0x28
 8015090:	4604      	mov	r4, r0
 8015092:	460d      	mov	r5, r1
 8015094:	b113      	cbz	r3, 801509c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8015096:	790b      	ldrb	r3, [r1, #4]
 8015098:	2b00      	cmp	r3, #0
 801509a:	d044      	beq.n	8015126 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801509c:	f104 0804 	add.w	r8, r4, #4
 80150a0:	a803      	add	r0, sp, #12
 80150a2:	4641      	mov	r1, r8
 80150a4:	f7ff fe0c 	bl	8014cc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80150a8:	792b      	ldrb	r3, [r5, #4]
 80150aa:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80150ae:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80150b2:	b983      	cbnz	r3, 80150d6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 80150b4:	f104 0336 	add.w	r3, r4, #54	; 0x36
 80150b8:	892a      	ldrh	r2, [r5, #8]
 80150ba:	88e9      	ldrh	r1, [r5, #6]
 80150bc:	4640      	mov	r0, r8
 80150be:	1b92      	subs	r2, r2, r6
 80150c0:	9301      	str	r3, [sp, #4]
 80150c2:	1bc9      	subs	r1, r1, r7
 80150c4:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80150c8:	b212      	sxth	r2, r2
 80150ca:	9300      	str	r3, [sp, #0]
 80150cc:	b209      	sxth	r1, r1
 80150ce:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80150d2:	f7f8 fb3d 	bl	800d750 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80150d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80150d8:	b329      	cbz	r1, 8015126 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80150da:	a805      	add	r0, sp, #20
 80150dc:	f7ff fdf0 	bl	8014cc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80150e0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80150e4:	792b      	ldrb	r3, [r5, #4]
 80150e6:	a907      	add	r1, sp, #28
 80150e8:	1abf      	subs	r7, r7, r2
 80150ea:	88ea      	ldrh	r2, [r5, #6]
 80150ec:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80150ee:	4417      	add	r7, r2
 80150f0:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80150f2:	f88d 3020 	strb.w	r3, [sp, #32]
 80150f6:	4417      	add	r7, r2
 80150f8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80150fc:	1ab6      	subs	r6, r6, r2
 80150fe:	892a      	ldrh	r2, [r5, #8]
 8015100:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8015104:	4416      	add	r6, r2
 8015106:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8015108:	4416      	add	r6, r2
 801510a:	4a08      	ldr	r2, [pc, #32]	; (801512c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801510c:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8015110:	2600      	movs	r6, #0
 8015112:	9207      	str	r2, [sp, #28]
 8015114:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8015118:	6803      	ldr	r3, [r0, #0]
 801511a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801511c:	4798      	blx	r3
 801511e:	792b      	ldrb	r3, [r5, #4]
 8015120:	b10b      	cbz	r3, 8015126 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8015122:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8015126:	b00a      	add	sp, #40	; 0x28
 8015128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801512c:	080294d4 	.word	0x080294d4

08015130 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8015130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015134:	460c      	mov	r4, r1
 8015136:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8015138:	b088      	sub	sp, #32
 801513a:	4605      	mov	r5, r0
 801513c:	2900      	cmp	r1, #0
 801513e:	d06d      	beq.n	801521c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8015140:	4668      	mov	r0, sp
 8015142:	f7ff fdbd 	bl	8014cc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015146:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8015148:	88e3      	ldrh	r3, [r4, #6]
 801514a:	f9bd 8000 	ldrsh.w	r8, [sp]
 801514e:	440b      	add	r3, r1
 8015150:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8015154:	b21b      	sxth	r3, r3
 8015156:	4543      	cmp	r3, r8
 8015158:	db31      	blt.n	80151be <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801515a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801515e:	44c4      	add	ip, r8
 8015160:	fa0f fc8c 	sxth.w	ip, ip
 8015164:	4563      	cmp	r3, ip
 8015166:	da2a      	bge.n	80151be <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8015168:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801516a:	8926      	ldrh	r6, [r4, #8]
 801516c:	4416      	add	r6, r2
 801516e:	b236      	sxth	r6, r6
 8015170:	42be      	cmp	r6, r7
 8015172:	db24      	blt.n	80151be <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8015174:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8015178:	4438      	add	r0, r7
 801517a:	b200      	sxth	r0, r0
 801517c:	4286      	cmp	r6, r0
 801517e:	da1e      	bge.n	80151be <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8015180:	8963      	ldrh	r3, [r4, #10]
 8015182:	4419      	add	r1, r3
 8015184:	b209      	sxth	r1, r1
 8015186:	4541      	cmp	r1, r8
 8015188:	db08      	blt.n	801519c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801518a:	4561      	cmp	r1, ip
 801518c:	da06      	bge.n	801519c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801518e:	89a3      	ldrh	r3, [r4, #12]
 8015190:	441a      	add	r2, r3
 8015192:	b212      	sxth	r2, r2
 8015194:	42ba      	cmp	r2, r7
 8015196:	db01      	blt.n	801519c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8015198:	4282      	cmp	r2, r0
 801519a:	db10      	blt.n	80151be <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801519c:	4b21      	ldr	r3, [pc, #132]	; (8015224 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801519e:	a904      	add	r1, sp, #16
 80151a0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80151a2:	9304      	str	r3, [sp, #16]
 80151a4:	2302      	movs	r3, #2
 80151a6:	f88d 3014 	strb.w	r3, [sp, #20]
 80151aa:	2300      	movs	r3, #0
 80151ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80151b0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80151b4:	f8ad 301a 	strh.w	r3, [sp, #26]
 80151b8:	6803      	ldr	r3, [r0, #0]
 80151ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80151bc:	4798      	blx	r3
 80151be:	1d29      	adds	r1, r5, #4
 80151c0:	a802      	add	r0, sp, #8
 80151c2:	f7ff fd7d 	bl	8014cc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80151c6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80151ca:	88e0      	ldrh	r0, [r4, #6]
 80151cc:	eba3 0808 	sub.w	r8, r3, r8
 80151d0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80151d4:	7921      	ldrb	r1, [r4, #4]
 80151d6:	fa1f f888 	uxth.w	r8, r8
 80151da:	1bdf      	subs	r7, r3, r7
 80151dc:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80151e0:	b2bb      	uxth	r3, r7
 80151e2:	4440      	add	r0, r8
 80151e4:	8922      	ldrh	r2, [r4, #8]
 80151e6:	8967      	ldrh	r7, [r4, #10]
 80151e8:	4460      	add	r0, ip
 80151ea:	89a4      	ldrh	r4, [r4, #12]
 80151ec:	441a      	add	r2, r3
 80151ee:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80151f0:	44b8      	add	r8, r7
 80151f2:	4423      	add	r3, r4
 80151f4:	f8ad 0016 	strh.w	r0, [sp, #22]
 80151f8:	4432      	add	r2, r6
 80151fa:	44e0      	add	r8, ip
 80151fc:	4433      	add	r3, r6
 80151fe:	4c0a      	ldr	r4, [pc, #40]	; (8015228 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8015200:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8015202:	f88d 1014 	strb.w	r1, [sp, #20]
 8015206:	a904      	add	r1, sp, #16
 8015208:	9404      	str	r4, [sp, #16]
 801520a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801520e:	f8ad 801a 	strh.w	r8, [sp, #26]
 8015212:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015216:	6803      	ldr	r3, [r0, #0]
 8015218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801521a:	4798      	blx	r3
 801521c:	b008      	add	sp, #32
 801521e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015222:	bf00      	nop
 8015224:	080294d4 	.word	0x080294d4
 8015228:	080294e8 	.word	0x080294e8

0801522c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801522c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801522e:	4604      	mov	r4, r0
 8015230:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8015234:	3201      	adds	r2, #1
 8015236:	d112      	bne.n	801525e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8015238:	2500      	movs	r5, #0
 801523a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801523e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8015242:	6803      	ldr	r3, [r0, #0]
 8015244:	9500      	str	r5, [sp, #0]
 8015246:	466d      	mov	r5, sp
 8015248:	f8ad 1004 	strh.w	r1, [sp, #4]
 801524c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015250:	4629      	mov	r1, r5
 8015252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015254:	4798      	blx	r3
 8015256:	e895 0003 	ldmia.w	r5, {r0, r1}
 801525a:	e884 0003 	stmia.w	r4, {r0, r1}
 801525e:	4620      	mov	r0, r4
 8015260:	b003      	add	sp, #12
 8015262:	bd30      	pop	{r4, r5, pc}

08015264 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8015264:	b513      	push	{r0, r1, r4, lr}
 8015266:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801526a:	4604      	mov	r4, r0
 801526c:	3301      	adds	r3, #1
 801526e:	d109      	bne.n	8015284 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8015270:	4601      	mov	r1, r0
 8015272:	4668      	mov	r0, sp
 8015274:	f7ff fd24 	bl	8014cc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015278:	f8bd 3000 	ldrh.w	r3, [sp]
 801527c:	8423      	strh	r3, [r4, #32]
 801527e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015282:	8463      	strh	r3, [r4, #34]	; 0x22
 8015284:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8015288:	b002      	add	sp, #8
 801528a:	bd10      	pop	{r4, pc}

0801528c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801528c:	b513      	push	{r0, r1, r4, lr}
 801528e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8015292:	4604      	mov	r4, r0
 8015294:	3301      	adds	r3, #1
 8015296:	d109      	bne.n	80152ac <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8015298:	4601      	mov	r1, r0
 801529a:	4668      	mov	r0, sp
 801529c:	f7ff fd10 	bl	8014cc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80152a0:	f8bd 3000 	ldrh.w	r3, [sp]
 80152a4:	8423      	strh	r3, [r4, #32]
 80152a6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80152aa:	8463      	strh	r3, [r4, #34]	; 0x22
 80152ac:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80152b0:	b002      	add	sp, #8
 80152b2:	bd10      	pop	{r4, pc}

080152b4 <_ZN8touchgfx6ScreenC1Ev>:
 80152b4:	b570      	push	{r4, r5, r6, lr}
 80152b6:	4b17      	ldr	r3, [pc, #92]	; (8015314 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80152b8:	4605      	mov	r5, r0
 80152ba:	4a17      	ldr	r2, [pc, #92]	; (8015318 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80152bc:	2101      	movs	r1, #1
 80152be:	f845 3b04 	str.w	r3, [r5], #4
 80152c2:	2300      	movs	r3, #0
 80152c4:	6042      	str	r2, [r0, #4]
 80152c6:	4604      	mov	r4, r0
 80152c8:	8103      	strh	r3, [r0, #8]
 80152ca:	8143      	strh	r3, [r0, #10]
 80152cc:	8183      	strh	r3, [r0, #12]
 80152ce:	81c3      	strh	r3, [r0, #14]
 80152d0:	8203      	strh	r3, [r0, #16]
 80152d2:	8243      	strh	r3, [r0, #18]
 80152d4:	8283      	strh	r3, [r0, #20]
 80152d6:	82c3      	strh	r3, [r0, #22]
 80152d8:	6203      	str	r3, [r0, #32]
 80152da:	8483      	strh	r3, [r0, #36]	; 0x24
 80152dc:	84c3      	strh	r3, [r0, #38]	; 0x26
 80152de:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80152e2:	6343      	str	r3, [r0, #52]	; 0x34
 80152e4:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 80152e8:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80152ec:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80152f0:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 80152f4:	4b09      	ldr	r3, [pc, #36]	; (801531c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80152f6:	4628      	mov	r0, r5
 80152f8:	f9b3 6000 	ldrsh.w	r6, [r3]
 80152fc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80152fe:	4a08      	ldr	r2, [pc, #32]	; (8015320 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8015300:	f9b2 1000 	ldrsh.w	r1, [r2]
 8015304:	4798      	blx	r3
 8015306:	6863      	ldr	r3, [r4, #4]
 8015308:	4628      	mov	r0, r5
 801530a:	4631      	mov	r1, r6
 801530c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801530e:	4798      	blx	r3
 8015310:	4620      	mov	r0, r4
 8015312:	bd70      	pop	{r4, r5, r6, pc}
 8015314:	08029510 	.word	0x08029510
 8015318:	08027af8 	.word	0x08027af8
 801531c:	20020fce 	.word	0x20020fce
 8015320:	20020fcc 	.word	0x20020fcc

08015324 <_ZN8touchgfx6Screen4drawEv>:
 8015324:	4b09      	ldr	r3, [pc, #36]	; (801534c <_ZN8touchgfx6Screen4drawEv+0x28>)
 8015326:	b507      	push	{r0, r1, r2, lr}
 8015328:	f9b3 2000 	ldrsh.w	r2, [r3]
 801532c:	2100      	movs	r1, #0
 801532e:	4b08      	ldr	r3, [pc, #32]	; (8015350 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8015330:	9100      	str	r1, [sp, #0]
 8015332:	4669      	mov	r1, sp
 8015334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015338:	f8ad 2004 	strh.w	r2, [sp, #4]
 801533c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015340:	6803      	ldr	r3, [r0, #0]
 8015342:	689b      	ldr	r3, [r3, #8]
 8015344:	4798      	blx	r3
 8015346:	b003      	add	sp, #12
 8015348:	f85d fb04 	ldr.w	pc, [sp], #4
 801534c:	20020fcc 	.word	0x20020fcc
 8015350:	20020fce 	.word	0x20020fce

08015354 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8015354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015358:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801535c:	b089      	sub	sp, #36	; 0x24
 801535e:	4680      	mov	r8, r0
 8015360:	460c      	mov	r4, r1
 8015362:	2b00      	cmp	r3, #0
 8015364:	4615      	mov	r5, r2
 8015366:	dd0e      	ble.n	8015386 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8015368:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801536c:	2b00      	cmp	r3, #0
 801536e:	dd0a      	ble.n	8015386 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8015370:	4628      	mov	r0, r5
 8015372:	f7ff ff5b 	bl	801522c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8015376:	4621      	mov	r1, r4
 8015378:	f7f9 fd48 	bl	800ee0c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801537c:	69eb      	ldr	r3, [r5, #28]
 801537e:	b928      	cbnz	r0, 801538c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8015380:	461d      	mov	r5, r3
 8015382:	2b00      	cmp	r3, #0
 8015384:	d1f4      	bne.n	8015370 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8015386:	b009      	add	sp, #36	; 0x24
 8015388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801538c:	ae04      	add	r6, sp, #16
 801538e:	2b00      	cmp	r3, #0
 8015390:	f000 80b5 	beq.w	80154fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8015394:	682b      	ldr	r3, [r5, #0]
 8015396:	4629      	mov	r1, r5
 8015398:	a802      	add	r0, sp, #8
 801539a:	68db      	ldr	r3, [r3, #12]
 801539c:	4798      	blx	r3
 801539e:	4628      	mov	r0, r5
 80153a0:	f7ff ff60 	bl	8015264 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80153a4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80153a8:	4407      	add	r7, r0
 80153aa:	4628      	mov	r0, r5
 80153ac:	f7ff ff6e 	bl	801528c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80153b0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80153b4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80153b8:	b23f      	sxth	r7, r7
 80153ba:	4418      	add	r0, r3
 80153bc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80153c0:	4621      	mov	r1, r4
 80153c2:	f8ad 2014 	strh.w	r2, [sp, #20]
 80153c6:	f8ad 0012 	strh.w	r0, [sp, #18]
 80153ca:	4630      	mov	r0, r6
 80153cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80153d0:	f8ad 7010 	strh.w	r7, [sp, #16]
 80153d4:	f7f8 fa9e 	bl	800d914 <_ZN8touchgfx4RectaNERKS0_>
 80153d8:	4628      	mov	r0, r5
 80153da:	f7ff ff27 	bl	801522c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80153de:	ab06      	add	r3, sp, #24
 80153e0:	4602      	mov	r2, r0
 80153e2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80153e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80153ea:	4611      	mov	r1, r2
 80153ec:	4618      	mov	r0, r3
 80153ee:	f7f8 fa91 	bl	800d914 <_ZN8touchgfx4RectaNERKS0_>
 80153f2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80153f6:	f9b4 1000 	ldrsh.w	r1, [r4]
 80153fa:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80153fe:	4299      	cmp	r1, r3
 8015400:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8015404:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8015408:	d10b      	bne.n	8015422 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801540a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801540e:	4552      	cmp	r2, sl
 8015410:	d107      	bne.n	8015422 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8015412:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8015416:	455a      	cmp	r2, fp
 8015418:	d103      	bne.n	8015422 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801541a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801541e:	454a      	cmp	r2, r9
 8015420:	d06d      	beq.n	80154fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8015422:	f1bb 0f00 	cmp.w	fp, #0
 8015426:	dd65      	ble.n	80154f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8015428:	f1b9 0f00 	cmp.w	r9, #0
 801542c:	dd62      	ble.n	80154f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801542e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8015432:	fa1f f08a 	uxth.w	r0, sl
 8015436:	4552      	cmp	r2, sl
 8015438:	9000      	str	r0, [sp, #0]
 801543a:	da12      	bge.n	8015462 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801543c:	9301      	str	r3, [sp, #4]
 801543e:	9b00      	ldr	r3, [sp, #0]
 8015440:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8015444:	f8ad 2012 	strh.w	r2, [sp, #18]
 8015448:	1a9a      	subs	r2, r3, r2
 801544a:	f8ad 1010 	strh.w	r1, [sp, #16]
 801544e:	4631      	mov	r1, r6
 8015450:	f8ad 0014 	strh.w	r0, [sp, #20]
 8015454:	4640      	mov	r0, r8
 8015456:	f8ad 2016 	strh.w	r2, [sp, #22]
 801545a:	69ea      	ldr	r2, [r5, #28]
 801545c:	f7ff ff7a 	bl	8015354 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8015460:	9b01      	ldr	r3, [sp, #4]
 8015462:	f9b4 2000 	ldrsh.w	r2, [r4]
 8015466:	b29f      	uxth	r7, r3
 8015468:	429a      	cmp	r2, r3
 801546a:	da0d      	bge.n	8015488 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801546c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8015470:	1aba      	subs	r2, r7, r2
 8015472:	f8ad a012 	strh.w	sl, [sp, #18]
 8015476:	4631      	mov	r1, r6
 8015478:	f8ad 2014 	strh.w	r2, [sp, #20]
 801547c:	4640      	mov	r0, r8
 801547e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8015482:	69ea      	ldr	r2, [r5, #28]
 8015484:	f7ff ff66 	bl	8015354 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8015488:	8822      	ldrh	r2, [r4, #0]
 801548a:	445f      	add	r7, fp
 801548c:	88a3      	ldrh	r3, [r4, #4]
 801548e:	b2bf      	uxth	r7, r7
 8015490:	4413      	add	r3, r2
 8015492:	b23a      	sxth	r2, r7
 8015494:	b29b      	uxth	r3, r3
 8015496:	b219      	sxth	r1, r3
 8015498:	4291      	cmp	r1, r2
 801549a:	dd0d      	ble.n	80154b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801549c:	1bdb      	subs	r3, r3, r7
 801549e:	f8ad 2010 	strh.w	r2, [sp, #16]
 80154a2:	f8ad a012 	strh.w	sl, [sp, #18]
 80154a6:	4631      	mov	r1, r6
 80154a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80154ac:	4640      	mov	r0, r8
 80154ae:	f8ad 9016 	strh.w	r9, [sp, #22]
 80154b2:	69ea      	ldr	r2, [r5, #28]
 80154b4:	f7ff ff4e 	bl	8015354 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80154b8:	88e2      	ldrh	r2, [r4, #6]
 80154ba:	8863      	ldrh	r3, [r4, #2]
 80154bc:	4413      	add	r3, r2
 80154be:	9a00      	ldr	r2, [sp, #0]
 80154c0:	444a      	add	r2, r9
 80154c2:	b29b      	uxth	r3, r3
 80154c4:	fa1f f982 	uxth.w	r9, r2
 80154c8:	b219      	sxth	r1, r3
 80154ca:	fa0f f289 	sxth.w	r2, r9
 80154ce:	428a      	cmp	r2, r1
 80154d0:	da15      	bge.n	80154fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80154d2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80154d6:	eba3 0309 	sub.w	r3, r3, r9
 80154da:	f9b4 0000 	ldrsh.w	r0, [r4]
 80154de:	f8ad 1014 	strh.w	r1, [sp, #20]
 80154e2:	4631      	mov	r1, r6
 80154e4:	f8ad 0010 	strh.w	r0, [sp, #16]
 80154e8:	f8ad 2012 	strh.w	r2, [sp, #18]
 80154ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 80154f0:	69ea      	ldr	r2, [r5, #28]
 80154f2:	e001      	b.n	80154f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 80154f4:	69ea      	ldr	r2, [r5, #28]
 80154f6:	4621      	mov	r1, r4
 80154f8:	4640      	mov	r0, r8
 80154fa:	f7ff ff2b 	bl	8015354 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80154fe:	4628      	mov	r0, r5
 8015500:	f7ff fe94 	bl	801522c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8015504:	6861      	ldr	r1, [r4, #4]
 8015506:	4602      	mov	r2, r0
 8015508:	4633      	mov	r3, r6
 801550a:	6820      	ldr	r0, [r4, #0]
 801550c:	c303      	stmia	r3!, {r0, r1}
 801550e:	4611      	mov	r1, r2
 8015510:	4630      	mov	r0, r6
 8015512:	f7f8 f9ff 	bl	800d914 <_ZN8touchgfx4RectaNERKS0_>
 8015516:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801551a:	2b00      	cmp	r3, #0
 801551c:	f77f af33 	ble.w	8015386 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8015520:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8015524:	2b00      	cmp	r3, #0
 8015526:	f77f af2e 	ble.w	8015386 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801552a:	4628      	mov	r0, r5
 801552c:	f7ff fe9a 	bl	8015264 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8015530:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8015534:	1a18      	subs	r0, r3, r0
 8015536:	f8ad 0010 	strh.w	r0, [sp, #16]
 801553a:	4628      	mov	r0, r5
 801553c:	f7ff fea6 	bl	801528c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8015540:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015544:	4631      	mov	r1, r6
 8015546:	1a18      	subs	r0, r3, r0
 8015548:	f8ad 0012 	strh.w	r0, [sp, #18]
 801554c:	4628      	mov	r0, r5
 801554e:	682b      	ldr	r3, [r5, #0]
 8015550:	689b      	ldr	r3, [r3, #8]
 8015552:	4798      	blx	r3
 8015554:	e717      	b.n	8015386 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08015556 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8015556:	b570      	push	{r4, r5, r6, lr}
 8015558:	1d06      	adds	r6, r0, #4
 801555a:	b086      	sub	sp, #24
 801555c:	460c      	mov	r4, r1
 801555e:	2300      	movs	r3, #0
 8015560:	4631      	mov	r1, r6
 8015562:	4605      	mov	r5, r0
 8015564:	a802      	add	r0, sp, #8
 8015566:	9301      	str	r3, [sp, #4]
 8015568:	f7ff fbaa 	bl	8014cc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801556c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8015570:	8822      	ldrh	r2, [r4, #0]
 8015572:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8015576:	1ad2      	subs	r2, r2, r3
 8015578:	8863      	ldrh	r3, [r4, #2]
 801557a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801557e:	1a5b      	subs	r3, r3, r1
 8015580:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8015584:	f8ad 2010 	strh.w	r2, [sp, #16]
 8015588:	aa01      	add	r2, sp, #4
 801558a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801558e:	4630      	mov	r0, r6
 8015590:	f8ad 1016 	strh.w	r1, [sp, #22]
 8015594:	a904      	add	r1, sp, #16
 8015596:	f8ad 3012 	strh.w	r3, [sp, #18]
 801559a:	f7f8 fa93 	bl	800dac4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801559e:	9a01      	ldr	r2, [sp, #4]
 80155a0:	b11a      	cbz	r2, 80155aa <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 80155a2:	4621      	mov	r1, r4
 80155a4:	4628      	mov	r0, r5
 80155a6:	f7ff fed5 	bl	8015354 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80155aa:	b006      	add	sp, #24
 80155ac:	bd70      	pop	{r4, r5, r6, pc}

080155ae <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80155ae:	4602      	mov	r2, r0
 80155b0:	b530      	push	{r4, r5, lr}
 80155b2:	4604      	mov	r4, r0
 80155b4:	b085      	sub	sp, #20
 80155b6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80155ba:	460d      	mov	r5, r1
 80155bc:	466b      	mov	r3, sp
 80155be:	6851      	ldr	r1, [r2, #4]
 80155c0:	c303      	stmia	r3!, {r0, r1}
 80155c2:	4629      	mov	r1, r5
 80155c4:	4668      	mov	r0, sp
 80155c6:	f7f8 f9a5 	bl	800d914 <_ZN8touchgfx4RectaNERKS0_>
 80155ca:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80155ce:	b12b      	cbz	r3, 80155dc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 80155d0:	4669      	mov	r1, sp
 80155d2:	4620      	mov	r0, r4
 80155d4:	f7ff ffbf 	bl	8015556 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80155d8:	b005      	add	sp, #20
 80155da:	bd30      	pop	{r4, r5, pc}
 80155dc:	3404      	adds	r4, #4
 80155de:	a802      	add	r0, sp, #8
 80155e0:	4621      	mov	r1, r4
 80155e2:	f7ff fb6d 	bl	8014cc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80155e6:	f8bd 3000 	ldrh.w	r3, [sp]
 80155ea:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80155ee:	4669      	mov	r1, sp
 80155f0:	4620      	mov	r0, r4
 80155f2:	1a9b      	subs	r3, r3, r2
 80155f4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80155f8:	f8ad 3000 	strh.w	r3, [sp]
 80155fc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015600:	1a9b      	subs	r3, r3, r2
 8015602:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015606:	f7f8 fa24 	bl	800da52 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801560a:	e7e5      	b.n	80155d8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801560c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801560c:	460b      	mov	r3, r1
 801560e:	680a      	ldr	r2, [r1, #0]
 8015610:	1d01      	adds	r1, r0, #4
 8015612:	6992      	ldr	r2, [r2, #24]
 8015614:	4618      	mov	r0, r3
 8015616:	4710      	bx	r2

08015618 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 8015618:	4298      	cmp	r0, r3
 801561a:	d200      	bcs.n	801561e <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801561c:	b913      	cbnz	r3, 8015624 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801561e:	440a      	add	r2, r1
 8015620:	b210      	sxth	r0, r2
 8015622:	4770      	bx	lr
 8015624:	ee07 0a90 	vmov	s15, r0
 8015628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801562c:	ee07 3a90 	vmov	s15, r3
 8015630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015634:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015638:	ee07 2a90 	vmov	s15, r2
 801563c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015640:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8015644:	ee07 1a90 	vmov	s15, r1
 8015648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801564c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015650:	ee67 5a07 	vmul.f32	s11, s14, s14
 8015654:	eee5 6a87 	vfma.f32	s13, s11, s14
 8015658:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801565c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8015660:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015668:	bfcc      	ite	gt
 801566a:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801566e:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8015672:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015676:	ee17 3a90 	vmov	r3, s15
 801567a:	b218      	sxth	r0, r3
 801567c:	4770      	bx	lr

0801567e <_ZN8touchgfx12TextProviderC1Ev>:
 801567e:	b538      	push	{r3, r4, r5, lr}
 8015680:	2500      	movs	r5, #0
 8015682:	2302      	movs	r3, #2
 8015684:	4604      	mov	r4, r0
 8015686:	220e      	movs	r2, #14
 8015688:	7403      	strb	r3, [r0, #16]
 801568a:	4629      	mov	r1, r5
 801568c:	6145      	str	r5, [r0, #20]
 801568e:	7605      	strb	r5, [r0, #24]
 8015690:	83c5      	strh	r5, [r0, #30]
 8015692:	8405      	strh	r5, [r0, #32]
 8015694:	86c5      	strh	r5, [r0, #54]	; 0x36
 8015696:	8705      	strh	r5, [r0, #56]	; 0x38
 8015698:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801569a:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801569e:	e9c0 5500 	strd	r5, r5, [r0]
 80156a2:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 80156a6:	304c      	adds	r0, #76	; 0x4c
 80156a8:	f00f fb30 	bl	8024d0c <memset>
 80156ac:	2301      	movs	r3, #1
 80156ae:	4620      	mov	r0, r4
 80156b0:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 80156b4:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80156b8:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 80156bc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80156c0:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 80156c4:	f7ef fc5e 	bl	8004f84 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80156c8:	4620      	mov	r0, r4
 80156ca:	bd38      	pop	{r3, r4, r5, pc}

080156cc <_ZN8touchgfx12TextProvider11endOfStringEv>:
 80156cc:	b508      	push	{r3, lr}
 80156ce:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 80156d0:	b92b      	cbnz	r3, 80156de <_ZN8touchgfx12TextProvider11endOfStringEv+0x12>
 80156d2:	4b07      	ldr	r3, [pc, #28]	; (80156f0 <_ZN8touchgfx12TextProvider11endOfStringEv+0x24>)
 80156d4:	21c0      	movs	r1, #192	; 0xc0
 80156d6:	4a07      	ldr	r2, [pc, #28]	; (80156f4 <_ZN8touchgfx12TextProvider11endOfStringEv+0x28>)
 80156d8:	4807      	ldr	r0, [pc, #28]	; (80156f8 <_ZN8touchgfx12TextProvider11endOfStringEv+0x2c>)
 80156da:	f00f f98d 	bl	80249f8 <__assert_func>
 80156de:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80156e0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80156e4:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 80156e6:	fab0 f080 	clz	r0, r0
 80156ea:	0940      	lsrs	r0, r0, #5
 80156ec:	bd08      	pop	{r3, pc}
 80156ee:	bf00      	nop
 80156f0:	08027294 	.word	0x08027294
 80156f4:	0802976b 	.word	0x0802976b
 80156f8:	08027366 	.word	0x08027366

080156fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80156fc:	b530      	push	{r4, r5, lr}
 80156fe:	2500      	movs	r5, #0
 8015700:	2401      	movs	r4, #1
 8015702:	6843      	ldr	r3, [r0, #4]
 8015704:	b913      	cbnz	r3, 801570c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8015706:	6803      	ldr	r3, [r0, #0]
 8015708:	b313      	cbz	r3, 8015750 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801570a:	6043      	str	r3, [r0, #4]
 801570c:	7e03      	ldrb	r3, [r0, #24]
 801570e:	b143      	cbz	r3, 8015722 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8015710:	6943      	ldr	r3, [r0, #20]
 8015712:	b12b      	cbz	r3, 8015720 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8015714:	881a      	ldrh	r2, [r3, #0]
 8015716:	b11a      	cbz	r2, 8015720 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8015718:	1c9a      	adds	r2, r3, #2
 801571a:	6142      	str	r2, [r0, #20]
 801571c:	8818      	ldrh	r0, [r3, #0]
 801571e:	bd30      	pop	{r4, r5, pc}
 8015720:	7605      	strb	r5, [r0, #24]
 8015722:	6843      	ldr	r3, [r0, #4]
 8015724:	8819      	ldrh	r1, [r3, #0]
 8015726:	b199      	cbz	r1, 8015750 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8015728:	1c9a      	adds	r2, r3, #2
 801572a:	2902      	cmp	r1, #2
 801572c:	6042      	str	r2, [r0, #4]
 801572e:	d1f5      	bne.n	801571c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8015730:	7c03      	ldrb	r3, [r0, #16]
 8015732:	2b01      	cmp	r3, #1
 8015734:	d8e5      	bhi.n	8015702 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8015736:	1c5a      	adds	r2, r3, #1
 8015738:	3302      	adds	r3, #2
 801573a:	7402      	strb	r2, [r0, #16]
 801573c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8015740:	6143      	str	r3, [r0, #20]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d0dd      	beq.n	8015702 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8015746:	881b      	ldrh	r3, [r3, #0]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d0da      	beq.n	8015702 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801574c:	7604      	strb	r4, [r0, #24]
 801574e:	e7d8      	b.n	8015702 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8015750:	2000      	movs	r0, #0
 8015752:	e7e4      	b.n	801571e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08015754 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8015754:	6001      	str	r1, [r0, #0]
 8015756:	2100      	movs	r1, #0
 8015758:	b430      	push	{r4, r5}
 801575a:	6041      	str	r1, [r0, #4]
 801575c:	6815      	ldr	r5, [r2, #0]
 801575e:	6085      	str	r5, [r0, #8]
 8015760:	6852      	ldr	r2, [r2, #4]
 8015762:	6443      	str	r3, [r0, #68]	; 0x44
 8015764:	9b02      	ldr	r3, [sp, #8]
 8015766:	60c2      	str	r2, [r0, #12]
 8015768:	7401      	strb	r1, [r0, #16]
 801576a:	6141      	str	r1, [r0, #20]
 801576c:	7601      	strb	r1, [r0, #24]
 801576e:	8701      	strh	r1, [r0, #56]	; 0x38
 8015770:	8401      	strh	r1, [r0, #32]
 8015772:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8015776:	6483      	str	r3, [r0, #72]	; 0x48
 8015778:	bc30      	pop	{r4, r5}
 801577a:	f7ef bc03 	b.w	8004f84 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801577e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801577e:	b408      	push	{r3}
 8015780:	b510      	push	{r4, lr}
 8015782:	b085      	sub	sp, #20
 8015784:	ac07      	add	r4, sp, #28
 8015786:	f854 3b04 	ldr.w	r3, [r4], #4
 801578a:	9300      	str	r3, [sp, #0]
 801578c:	4613      	mov	r3, r2
 801578e:	4622      	mov	r2, r4
 8015790:	9403      	str	r4, [sp, #12]
 8015792:	f7ff ffdf 	bl	8015754 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015796:	b005      	add	sp, #20
 8015798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801579c:	b001      	add	sp, #4
 801579e:	4770      	bx	lr

080157a0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80157a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157a2:	4605      	mov	r5, r0
 80157a4:	4608      	mov	r0, r1
 80157a6:	b1f1      	cbz	r1, 80157e6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80157a8:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 80157ac:	460b      	mov	r3, r1
 80157ae:	f101 0708 	add.w	r7, r1, #8
 80157b2:	4622      	mov	r2, r4
 80157b4:	6818      	ldr	r0, [r3, #0]
 80157b6:	3308      	adds	r3, #8
 80157b8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80157bc:	4626      	mov	r6, r4
 80157be:	42bb      	cmp	r3, r7
 80157c0:	c603      	stmia	r6!, {r0, r1}
 80157c2:	4634      	mov	r4, r6
 80157c4:	d1f6      	bne.n	80157b4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80157c6:	6818      	ldr	r0, [r3, #0]
 80157c8:	6030      	str	r0, [r6, #0]
 80157ca:	4610      	mov	r0, r2
 80157cc:	889b      	ldrh	r3, [r3, #4]
 80157ce:	80b3      	strh	r3, [r6, #4]
 80157d0:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 80157d4:	015b      	lsls	r3, r3, #5
 80157d6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80157da:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 80157de:	430b      	orrs	r3, r1
 80157e0:	425b      	negs	r3, r3
 80157e2:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 80157e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080157e8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80157e8:	b538      	push	{r3, r4, r5, lr}
 80157ea:	460c      	mov	r4, r1
 80157ec:	6811      	ldr	r1, [r2, #0]
 80157ee:	4610      	mov	r0, r2
 80157f0:	68cd      	ldr	r5, [r1, #12]
 80157f2:	4619      	mov	r1, r3
 80157f4:	47a8      	blx	r5
 80157f6:	2800      	cmp	r0, #0
 80157f8:	bf08      	it	eq
 80157fa:	4620      	moveq	r0, r4
 80157fc:	bd38      	pop	{r3, r4, r5, pc}
	...

08015800 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8015800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015802:	4604      	mov	r4, r0
 8015804:	4615      	mov	r5, r2
 8015806:	4608      	mov	r0, r1
 8015808:	b93a      	cbnz	r2, 801581a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801580a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801580e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8015812:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8015816:	4628      	mov	r0, r5
 8015818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801581a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801581e:	8893      	ldrh	r3, [r2, #4]
 8015820:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8015824:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8015828:	79ee      	ldrb	r6, [r5, #7]
 801582a:	4316      	orrs	r6, r2
 801582c:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8015830:	189a      	adds	r2, r3, r2
 8015832:	b2b7      	uxth	r7, r6
 8015834:	b291      	uxth	r1, r2
 8015836:	291d      	cmp	r1, #29
 8015838:	f200 8084 	bhi.w	8015944 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801583c:	2201      	movs	r2, #1
 801583e:	10f6      	asrs	r6, r6, #3
 8015840:	408a      	lsls	r2, r1
 8015842:	4978      	ldr	r1, [pc, #480]	; (8015a24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 8015844:	420a      	tst	r2, r1
 8015846:	d12e      	bne.n	80158a6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8015848:	f412 7f60 	tst.w	r2, #896	; 0x380
 801584c:	d07a      	beq.n	8015944 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801584e:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8015852:	462b      	mov	r3, r5
 8015854:	f105 0e08 	add.w	lr, r5, #8
 8015858:	4615      	mov	r5, r2
 801585a:	6818      	ldr	r0, [r3, #0]
 801585c:	3308      	adds	r3, #8
 801585e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8015862:	4694      	mov	ip, r2
 8015864:	4573      	cmp	r3, lr
 8015866:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801586a:	4662      	mov	r2, ip
 801586c:	d1f5      	bne.n	801585a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801586e:	6818      	ldr	r0, [r3, #0]
 8015870:	f8cc 0000 	str.w	r0, [ip]
 8015874:	889b      	ldrh	r3, [r3, #4]
 8015876:	f8ac 3004 	strh.w	r3, [ip, #4]
 801587a:	b2b3      	uxth	r3, r6
 801587c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8015880:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8015884:	1aca      	subs	r2, r1, r3
 8015886:	1bcf      	subs	r7, r1, r7
 8015888:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801588c:	b292      	uxth	r2, r2
 801588e:	1afb      	subs	r3, r7, r3
 8015890:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8015894:	10d2      	asrs	r2, r2, #3
 8015896:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801589a:	4302      	orrs	r2, r0
 801589c:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80158a0:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80158a4:	e7b7      	b.n	8015816 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80158a6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80158a8:	b92b      	cbnz	r3, 80158b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 80158aa:	4b5f      	ldr	r3, [pc, #380]	; (8015a28 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 80158ac:	21c0      	movs	r1, #192	; 0xc0
 80158ae:	4a5f      	ldr	r2, [pc, #380]	; (8015a2c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 80158b0:	485f      	ldr	r0, [pc, #380]	; (8015a30 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 80158b2:	f00f f8a1 	bl	80249f8 <__assert_func>
 80158b6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80158b8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80158bc:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80158be:	f640 6333 	movw	r3, #3635	; 0xe33
 80158c2:	4299      	cmp	r1, r3
 80158c4:	d110      	bne.n	80158e8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 80158c6:	6803      	ldr	r3, [r0, #0]
 80158c8:	68db      	ldr	r3, [r3, #12]
 80158ca:	4798      	blx	r3
 80158cc:	7b41      	ldrb	r1, [r0, #13]
 80158ce:	00cb      	lsls	r3, r1, #3
 80158d0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80158d4:	7a03      	ldrb	r3, [r0, #8]
 80158d6:	0648      	lsls	r0, r1, #25
 80158d8:	ea43 0302 	orr.w	r3, r3, r2
 80158dc:	bf44      	itt	mi
 80158de:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80158e2:	b21b      	sxthmi	r3, r3
 80158e4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80158e8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80158ec:	462a      	mov	r2, r5
 80158ee:	f105 0c08 	add.w	ip, r5, #8
 80158f2:	443b      	add	r3, r7
 80158f4:	4433      	add	r3, r6
 80158f6:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 80158fa:	b29b      	uxth	r3, r3
 80158fc:	4635      	mov	r5, r6
 80158fe:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015902:	6810      	ldr	r0, [r2, #0]
 8015904:	3208      	adds	r2, #8
 8015906:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801590a:	4637      	mov	r7, r6
 801590c:	4562      	cmp	r2, ip
 801590e:	c703      	stmia	r7!, {r0, r1}
 8015910:	463e      	mov	r6, r7
 8015912:	d1f6      	bne.n	8015902 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8015914:	6810      	ldr	r0, [r2, #0]
 8015916:	6038      	str	r0, [r7, #0]
 8015918:	8892      	ldrh	r2, [r2, #4]
 801591a:	80ba      	strh	r2, [r7, #4]
 801591c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8015920:	10db      	asrs	r3, r3, #3
 8015922:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8015926:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801592a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801592e:	4313      	orrs	r3, r2
 8015930:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8015934:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8015938:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801593c:	1a9b      	subs	r3, r3, r2
 801593e:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8015942:	e768      	b.n	8015816 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8015944:	f023 0204 	bic.w	r2, r3, #4
 8015948:	f640 611b 	movw	r1, #3611	; 0xe1b
 801594c:	428a      	cmp	r2, r1
 801594e:	d003      	beq.n	8015958 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 8015950:	f640 621d 	movw	r2, #3613	; 0xe1d
 8015954:	4293      	cmp	r3, r2
 8015956:	d120      	bne.n	801599a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 8015958:	3b01      	subs	r3, #1
 801595a:	4602      	mov	r2, r0
 801595c:	4629      	mov	r1, r5
 801595e:	4620      	mov	r0, r4
 8015960:	b29b      	uxth	r3, r3
 8015962:	f7ff ff41 	bl	80157e8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8015966:	7b41      	ldrb	r1, [r0, #13]
 8015968:	00cb      	lsls	r3, r1, #3
 801596a:	0649      	lsls	r1, r1, #25
 801596c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015970:	7a03      	ldrb	r3, [r0, #8]
 8015972:	ea43 0302 	orr.w	r3, r3, r2
 8015976:	bf44      	itt	mi
 8015978:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801597c:	b21b      	sxthmi	r3, r3
 801597e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015982:	7b6b      	ldrb	r3, [r5, #13]
 8015984:	7aaa      	ldrb	r2, [r5, #10]
 8015986:	005b      	lsls	r3, r3, #1
 8015988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801598c:	4313      	orrs	r3, r2
 801598e:	115a      	asrs	r2, r3, #5
 8015990:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8015994:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8015998:	e035      	b.n	8015a06 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801599a:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801599e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80159a2:	f402 7180 	and.w	r1, r2, #256	; 0x100
 80159a6:	7a2a      	ldrb	r2, [r5, #8]
 80159a8:	ea42 0201 	orr.w	r2, r2, r1
 80159ac:	f640 6109 	movw	r1, #3593	; 0xe09
 80159b0:	bf1c      	itt	ne
 80159b2:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 80159b6:	b212      	sxthne	r2, r2
 80159b8:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80159bc:	f023 0210 	bic.w	r2, r3, #16
 80159c0:	428a      	cmp	r2, r1
 80159c2:	d003      	beq.n	80159cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 80159c4:	f640 6213 	movw	r2, #3603	; 0xe13
 80159c8:	4293      	cmp	r3, r2
 80159ca:	d129      	bne.n	8015a20 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 80159cc:	7b6e      	ldrb	r6, [r5, #13]
 80159ce:	4629      	mov	r1, r5
 80159d0:	0076      	lsls	r6, r6, #1
 80159d2:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80159d6:	7aae      	ldrb	r6, [r5, #10]
 80159d8:	4316      	orrs	r6, r2
 80159da:	f640 6213 	movw	r2, #3603	; 0xe13
 80159de:	4293      	cmp	r3, r2
 80159e0:	4602      	mov	r2, r0
 80159e2:	4620      	mov	r0, r4
 80159e4:	bf16      	itet	ne
 80159e6:	f103 33ff 	addne.w	r3, r3, #4294967295
 80159ea:	f640 630c 	movweq	r3, #3596	; 0xe0c
 80159ee:	b29b      	uxthne	r3, r3
 80159f0:	f7ff fefa 	bl	80157e8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80159f4:	7b43      	ldrb	r3, [r0, #13]
 80159f6:	7a82      	ldrb	r2, [r0, #10]
 80159f8:	005b      	lsls	r3, r3, #1
 80159fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80159fe:	4313      	orrs	r3, r2
 8015a00:	1af6      	subs	r6, r6, r3
 8015a02:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8015a06:	7b69      	ldrb	r1, [r5, #13]
 8015a08:	00cb      	lsls	r3, r1, #3
 8015a0a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015a0e:	7a2b      	ldrb	r3, [r5, #8]
 8015a10:	4313      	orrs	r3, r2
 8015a12:	064a      	lsls	r2, r1, #25
 8015a14:	bf44      	itt	mi
 8015a16:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015a1a:	b21b      	sxthmi	r3, r3
 8015a1c:	1bdb      	subs	r3, r3, r7
 8015a1e:	e73f      	b.n	80158a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8015a20:	2300      	movs	r3, #0
 8015a22:	e7b7      	b.n	8015994 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 8015a24:	3fc00079 	.word	0x3fc00079
 8015a28:	08027294 	.word	0x08027294
 8015a2c:	0802976b 	.word	0x0802976b
 8015a30:	08027366 	.word	0x08027366

08015a34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8015a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a38:	4604      	mov	r4, r0
 8015a3a:	b942      	cbnz	r2, 8015a4e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8015a3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015a40:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8015a44:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8015a48:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8015a4c:	e046      	b.n	8015adc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8015a4e:	7b51      	ldrb	r1, [r2, #13]
 8015a50:	8893      	ldrh	r3, [r2, #4]
 8015a52:	010f      	lsls	r7, r1, #4
 8015a54:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8015a58:	79d7      	ldrb	r7, [r2, #7]
 8015a5a:	4307      	orrs	r7, r0
 8015a5c:	2f04      	cmp	r7, #4
 8015a5e:	b2bd      	uxth	r5, r7
 8015a60:	bfcc      	ite	gt
 8015a62:	08bf      	lsrgt	r7, r7, #2
 8015a64:	2701      	movle	r7, #1
 8015a66:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8015a6a:	f200 80ab 	bhi.w	8015bc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 8015a6e:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8015a72:	4283      	cmp	r3, r0
 8015a74:	d216      	bcs.n	8015aa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8015a76:	f240 605b 	movw	r0, #1627	; 0x65b
 8015a7a:	4283      	cmp	r3, r0
 8015a7c:	d859      	bhi.n	8015b32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 8015a7e:	f240 6057 	movw	r0, #1623	; 0x657
 8015a82:	4283      	cmp	r3, r0
 8015a84:	d20e      	bcs.n	8015aa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8015a86:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8015a8a:	d24a      	bcs.n	8015b22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 8015a8c:	f240 604e 	movw	r0, #1614	; 0x64e
 8015a90:	4283      	cmp	r3, r0
 8015a92:	d207      	bcs.n	8015aa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8015a94:	f240 601a 	movw	r0, #1562	; 0x61a
 8015a98:	4283      	cmp	r3, r0
 8015a9a:	d02a      	beq.n	8015af2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8015a9c:	d821      	bhi.n	8015ae2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 8015a9e:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8015aa2:	d35b      	bcc.n	8015b5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8015aa4:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8015aa8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8015aac:	f040 80d0 	bne.w	8015c50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8015ab0:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8015ab4:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8015ab8:	f040 80ca 	bne.w	8015c50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8015abc:	00cb      	lsls	r3, r1, #3
 8015abe:	0649      	lsls	r1, r1, #25
 8015ac0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8015ac4:	7a13      	ldrb	r3, [r2, #8]
 8015ac6:	ea43 0300 	orr.w	r3, r3, r0
 8015aca:	bf44      	itt	mi
 8015acc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015ad0:	b21b      	sxthmi	r3, r3
 8015ad2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015ad6:	1b5d      	subs	r5, r3, r5
 8015ad8:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8015adc:	4610      	mov	r0, r2
 8015ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ae2:	f240 604b 	movw	r0, #1611	; 0x64b
 8015ae6:	4283      	cmp	r3, r0
 8015ae8:	d338      	bcc.n	8015b5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8015aea:	f240 604c 	movw	r0, #1612	; 0x64c
 8015aee:	4283      	cmp	r3, r0
 8015af0:	d9d8      	bls.n	8015aa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8015af2:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8015af6:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8015afa:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8015afe:	f040 80f2 	bne.w	8015ce6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8015b02:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8015b06:	f040 80ee 	bne.w	8015ce6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8015b0a:	00cb      	lsls	r3, r1, #3
 8015b0c:	064e      	lsls	r6, r1, #25
 8015b0e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8015b12:	7a13      	ldrb	r3, [r2, #8]
 8015b14:	ea43 0300 	orr.w	r3, r3, r0
 8015b18:	bf44      	itt	mi
 8015b1a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015b1e:	b21b      	sxthmi	r3, r3
 8015b20:	e7d9      	b.n	8015ad6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8015b22:	f240 6054 	movw	r0, #1620	; 0x654
 8015b26:	4283      	cmp	r3, r0
 8015b28:	d8e3      	bhi.n	8015af2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8015b2a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8015b2e:	d9e0      	bls.n	8015af2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8015b30:	e7b8      	b.n	8015aa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8015b32:	f240 6074 	movw	r0, #1652	; 0x674
 8015b36:	4283      	cmp	r3, r0
 8015b38:	d0b4      	beq.n	8015aa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8015b3a:	d82d      	bhi.n	8015b98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 8015b3c:	f240 605e 	movw	r0, #1630	; 0x65e
 8015b40:	4283      	cmp	r3, r0
 8015b42:	d804      	bhi.n	8015b4e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 8015b44:	f240 605d 	movw	r0, #1629	; 0x65d
 8015b48:	4283      	cmp	r3, r0
 8015b4a:	d3d2      	bcc.n	8015af2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8015b4c:	e7aa      	b.n	8015aa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8015b4e:	f240 605f 	movw	r0, #1631	; 0x65f
 8015b52:	4283      	cmp	r3, r0
 8015b54:	d0cd      	beq.n	8015af2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8015b56:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8015b5a:	d0a3      	beq.n	8015aa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8015b5c:	00cb      	lsls	r3, r1, #3
 8015b5e:	0649      	lsls	r1, r1, #25
 8015b60:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8015b64:	7a13      	ldrb	r3, [r2, #8]
 8015b66:	ea43 0300 	orr.w	r3, r3, r0
 8015b6a:	bf44      	itt	mi
 8015b6c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015b70:	b21b      	sxthmi	r3, r3
 8015b72:	1b5d      	subs	r5, r3, r5
 8015b74:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015b78:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8015b7c:	7b53      	ldrb	r3, [r2, #13]
 8015b7e:	015b      	lsls	r3, r3, #5
 8015b80:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8015b84:	7993      	ldrb	r3, [r2, #6]
 8015b86:	430b      	orrs	r3, r1
 8015b88:	2105      	movs	r1, #5
 8015b8a:	005b      	lsls	r3, r3, #1
 8015b8c:	fb93 f3f1 	sdiv	r3, r3, r1
 8015b90:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8015b94:	440b      	add	r3, r1
 8015b96:	e757      	b.n	8015a48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8015b98:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8015b9c:	4283      	cmp	r3, r0
 8015b9e:	d809      	bhi.n	8015bb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 8015ba0:	f240 60df 	movw	r0, #1759	; 0x6df
 8015ba4:	4283      	cmp	r3, r0
 8015ba6:	f4bf af7d 	bcs.w	8015aa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8015baa:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8015bae:	2b05      	cmp	r3, #5
 8015bb0:	d8d4      	bhi.n	8015b5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8015bb2:	e777      	b.n	8015aa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8015bb4:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8015bb8:	4283      	cmp	r3, r0
 8015bba:	d09a      	beq.n	8015af2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8015bbc:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8015bc0:	4283      	cmp	r3, r0
 8015bc2:	e7ca      	b.n	8015b5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8015bc4:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8015bc8:	d22b      	bcs.n	8015c22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 8015bca:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8015bce:	4283      	cmp	r3, r0
 8015bd0:	d28f      	bcs.n	8015af2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8015bd2:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8015bd6:	4283      	cmp	r3, r0
 8015bd8:	d816      	bhi.n	8015c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 8015bda:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8015bde:	4283      	cmp	r3, r0
 8015be0:	f4bf af60 	bcs.w	8015aa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8015be4:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8015be8:	4283      	cmp	r3, r0
 8015bea:	d80a      	bhi.n	8015c02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 8015bec:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8015bf0:	4283      	cmp	r3, r0
 8015bf2:	f4bf af57 	bcs.w	8015aa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8015bf6:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8015bfa:	4283      	cmp	r3, r0
 8015bfc:	f43f af79 	beq.w	8015af2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8015c00:	e7ac      	b.n	8015b5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8015c02:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8015c06:	e7f8      	b.n	8015bfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8015c08:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8015c0c:	4283      	cmp	r3, r0
 8015c0e:	d802      	bhi.n	8015c16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8015c10:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8015c14:	e798      	b.n	8015b48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 8015c16:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8015c1a:	4283      	cmp	r3, r0
 8015c1c:	f47f af42 	bne.w	8015aa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8015c20:	e767      	b.n	8015af2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8015c22:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8015c26:	4283      	cmp	r3, r0
 8015c28:	f43f af63 	beq.w	8015af2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8015c2c:	d802      	bhi.n	8015c34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 8015c2e:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8015c32:	e7f2      	b.n	8015c1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 8015c34:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8015c38:	4283      	cmp	r3, r0
 8015c3a:	d805      	bhi.n	8015c48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 8015c3c:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8015c40:	4283      	cmp	r3, r0
 8015c42:	f4ff af2f 	bcc.w	8015aa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8015c46:	e754      	b.n	8015af2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8015c48:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8015c4c:	4283      	cmp	r3, r0
 8015c4e:	e7af      	b.n	8015bb0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 8015c50:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8015c54:	4617      	mov	r7, r2
 8015c56:	f102 0808 	add.w	r8, r2, #8
 8015c5a:	4666      	mov	r6, ip
 8015c5c:	6838      	ldr	r0, [r7, #0]
 8015c5e:	3708      	adds	r7, #8
 8015c60:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8015c64:	46e6      	mov	lr, ip
 8015c66:	4547      	cmp	r7, r8
 8015c68:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8015c6c:	46f4      	mov	ip, lr
 8015c6e:	d1f5      	bne.n	8015c5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 8015c70:	6838      	ldr	r0, [r7, #0]
 8015c72:	f8ce 0000 	str.w	r0, [lr]
 8015c76:	88b9      	ldrh	r1, [r7, #4]
 8015c78:	f8ae 1004 	strh.w	r1, [lr, #4]
 8015c7c:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8015c80:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8015c84:	d009      	beq.n	8015c9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8015c86:	7b51      	ldrb	r1, [r2, #13]
 8015c88:	7992      	ldrb	r2, [r2, #6]
 8015c8a:	0149      	lsls	r1, r1, #5
 8015c8c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8015c90:	4311      	orrs	r1, r2
 8015c92:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8015c96:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8015c9a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8015c9e:	d00d      	beq.n	8015cbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 8015ca0:	442b      	add	r3, r5
 8015ca2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8015ca6:	b29b      	uxth	r3, r3
 8015ca8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8015cac:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8015cb0:	10db      	asrs	r3, r3, #3
 8015cb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015cb6:	4313      	orrs	r3, r2
 8015cb8:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8015cbc:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8015cc0:	00cb      	lsls	r3, r1, #3
 8015cc2:	064f      	lsls	r7, r1, #25
 8015cc4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015cc8:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8015ccc:	ea43 0302 	orr.w	r3, r3, r2
 8015cd0:	bf44      	itt	mi
 8015cd2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015cd6:	b21b      	sxthmi	r3, r3
 8015cd8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015cdc:	1b5d      	subs	r5, r3, r5
 8015cde:	4632      	mov	r2, r6
 8015ce0:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8015ce4:	e6fa      	b.n	8015adc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8015ce6:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 8015cea:	4694      	mov	ip, r2
 8015cec:	f102 0908 	add.w	r9, r2, #8
 8015cf0:	4676      	mov	r6, lr
 8015cf2:	f8dc 0000 	ldr.w	r0, [ip]
 8015cf6:	f10c 0c08 	add.w	ip, ip, #8
 8015cfa:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 8015cfe:	46f0      	mov	r8, lr
 8015d00:	45cc      	cmp	ip, r9
 8015d02:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8015d06:	46c6      	mov	lr, r8
 8015d08:	d1f3      	bne.n	8015cf2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 8015d0a:	f8dc 0000 	ldr.w	r0, [ip]
 8015d0e:	f8c8 0000 	str.w	r0, [r8]
 8015d12:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8015d16:	f8a8 1004 	strh.w	r1, [r8, #4]
 8015d1a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8015d1e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8015d22:	d009      	beq.n	8015d38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 8015d24:	7b51      	ldrb	r1, [r2, #13]
 8015d26:	7992      	ldrb	r2, [r2, #6]
 8015d28:	0149      	lsls	r1, r1, #5
 8015d2a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8015d2e:	4311      	orrs	r1, r2
 8015d30:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8015d34:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8015d38:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8015d3c:	d00d      	beq.n	8015d5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 8015d3e:	1bdb      	subs	r3, r3, r7
 8015d40:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8015d44:	b29b      	uxth	r3, r3
 8015d46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8015d4a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8015d4e:	10db      	asrs	r3, r3, #3
 8015d50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015d54:	4313      	orrs	r3, r2
 8015d56:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8015d5a:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8015d5e:	00cb      	lsls	r3, r1, #3
 8015d60:	0648      	lsls	r0, r1, #25
 8015d62:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015d66:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8015d6a:	ea43 0302 	orr.w	r3, r3, r2
 8015d6e:	bf44      	itt	mi
 8015d70:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015d74:	b21b      	sxthmi	r3, r3
 8015d76:	e7b1      	b.n	8015cdc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

08015d78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8015d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d7c:	461e      	mov	r6, r3
 8015d7e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8015d80:	4604      	mov	r4, r0
 8015d82:	4617      	mov	r7, r2
 8015d84:	b92b      	cbnz	r3, 8015d92 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 8015d86:	4b25      	ldr	r3, [pc, #148]	; (8015e1c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 8015d88:	21c0      	movs	r1, #192	; 0xc0
 8015d8a:	4a25      	ldr	r2, [pc, #148]	; (8015e20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 8015d8c:	4825      	ldr	r0, [pc, #148]	; (8015e24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 8015d8e:	f00e fe33 	bl	80249f8 <__assert_func>
 8015d92:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8015d94:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8015d98:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8015d9c:	f7ef f8b0 	bl	8004f00 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015da0:	4605      	mov	r5, r0
 8015da2:	b918      	cbnz	r0, 8015dac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 8015da4:	6030      	str	r0, [r6, #0]
 8015da6:	4628      	mov	r0, r5
 8015da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dac:	683b      	ldr	r3, [r7, #0]
 8015dae:	4601      	mov	r1, r0
 8015db0:	4638      	mov	r0, r7
 8015db2:	68db      	ldr	r3, [r3, #12]
 8015db4:	4798      	blx	r3
 8015db6:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8015dba:	4602      	mov	r2, r0
 8015dbc:	6030      	str	r0, [r6, #0]
 8015dbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015dc2:	d213      	bcs.n	8015dec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 8015dc4:	4643      	mov	r3, r8
 8015dc6:	4639      	mov	r1, r7
 8015dc8:	4620      	mov	r0, r4
 8015dca:	f7ff fe33 	bl	8015a34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8015dce:	6030      	str	r0, [r6, #0]
 8015dd0:	6833      	ldr	r3, [r6, #0]
 8015dd2:	b143      	cbz	r3, 8015de6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 8015dd4:	7b5a      	ldrb	r2, [r3, #13]
 8015dd6:	7a9b      	ldrb	r3, [r3, #10]
 8015dd8:	0052      	lsls	r2, r2, #1
 8015dda:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8015dde:	4313      	orrs	r3, r2
 8015de0:	bf0c      	ite	eq
 8015de2:	2301      	moveq	r3, #1
 8015de4:	2300      	movne	r3, #0
 8015de6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8015dea:	e7dc      	b.n	8015da6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 8015dec:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8015df0:	b29b      	uxth	r3, r3
 8015df2:	2b7f      	cmp	r3, #127	; 0x7f
 8015df4:	d804      	bhi.n	8015e00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 8015df6:	4639      	mov	r1, r7
 8015df8:	4620      	mov	r0, r4
 8015dfa:	f7ff fd01 	bl	8015800 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8015dfe:	e7e6      	b.n	8015dce <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8015e00:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d0e3      	beq.n	8015dd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8015e08:	f640 1302 	movw	r3, #2306	; 0x902
 8015e0c:	429d      	cmp	r5, r3
 8015e0e:	d1df      	bne.n	8015dd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8015e10:	4601      	mov	r1, r0
 8015e12:	4620      	mov	r0, r4
 8015e14:	f7ff fcc4 	bl	80157a0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8015e18:	e7d9      	b.n	8015dce <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8015e1a:	bf00      	nop
 8015e1c:	08027294 	.word	0x08027294
 8015e20:	0802976b 	.word	0x0802976b
 8015e24:	08027366 	.word	0x08027366

08015e28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8015e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e2c:	461e      	mov	r6, r3
 8015e2e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8015e30:	4604      	mov	r4, r0
 8015e32:	4617      	mov	r7, r2
 8015e34:	b92b      	cbnz	r3, 8015e42 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 8015e36:	4b26      	ldr	r3, [pc, #152]	; (8015ed0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 8015e38:	21c0      	movs	r1, #192	; 0xc0
 8015e3a:	4a26      	ldr	r2, [pc, #152]	; (8015ed4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 8015e3c:	4826      	ldr	r0, [pc, #152]	; (8015ed8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 8015e3e:	f00e fddb 	bl	80249f8 <__assert_func>
 8015e42:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8015e44:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8015e48:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8015e4c:	f7ef f858 	bl	8004f00 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015e50:	4605      	mov	r5, r0
 8015e52:	b918      	cbnz	r0, 8015e5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 8015e54:	6030      	str	r0, [r6, #0]
 8015e56:	4628      	mov	r0, r5
 8015e58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015e5c:	683b      	ldr	r3, [r7, #0]
 8015e5e:	4601      	mov	r1, r0
 8015e60:	4638      	mov	r0, r7
 8015e62:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8015e66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015e6a:	47c8      	blx	r9
 8015e6c:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8015e70:	4602      	mov	r2, r0
 8015e72:	6030      	str	r0, [r6, #0]
 8015e74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015e78:	d213      	bcs.n	8015ea2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 8015e7a:	4643      	mov	r3, r8
 8015e7c:	4639      	mov	r1, r7
 8015e7e:	4620      	mov	r0, r4
 8015e80:	f7ff fdd8 	bl	8015a34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8015e84:	6030      	str	r0, [r6, #0]
 8015e86:	6833      	ldr	r3, [r6, #0]
 8015e88:	b143      	cbz	r3, 8015e9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 8015e8a:	7b5a      	ldrb	r2, [r3, #13]
 8015e8c:	7a9b      	ldrb	r3, [r3, #10]
 8015e8e:	0052      	lsls	r2, r2, #1
 8015e90:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8015e94:	4313      	orrs	r3, r2
 8015e96:	bf0c      	ite	eq
 8015e98:	2301      	moveq	r3, #1
 8015e9a:	2300      	movne	r3, #0
 8015e9c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8015ea0:	e7d9      	b.n	8015e56 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 8015ea2:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8015ea6:	b29b      	uxth	r3, r3
 8015ea8:	2b7f      	cmp	r3, #127	; 0x7f
 8015eaa:	d804      	bhi.n	8015eb6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 8015eac:	4639      	mov	r1, r7
 8015eae:	4620      	mov	r0, r4
 8015eb0:	f7ff fca6 	bl	8015800 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8015eb4:	e7e6      	b.n	8015e84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8015eb6:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d0e3      	beq.n	8015e86 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8015ebe:	f640 1302 	movw	r3, #2306	; 0x902
 8015ec2:	429d      	cmp	r5, r3
 8015ec4:	d1df      	bne.n	8015e86 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8015ec6:	4601      	mov	r1, r0
 8015ec8:	4620      	mov	r0, r4
 8015eca:	f7ff fc69 	bl	80157a0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8015ece:	e7d9      	b.n	8015e84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8015ed0:	08027294 	.word	0x08027294
 8015ed4:	0802976b 	.word	0x0802976b
 8015ed8:	08027366 	.word	0x08027366

08015edc <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8015edc:	b510      	push	{r4, lr}
 8015ede:	4604      	mov	r4, r0
 8015ee0:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8015ee4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8015ee6:	b9d9      	cbnz	r1, 8015f20 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 8015ee8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8015eea:	2b0a      	cmp	r3, #10
 8015eec:	d037      	beq.n	8015f5e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 8015eee:	4620      	mov	r0, r4
 8015ef0:	f7ff fc04 	bl	80156fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8015ef4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8015ef6:	2b09      	cmp	r3, #9
 8015ef8:	d906      	bls.n	8015f08 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 8015efa:	4b19      	ldr	r3, [pc, #100]	; (8015f60 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 8015efc:	f44f 7182 	mov.w	r1, #260	; 0x104
 8015f00:	4a18      	ldr	r2, [pc, #96]	; (8015f64 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 8015f02:	4819      	ldr	r0, [pc, #100]	; (8015f68 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 8015f04:	f00e fd78 	bl	80249f8 <__assert_func>
 8015f08:	1c5a      	adds	r2, r3, #1
 8015f0a:	8722      	strh	r2, [r4, #56]	; 0x38
 8015f0c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8015f0e:	4413      	add	r3, r2
 8015f10:	b29b      	uxth	r3, r3
 8015f12:	2b09      	cmp	r3, #9
 8015f14:	bf88      	it	hi
 8015f16:	3b0a      	subhi	r3, #10
 8015f18:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8015f1c:	8458      	strh	r0, [r3, #34]	; 0x22
 8015f1e:	e7e3      	b.n	8015ee8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 8015f20:	2b0a      	cmp	r3, #10
 8015f22:	d01c      	beq.n	8015f5e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 8015f24:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8015f26:	3901      	subs	r1, #1
 8015f28:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8015f2c:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8015f2e:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8015f32:	1c51      	adds	r1, r2, #1
 8015f34:	b289      	uxth	r1, r1
 8015f36:	2901      	cmp	r1, #1
 8015f38:	bf8a      	itet	hi
 8015f3a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8015f3e:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8015f40:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8015f42:	2b09      	cmp	r3, #9
 8015f44:	d8d9      	bhi.n	8015efa <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 8015f46:	1c5a      	adds	r2, r3, #1
 8015f48:	8722      	strh	r2, [r4, #56]	; 0x38
 8015f4a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8015f4c:	4413      	add	r3, r2
 8015f4e:	b29b      	uxth	r3, r3
 8015f50:	2b09      	cmp	r3, #9
 8015f52:	bf88      	it	hi
 8015f54:	3b0a      	subhi	r3, #10
 8015f56:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8015f5a:	8458      	strh	r0, [r3, #34]	; 0x22
 8015f5c:	e7c0      	b.n	8015ee0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8015f5e:	bd10      	pop	{r4, pc}
 8015f60:	0802953c 	.word	0x0802953c
 8015f64:	080298c1 	.word	0x080298c1
 8015f68:	08027366 	.word	0x08027366

08015f6c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8015f6c:	b538      	push	{r3, r4, r5, lr}
 8015f6e:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8015f70:	4604      	mov	r4, r0
 8015f72:	b92a      	cbnz	r2, 8015f80 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8015f74:	4b13      	ldr	r3, [pc, #76]	; (8015fc4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8015f76:	21d5      	movs	r1, #213	; 0xd5
 8015f78:	4a13      	ldr	r2, [pc, #76]	; (8015fc8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8015f7a:	4814      	ldr	r0, [pc, #80]	; (8015fcc <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 8015f7c:	f00e fd3c 	bl	80249f8 <__assert_func>
 8015f80:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8015f82:	3a01      	subs	r2, #1
 8015f84:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8015f88:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 8015f8a:	8702      	strh	r2, [r0, #56]	; 0x38
 8015f8c:	1c5a      	adds	r2, r3, #1
 8015f8e:	b292      	uxth	r2, r2
 8015f90:	2a09      	cmp	r2, #9
 8015f92:	bf8a      	itet	hi
 8015f94:	3b09      	subhi	r3, #9
 8015f96:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8015f98:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8015f9a:	f7ff ff9f 	bl	8015edc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8015f9e:	8c23      	ldrh	r3, [r4, #32]
 8015fa0:	2b01      	cmp	r3, #1
 8015fa2:	bf9c      	itt	ls
 8015fa4:	3301      	addls	r3, #1
 8015fa6:	8423      	strhls	r3, [r4, #32]
 8015fa8:	8be3      	ldrh	r3, [r4, #30]
 8015faa:	b90b      	cbnz	r3, 8015fb0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 8015fac:	2302      	movs	r3, #2
 8015fae:	83e3      	strh	r3, [r4, #30]
 8015fb0:	8be3      	ldrh	r3, [r4, #30]
 8015fb2:	4628      	mov	r0, r5
 8015fb4:	3b01      	subs	r3, #1
 8015fb6:	b29b      	uxth	r3, r3
 8015fb8:	83e3      	strh	r3, [r4, #30]
 8015fba:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8015fbe:	8365      	strh	r5, [r4, #26]
 8015fc0:	bd38      	pop	{r3, r4, r5, pc}
 8015fc2:	bf00      	nop
 8015fc4:	08027294 	.word	0x08027294
 8015fc8:	08029816 	.word	0x08029816
 8015fcc:	08027366 	.word	0x08027366

08015fd0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8015fd0:	428a      	cmp	r2, r1
 8015fd2:	b538      	push	{r3, r4, r5, lr}
 8015fd4:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8015fd6:	d90c      	bls.n	8015ff2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8015fd8:	b92c      	cbnz	r4, 8015fe6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 8015fda:	4b1c      	ldr	r3, [pc, #112]	; (801604c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 8015fdc:	21e1      	movs	r1, #225	; 0xe1
 8015fde:	4a1c      	ldr	r2, [pc, #112]	; (8016050 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8015fe0:	481c      	ldr	r0, [pc, #112]	; (8016054 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 8015fe2:	f00e fd09 	bl	80249f8 <__assert_func>
 8015fe6:	3c01      	subs	r4, #1
 8015fe8:	4b1b      	ldr	r3, [pc, #108]	; (8016058 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 8015fea:	4a1c      	ldr	r2, [pc, #112]	; (801605c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 8015fec:	21c5      	movs	r1, #197	; 0xc5
 8015fee:	8704      	strh	r4, [r0, #56]	; 0x38
 8015ff0:	e7f6      	b.n	8015fe0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8015ff2:	428c      	cmp	r4, r1
 8015ff4:	d203      	bcs.n	8015ffe <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 8015ff6:	4b1a      	ldr	r3, [pc, #104]	; (8016060 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 8015ff8:	21cb      	movs	r1, #203	; 0xcb
 8015ffa:	4a1a      	ldr	r2, [pc, #104]	; (8016064 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 8015ffc:	e7f0      	b.n	8015fe0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8015ffe:	1a64      	subs	r4, r4, r1
 8016000:	250a      	movs	r5, #10
 8016002:	8704      	strh	r4, [r0, #56]	; 0x38
 8016004:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 8016006:	4421      	add	r1, r4
 8016008:	b289      	uxth	r1, r1
 801600a:	2909      	cmp	r1, #9
 801600c:	bf88      	it	hi
 801600e:	390a      	subhi	r1, #10
 8016010:	86c1      	strh	r1, [r0, #54]	; 0x36
 8016012:	b1ba      	cbz	r2, 8016044 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8016014:	3a01      	subs	r2, #1
 8016016:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8016018:	b292      	uxth	r2, r2
 801601a:	2909      	cmp	r1, #9
 801601c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8016020:	d903      	bls.n	801602a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8016022:	4b11      	ldr	r3, [pc, #68]	; (8016068 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8016024:	21e6      	movs	r1, #230	; 0xe6
 8016026:	4a11      	ldr	r2, [pc, #68]	; (801606c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 8016028:	e7da      	b.n	8015fe0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801602a:	3101      	adds	r1, #1
 801602c:	8701      	strh	r1, [r0, #56]	; 0x38
 801602e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8016030:	b901      	cbnz	r1, 8016034 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8016032:	86c5      	strh	r5, [r0, #54]	; 0x36
 8016034:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8016036:	3901      	subs	r1, #1
 8016038:	b289      	uxth	r1, r1
 801603a:	86c1      	strh	r1, [r0, #54]	; 0x36
 801603c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8016040:	844c      	strh	r4, [r1, #34]	; 0x22
 8016042:	e7e6      	b.n	8016012 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8016044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016048:	f7ff bf48 	b.w	8015edc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801604c:	08027294 	.word	0x08027294
 8016050:	080295ef 	.word	0x080295ef
 8016054:	08027366 	.word	0x08027366
 8016058:	08027392 	.word	0x08027392
 801605c:	08029699 	.word	0x08029699
 8016060:	08029548 	.word	0x08029548
 8016064:	08029970 	.word	0x08029970
 8016068:	08029554 	.word	0x08029554
 801606c:	08029567 	.word	0x08029567

08016070 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8016070:	3a01      	subs	r2, #1
 8016072:	b570      	push	{r4, r5, r6, lr}
 8016074:	b292      	uxth	r2, r2
 8016076:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801607a:	42b2      	cmp	r2, r6
 801607c:	d019      	beq.n	80160b2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801607e:	8c04      	ldrh	r4, [r0, #32]
 8016080:	f831 5b02 	ldrh.w	r5, [r1], #2
 8016084:	4294      	cmp	r4, r2
 8016086:	d805      	bhi.n	8016094 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 8016088:	4b19      	ldr	r3, [pc, #100]	; (80160f0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801608a:	4a1a      	ldr	r2, [pc, #104]	; (80160f4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801608c:	21c5      	movs	r1, #197	; 0xc5
 801608e:	481a      	ldr	r0, [pc, #104]	; (80160f8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 8016090:	f00e fcb2 	bl	80249f8 <__assert_func>
 8016094:	8bc4      	ldrh	r4, [r0, #30]
 8016096:	4414      	add	r4, r2
 8016098:	3a01      	subs	r2, #1
 801609a:	b2a4      	uxth	r4, r4
 801609c:	b292      	uxth	r2, r2
 801609e:	2c01      	cmp	r4, #1
 80160a0:	bf88      	it	hi
 80160a2:	3c02      	subhi	r4, #2
 80160a4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80160a8:	8b64      	ldrh	r4, [r4, #26]
 80160aa:	42ac      	cmp	r4, r5
 80160ac:	d0e5      	beq.n	801607a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 80160ae:	2000      	movs	r0, #0
 80160b0:	bd70      	pop	{r4, r5, r6, pc}
 80160b2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80160b6:	2400      	movs	r4, #0
 80160b8:	4413      	add	r3, r2
 80160ba:	b2a2      	uxth	r2, r4
 80160bc:	429a      	cmp	r2, r3
 80160be:	da14      	bge.n	80160ea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 80160c0:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 80160c2:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80160c6:	4296      	cmp	r6, r2
 80160c8:	d802      	bhi.n	80160d0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 80160ca:	4b09      	ldr	r3, [pc, #36]	; (80160f0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 80160cc:	4a0b      	ldr	r2, [pc, #44]	; (80160fc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 80160ce:	e7dd      	b.n	801608c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 80160d0:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 80160d2:	3401      	adds	r4, #1
 80160d4:	4432      	add	r2, r6
 80160d6:	b292      	uxth	r2, r2
 80160d8:	2a09      	cmp	r2, #9
 80160da:	bf88      	it	hi
 80160dc:	3a0a      	subhi	r2, #10
 80160de:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80160e2:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80160e4:	42aa      	cmp	r2, r5
 80160e6:	d0e8      	beq.n	80160ba <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 80160e8:	e7e1      	b.n	80160ae <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 80160ea:	2001      	movs	r0, #1
 80160ec:	e7e0      	b.n	80160b0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 80160ee:	bf00      	nop
 80160f0:	08027392 	.word	0x08027392
 80160f4:	080299f4 	.word	0x080299f4
 80160f8:	08027366 	.word	0x08027366
 80160fc:	08029699 	.word	0x08029699

08016100 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8016100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016104:	4605      	mov	r5, r0
 8016106:	4616      	mov	r6, r2
 8016108:	1c8c      	adds	r4, r1, #2
 801610a:	8809      	ldrh	r1, [r1, #0]
 801610c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8016110:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8016114:	42b3      	cmp	r3, r6
 8016116:	d124      	bne.n	8016162 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8016118:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801611c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8016120:	f001 070f 	and.w	r7, r1, #15
 8016124:	4652      	mov	r2, sl
 8016126:	f8cd 8000 	str.w	r8, [sp]
 801612a:	464b      	mov	r3, r9
 801612c:	4621      	mov	r1, r4
 801612e:	4628      	mov	r0, r5
 8016130:	f7ff ff9e 	bl	8016070 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8016134:	4683      	mov	fp, r0
 8016136:	b168      	cbz	r0, 8016154 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8016138:	eb0a 0109 	add.w	r1, sl, r9
 801613c:	463a      	mov	r2, r7
 801613e:	4628      	mov	r0, r5
 8016140:	4441      	add	r1, r8
 8016142:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8016146:	4649      	mov	r1, r9
 8016148:	f7ff ff42 	bl	8015fd0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801614c:	4658      	mov	r0, fp
 801614e:	b003      	add	sp, #12
 8016150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016154:	eb07 010a 	add.w	r1, r7, sl
 8016158:	4449      	add	r1, r9
 801615a:	4441      	add	r1, r8
 801615c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8016160:	e7d2      	b.n	8016108 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8016162:	f04f 0b00 	mov.w	fp, #0
 8016166:	e7f1      	b.n	801614c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08016168 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8016168:	b570      	push	{r4, r5, r6, lr}
 801616a:	8810      	ldrh	r0, [r2, #0]
 801616c:	4298      	cmp	r0, r3
 801616e:	d817      	bhi.n	80161a0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8016170:	1e48      	subs	r0, r1, #1
 8016172:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8016176:	4298      	cmp	r0, r3
 8016178:	d312      	bcc.n	80161a0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801617a:	2400      	movs	r4, #0
 801617c:	428c      	cmp	r4, r1
 801617e:	d20f      	bcs.n	80161a0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8016180:	1860      	adds	r0, r4, r1
 8016182:	1040      	asrs	r0, r0, #1
 8016184:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8016188:	0085      	lsls	r5, r0, #2
 801618a:	42b3      	cmp	r3, r6
 801618c:	d902      	bls.n	8016194 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801618e:	3001      	adds	r0, #1
 8016190:	b284      	uxth	r4, r0
 8016192:	e7f3      	b.n	801617c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8016194:	d201      	bcs.n	801619a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8016196:	b281      	uxth	r1, r0
 8016198:	e7f0      	b.n	801617c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801619a:	442a      	add	r2, r5
 801619c:	8850      	ldrh	r0, [r2, #2]
 801619e:	bd70      	pop	{r4, r5, r6, pc}
 80161a0:	2000      	movs	r0, #0
 80161a2:	e7fc      	b.n	801619e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080161a4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80161a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161a8:	6c45      	ldr	r5, [r0, #68]	; 0x44
 80161aa:	4604      	mov	r4, r0
 80161ac:	260b      	movs	r6, #11
 80161ae:	886f      	ldrh	r7, [r5, #2]
 80161b0:	087f      	lsrs	r7, r7, #1
 80161b2:	3e01      	subs	r6, #1
 80161b4:	d01b      	beq.n	80161ee <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 80161b6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80161b8:	b92b      	cbnz	r3, 80161c6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 80161ba:	4b0e      	ldr	r3, [pc, #56]	; (80161f4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 80161bc:	21c0      	movs	r1, #192	; 0xc0
 80161be:	4a0e      	ldr	r2, [pc, #56]	; (80161f8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 80161c0:	480e      	ldr	r0, [pc, #56]	; (80161fc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 80161c2:	f00e fc19 	bl	80249f8 <__assert_func>
 80161c6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80161c8:	462a      	mov	r2, r5
 80161ca:	4639      	mov	r1, r7
 80161cc:	4620      	mov	r0, r4
 80161ce:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80161d2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80161d6:	4643      	mov	r3, r8
 80161d8:	f7ff ffc6 	bl	8016168 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80161dc:	b138      	cbz	r0, 80161ee <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 80161de:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80161e2:	4642      	mov	r2, r8
 80161e4:	4620      	mov	r0, r4
 80161e6:	f7ff ff8b 	bl	8016100 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80161ea:	2800      	cmp	r0, #0
 80161ec:	d1e1      	bne.n	80161b2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80161ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161f2:	bf00      	nop
 80161f4:	08027294 	.word	0x08027294
 80161f8:	0802976b 	.word	0x0802976b
 80161fc:	08027366 	.word	0x08027366

08016200 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8016200:	b570      	push	{r4, r5, r6, lr}
 8016202:	694a      	ldr	r2, [r1, #20]
 8016204:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8016206:	684b      	ldr	r3, [r1, #4]
 8016208:	1b54      	subs	r4, r2, r5
 801620a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801620c:	f000 8106 	beq.w	801641c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8016210:	1b9b      	subs	r3, r3, r6
 8016212:	d003      	beq.n	801621c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8016214:	4363      	muls	r3, r4
 8016216:	2210      	movs	r2, #16
 8016218:	fb93 f3f2 	sdiv	r3, r3, r2
 801621c:	680c      	ldr	r4, [r1, #0]
 801621e:	698a      	ldr	r2, [r1, #24]
 8016220:	1b65      	subs	r5, r4, r5
 8016222:	f000 80fd 	beq.w	8016420 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8016226:	1b92      	subs	r2, r2, r6
 8016228:	d003      	beq.n	8016232 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801622a:	436a      	muls	r2, r5
 801622c:	2410      	movs	r4, #16
 801622e:	fb92 f2f4 	sdiv	r2, r2, r4
 8016232:	1a9b      	subs	r3, r3, r2
 8016234:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801645c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8016238:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801623c:	460a      	mov	r2, r1
 801623e:	ee07 3a90 	vmov	s15, r3
 8016242:	f100 040c 	add.w	r4, r0, #12
 8016246:	4603      	mov	r3, r0
 8016248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801624c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8016250:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8016254:	eeb1 6a43 	vneg.f32	s12, s6
 8016258:	edd2 7a02 	vldr	s15, [r2, #8]
 801625c:	3214      	adds	r2, #20
 801625e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8016262:	ece3 6a01 	vstmia	r3!, {s13}
 8016266:	429c      	cmp	r4, r3
 8016268:	ed52 7a02 	vldr	s15, [r2, #-8]
 801626c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016270:	edc3 7a02 	vstr	s15, [r3, #8]
 8016274:	ed52 7a01 	vldr	s15, [r2, #-4]
 8016278:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801627c:	edc3 7a05 	vstr	s15, [r3, #20]
 8016280:	d1ea      	bne.n	8016258 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8016282:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8016284:	698b      	ldr	r3, [r1, #24]
 8016286:	edd0 4a02 	vldr	s9, [r0, #8]
 801628a:	1a9b      	subs	r3, r3, r2
 801628c:	edd0 3a00 	vldr	s7, [r0]
 8016290:	edd0 6a01 	vldr	s13, [r0, #4]
 8016294:	ee07 3a90 	vmov	s15, r3
 8016298:	684b      	ldr	r3, [r1, #4]
 801629a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801629e:	ed90 5a05 	vldr	s10, [r0, #20]
 80162a2:	1a9b      	subs	r3, r3, r2
 80162a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80162a8:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80162ac:	ed90 2a03 	vldr	s4, [r0, #12]
 80162b0:	ee07 3a10 	vmov	s14, r3
 80162b4:	edd0 5a04 	vldr	s11, [r0, #16]
 80162b8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80162bc:	ed90 1a07 	vldr	s2, [r0, #28]
 80162c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80162c4:	edd0 2a06 	vldr	s5, [r0, #24]
 80162c8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80162cc:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80162d0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80162d4:	ee32 5a45 	vsub.f32	s10, s4, s10
 80162d8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80162dc:	ee67 7a83 	vmul.f32	s15, s15, s6
 80162e0:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 80162e4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80162e6:	694a      	ldr	r2, [r1, #20]
 80162e8:	1b13      	subs	r3, r2, r4
 80162ea:	ee07 3a10 	vmov	s14, r3
 80162ee:	680b      	ldr	r3, [r1, #0]
 80162f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80162f4:	1b1b      	subs	r3, r3, r4
 80162f6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80162fa:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 80162fe:	ee07 3a10 	vmov	s14, r3
 8016302:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016306:	ee27 7a04 	vmul.f32	s14, s14, s8
 801630a:	eee6 4a87 	vfma.f32	s9, s13, s14
 801630e:	ee64 4a86 	vmul.f32	s9, s9, s12
 8016312:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8016316:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8016318:	698b      	ldr	r3, [r1, #24]
 801631a:	1a9b      	subs	r3, r3, r2
 801631c:	ee06 3a90 	vmov	s13, r3
 8016320:	684b      	ldr	r3, [r1, #4]
 8016322:	1a9b      	subs	r3, r3, r2
 8016324:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016328:	ee07 3a10 	vmov	s14, r3
 801632c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8016330:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016334:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8016338:	ee27 7a04 	vmul.f32	s14, s14, s8
 801633c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8016340:	ee66 6a83 	vmul.f32	s13, s13, s6
 8016344:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8016348:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801634a:	694a      	ldr	r2, [r1, #20]
 801634c:	1b13      	subs	r3, r2, r4
 801634e:	ee07 3a10 	vmov	s14, r3
 8016352:	680b      	ldr	r3, [r1, #0]
 8016354:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016358:	1b1b      	subs	r3, r3, r4
 801635a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801635e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8016362:	ee07 3a10 	vmov	s14, r3
 8016366:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801636a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801636e:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016372:	edd0 5a08 	vldr	s11, [r0, #32]
 8016376:	ee31 1a65 	vsub.f32	s2, s2, s11
 801637a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801637e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8016382:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8016386:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8016388:	698b      	ldr	r3, [r1, #24]
 801638a:	1a9b      	subs	r3, r3, r2
 801638c:	ee07 3a10 	vmov	s14, r3
 8016390:	684b      	ldr	r3, [r1, #4]
 8016392:	1a9b      	subs	r3, r3, r2
 8016394:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016398:	ee01 3a90 	vmov	s3, r3
 801639c:	ee27 7a04 	vmul.f32	s14, s14, s8
 80163a0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80163a4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80163a8:	ee61 1a84 	vmul.f32	s3, s3, s8
 80163ac:	eea1 7a21 	vfma.f32	s14, s2, s3
 80163b0:	ee27 7a03 	vmul.f32	s14, s14, s6
 80163b4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80163b8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80163ba:	694a      	ldr	r2, [r1, #20]
 80163bc:	1b13      	subs	r3, r2, r4
 80163be:	ee03 3a10 	vmov	s6, r3
 80163c2:	680b      	ldr	r3, [r1, #0]
 80163c4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80163c8:	1b1b      	subs	r3, r3, r4
 80163ca:	ee23 3a04 	vmul.f32	s6, s6, s8
 80163ce:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80163d2:	ee03 3a10 	vmov	s6, r3
 80163d6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80163da:	ee23 4a04 	vmul.f32	s8, s6, s8
 80163de:	eee1 5a04 	vfma.f32	s11, s2, s8
 80163e2:	ee25 6a86 	vmul.f32	s12, s11, s12
 80163e6:	ee62 5a67 	vnmul.f32	s11, s4, s15
 80163ea:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 80163ee:	eee3 5aa6 	vfma.f32	s11, s7, s13
 80163f2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80163f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163fa:	dd13      	ble.n	8016424 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 80163fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016400:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8016404:	63c3      	str	r3, [r0, #60]	; 0x3c
 8016406:	eee3 7a87 	vfma.f32	s15, s7, s14
 801640a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801640e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016412:	dd15      	ble.n	8016440 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8016414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016418:	6403      	str	r3, [r0, #64]	; 0x40
 801641a:	bd70      	pop	{r4, r5, r6, pc}
 801641c:	4623      	mov	r3, r4
 801641e:	e6fd      	b.n	801621c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8016420:	462a      	mov	r2, r5
 8016422:	e706      	b.n	8016232 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8016424:	d502      	bpl.n	801642c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8016426:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801642a:	e7e9      	b.n	8016400 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801642c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8016430:	eea3 2a85 	vfma.f32	s4, s7, s10
 8016434:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8016438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801643c:	dade      	bge.n	80163fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801643e:	e7f2      	b.n	8016426 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8016440:	d502      	bpl.n	8016448 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8016442:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016446:	e7e7      	b.n	8016418 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8016448:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801644c:	eee3 4a86 	vfma.f32	s9, s7, s12
 8016450:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8016454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016458:	dadc      	bge.n	8016414 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801645a:	e7f2      	b.n	8016442 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801645c:	3d800000 	.word	0x3d800000

08016460 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8016460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016464:	2714      	movs	r7, #20
 8016466:	435f      	muls	r7, r3
 8016468:	eb02 0c07 	add.w	ip, r2, r7
 801646c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8016470:	f115 0e0f 	adds.w	lr, r5, #15
 8016474:	d433      	bmi.n	80164de <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x7e>
 8016476:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801647a:	9c08      	ldr	r4, [sp, #32]
 801647c:	2614      	movs	r6, #20
 801647e:	f8c0 e014 	str.w	lr, [r0, #20]
 8016482:	4366      	muls	r6, r4
 8016484:	eb02 0806 	add.w	r8, r2, r6
 8016488:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801648c:	f115 040f 	adds.w	r4, r5, #15
 8016490:	d431      	bmi.n	80164f6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x96>
 8016492:	1124      	asrs	r4, r4, #4
 8016494:	eba4 040e 	sub.w	r4, r4, lr
 8016498:	6184      	str	r4, [r0, #24]
 801649a:	2c00      	cmp	r4, #0
 801649c:	f000 80aa 	beq.w	80165f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x194>
 80164a0:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80164a4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80164a8:	5995      	ldr	r5, [r2, r6]
 80164aa:	eba4 0809 	sub.w	r8, r4, r9
 80164ae:	59d4      	ldr	r4, [r2, r7]
 80164b0:	eba5 0a04 	sub.w	sl, r5, r4
 80164b4:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80164b8:	ea4f 150a 	mov.w	r5, sl, lsl #4
 80164bc:	2e00      	cmp	r6, #0
 80164be:	fb0e fe05 	mul.w	lr, lr, r5
 80164c2:	fb0a ee19 	mls	lr, sl, r9, lr
 80164c6:	fb08 e404 	mla	r4, r8, r4, lr
 80164ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80164ce:	4434      	add	r4, r6
 80164d0:	dc1d      	bgt.n	801650e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xae>
 80164d2:	4b5b      	ldr	r3, [pc, #364]	; (8016640 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1e0>)
 80164d4:	21f7      	movs	r1, #247	; 0xf7
 80164d6:	4a5b      	ldr	r2, [pc, #364]	; (8016644 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1e4>)
 80164d8:	485b      	ldr	r0, [pc, #364]	; (8016648 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1e8>)
 80164da:	f00e fa8d 	bl	80249f8 <__assert_func>
 80164de:	2410      	movs	r4, #16
 80164e0:	f1c5 0501 	rsb	r5, r5, #1
 80164e4:	fb9e fef4 	sdiv	lr, lr, r4
 80164e8:	f015 050f 	ands.w	r5, r5, #15
 80164ec:	bf18      	it	ne
 80164ee:	2501      	movne	r5, #1
 80164f0:	ebae 0e05 	sub.w	lr, lr, r5
 80164f4:	e7c1      	b.n	801647a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1a>
 80164f6:	f04f 0910 	mov.w	r9, #16
 80164fa:	f1c5 0501 	rsb	r5, r5, #1
 80164fe:	fb94 f4f9 	sdiv	r4, r4, r9
 8016502:	f015 050f 	ands.w	r5, r5, #15
 8016506:	bf18      	it	ne
 8016508:	2501      	movne	r5, #1
 801650a:	1b64      	subs	r4, r4, r5
 801650c:	e7c2      	b.n	8016494 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x34>
 801650e:	2c00      	cmp	r4, #0
 8016510:	db72      	blt.n	80165f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x198>
 8016512:	fb94 fef6 	sdiv	lr, r4, r6
 8016516:	fb06 441e 	mls	r4, r6, lr, r4
 801651a:	f8c0 e000 	str.w	lr, [r0]
 801651e:	6104      	str	r4, [r0, #16]
 8016520:	2d00      	cmp	r5, #0
 8016522:	db7b      	blt.n	801661c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1bc>
 8016524:	fb95 f4f6 	sdiv	r4, r5, r6
 8016528:	fb06 5514 	mls	r5, r6, r4, r5
 801652c:	6044      	str	r4, [r0, #4]
 801652e:	6085      	str	r5, [r0, #8]
 8016530:	60c6      	str	r6, [r0, #12]
 8016532:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8016536:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801653a:	6945      	ldr	r5, [r0, #20]
 801653c:	59d2      	ldr	r2, [r2, r7]
 801653e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8016542:	eddf 6a42 	vldr	s13, [pc, #264]	; 801664c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1ec>
 8016546:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801654a:	ee07 4a10 	vmov	s14, r4
 801654e:	6804      	ldr	r4, [r0, #0]
 8016550:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8016554:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016558:	ee07 2a90 	vmov	s15, r2
 801655c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016564:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016568:	edd3 6a00 	vldr	s13, [r3]
 801656c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016570:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8016574:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016578:	edc0 6a07 	vstr	s13, [r0, #28]
 801657c:	edd0 6a01 	vldr	s13, [r0, #4]
 8016580:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8016584:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016588:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801658c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8016590:	ed80 6a08 	vstr	s12, [r0, #32]
 8016594:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8016596:	6242      	str	r2, [r0, #36]	; 0x24
 8016598:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801659c:	ed93 6a03 	vldr	s12, [r3, #12]
 80165a0:	eea5 6a87 	vfma.f32	s12, s11, s14
 80165a4:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 80165a8:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80165ac:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 80165b0:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 80165b4:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 80165b8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80165bc:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 80165c0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80165c2:	6302      	str	r2, [r0, #48]	; 0x30
 80165c4:	ed93 6a06 	vldr	s12, [r3, #24]
 80165c8:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 80165cc:	eea5 6a87 	vfma.f32	s12, s11, s14
 80165d0:	eeb0 7a46 	vmov.f32	s14, s12
 80165d4:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 80165d8:	eea6 7a27 	vfma.f32	s14, s12, s15
 80165dc:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80165e0:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 80165e4:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 80165e8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80165ec:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 80165f0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80165f2:	63c3      	str	r3, [r0, #60]	; 0x3c
 80165f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165f8:	4264      	negs	r4, r4
 80165fa:	fb94 fef6 	sdiv	lr, r4, r6
 80165fe:	f1ce 0800 	rsb	r8, lr, #0
 8016602:	fb06 441e 	mls	r4, r6, lr, r4
 8016606:	f8c0 8000 	str.w	r8, [r0]
 801660a:	6104      	str	r4, [r0, #16]
 801660c:	2c00      	cmp	r4, #0
 801660e:	d087      	beq.n	8016520 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xc0>
 8016610:	ea6f 0e0e 	mvn.w	lr, lr
 8016614:	1b34      	subs	r4, r6, r4
 8016616:	f8c0 e000 	str.w	lr, [r0]
 801661a:	e780      	b.n	801651e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xbe>
 801661c:	426d      	negs	r5, r5
 801661e:	fb95 f4f6 	sdiv	r4, r5, r6
 8016622:	f1c4 0e00 	rsb	lr, r4, #0
 8016626:	fb06 5514 	mls	r5, r6, r4, r5
 801662a:	f8c0 e004 	str.w	lr, [r0, #4]
 801662e:	6085      	str	r5, [r0, #8]
 8016630:	2d00      	cmp	r5, #0
 8016632:	f43f af7d 	beq.w	8016530 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xd0>
 8016636:	43e4      	mvns	r4, r4
 8016638:	1b75      	subs	r5, r6, r5
 801663a:	6044      	str	r4, [r0, #4]
 801663c:	e777      	b.n	801652e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xce>
 801663e:	bf00      	nop
 8016640:	08029ac5 	.word	0x08029ac5
 8016644:	08029b04 	.word	0x08029b04
 8016648:	08029ad5 	.word	0x08029ad5
 801664c:	3d800000 	.word	0x3d800000

08016650 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8016650:	4602      	mov	r2, r0
 8016652:	b148      	cbz	r0, 8016668 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8016654:	2300      	movs	r3, #0
 8016656:	b298      	uxth	r0, r3
 8016658:	3301      	adds	r3, #1
 801665a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801665e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8016662:	2900      	cmp	r1, #0
 8016664:	d1f7      	bne.n	8016656 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8016666:	4770      	bx	lr
 8016668:	4770      	bx	lr

0801666a <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801666a:	b530      	push	{r4, r5, lr}
 801666c:	4604      	mov	r4, r0
 801666e:	b159      	cbz	r1, 8016688 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8016670:	b148      	cbz	r0, 8016686 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8016672:	2300      	movs	r3, #0
 8016674:	b298      	uxth	r0, r3
 8016676:	4282      	cmp	r2, r0
 8016678:	d905      	bls.n	8016686 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801667a:	5ccd      	ldrb	r5, [r1, r3]
 801667c:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8016680:	3301      	adds	r3, #1
 8016682:	2d00      	cmp	r5, #0
 8016684:	d1f6      	bne.n	8016674 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8016686:	bd30      	pop	{r4, r5, pc}
 8016688:	4608      	mov	r0, r1
 801668a:	e7fc      	b.n	8016686 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801668c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801668c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801668e:	468c      	mov	ip, r1
 8016690:	b08b      	sub	sp, #44	; 0x2c
 8016692:	2100      	movs	r1, #0
 8016694:	ae01      	add	r6, sp, #4
 8016696:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801669a:	211f      	movs	r1, #31
 801669c:	fbb0 f7f3 	udiv	r7, r0, r3
 80166a0:	fb03 0517 	mls	r5, r3, r7, r0
 80166a4:	4638      	mov	r0, r7
 80166a6:	b2ec      	uxtb	r4, r5
 80166a8:	2d09      	cmp	r5, #9
 80166aa:	bfd4      	ite	le
 80166ac:	3430      	addle	r4, #48	; 0x30
 80166ae:	3457      	addgt	r4, #87	; 0x57
 80166b0:	b2e4      	uxtb	r4, r4
 80166b2:	558c      	strb	r4, [r1, r6]
 80166b4:	1e4c      	subs	r4, r1, #1
 80166b6:	b92f      	cbnz	r7, 80166c4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 80166b8:	4431      	add	r1, r6
 80166ba:	4660      	mov	r0, ip
 80166bc:	f7ff ffd5 	bl	801666a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80166c0:	b00b      	add	sp, #44	; 0x2c
 80166c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166c4:	4621      	mov	r1, r4
 80166c6:	e7e9      	b.n	801669c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

080166c8 <_ZN8touchgfx7Unicode4itoaElPtti>:
 80166c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166ca:	4607      	mov	r7, r0
 80166cc:	b08b      	sub	sp, #44	; 0x2c
 80166ce:	4608      	mov	r0, r1
 80166d0:	b341      	cbz	r1, 8016724 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 80166d2:	1e99      	subs	r1, r3, #2
 80166d4:	2922      	cmp	r1, #34	; 0x22
 80166d6:	d825      	bhi.n	8016724 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 80166d8:	2100      	movs	r1, #0
 80166da:	463c      	mov	r4, r7
 80166dc:	261f      	movs	r6, #31
 80166de:	f10d 0c04 	add.w	ip, sp, #4
 80166e2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80166e6:	1e71      	subs	r1, r6, #1
 80166e8:	fb94 fef3 	sdiv	lr, r4, r3
 80166ec:	fb03 441e 	mls	r4, r3, lr, r4
 80166f0:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 80166f4:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 80166f8:	b2ec      	uxtb	r4, r5
 80166fa:	2d09      	cmp	r5, #9
 80166fc:	bfd4      	ite	le
 80166fe:	3430      	addle	r4, #48	; 0x30
 8016700:	3457      	addgt	r4, #87	; 0x57
 8016702:	b2e4      	uxtb	r4, r4
 8016704:	f80c 4006 	strb.w	r4, [ip, r6]
 8016708:	4674      	mov	r4, lr
 801670a:	b96c      	cbnz	r4, 8016728 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801670c:	2f00      	cmp	r7, #0
 801670e:	da05      	bge.n	801671c <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8016710:	ab0a      	add	r3, sp, #40	; 0x28
 8016712:	4419      	add	r1, r3
 8016714:	232d      	movs	r3, #45	; 0x2d
 8016716:	f801 3c24 	strb.w	r3, [r1, #-36]
 801671a:	1eb1      	subs	r1, r6, #2
 801671c:	3101      	adds	r1, #1
 801671e:	4461      	add	r1, ip
 8016720:	f7ff ffa3 	bl	801666a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8016724:	b00b      	add	sp, #44	; 0x2c
 8016726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016728:	460e      	mov	r6, r1
 801672a:	e7dc      	b.n	80166e6 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801672c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801672c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016730:	b085      	sub	sp, #20
 8016732:	4691      	mov	r9, r2
 8016734:	6802      	ldr	r2, [r0, #0]
 8016736:	4688      	mov	r8, r1
 8016738:	461c      	mov	r4, r3
 801673a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801673e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8016742:	4683      	mov	fp, r0
 8016744:	4610      	mov	r0, r2
 8016746:	9103      	str	r1, [sp, #12]
 8016748:	9302      	str	r3, [sp, #8]
 801674a:	9201      	str	r2, [sp, #4]
 801674c:	f7ff ff80 	bl	8016650 <_ZN8touchgfx7Unicode6strlenEPKt>
 8016750:	f1b8 0f00 	cmp.w	r8, #0
 8016754:	bf0c      	ite	eq
 8016756:	4684      	moveq	ip, r0
 8016758:	f100 0c01 	addne.w	ip, r0, #1
 801675c:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8016760:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8016764:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8016766:	fa1f fc8c 	uxth.w	ip, ip
 801676a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801676c:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8016770:	9903      	ldr	r1, [sp, #12]
 8016772:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8016776:	d041      	beq.n	80167fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8016778:	d834      	bhi.n	80167e4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801677a:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801677e:	d059      	beq.n	8016834 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8016780:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8016784:	d03a      	beq.n	80167fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8016786:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801678a:	d034      	beq.n	80167f6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801678c:	2400      	movs	r4, #0
 801678e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8016792:	3a01      	subs	r2, #1
 8016794:	b169      	cbz	r1, 80167b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8016796:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016798:	458c      	cmp	ip, r1
 801679a:	da09      	bge.n	80167b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801679c:	eba1 010c 	sub.w	r1, r1, ip
 80167a0:	b289      	uxth	r1, r1
 80167a2:	b933      	cbnz	r3, 80167b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80167a4:	2e00      	cmp	r6, #0
 80167a6:	d051      	beq.n	801684c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 80167a8:	2800      	cmp	r0, #0
 80167aa:	d04f      	beq.n	801684c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 80167ac:	440c      	add	r4, r1
 80167ae:	b2a4      	uxth	r4, r4
 80167b0:	2100      	movs	r1, #0
 80167b2:	682b      	ldr	r3, [r5, #0]
 80167b4:	4293      	cmp	r3, r2
 80167b6:	da07      	bge.n	80167c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 80167b8:	f1b8 0f00 	cmp.w	r8, #0
 80167bc:	d004      	beq.n	80167c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 80167be:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 80167c2:	682b      	ldr	r3, [r5, #0]
 80167c4:	3301      	adds	r3, #1
 80167c6:	602b      	str	r3, [r5, #0]
 80167c8:	2730      	movs	r7, #48	; 0x30
 80167ca:	2c00      	cmp	r4, #0
 80167cc:	d04e      	beq.n	801686c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80167ce:	682e      	ldr	r6, [r5, #0]
 80167d0:	3c01      	subs	r4, #1
 80167d2:	42b2      	cmp	r2, r6
 80167d4:	b2a4      	uxth	r4, r4
 80167d6:	dd49      	ble.n	801686c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80167d8:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 80167dc:	682b      	ldr	r3, [r5, #0]
 80167de:	3301      	adds	r3, #1
 80167e0:	602b      	str	r3, [r5, #0]
 80167e2:	e7f2      	b.n	80167ca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 80167e4:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 80167e8:	d01d      	beq.n	8016826 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 80167ea:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 80167ee:	d002      	beq.n	80167f6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 80167f0:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 80167f4:	e7c9      	b.n	801678a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 80167f6:	4684      	mov	ip, r0
 80167f8:	f04f 0800 	mov.w	r8, #0
 80167fc:	2c00      	cmp	r4, #0
 80167fe:	d0c6      	beq.n	801678e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8016800:	b947      	cbnz	r7, 8016814 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8016802:	2801      	cmp	r0, #1
 8016804:	d106      	bne.n	8016814 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8016806:	8814      	ldrh	r4, [r2, #0]
 8016808:	2c30      	cmp	r4, #48	; 0x30
 801680a:	bf02      	ittt	eq
 801680c:	3202      	addeq	r2, #2
 801680e:	4638      	moveq	r0, r7
 8016810:	f8cb 2000 	streq.w	r2, [fp]
 8016814:	45bc      	cmp	ip, r7
 8016816:	da14      	bge.n	8016842 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8016818:	b2bf      	uxth	r7, r7
 801681a:	eba7 040c 	sub.w	r4, r7, ip
 801681e:	46bc      	mov	ip, r7
 8016820:	b2a4      	uxth	r4, r4
 8016822:	2600      	movs	r6, #0
 8016824:	e7b3      	b.n	801678e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8016826:	4684      	mov	ip, r0
 8016828:	b16c      	cbz	r4, 8016846 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801682a:	42b8      	cmp	r0, r7
 801682c:	dd00      	ble.n	8016830 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801682e:	b2b8      	uxth	r0, r7
 8016830:	2400      	movs	r4, #0
 8016832:	e003      	b.n	801683c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8016834:	f04f 0c01 	mov.w	ip, #1
 8016838:	2400      	movs	r4, #0
 801683a:	4660      	mov	r0, ip
 801683c:	4626      	mov	r6, r4
 801683e:	46a0      	mov	r8, r4
 8016840:	e7a5      	b.n	801678e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8016842:	2400      	movs	r4, #0
 8016844:	e7ed      	b.n	8016822 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8016846:	4626      	mov	r6, r4
 8016848:	46a0      	mov	r8, r4
 801684a:	e7a0      	b.n	801678e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801684c:	2900      	cmp	r1, #0
 801684e:	d0b0      	beq.n	80167b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8016850:	2720      	movs	r7, #32
 8016852:	682e      	ldr	r6, [r5, #0]
 8016854:	2900      	cmp	r1, #0
 8016856:	d0ac      	beq.n	80167b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8016858:	3901      	subs	r1, #1
 801685a:	4296      	cmp	r6, r2
 801685c:	b289      	uxth	r1, r1
 801685e:	daa7      	bge.n	80167b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8016860:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8016864:	682b      	ldr	r3, [r5, #0]
 8016866:	3301      	adds	r3, #1
 8016868:	602b      	str	r3, [r5, #0]
 801686a:	e7f2      	b.n	8016852 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801686c:	b188      	cbz	r0, 8016892 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801686e:	682b      	ldr	r3, [r5, #0]
 8016870:	3801      	subs	r0, #1
 8016872:	429a      	cmp	r2, r3
 8016874:	b280      	uxth	r0, r0
 8016876:	dd0c      	ble.n	8016892 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8016878:	f8db 3000 	ldr.w	r3, [fp]
 801687c:	1c9c      	adds	r4, r3, #2
 801687e:	f8cb 4000 	str.w	r4, [fp]
 8016882:	881c      	ldrh	r4, [r3, #0]
 8016884:	682b      	ldr	r3, [r5, #0]
 8016886:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801688a:	682b      	ldr	r3, [r5, #0]
 801688c:	3301      	adds	r3, #1
 801688e:	602b      	str	r3, [r5, #0]
 8016890:	e7ec      	b.n	801686c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8016892:	2620      	movs	r6, #32
 8016894:	b151      	cbz	r1, 80168ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8016896:	6828      	ldr	r0, [r5, #0]
 8016898:	3901      	subs	r1, #1
 801689a:	4282      	cmp	r2, r0
 801689c:	b289      	uxth	r1, r1
 801689e:	dd05      	ble.n	80168ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 80168a0:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 80168a4:	682b      	ldr	r3, [r5, #0]
 80168a6:	3301      	adds	r3, #1
 80168a8:	602b      	str	r3, [r5, #0]
 80168aa:	e7f3      	b.n	8016894 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 80168ac:	b005      	add	sp, #20
 80168ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080168b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 80168b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80168b6:	2400      	movs	r4, #0
 80168b8:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 80168bc:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 80168c0:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 80168c4:	8014      	strh	r4, [r2, #0]
 80168c6:	701c      	strb	r4, [r3, #0]
 80168c8:	f888 4000 	strb.w	r4, [r8]
 80168cc:	f88c 4000 	strb.w	r4, [ip]
 80168d0:	f88e 4000 	strb.w	r4, [lr]
 80168d4:	703c      	strb	r4, [r7, #0]
 80168d6:	6804      	ldr	r4, [r0, #0]
 80168d8:	b1a4      	cbz	r4, 8016904 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 80168da:	8824      	ldrh	r4, [r4, #0]
 80168dc:	f04f 0901 	mov.w	r9, #1
 80168e0:	b314      	cbz	r4, 8016928 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80168e2:	2c2b      	cmp	r4, #43	; 0x2b
 80168e4:	d001      	beq.n	80168ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 80168e6:	2c20      	cmp	r4, #32
 80168e8:	d110      	bne.n	801690c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 80168ea:	8014      	strh	r4, [r2, #0]
 80168ec:	6804      	ldr	r4, [r0, #0]
 80168ee:	b10c      	cbz	r4, 80168f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 80168f0:	3402      	adds	r4, #2
 80168f2:	6004      	str	r4, [r0, #0]
 80168f4:	680c      	ldr	r4, [r1, #0]
 80168f6:	b10c      	cbz	r4, 80168fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 80168f8:	3401      	adds	r4, #1
 80168fa:	600c      	str	r4, [r1, #0]
 80168fc:	6804      	ldr	r4, [r0, #0]
 80168fe:	b17c      	cbz	r4, 8016920 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8016900:	8824      	ldrh	r4, [r4, #0]
 8016902:	e7ed      	b.n	80168e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8016904:	680c      	ldr	r4, [r1, #0]
 8016906:	b17c      	cbz	r4, 8016928 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8016908:	7824      	ldrb	r4, [r4, #0]
 801690a:	e7e7      	b.n	80168dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801690c:	2c2d      	cmp	r4, #45	; 0x2d
 801690e:	d102      	bne.n	8016916 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8016910:	f883 9000 	strb.w	r9, [r3]
 8016914:	e7ea      	b.n	80168ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8016916:	2c23      	cmp	r4, #35	; 0x23
 8016918:	d107      	bne.n	801692a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801691a:	f888 9000 	strb.w	r9, [r8]
 801691e:	e7e5      	b.n	80168ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8016920:	680c      	ldr	r4, [r1, #0]
 8016922:	b10c      	cbz	r4, 8016928 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8016924:	7824      	ldrb	r4, [r4, #0]
 8016926:	e7db      	b.n	80168e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8016928:	2400      	movs	r4, #0
 801692a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801692e:	2b09      	cmp	r3, #9
 8016930:	d901      	bls.n	8016936 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8016932:	2c2a      	cmp	r4, #42	; 0x2a
 8016934:	d122      	bne.n	801697c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8016936:	2301      	movs	r3, #1
 8016938:	2c30      	cmp	r4, #48	; 0x30
 801693a:	f88e 3000 	strb.w	r3, [lr]
 801693e:	d10d      	bne.n	801695c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8016940:	f88c 3000 	strb.w	r3, [ip]
 8016944:	6803      	ldr	r3, [r0, #0]
 8016946:	b10b      	cbz	r3, 801694c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8016948:	3302      	adds	r3, #2
 801694a:	6003      	str	r3, [r0, #0]
 801694c:	680b      	ldr	r3, [r1, #0]
 801694e:	b10b      	cbz	r3, 8016954 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8016950:	3301      	adds	r3, #1
 8016952:	600b      	str	r3, [r1, #0]
 8016954:	6803      	ldr	r3, [r0, #0]
 8016956:	2b00      	cmp	r3, #0
 8016958:	d02f      	beq.n	80169ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801695a:	881c      	ldrh	r4, [r3, #0]
 801695c:	2c2a      	cmp	r4, #42	; 0x2a
 801695e:	d135      	bne.n	80169cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8016960:	f04f 33ff 	mov.w	r3, #4294967295
 8016964:	6033      	str	r3, [r6, #0]
 8016966:	6803      	ldr	r3, [r0, #0]
 8016968:	b10b      	cbz	r3, 801696e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801696a:	3302      	adds	r3, #2
 801696c:	6003      	str	r3, [r0, #0]
 801696e:	680b      	ldr	r3, [r1, #0]
 8016970:	b10b      	cbz	r3, 8016976 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8016972:	3301      	adds	r3, #1
 8016974:	600b      	str	r3, [r1, #0]
 8016976:	6803      	ldr	r3, [r0, #0]
 8016978:	b31b      	cbz	r3, 80169c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801697a:	881c      	ldrh	r4, [r3, #0]
 801697c:	2c2e      	cmp	r4, #46	; 0x2e
 801697e:	d11a      	bne.n	80169b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8016980:	2301      	movs	r3, #1
 8016982:	703b      	strb	r3, [r7, #0]
 8016984:	6803      	ldr	r3, [r0, #0]
 8016986:	b10b      	cbz	r3, 801698c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8016988:	3302      	adds	r3, #2
 801698a:	6003      	str	r3, [r0, #0]
 801698c:	680b      	ldr	r3, [r1, #0]
 801698e:	b10b      	cbz	r3, 8016994 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8016990:	3301      	adds	r3, #1
 8016992:	600b      	str	r3, [r1, #0]
 8016994:	6803      	ldr	r3, [r0, #0]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d036      	beq.n	8016a08 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801699a:	881b      	ldrh	r3, [r3, #0]
 801699c:	2b2a      	cmp	r3, #42	; 0x2a
 801699e:	d137      	bne.n	8016a10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 80169a0:	f04f 33ff 	mov.w	r3, #4294967295
 80169a4:	602b      	str	r3, [r5, #0]
 80169a6:	6803      	ldr	r3, [r0, #0]
 80169a8:	b10b      	cbz	r3, 80169ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 80169aa:	3302      	adds	r3, #2
 80169ac:	6003      	str	r3, [r0, #0]
 80169ae:	680b      	ldr	r3, [r1, #0]
 80169b0:	b10b      	cbz	r3, 80169b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80169b2:	3301      	adds	r3, #1
 80169b4:	600b      	str	r3, [r1, #0]
 80169b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80169ba:	680c      	ldr	r4, [r1, #0]
 80169bc:	b134      	cbz	r4, 80169cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 80169be:	7824      	ldrb	r4, [r4, #0]
 80169c0:	e7cc      	b.n	801695c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 80169c2:	680b      	ldr	r3, [r1, #0]
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d0f6      	beq.n	80169b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80169c8:	781c      	ldrb	r4, [r3, #0]
 80169ca:	e7d7      	b.n	801697c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80169cc:	2300      	movs	r3, #0
 80169ce:	220a      	movs	r2, #10
 80169d0:	6033      	str	r3, [r6, #0]
 80169d2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80169d6:	fa1f f38c 	uxth.w	r3, ip
 80169da:	2b09      	cmp	r3, #9
 80169dc:	d8ce      	bhi.n	801697c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80169de:	6833      	ldr	r3, [r6, #0]
 80169e0:	fb02 c303 	mla	r3, r2, r3, ip
 80169e4:	6033      	str	r3, [r6, #0]
 80169e6:	6803      	ldr	r3, [r0, #0]
 80169e8:	b10b      	cbz	r3, 80169ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 80169ea:	3302      	adds	r3, #2
 80169ec:	6003      	str	r3, [r0, #0]
 80169ee:	680b      	ldr	r3, [r1, #0]
 80169f0:	b10b      	cbz	r3, 80169f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 80169f2:	3301      	adds	r3, #1
 80169f4:	600b      	str	r3, [r1, #0]
 80169f6:	6803      	ldr	r3, [r0, #0]
 80169f8:	b10b      	cbz	r3, 80169fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 80169fa:	881c      	ldrh	r4, [r3, #0]
 80169fc:	e7e9      	b.n	80169d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80169fe:	680c      	ldr	r4, [r1, #0]
 8016a00:	2c00      	cmp	r4, #0
 8016a02:	d0e6      	beq.n	80169d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8016a04:	7824      	ldrb	r4, [r4, #0]
 8016a06:	e7e4      	b.n	80169d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8016a08:	680b      	ldr	r3, [r1, #0]
 8016a0a:	b10b      	cbz	r3, 8016a10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8016a0c:	781b      	ldrb	r3, [r3, #0]
 8016a0e:	e7c5      	b.n	801699c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8016a10:	2200      	movs	r2, #0
 8016a12:	240a      	movs	r4, #10
 8016a14:	602a      	str	r2, [r5, #0]
 8016a16:	3b30      	subs	r3, #48	; 0x30
 8016a18:	682a      	ldr	r2, [r5, #0]
 8016a1a:	b29e      	uxth	r6, r3
 8016a1c:	2e09      	cmp	r6, #9
 8016a1e:	d813      	bhi.n	8016a48 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8016a20:	fb04 3302 	mla	r3, r4, r2, r3
 8016a24:	602b      	str	r3, [r5, #0]
 8016a26:	6803      	ldr	r3, [r0, #0]
 8016a28:	b10b      	cbz	r3, 8016a2e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8016a2a:	3302      	adds	r3, #2
 8016a2c:	6003      	str	r3, [r0, #0]
 8016a2e:	680b      	ldr	r3, [r1, #0]
 8016a30:	b10b      	cbz	r3, 8016a36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8016a32:	3301      	adds	r3, #1
 8016a34:	600b      	str	r3, [r1, #0]
 8016a36:	6803      	ldr	r3, [r0, #0]
 8016a38:	b10b      	cbz	r3, 8016a3e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8016a3a:	881b      	ldrh	r3, [r3, #0]
 8016a3c:	e7eb      	b.n	8016a16 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8016a3e:	680b      	ldr	r3, [r1, #0]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d0e8      	beq.n	8016a16 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8016a44:	781b      	ldrb	r3, [r3, #0]
 8016a46:	e7e6      	b.n	8016a16 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8016a48:	2a06      	cmp	r2, #6
 8016a4a:	bfa8      	it	ge
 8016a4c:	2206      	movge	r2, #6
 8016a4e:	602a      	str	r2, [r5, #0]
 8016a50:	e7b1      	b.n	80169b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08016a52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8016a52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a56:	b0a3      	sub	sp, #140	; 0x8c
 8016a58:	2600      	movs	r6, #0
 8016a5a:	4607      	mov	r7, r0
 8016a5c:	4688      	mov	r8, r1
 8016a5e:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8016a62:	4631      	mov	r1, r6
 8016a64:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8016a66:	4648      	mov	r0, r9
 8016a68:	960d      	str	r6, [sp, #52]	; 0x34
 8016a6a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8016a6e:	2242      	movs	r2, #66	; 0x42
 8016a70:	f00e f94c 	bl	8024d0c <memset>
 8016a74:	b15f      	cbz	r7, 8016a8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8016a76:	f108 3aff 	add.w	sl, r8, #4294967295
 8016a7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016a7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016a7e:	b152      	cbz	r2, 8016a96 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8016a80:	8812      	ldrh	r2, [r2, #0]
 8016a82:	b10a      	cbz	r2, 8016a88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8016a84:	459a      	cmp	sl, r3
 8016a86:	dc2e      	bgt.n	8016ae6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8016a88:	2200      	movs	r2, #0
 8016a8a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8016a8e:	4638      	mov	r0, r7
 8016a90:	b023      	add	sp, #140	; 0x8c
 8016a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a96:	9a08      	ldr	r2, [sp, #32]
 8016a98:	2a00      	cmp	r2, #0
 8016a9a:	d0f5      	beq.n	8016a88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8016a9c:	7812      	ldrb	r2, [r2, #0]
 8016a9e:	e7f0      	b.n	8016a82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8016aa0:	2d00      	cmp	r5, #0
 8016aa2:	d0ea      	beq.n	8016a7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8016aa4:	782a      	ldrb	r2, [r5, #0]
 8016aa6:	b142      	cbz	r2, 8016aba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8016aa8:	2a25      	cmp	r2, #37	; 0x25
 8016aaa:	d001      	beq.n	8016ab0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8016aac:	459a      	cmp	sl, r3
 8016aae:	dc08      	bgt.n	8016ac2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8016ab0:	f1bb 0f00 	cmp.w	fp, #0
 8016ab4:	d121      	bne.n	8016afa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8016ab6:	2d00      	cmp	r5, #0
 8016ab8:	d0df      	beq.n	8016a7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8016aba:	782a      	ldrb	r2, [r5, #0]
 8016abc:	f04f 0b00 	mov.w	fp, #0
 8016ac0:	e01d      	b.n	8016afe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8016ac2:	f1bb 0f00 	cmp.w	fp, #0
 8016ac6:	d077      	beq.n	8016bb8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 8016ac8:	f8bb 2000 	ldrh.w	r2, [fp]
 8016acc:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8016ad0:	f1bb 0f00 	cmp.w	fp, #0
 8016ad4:	d002      	beq.n	8016adc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8016ad6:	f10b 0202 	add.w	r2, fp, #2
 8016ada:	9209      	str	r2, [sp, #36]	; 0x24
 8016adc:	b10d      	cbz	r5, 8016ae2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8016ade:	3501      	adds	r5, #1
 8016ae0:	9508      	str	r5, [sp, #32]
 8016ae2:	3301      	adds	r3, #1
 8016ae4:	930d      	str	r3, [sp, #52]	; 0x34
 8016ae6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016ae8:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 8016aec:	f1bb 0f00 	cmp.w	fp, #0
 8016af0:	d0d6      	beq.n	8016aa0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8016af2:	f8bb 2000 	ldrh.w	r2, [fp]
 8016af6:	2a00      	cmp	r2, #0
 8016af8:	d1d6      	bne.n	8016aa8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 8016afa:	f8bb 2000 	ldrh.w	r2, [fp]
 8016afe:	2a00      	cmp	r2, #0
 8016b00:	d0bb      	beq.n	8016a7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8016b02:	459a      	cmp	sl, r3
 8016b04:	ddb9      	ble.n	8016a7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8016b06:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 8016b0a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8016b0e:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 8016b12:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 8016b16:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8016b1a:	960e      	str	r6, [sp, #56]	; 0x38
 8016b1c:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 8016b20:	960f      	str	r6, [sp, #60]	; 0x3c
 8016b22:	f1bb 0f00 	cmp.w	fp, #0
 8016b26:	d002      	beq.n	8016b2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8016b28:	f10b 0302 	add.w	r3, fp, #2
 8016b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8016b2e:	b10d      	cbz	r5, 8016b34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8016b30:	1c6b      	adds	r3, r5, #1
 8016b32:	9308      	str	r3, [sp, #32]
 8016b34:	ab0f      	add	r3, sp, #60	; 0x3c
 8016b36:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8016b3a:	a908      	add	r1, sp, #32
 8016b3c:	a809      	add	r0, sp, #36	; 0x24
 8016b3e:	9305      	str	r3, [sp, #20]
 8016b40:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8016b44:	9304      	str	r3, [sp, #16]
 8016b46:	ab0e      	add	r3, sp, #56	; 0x38
 8016b48:	9303      	str	r3, [sp, #12]
 8016b4a:	ab0c      	add	r3, sp, #48	; 0x30
 8016b4c:	9302      	str	r3, [sp, #8]
 8016b4e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8016b52:	9301      	str	r3, [sp, #4]
 8016b54:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8016b58:	9300      	str	r3, [sp, #0]
 8016b5a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 8016b5e:	f7ff fea8 	bl	80168b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8016b62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	bfbf      	itttt	lt
 8016b68:	6823      	ldrlt	r3, [r4, #0]
 8016b6a:	3404      	addlt	r4, #4
 8016b6c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8016b70:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016b72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	bfbe      	ittt	lt
 8016b78:	6823      	ldrlt	r3, [r4, #0]
 8016b7a:	3404      	addlt	r4, #4
 8016b7c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8016b80:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8016b84:	bfb8      	it	lt
 8016b86:	930f      	strlt	r3, [sp, #60]	; 0x3c
 8016b88:	b1d9      	cbz	r1, 8016bc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 8016b8a:	880b      	ldrh	r3, [r1, #0]
 8016b8c:	2b69      	cmp	r3, #105	; 0x69
 8016b8e:	d01f      	beq.n	8016bd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8016b90:	d82f      	bhi.n	8016bf2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 8016b92:	2b58      	cmp	r3, #88	; 0x58
 8016b94:	d01c      	beq.n	8016bd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8016b96:	d818      	bhi.n	8016bca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 8016b98:	2b25      	cmp	r3, #37	; 0x25
 8016b9a:	d034      	beq.n	8016c06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 8016b9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016b9e:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8016ba2:	f1bb 0f00 	cmp.w	fp, #0
 8016ba6:	f000 80b7 	beq.w	8016d18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 8016baa:	f8bb 5000 	ldrh.w	r5, [fp]
 8016bae:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8016bb2:	3301      	adds	r3, #1
 8016bb4:	930d      	str	r3, [sp, #52]	; 0x34
 8016bb6:	e029      	b.n	8016c0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8016bb8:	b10d      	cbz	r5, 8016bbe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 8016bba:	782a      	ldrb	r2, [r5, #0]
 8016bbc:	e786      	b.n	8016acc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8016bbe:	462a      	mov	r2, r5
 8016bc0:	e784      	b.n	8016acc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8016bc2:	2a00      	cmp	r2, #0
 8016bc4:	d0ea      	beq.n	8016b9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8016bc6:	7813      	ldrb	r3, [r2, #0]
 8016bc8:	e7e0      	b.n	8016b8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 8016bca:	3b63      	subs	r3, #99	; 0x63
 8016bcc:	2b01      	cmp	r3, #1
 8016bce:	d8e5      	bhi.n	8016b9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8016bd0:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8016bd4:	b329      	cbz	r1, 8016c22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 8016bd6:	880b      	ldrh	r3, [r1, #0]
 8016bd8:	2b69      	cmp	r3, #105	; 0x69
 8016bda:	d063      	beq.n	8016ca4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8016bdc:	d825      	bhi.n	8016c2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 8016bde:	2b63      	cmp	r3, #99	; 0x63
 8016be0:	d038      	beq.n	8016c54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 8016be2:	2b64      	cmp	r3, #100	; 0x64
 8016be4:	d05e      	beq.n	8016ca4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8016be6:	2b58      	cmp	r3, #88	; 0x58
 8016be8:	d07a      	beq.n	8016ce0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 8016bea:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 8016bee:	4625      	mov	r5, r4
 8016bf0:	e036      	b.n	8016c60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8016bf2:	2b73      	cmp	r3, #115	; 0x73
 8016bf4:	d0ec      	beq.n	8016bd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8016bf6:	d802      	bhi.n	8016bfe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 8016bf8:	2b6f      	cmp	r3, #111	; 0x6f
 8016bfa:	d1cf      	bne.n	8016b9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8016bfc:	e7e8      	b.n	8016bd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8016bfe:	2b75      	cmp	r3, #117	; 0x75
 8016c00:	d0e6      	beq.n	8016bd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8016c02:	2b78      	cmp	r3, #120	; 0x78
 8016c04:	e7f9      	b.n	8016bfa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 8016c06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016c08:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8016c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c0e:	b10b      	cbz	r3, 8016c14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 8016c10:	3302      	adds	r3, #2
 8016c12:	9309      	str	r3, [sp, #36]	; 0x24
 8016c14:	9b08      	ldr	r3, [sp, #32]
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	f43f af2f 	beq.w	8016a7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8016c1c:	3301      	adds	r3, #1
 8016c1e:	9308      	str	r3, [sp, #32]
 8016c20:	e72b      	b.n	8016a7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8016c22:	2a00      	cmp	r2, #0
 8016c24:	d0e1      	beq.n	8016bea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8016c26:	7813      	ldrb	r3, [r2, #0]
 8016c28:	e7d6      	b.n	8016bd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 8016c2a:	2b73      	cmp	r3, #115	; 0x73
 8016c2c:	d036      	beq.n	8016c9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 8016c2e:	d807      	bhi.n	8016c40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 8016c30:	2b6f      	cmp	r3, #111	; 0x6f
 8016c32:	d1da      	bne.n	8016bea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8016c34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016c36:	1d25      	adds	r5, r4, #4
 8016c38:	2308      	movs	r3, #8
 8016c3a:	eba8 0202 	sub.w	r2, r8, r2
 8016c3e:	e049      	b.n	8016cd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8016c40:	2b75      	cmp	r3, #117	; 0x75
 8016c42:	d042      	beq.n	8016cca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 8016c44:	2b78      	cmp	r3, #120	; 0x78
 8016c46:	d1d0      	bne.n	8016bea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8016c48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016c4a:	1d25      	adds	r5, r4, #4
 8016c4c:	2310      	movs	r3, #16
 8016c4e:	eba8 0202 	sub.w	r2, r8, r2
 8016c52:	e03f      	b.n	8016cd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8016c54:	7823      	ldrb	r3, [r4, #0]
 8016c56:	1d25      	adds	r5, r4, #4
 8016c58:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8016c5c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8016c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c62:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d051      	beq.n	8016d0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 8016c6a:	881a      	ldrh	r2, [r3, #0]
 8016c6c:	a80d      	add	r0, sp, #52	; 0x34
 8016c6e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8016c72:	462c      	mov	r4, r5
 8016c74:	9005      	str	r0, [sp, #20]
 8016c76:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 8016c7a:	9004      	str	r0, [sp, #16]
 8016c7c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016c7e:	9003      	str	r0, [sp, #12]
 8016c80:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8016c84:	9002      	str	r0, [sp, #8]
 8016c86:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016c88:	9001      	str	r0, [sp, #4]
 8016c8a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 8016c8e:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8016c92:	9000      	str	r0, [sp, #0]
 8016c94:	a810      	add	r0, sp, #64	; 0x40
 8016c96:	f7ff fd49 	bl	801672c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 8016c9a:	e7b7      	b.n	8016c0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8016c9c:	1d25      	adds	r5, r4, #4
 8016c9e:	6823      	ldr	r3, [r4, #0]
 8016ca0:	9310      	str	r3, [sp, #64]	; 0x40
 8016ca2:	e7dd      	b.n	8016c60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8016ca4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016ca6:	230a      	movs	r3, #10
 8016ca8:	4649      	mov	r1, r9
 8016caa:	6820      	ldr	r0, [r4, #0]
 8016cac:	eba8 0202 	sub.w	r2, r8, r2
 8016cb0:	1d25      	adds	r5, r4, #4
 8016cb2:	b292      	uxth	r2, r2
 8016cb4:	f7ff fd08 	bl	80166c8 <_ZN8touchgfx7Unicode4itoaElPtti>
 8016cb8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016cbc:	2b2d      	cmp	r3, #45	; 0x2d
 8016cbe:	d1cf      	bne.n	8016c60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8016cc0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8016cc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016cc6:	3302      	adds	r3, #2
 8016cc8:	e7ea      	b.n	8016ca0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 8016cca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016ccc:	1d25      	adds	r5, r4, #4
 8016cce:	230a      	movs	r3, #10
 8016cd0:	eba8 0202 	sub.w	r2, r8, r2
 8016cd4:	b292      	uxth	r2, r2
 8016cd6:	4649      	mov	r1, r9
 8016cd8:	6820      	ldr	r0, [r4, #0]
 8016cda:	f7ff fcd7 	bl	801668c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8016cde:	e7bf      	b.n	8016c60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8016ce0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016ce2:	2310      	movs	r3, #16
 8016ce4:	4649      	mov	r1, r9
 8016ce6:	6820      	ldr	r0, [r4, #0]
 8016ce8:	eba8 0202 	sub.w	r2, r8, r2
 8016cec:	1d25      	adds	r5, r4, #4
 8016cee:	b292      	uxth	r2, r2
 8016cf0:	f7ff fccc 	bl	801668c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8016cf4:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8016cf8:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d0af      	beq.n	8016c60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8016d00:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8016d04:	2919      	cmp	r1, #25
 8016d06:	d8f7      	bhi.n	8016cf8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8016d08:	3b20      	subs	r3, #32
 8016d0a:	8013      	strh	r3, [r2, #0]
 8016d0c:	e7f4      	b.n	8016cf8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8016d0e:	9a08      	ldr	r2, [sp, #32]
 8016d10:	2a00      	cmp	r2, #0
 8016d12:	d0ab      	beq.n	8016c6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8016d14:	7812      	ldrb	r2, [r2, #0]
 8016d16:	e7a9      	b.n	8016c6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8016d18:	2d00      	cmp	r5, #0
 8016d1a:	f43f af48 	beq.w	8016bae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 8016d1e:	782d      	ldrb	r5, [r5, #0]
 8016d20:	e745      	b.n	8016bae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

08016d22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8016d22:	b507      	push	{r0, r1, r2, lr}
 8016d24:	9300      	str	r3, [sp, #0]
 8016d26:	4613      	mov	r3, r2
 8016d28:	2200      	movs	r2, #0
 8016d2a:	f7ff fe92 	bl	8016a52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 8016d2e:	b003      	add	sp, #12
 8016d30:	f85d fb04 	ldr.w	pc, [sp], #4

08016d34 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8016d34:	b40c      	push	{r2, r3}
 8016d36:	b507      	push	{r0, r1, r2, lr}
 8016d38:	ab04      	add	r3, sp, #16
 8016d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d3e:	9301      	str	r3, [sp, #4]
 8016d40:	f7ff ffef 	bl	8016d22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8016d44:	b003      	add	sp, #12
 8016d46:	f85d eb04 	ldr.w	lr, [sp], #4
 8016d4a:	b002      	add	sp, #8
 8016d4c:	4770      	bx	lr
	...

08016d50 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8016d50:	4b01      	ldr	r3, [pc, #4]	; (8016d58 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8016d52:	6018      	str	r0, [r3, #0]
 8016d54:	4770      	bx	lr
 8016d56:	bf00      	nop
 8016d58:	20021058 	.word	0x20021058

08016d5c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8016d5c:	4b06      	ldr	r3, [pc, #24]	; (8016d78 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8016d5e:	881a      	ldrh	r2, [r3, #0]
 8016d60:	4282      	cmp	r2, r0
 8016d62:	d807      	bhi.n	8016d74 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8016d64:	4b05      	ldr	r3, [pc, #20]	; (8016d7c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8016d66:	881b      	ldrh	r3, [r3, #0]
 8016d68:	4413      	add	r3, r2
 8016d6a:	4298      	cmp	r0, r3
 8016d6c:	bfac      	ite	ge
 8016d6e:	2000      	movge	r0, #0
 8016d70:	2001      	movlt	r0, #1
 8016d72:	4770      	bx	lr
 8016d74:	2000      	movs	r0, #0
 8016d76:	4770      	bx	lr
 8016d78:	20021078 	.word	0x20021078
 8016d7c:	2002107c 	.word	0x2002107c

08016d80 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8016d80:	b508      	push	{r3, lr}
 8016d82:	4601      	mov	r1, r0
 8016d84:	f7ff ffea 	bl	8016d5c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8016d88:	b118      	cbz	r0, 8016d92 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8016d8a:	4b02      	ldr	r3, [pc, #8]	; (8016d94 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8016d92:	bd08      	pop	{r3, pc}
 8016d94:	2002105c 	.word	0x2002105c

08016d98 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8016d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d9a:	4c24      	ldr	r4, [pc, #144]	; (8016e2c <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8016d9c:	6823      	ldr	r3, [r4, #0]
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d042      	beq.n	8016e28 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8016da2:	4a23      	ldr	r2, [pc, #140]	; (8016e30 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8016da4:	4d23      	ldr	r5, [pc, #140]	; (8016e34 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8016da6:	8811      	ldrh	r1, [r2, #0]
 8016da8:	f8b5 c000 	ldrh.w	ip, [r5]
 8016dac:	4822      	ldr	r0, [pc, #136]	; (8016e38 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8016dae:	4461      	add	r1, ip
 8016db0:	1c4a      	adds	r2, r1, #1
 8016db2:	008f      	lsls	r7, r1, #2
 8016db4:	f022 0201 	bic.w	r2, r2, #1
 8016db8:	19de      	adds	r6, r3, r7
 8016dba:	0412      	lsls	r2, r2, #16
 8016dbc:	6006      	str	r6, [r0, #0]
 8016dbe:	4e1f      	ldr	r6, [pc, #124]	; (8016e3c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8016dc0:	0c12      	lsrs	r2, r2, #16
 8016dc2:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8016dc6:	19da      	adds	r2, r3, r7
 8016dc8:	6032      	str	r2, [r6, #0]
 8016dca:	220e      	movs	r2, #14
 8016dcc:	fb02 f20c 	mul.w	r2, r2, ip
 8016dd0:	3203      	adds	r2, #3
 8016dd2:	f022 0203 	bic.w	r2, r2, #3
 8016dd6:	443a      	add	r2, r7
 8016dd8:	4f19      	ldr	r7, [pc, #100]	; (8016e40 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8016dda:	4413      	add	r3, r2
 8016ddc:	603b      	str	r3, [r7, #0]
 8016dde:	2300      	movs	r3, #0
 8016de0:	4f18      	ldr	r7, [pc, #96]	; (8016e44 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8016de2:	469c      	mov	ip, r3
 8016de4:	803b      	strh	r3, [r7, #0]
 8016de6:	4f18      	ldr	r7, [pc, #96]	; (8016e48 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8016de8:	683f      	ldr	r7, [r7, #0]
 8016dea:	1aba      	subs	r2, r7, r2
 8016dec:	4f17      	ldr	r7, [pc, #92]	; (8016e4c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8016dee:	603a      	str	r2, [r7, #0]
 8016df0:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8016df4:	4a16      	ldr	r2, [pc, #88]	; (8016e50 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8016df6:	8013      	strh	r3, [r2, #0]
 8016df8:	428b      	cmp	r3, r1
 8016dfa:	d10d      	bne.n	8016e18 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8016dfc:	882d      	ldrh	r5, [r5, #0]
 8016dfe:	2300      	movs	r3, #0
 8016e00:	6830      	ldr	r0, [r6, #0]
 8016e02:	240e      	movs	r4, #14
 8016e04:	429d      	cmp	r5, r3
 8016e06:	d90f      	bls.n	8016e28 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8016e08:	fb04 0203 	mla	r2, r4, r3, r0
 8016e0c:	3301      	adds	r3, #1
 8016e0e:	7b11      	ldrb	r1, [r2, #12]
 8016e10:	f36f 1145 	bfc	r1, #5, #1
 8016e14:	7311      	strb	r1, [r2, #12]
 8016e16:	e7f5      	b.n	8016e04 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8016e18:	6822      	ldr	r2, [r4, #0]
 8016e1a:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8016e1e:	6802      	ldr	r2, [r0, #0]
 8016e20:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8016e24:	3301      	adds	r3, #1
 8016e26:	e7e7      	b.n	8016df8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8016e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e2a:	bf00      	nop
 8016e2c:	2002105c 	.word	0x2002105c
 8016e30:	20021078 	.word	0x20021078
 8016e34:	2002107c 	.word	0x2002107c
 8016e38:	20021070 	.word	0x20021070
 8016e3c:	20021060 	.word	0x20021060
 8016e40:	20021068 	.word	0x20021068
 8016e44:	2002107a 	.word	0x2002107a
 8016e48:	20021064 	.word	0x20021064
 8016e4c:	20021074 	.word	0x20021074
 8016e50:	2002106c 	.word	0x2002106c

08016e54 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8016e54:	4b10      	ldr	r3, [pc, #64]	; (8016e98 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8016e56:	b510      	push	{r4, lr}
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	b9db      	cbnz	r3, 8016e94 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8016e5c:	b1d1      	cbz	r1, 8016e94 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8016e5e:	4b0f      	ldr	r3, [pc, #60]	; (8016e9c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8016e60:	240e      	movs	r4, #14
 8016e62:	801a      	strh	r2, [r3, #0]
 8016e64:	b292      	uxth	r2, r2
 8016e66:	4b0e      	ldr	r3, [pc, #56]	; (8016ea0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8016e68:	881b      	ldrh	r3, [r3, #0]
 8016e6a:	4413      	add	r3, r2
 8016e6c:	4362      	muls	r2, r4
 8016e6e:	2406      	movs	r4, #6
 8016e70:	fb04 2203 	mla	r2, r4, r3, r2
 8016e74:	428a      	cmp	r2, r1
 8016e76:	d305      	bcc.n	8016e84 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8016e78:	4b0a      	ldr	r3, [pc, #40]	; (8016ea4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8016e7a:	2134      	movs	r1, #52	; 0x34
 8016e7c:	4a0a      	ldr	r2, [pc, #40]	; (8016ea8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8016e7e:	480b      	ldr	r0, [pc, #44]	; (8016eac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8016e80:	f00d fdba 	bl	80249f8 <__assert_func>
 8016e84:	4b0a      	ldr	r3, [pc, #40]	; (8016eb0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 8016e86:	6019      	str	r1, [r3, #0]
 8016e88:	4b0a      	ldr	r3, [pc, #40]	; (8016eb4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 8016e8a:	6018      	str	r0, [r3, #0]
 8016e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e90:	f7ff bf82 	b.w	8016d98 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8016e94:	bd10      	pop	{r4, pc}
 8016e96:	bf00      	nop
 8016e98:	20021068 	.word	0x20021068
 8016e9c:	2002107c 	.word	0x2002107c
 8016ea0:	20021078 	.word	0x20021078
 8016ea4:	08029ba2 	.word	0x08029ba2
 8016ea8:	08029bfb 	.word	0x08029bfb
 8016eac:	08029b7d 	.word	0x08029b7d
 8016eb0:	20021064 	.word	0x20021064
 8016eb4:	2002105c 	.word	0x2002105c

08016eb8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8016eb8:	b470      	push	{r4, r5, r6}
 8016eba:	4c07      	ldr	r4, [pc, #28]	; (8016ed8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8016ebc:	4605      	mov	r5, r0
 8016ebe:	4610      	mov	r0, r2
 8016ec0:	9a03      	ldr	r2, [sp, #12]
 8016ec2:	6826      	ldr	r6, [r4, #0]
 8016ec4:	b936      	cbnz	r6, 8016ed4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8016ec6:	6025      	str	r5, [r4, #0]
 8016ec8:	4c04      	ldr	r4, [pc, #16]	; (8016edc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8016eca:	8021      	strh	r1, [r4, #0]
 8016ecc:	4619      	mov	r1, r3
 8016ece:	bc70      	pop	{r4, r5, r6}
 8016ed0:	f7ff bfc0 	b.w	8016e54 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8016ed4:	bc70      	pop	{r4, r5, r6}
 8016ed6:	4770      	bx	lr
 8016ed8:	20021080 	.word	0x20021080
 8016edc:	20021078 	.word	0x20021078

08016ee0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8016ee0:	b508      	push	{r3, lr}
 8016ee2:	4b17      	ldr	r3, [pc, #92]	; (8016f40 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8016ee4:	6819      	ldr	r1, [r3, #0]
 8016ee6:	b931      	cbnz	r1, 8016ef6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8016ee8:	4b16      	ldr	r3, [pc, #88]	; (8016f44 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8016eea:	f240 4184 	movw	r1, #1156	; 0x484
 8016eee:	4a16      	ldr	r2, [pc, #88]	; (8016f48 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8016ef0:	4816      	ldr	r0, [pc, #88]	; (8016f4c <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8016ef2:	f00d fd81 	bl	80249f8 <__assert_func>
 8016ef6:	4a16      	ldr	r2, [pc, #88]	; (8016f50 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8016ef8:	8803      	ldrh	r3, [r0, #0]
 8016efa:	8812      	ldrh	r2, [r2, #0]
 8016efc:	4293      	cmp	r3, r2
 8016efe:	d204      	bcs.n	8016f0a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8016f00:	2214      	movs	r2, #20
 8016f02:	fb02 1303 	mla	r3, r2, r3, r1
 8016f06:	8918      	ldrh	r0, [r3, #8]
 8016f08:	bd08      	pop	{r3, pc}
 8016f0a:	4912      	ldr	r1, [pc, #72]	; (8016f54 <_ZNK8touchgfx6Bitmap8getWidthEv+0x74>)
 8016f0c:	8809      	ldrh	r1, [r1, #0]
 8016f0e:	4411      	add	r1, r2
 8016f10:	428b      	cmp	r3, r1
 8016f12:	da06      	bge.n	8016f22 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8016f14:	1a9b      	subs	r3, r3, r2
 8016f16:	4a10      	ldr	r2, [pc, #64]	; (8016f58 <_ZNK8touchgfx6Bitmap8getWidthEv+0x78>)
 8016f18:	210e      	movs	r1, #14
 8016f1a:	6812      	ldr	r2, [r2, #0]
 8016f1c:	fb01 2303 	mla	r3, r1, r3, r2
 8016f20:	e7f1      	b.n	8016f06 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8016f22:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016f26:	4293      	cmp	r3, r2
 8016f28:	d107      	bne.n	8016f3a <_ZNK8touchgfx6Bitmap8getWidthEv+0x5a>
 8016f2a:	4b0c      	ldr	r3, [pc, #48]	; (8016f5c <_ZNK8touchgfx6Bitmap8getWidthEv+0x7c>)
 8016f2c:	781b      	ldrb	r3, [r3, #0]
 8016f2e:	b913      	cbnz	r3, 8016f36 <_ZNK8touchgfx6Bitmap8getWidthEv+0x56>
 8016f30:	4b0b      	ldr	r3, [pc, #44]	; (8016f60 <_ZNK8touchgfx6Bitmap8getWidthEv+0x80>)
 8016f32:	8818      	ldrh	r0, [r3, #0]
 8016f34:	e7e8      	b.n	8016f08 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8016f36:	4b0b      	ldr	r3, [pc, #44]	; (8016f64 <_ZNK8touchgfx6Bitmap8getWidthEv+0x84>)
 8016f38:	e7fb      	b.n	8016f32 <_ZNK8touchgfx6Bitmap8getWidthEv+0x52>
 8016f3a:	2000      	movs	r0, #0
 8016f3c:	e7e4      	b.n	8016f08 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8016f3e:	bf00      	nop
 8016f40:	20021080 	.word	0x20021080
 8016f44:	08028f00 	.word	0x08028f00
 8016f48:	08029ca8 	.word	0x08029ca8
 8016f4c:	08029b7d 	.word	0x08029b7d
 8016f50:	20021078 	.word	0x20021078
 8016f54:	2002107c 	.word	0x2002107c
 8016f58:	20021060 	.word	0x20021060
 8016f5c:	20020fd0 	.word	0x20020fd0
 8016f60:	20020fd2 	.word	0x20020fd2
 8016f64:	20020fd4 	.word	0x20020fd4

08016f68 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8016f68:	b508      	push	{r3, lr}
 8016f6a:	4b17      	ldr	r3, [pc, #92]	; (8016fc8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8016f6c:	6819      	ldr	r1, [r3, #0]
 8016f6e:	b931      	cbnz	r1, 8016f7e <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8016f70:	4b16      	ldr	r3, [pc, #88]	; (8016fcc <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8016f72:	f44f 6193 	mov.w	r1, #1176	; 0x498
 8016f76:	4a16      	ldr	r2, [pc, #88]	; (8016fd0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8016f78:	4816      	ldr	r0, [pc, #88]	; (8016fd4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8016f7a:	f00d fd3d 	bl	80249f8 <__assert_func>
 8016f7e:	4a16      	ldr	r2, [pc, #88]	; (8016fd8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8016f80:	8803      	ldrh	r3, [r0, #0]
 8016f82:	8812      	ldrh	r2, [r2, #0]
 8016f84:	4293      	cmp	r3, r2
 8016f86:	d204      	bcs.n	8016f92 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8016f88:	2214      	movs	r2, #20
 8016f8a:	fb02 1303 	mla	r3, r2, r3, r1
 8016f8e:	8958      	ldrh	r0, [r3, #10]
 8016f90:	bd08      	pop	{r3, pc}
 8016f92:	4912      	ldr	r1, [pc, #72]	; (8016fdc <_ZNK8touchgfx6Bitmap9getHeightEv+0x74>)
 8016f94:	8809      	ldrh	r1, [r1, #0]
 8016f96:	4411      	add	r1, r2
 8016f98:	428b      	cmp	r3, r1
 8016f9a:	da06      	bge.n	8016faa <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8016f9c:	1a9b      	subs	r3, r3, r2
 8016f9e:	4a10      	ldr	r2, [pc, #64]	; (8016fe0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x78>)
 8016fa0:	210e      	movs	r1, #14
 8016fa2:	6812      	ldr	r2, [r2, #0]
 8016fa4:	fb01 2303 	mla	r3, r1, r3, r2
 8016fa8:	e7f1      	b.n	8016f8e <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8016faa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016fae:	4293      	cmp	r3, r2
 8016fb0:	d107      	bne.n	8016fc2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5a>
 8016fb2:	4b0c      	ldr	r3, [pc, #48]	; (8016fe4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x7c>)
 8016fb4:	781b      	ldrb	r3, [r3, #0]
 8016fb6:	b913      	cbnz	r3, 8016fbe <_ZNK8touchgfx6Bitmap9getHeightEv+0x56>
 8016fb8:	4b0b      	ldr	r3, [pc, #44]	; (8016fe8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x80>)
 8016fba:	8818      	ldrh	r0, [r3, #0]
 8016fbc:	e7e8      	b.n	8016f90 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8016fbe:	4b0b      	ldr	r3, [pc, #44]	; (8016fec <_ZNK8touchgfx6Bitmap9getHeightEv+0x84>)
 8016fc0:	e7fb      	b.n	8016fba <_ZNK8touchgfx6Bitmap9getHeightEv+0x52>
 8016fc2:	2000      	movs	r0, #0
 8016fc4:	e7e4      	b.n	8016f90 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8016fc6:	bf00      	nop
 8016fc8:	20021080 	.word	0x20021080
 8016fcc:	08028f00 	.word	0x08028f00
 8016fd0:	08029cd4 	.word	0x08029cd4
 8016fd4:	08029b7d 	.word	0x08029b7d
 8016fd8:	20021078 	.word	0x20021078
 8016fdc:	2002107c 	.word	0x2002107c
 8016fe0:	20021060 	.word	0x20021060
 8016fe4:	20020fd0 	.word	0x20020fd0
 8016fe8:	20020fd4 	.word	0x20020fd4
 8016fec:	20020fd2 	.word	0x20020fd2

08016ff0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8016ff0:	4b23      	ldr	r3, [pc, #140]	; (8017080 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8016ff2:	b510      	push	{r4, lr}
 8016ff4:	681c      	ldr	r4, [r3, #0]
 8016ff6:	b934      	cbnz	r4, 8017006 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8016ff8:	4b22      	ldr	r3, [pc, #136]	; (8017084 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8016ffa:	f240 41ac 	movw	r1, #1196	; 0x4ac
 8016ffe:	4a22      	ldr	r2, [pc, #136]	; (8017088 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8017000:	4822      	ldr	r0, [pc, #136]	; (801708c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8017002:	f00d fcf9 	bl	80249f8 <__assert_func>
 8017006:	4a22      	ldr	r2, [pc, #136]	; (8017090 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8017008:	880b      	ldrh	r3, [r1, #0]
 801700a:	8812      	ldrh	r2, [r2, #0]
 801700c:	4293      	cmp	r3, r2
 801700e:	d211      	bcs.n	8017034 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8017010:	2214      	movs	r2, #20
 8017012:	fb02 4303 	mla	r3, r2, r3, r4
 8017016:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801701a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801701e:	8a1a      	ldrh	r2, [r3, #16]
 8017020:	8a5b      	ldrh	r3, [r3, #18]
 8017022:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8017026:	8004      	strh	r4, [r0, #0]
 8017028:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801702c:	8041      	strh	r1, [r0, #2]
 801702e:	8082      	strh	r2, [r0, #4]
 8017030:	80c3      	strh	r3, [r0, #6]
 8017032:	e00e      	b.n	8017052 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8017034:	4917      	ldr	r1, [pc, #92]	; (8017094 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8017036:	8809      	ldrh	r1, [r1, #0]
 8017038:	4411      	add	r1, r2
 801703a:	428b      	cmp	r3, r1
 801703c:	da0a      	bge.n	8017054 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801703e:	1a9b      	subs	r3, r3, r2
 8017040:	4a15      	ldr	r2, [pc, #84]	; (8017098 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8017042:	210e      	movs	r1, #14
 8017044:	6812      	ldr	r2, [r2, #0]
 8017046:	fb01 2303 	mla	r3, r1, r3, r2
 801704a:	681a      	ldr	r2, [r3, #0]
 801704c:	6002      	str	r2, [r0, #0]
 801704e:	685a      	ldr	r2, [r3, #4]
 8017050:	6042      	str	r2, [r0, #4]
 8017052:	bd10      	pop	{r4, pc}
 8017054:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017058:	4293      	cmp	r3, r2
 801705a:	d10b      	bne.n	8017074 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801705c:	4b0f      	ldr	r3, [pc, #60]	; (801709c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801705e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8017062:	4b0f      	ldr	r3, [pc, #60]	; (80170a0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8017064:	8081      	strh	r1, [r0, #4]
 8017066:	f9b3 2000 	ldrsh.w	r2, [r3]
 801706a:	2300      	movs	r3, #0
 801706c:	80c2      	strh	r2, [r0, #6]
 801706e:	8003      	strh	r3, [r0, #0]
 8017070:	8043      	strh	r3, [r0, #2]
 8017072:	e7ee      	b.n	8017052 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8017074:	2300      	movs	r3, #0
 8017076:	8003      	strh	r3, [r0, #0]
 8017078:	8043      	strh	r3, [r0, #2]
 801707a:	8083      	strh	r3, [r0, #4]
 801707c:	e7d8      	b.n	8017030 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801707e:	bf00      	nop
 8017080:	20021080 	.word	0x20021080
 8017084:	08028f00 	.word	0x08028f00
 8017088:	08029c41 	.word	0x08029c41
 801708c:	08029b7d 	.word	0x08029b7d
 8017090:	20021078 	.word	0x20021078
 8017094:	2002107c 	.word	0x2002107c
 8017098:	20021060 	.word	0x20021060
 801709c:	20020fcc 	.word	0x20020fcc
 80170a0:	20020fce 	.word	0x20020fce

080170a4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 80170a4:	4b18      	ldr	r3, [pc, #96]	; (8017108 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	b34b      	cbz	r3, 80170fe <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 80170aa:	4a18      	ldr	r2, [pc, #96]	; (801710c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80170ac:	8800      	ldrh	r0, [r0, #0]
 80170ae:	8812      	ldrh	r2, [r2, #0]
 80170b0:	4290      	cmp	r0, r2
 80170b2:	d211      	bcs.n	80170d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 80170b4:	2214      	movs	r2, #20
 80170b6:	fb02 3300 	mla	r3, r2, r0, r3
 80170ba:	8a1a      	ldrh	r2, [r3, #16]
 80170bc:	8919      	ldrh	r1, [r3, #8]
 80170be:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80170c2:	428a      	cmp	r2, r1
 80170c4:	db1d      	blt.n	8017102 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 80170c6:	8a58      	ldrh	r0, [r3, #18]
 80170c8:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80170cc:	895b      	ldrh	r3, [r3, #10]
 80170ce:	4298      	cmp	r0, r3
 80170d0:	bfac      	ite	ge
 80170d2:	2000      	movge	r0, #0
 80170d4:	2001      	movlt	r0, #1
 80170d6:	4770      	bx	lr
 80170d8:	4b0d      	ldr	r3, [pc, #52]	; (8017110 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 80170da:	881b      	ldrh	r3, [r3, #0]
 80170dc:	4413      	add	r3, r2
 80170de:	4298      	cmp	r0, r3
 80170e0:	da0d      	bge.n	80170fe <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 80170e2:	4b0c      	ldr	r3, [pc, #48]	; (8017114 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 80170e4:	1a80      	subs	r0, r0, r2
 80170e6:	220e      	movs	r2, #14
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	fb02 3300 	mla	r3, r2, r0, r3
 80170ee:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80170f2:	891a      	ldrh	r2, [r3, #8]
 80170f4:	4291      	cmp	r1, r2
 80170f6:	db04      	blt.n	8017102 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 80170f8:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80170fc:	e7e6      	b.n	80170cc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 80170fe:	2000      	movs	r0, #0
 8017100:	4770      	bx	lr
 8017102:	2001      	movs	r0, #1
 8017104:	4770      	bx	lr
 8017106:	bf00      	nop
 8017108:	20021080 	.word	0x20021080
 801710c:	20021078 	.word	0x20021078
 8017110:	2002107c 	.word	0x2002107c
 8017114:	20021060 	.word	0x20021060

08017118 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8017118:	b508      	push	{r3, lr}
 801711a:	4b12      	ldr	r3, [pc, #72]	; (8017164 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801711c:	6819      	ldr	r1, [r3, #0]
 801711e:	b931      	cbnz	r1, 801712e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8017120:	4b11      	ldr	r3, [pc, #68]	; (8017168 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8017122:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
 8017126:	4a11      	ldr	r2, [pc, #68]	; (801716c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8017128:	4811      	ldr	r0, [pc, #68]	; (8017170 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801712a:	f00d fc65 	bl	80249f8 <__assert_func>
 801712e:	8803      	ldrh	r3, [r0, #0]
 8017130:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017134:	4293      	cmp	r3, r2
 8017136:	d012      	beq.n	801715e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8017138:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801713c:	4293      	cmp	r3, r2
 801713e:	d103      	bne.n	8017148 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8017140:	4b0c      	ldr	r3, [pc, #48]	; (8017174 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8017142:	681b      	ldr	r3, [r3, #0]
 8017144:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8017146:	bd08      	pop	{r3, pc}
 8017148:	4a0b      	ldr	r2, [pc, #44]	; (8017178 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801714a:	6812      	ldr	r2, [r2, #0]
 801714c:	b11a      	cbz	r2, 8017156 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801714e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8017152:	2800      	cmp	r0, #0
 8017154:	d1f7      	bne.n	8017146 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8017156:	2214      	movs	r2, #20
 8017158:	4353      	muls	r3, r2
 801715a:	58c8      	ldr	r0, [r1, r3]
 801715c:	e7f3      	b.n	8017146 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801715e:	2000      	movs	r0, #0
 8017160:	e7f1      	b.n	8017146 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8017162:	bf00      	nop
 8017164:	20021080 	.word	0x20021080
 8017168:	08028f00 	.word	0x08028f00
 801716c:	08029c77 	.word	0x08029c77
 8017170:	08029b7d 	.word	0x08029b7d
 8017174:	20020fd8 	.word	0x20020fd8
 8017178:	2002105c 	.word	0x2002105c

0801717c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801717c:	8802      	ldrh	r2, [r0, #0]
 801717e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8017182:	429a      	cmp	r2, r3
 8017184:	d845      	bhi.n	8017212 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8017186:	4b24      	ldr	r3, [pc, #144]	; (8017218 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8017188:	8818      	ldrh	r0, [r3, #0]
 801718a:	4282      	cmp	r2, r0
 801718c:	d221      	bcs.n	80171d2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801718e:	4b23      	ldr	r3, [pc, #140]	; (801721c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8017190:	6819      	ldr	r1, [r3, #0]
 8017192:	2314      	movs	r3, #20
 8017194:	fb03 1302 	mla	r3, r3, r2, r1
 8017198:	6858      	ldr	r0, [r3, #4]
 801719a:	2800      	cmp	r0, #0
 801719c:	d03a      	beq.n	8017214 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801719e:	4920      	ldr	r1, [pc, #128]	; (8017220 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80171a0:	6809      	ldr	r1, [r1, #0]
 80171a2:	2900      	cmp	r1, #0
 80171a4:	d036      	beq.n	8017214 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 80171a6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80171aa:	2900      	cmp	r1, #0
 80171ac:	d032      	beq.n	8017214 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 80171ae:	891a      	ldrh	r2, [r3, #8]
 80171b0:	8958      	ldrh	r0, [r3, #10]
 80171b2:	4350      	muls	r0, r2
 80171b4:	7c5a      	ldrb	r2, [r3, #17]
 80171b6:	7cdb      	ldrb	r3, [r3, #19]
 80171b8:	0952      	lsrs	r2, r2, #5
 80171ba:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80171be:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80171c2:	2b0b      	cmp	r3, #11
 80171c4:	bf18      	it	ne
 80171c6:	0040      	lslne	r0, r0, #1
 80171c8:	3003      	adds	r0, #3
 80171ca:	f020 0003 	bic.w	r0, r0, #3
 80171ce:	4408      	add	r0, r1
 80171d0:	4770      	bx	lr
 80171d2:	4b14      	ldr	r3, [pc, #80]	; (8017224 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 80171d4:	881b      	ldrh	r3, [r3, #0]
 80171d6:	4403      	add	r3, r0
 80171d8:	429a      	cmp	r2, r3
 80171da:	da1a      	bge.n	8017212 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 80171dc:	4b12      	ldr	r3, [pc, #72]	; (8017228 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 80171de:	1a10      	subs	r0, r2, r0
 80171e0:	210e      	movs	r1, #14
 80171e2:	681b      	ldr	r3, [r3, #0]
 80171e4:	fb01 3000 	mla	r0, r1, r0, r3
 80171e8:	7b03      	ldrb	r3, [r0, #12]
 80171ea:	f003 031f 	and.w	r3, r3, #31
 80171ee:	2b0b      	cmp	r3, #11
 80171f0:	d10b      	bne.n	801720a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80171f2:	8903      	ldrh	r3, [r0, #8]
 80171f4:	8940      	ldrh	r0, [r0, #10]
 80171f6:	4358      	muls	r0, r3
 80171f8:	4b09      	ldr	r3, [pc, #36]	; (8017220 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80171fa:	3003      	adds	r0, #3
 80171fc:	6819      	ldr	r1, [r3, #0]
 80171fe:	f020 0303 	bic.w	r3, r0, #3
 8017202:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8017206:	4418      	add	r0, r3
 8017208:	4770      	bx	lr
 801720a:	2b0d      	cmp	r3, #13
 801720c:	d101      	bne.n	8017212 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801720e:	300d      	adds	r0, #13
 8017210:	4770      	bx	lr
 8017212:	2000      	movs	r0, #0
 8017214:	4770      	bx	lr
 8017216:	bf00      	nop
 8017218:	20021078 	.word	0x20021078
 801721c:	20021080 	.word	0x20021080
 8017220:	2002105c 	.word	0x2002105c
 8017224:	2002107c 	.word	0x2002107c
 8017228:	20021060 	.word	0x20021060

0801722c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801722c:	4b17      	ldr	r3, [pc, #92]	; (801728c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801722e:	b510      	push	{r4, lr}
 8017230:	6819      	ldr	r1, [r3, #0]
 8017232:	8803      	ldrh	r3, [r0, #0]
 8017234:	b1e9      	cbz	r1, 8017272 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8017236:	4a16      	ldr	r2, [pc, #88]	; (8017290 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8017238:	8812      	ldrh	r2, [r2, #0]
 801723a:	429a      	cmp	r2, r3
 801723c:	d90a      	bls.n	8017254 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801723e:	2214      	movs	r2, #20
 8017240:	fb02 1303 	mla	r3, r2, r3, r1
 8017244:	7c58      	ldrb	r0, [r3, #17]
 8017246:	0942      	lsrs	r2, r0, #5
 8017248:	7cd8      	ldrb	r0, [r3, #19]
 801724a:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801724e:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8017252:	bd10      	pop	{r4, pc}
 8017254:	490f      	ldr	r1, [pc, #60]	; (8017294 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8017256:	8809      	ldrh	r1, [r1, #0]
 8017258:	4411      	add	r1, r2
 801725a:	428b      	cmp	r3, r1
 801725c:	da09      	bge.n	8017272 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801725e:	1a9b      	subs	r3, r3, r2
 8017260:	4a0d      	ldr	r2, [pc, #52]	; (8017298 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8017262:	210e      	movs	r1, #14
 8017264:	6812      	ldr	r2, [r2, #0]
 8017266:	fb01 2303 	mla	r3, r1, r3, r2
 801726a:	7b18      	ldrb	r0, [r3, #12]
 801726c:	f000 001f 	and.w	r0, r0, #31
 8017270:	e7ef      	b.n	8017252 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8017272:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017276:	4293      	cmp	r3, r2
 8017278:	d106      	bne.n	8017288 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801727a:	f7f6 fe19 	bl	800deb0 <_ZN8touchgfx3HAL3lcdEv>
 801727e:	6803      	ldr	r3, [r0, #0]
 8017280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017286:	4718      	bx	r3
 8017288:	2000      	movs	r0, #0
 801728a:	e7e2      	b.n	8017252 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801728c:	20021080 	.word	0x20021080
 8017290:	20021078 	.word	0x20021078
 8017294:	2002107c 	.word	0x2002107c
 8017298:	20021060 	.word	0x20021060

0801729c <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801729c:	2010      	movs	r0, #16
 801729e:	4770      	bx	lr

080172a0 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 80172a0:	2000      	movs	r0, #0
 80172a2:	4770      	bx	lr

080172a4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80172a4:	2bff      	cmp	r3, #255	; 0xff
 80172a6:	d050      	beq.n	801734a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 80172a8:	2a0b      	cmp	r2, #11
 80172aa:	d04a      	beq.n	8017342 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80172ac:	d80e      	bhi.n	80172cc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 80172ae:	2a03      	cmp	r2, #3
 80172b0:	d03f      	beq.n	8017332 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 80172b2:	d804      	bhi.n	80172be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80172b4:	2a01      	cmp	r2, #1
 80172b6:	d03e      	beq.n	8017336 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 80172b8:	d93f      	bls.n	801733a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80172ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80172bc:	4770      	bx	lr
 80172be:	2a09      	cmp	r2, #9
 80172c0:	d03f      	beq.n	8017342 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80172c2:	d83c      	bhi.n	801733e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80172c4:	2a08      	cmp	r2, #8
 80172c6:	d03a      	beq.n	801733e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80172c8:	2000      	movs	r0, #0
 80172ca:	4770      	bx	lr
 80172cc:	2a2f      	cmp	r2, #47	; 0x2f
 80172ce:	d024      	beq.n	801731a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80172d0:	d80d      	bhi.n	80172ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 80172d2:	2a2d      	cmp	r2, #45	; 0x2d
 80172d4:	d014      	beq.n	8017300 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 80172d6:	d826      	bhi.n	8017326 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 80172d8:	2a2c      	cmp	r2, #44	; 0x2c
 80172da:	d1f5      	bne.n	80172c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80172dc:	684b      	ldr	r3, [r1, #4]
 80172de:	781b      	ldrb	r3, [r3, #0]
 80172e0:	2b01      	cmp	r3, #1
 80172e2:	d018      	beq.n	8017316 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 80172e4:	d323      	bcc.n	801732e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 80172e6:	2b02      	cmp	r3, #2
 80172e8:	d1ee      	bne.n	80172c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80172ea:	6880      	ldr	r0, [r0, #8]
 80172ec:	4770      	bx	lr
 80172ee:	2a31      	cmp	r2, #49	; 0x31
 80172f0:	d004      	beq.n	80172fc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 80172f2:	d328      	bcc.n	8017346 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80172f4:	2a32      	cmp	r2, #50	; 0x32
 80172f6:	d026      	beq.n	8017346 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80172f8:	2a33      	cmp	r2, #51	; 0x33
 80172fa:	d1e5      	bne.n	80172c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80172fc:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80172fe:	4770      	bx	lr
 8017300:	684b      	ldr	r3, [r1, #4]
 8017302:	781b      	ldrb	r3, [r3, #0]
 8017304:	2b01      	cmp	r3, #1
 8017306:	d004      	beq.n	8017312 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8017308:	d30b      	bcc.n	8017322 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801730a:	2b02      	cmp	r3, #2
 801730c:	d1dc      	bne.n	80172c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801730e:	6900      	ldr	r0, [r0, #16]
 8017310:	4770      	bx	lr
 8017312:	6a00      	ldr	r0, [r0, #32]
 8017314:	4770      	bx	lr
 8017316:	6980      	ldr	r0, [r0, #24]
 8017318:	4770      	bx	lr
 801731a:	684b      	ldr	r3, [r1, #4]
 801731c:	781b      	ldrb	r3, [r3, #0]
 801731e:	2b00      	cmp	r3, #0
 8017320:	d1d2      	bne.n	80172c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017322:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8017324:	4770      	bx	lr
 8017326:	684b      	ldr	r3, [r1, #4]
 8017328:	781b      	ldrb	r3, [r3, #0]
 801732a:	2b00      	cmp	r3, #0
 801732c:	d1cc      	bne.n	80172c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801732e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8017330:	4770      	bx	lr
 8017332:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8017334:	4770      	bx	lr
 8017336:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8017338:	4770      	bx	lr
 801733a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801733c:	4770      	bx	lr
 801733e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8017340:	4770      	bx	lr
 8017342:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8017344:	4770      	bx	lr
 8017346:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8017348:	4770      	bx	lr
 801734a:	2a0b      	cmp	r2, #11
 801734c:	d049      	beq.n	80173e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801734e:	d80e      	bhi.n	801736e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8017350:	2a03      	cmp	r2, #3
 8017352:	d040      	beq.n	80173d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8017354:	d804      	bhi.n	8017360 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8017356:	2a01      	cmp	r2, #1
 8017358:	d03f      	beq.n	80173da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801735a:	d940      	bls.n	80173de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801735c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801735e:	4770      	bx	lr
 8017360:	2a09      	cmp	r2, #9
 8017362:	d03e      	beq.n	80173e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8017364:	d801      	bhi.n	801736a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8017366:	2a08      	cmp	r2, #8
 8017368:	d1ae      	bne.n	80172c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801736a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801736c:	4770      	bx	lr
 801736e:	2a2f      	cmp	r2, #47	; 0x2f
 8017370:	d024      	beq.n	80173bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8017372:	d80d      	bhi.n	8017390 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8017374:	2a2d      	cmp	r2, #45	; 0x2d
 8017376:	d014      	beq.n	80173a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8017378:	d826      	bhi.n	80173c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801737a:	2a2c      	cmp	r2, #44	; 0x2c
 801737c:	d1a4      	bne.n	80172c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801737e:	684b      	ldr	r3, [r1, #4]
 8017380:	781b      	ldrb	r3, [r3, #0]
 8017382:	2b01      	cmp	r3, #1
 8017384:	d018      	beq.n	80173b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8017386:	d324      	bcc.n	80173d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8017388:	2b02      	cmp	r3, #2
 801738a:	d19d      	bne.n	80172c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801738c:	68c0      	ldr	r0, [r0, #12]
 801738e:	4770      	bx	lr
 8017390:	2a31      	cmp	r2, #49	; 0x31
 8017392:	d004      	beq.n	801739e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8017394:	d327      	bcc.n	80173e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8017396:	2a32      	cmp	r2, #50	; 0x32
 8017398:	d025      	beq.n	80173e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801739a:	2a33      	cmp	r2, #51	; 0x33
 801739c:	d194      	bne.n	80172c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801739e:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80173a0:	4770      	bx	lr
 80173a2:	684b      	ldr	r3, [r1, #4]
 80173a4:	781b      	ldrb	r3, [r3, #0]
 80173a6:	2b01      	cmp	r3, #1
 80173a8:	d004      	beq.n	80173b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 80173aa:	d30b      	bcc.n	80173c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 80173ac:	2b02      	cmp	r3, #2
 80173ae:	d18b      	bne.n	80172c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80173b0:	6940      	ldr	r0, [r0, #20]
 80173b2:	4770      	bx	lr
 80173b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80173b6:	4770      	bx	lr
 80173b8:	69c0      	ldr	r0, [r0, #28]
 80173ba:	4770      	bx	lr
 80173bc:	684b      	ldr	r3, [r1, #4]
 80173be:	781b      	ldrb	r3, [r3, #0]
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d181      	bne.n	80172c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80173c4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80173c6:	4770      	bx	lr
 80173c8:	684b      	ldr	r3, [r1, #4]
 80173ca:	781b      	ldrb	r3, [r3, #0]
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	f47f af7b 	bne.w	80172c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80173d2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80173d4:	4770      	bx	lr
 80173d6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80173d8:	4770      	bx	lr
 80173da:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80173dc:	4770      	bx	lr
 80173de:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80173e0:	4770      	bx	lr
 80173e2:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80173e4:	4770      	bx	lr
 80173e6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 80173e8:	4770      	bx	lr

080173ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80173ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173ee:	b087      	sub	sp, #28
 80173f0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80173f2:	9205      	str	r2, [sp, #20]
 80173f4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80173f8:	9101      	str	r1, [sp, #4]
 80173fa:	9202      	str	r2, [sp, #8]
 80173fc:	6841      	ldr	r1, [r0, #4]
 80173fe:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8017402:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8017406:	fb01 2404 	mla	r4, r1, r4, r2
 801740a:	6802      	ldr	r2, [r0, #0]
 801740c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8017410:	f8de 2000 	ldr.w	r2, [lr]
 8017414:	9203      	str	r2, [sp, #12]
 8017416:	f8de 2004 	ldr.w	r2, [lr, #4]
 801741a:	3204      	adds	r2, #4
 801741c:	9204      	str	r2, [sp, #16]
 801741e:	9a02      	ldr	r2, [sp, #8]
 8017420:	43d6      	mvns	r6, r2
 8017422:	b2f6      	uxtb	r6, r6
 8017424:	9a01      	ldr	r2, [sp, #4]
 8017426:	2a00      	cmp	r2, #0
 8017428:	dc03      	bgt.n	8017432 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801742a:	9a05      	ldr	r2, [sp, #20]
 801742c:	2a00      	cmp	r2, #0
 801742e:	f340 8129 	ble.w	8017684 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017432:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017434:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8017438:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801743c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801743e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8017442:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017446:	2b00      	cmp	r3, #0
 8017448:	dd0e      	ble.n	8017468 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801744a:	1408      	asrs	r0, r1, #16
 801744c:	d405      	bmi.n	801745a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801744e:	4560      	cmp	r0, ip
 8017450:	da03      	bge.n	801745a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017452:	1410      	asrs	r0, r2, #16
 8017454:	d401      	bmi.n	801745a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017456:	42b8      	cmp	r0, r7
 8017458:	db07      	blt.n	801746a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801745a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801745c:	3b01      	subs	r3, #1
 801745e:	3402      	adds	r4, #2
 8017460:	4401      	add	r1, r0
 8017462:	9814      	ldr	r0, [sp, #80]	; 0x50
 8017464:	4402      	add	r2, r0
 8017466:	e7ee      	b.n	8017446 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8017468:	d071      	beq.n	801754e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801746a:	1e58      	subs	r0, r3, #1
 801746c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801746e:	fb05 1500 	mla	r5, r5, r0, r1
 8017472:	142d      	asrs	r5, r5, #16
 8017474:	d45f      	bmi.n	8017536 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8017476:	4565      	cmp	r5, ip
 8017478:	da5d      	bge.n	8017536 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801747a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801747c:	fb05 2000 	mla	r0, r5, r0, r2
 8017480:	1400      	asrs	r0, r0, #16
 8017482:	d458      	bmi.n	8017536 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8017484:	42b8      	cmp	r0, r7
 8017486:	da56      	bge.n	8017536 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8017488:	4699      	mov	r9, r3
 801748a:	46a2      	mov	sl, r4
 801748c:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8017490:	f1b9 0f00 	cmp.w	r9, #0
 8017494:	dd57      	ble.n	8017546 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8017496:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801749a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801749e:	9803      	ldr	r0, [sp, #12]
 80174a0:	140d      	asrs	r5, r1, #16
 80174a2:	f109 39ff 	add.w	r9, r9, #4294967295
 80174a6:	fb07 000c 	mla	r0, r7, ip, r0
 80174aa:	5d40      	ldrb	r0, [r0, r5]
 80174ac:	9d04      	ldr	r5, [sp, #16]
 80174ae:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80174b2:	f8ba 5000 	ldrh.w	r5, [sl]
 80174b6:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80174ba:	122f      	asrs	r7, r5, #8
 80174bc:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80174c0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80174c4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80174c8:	00ed      	lsls	r5, r5, #3
 80174ca:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 80174ce:	fb17 f706 	smulbb	r7, r7, r6
 80174d2:	b2ed      	uxtb	r5, r5
 80174d4:	fb18 f806 	smulbb	r8, r8, r6
 80174d8:	fb0c 7c0b 	mla	ip, ip, fp, r7
 80174dc:	10c7      	asrs	r7, r0, #3
 80174de:	fb15 f506 	smulbb	r5, r5, r6
 80174e2:	00c0      	lsls	r0, r0, #3
 80174e4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80174e8:	fa1f fc8c 	uxth.w	ip, ip
 80174ec:	b2c0      	uxtb	r0, r0
 80174ee:	fb07 870b 	mla	r7, r7, fp, r8
 80174f2:	fb00 500b 	mla	r0, r0, fp, r5
 80174f6:	f10c 0501 	add.w	r5, ip, #1
 80174fa:	b2bf      	uxth	r7, r7
 80174fc:	b280      	uxth	r0, r0
 80174fe:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8017502:	f107 0801 	add.w	r8, r7, #1
 8017506:	1c45      	adds	r5, r0, #1
 8017508:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801750c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8017510:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8017514:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8017516:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801751a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801751e:	4401      	add	r1, r0
 8017520:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8017524:	9814      	ldr	r0, [sp, #80]	; 0x50
 8017526:	ea45 0c0c 	orr.w	ip, r5, ip
 801752a:	4402      	add	r2, r0
 801752c:	ea4c 0c08 	orr.w	ip, ip, r8
 8017530:	f82a cb02 	strh.w	ip, [sl], #2
 8017534:	e7ac      	b.n	8017490 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8017536:	f04f 0800 	mov.w	r8, #0
 801753a:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801753e:	eb03 0008 	add.w	r0, r3, r8
 8017542:	2800      	cmp	r0, #0
 8017544:	dc41      	bgt.n	80175ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8017546:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801754a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801754e:	9b01      	ldr	r3, [sp, #4]
 8017550:	2b00      	cmp	r3, #0
 8017552:	f340 8097 	ble.w	8017684 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017556:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801755a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801755c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017560:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017564:	eef0 6a62 	vmov.f32	s13, s5
 8017568:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801756c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017570:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017574:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8017578:	eef0 6a43 	vmov.f32	s13, s6
 801757c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017580:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8017584:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017588:	ee61 7a27 	vmul.f32	s15, s2, s15
 801758c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017590:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017594:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017598:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801759c:	ee12 2a90 	vmov	r2, s5
 80175a0:	eef0 2a47 	vmov.f32	s5, s14
 80175a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80175a8:	ee13 2a10 	vmov	r2, s6
 80175ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80175ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80175b0:	eeb0 3a67 	vmov.f32	s6, s15
 80175b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80175b8:	9314      	str	r3, [sp, #80]	; 0x50
 80175ba:	9b01      	ldr	r3, [sp, #4]
 80175bc:	9a05      	ldr	r2, [sp, #20]
 80175be:	3b01      	subs	r3, #1
 80175c0:	9301      	str	r3, [sp, #4]
 80175c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80175c4:	bf08      	it	eq
 80175c6:	4613      	moveq	r3, r2
 80175c8:	e72c      	b.n	8017424 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80175ca:	140f      	asrs	r7, r1, #16
 80175cc:	d453      	bmi.n	8017676 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80175ce:	f8de 5008 	ldr.w	r5, [lr, #8]
 80175d2:	42bd      	cmp	r5, r7
 80175d4:	dd4f      	ble.n	8017676 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80175d6:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80175da:	d44c      	bmi.n	8017676 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80175dc:	f8de 000c 	ldr.w	r0, [lr, #12]
 80175e0:	4560      	cmp	r0, ip
 80175e2:	dd48      	ble.n	8017676 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80175e4:	9803      	ldr	r0, [sp, #12]
 80175e6:	b22d      	sxth	r5, r5
 80175e8:	fb0c 0505 	mla	r5, ip, r5, r0
 80175ec:	5de8      	ldrb	r0, [r5, r7]
 80175ee:	9d04      	ldr	r5, [sp, #16]
 80175f0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80175f4:	f06f 0501 	mvn.w	r5, #1
 80175f8:	fb05 fb08 	mul.w	fp, r5, r8
 80175fc:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8017600:	f834 500b 	ldrh.w	r5, [r4, fp]
 8017604:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017608:	122f      	asrs	r7, r5, #8
 801760a:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801760e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017612:	00ed      	lsls	r5, r5, #3
 8017614:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8017618:	fb17 f706 	smulbb	r7, r7, r6
 801761c:	b2ed      	uxtb	r5, r5
 801761e:	fb19 f906 	smulbb	r9, r9, r6
 8017622:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8017626:	10c7      	asrs	r7, r0, #3
 8017628:	fb15 f506 	smulbb	r5, r5, r6
 801762c:	00c0      	lsls	r0, r0, #3
 801762e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8017632:	fa1f fc8c 	uxth.w	ip, ip
 8017636:	b2c0      	uxtb	r0, r0
 8017638:	fb07 970a 	mla	r7, r7, sl, r9
 801763c:	fb00 500a 	mla	r0, r0, sl, r5
 8017640:	f10c 0501 	add.w	r5, ip, #1
 8017644:	b2bf      	uxth	r7, r7
 8017646:	b280      	uxth	r0, r0
 8017648:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801764c:	f107 0901 	add.w	r9, r7, #1
 8017650:	1c45      	adds	r5, r0, #1
 8017652:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8017656:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801765a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801765e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8017662:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8017666:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801766a:	ea45 0c0c 	orr.w	ip, r5, ip
 801766e:	ea4c 0c09 	orr.w	ip, ip, r9
 8017672:	f824 c00b 	strh.w	ip, [r4, fp]
 8017676:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8017678:	f108 38ff 	add.w	r8, r8, #4294967295
 801767c:	4401      	add	r1, r0
 801767e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8017680:	4402      	add	r2, r0
 8017682:	e75c      	b.n	801753e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8017684:	b007      	add	sp, #28
 8017686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801768a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801768a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801768e:	b085      	sub	sp, #20
 8017690:	4693      	mov	fp, r2
 8017692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017696:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8017698:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801769a:	6870      	ldr	r0, [r6, #4]
 801769c:	9100      	str	r1, [sp, #0]
 801769e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80176a2:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 80176a6:	fb00 2404 	mla	r4, r0, r4, r2
 80176aa:	6832      	ldr	r2, [r6, #0]
 80176ac:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80176b0:	682a      	ldr	r2, [r5, #0]
 80176b2:	9201      	str	r2, [sp, #4]
 80176b4:	686a      	ldr	r2, [r5, #4]
 80176b6:	3204      	adds	r2, #4
 80176b8:	9202      	str	r2, [sp, #8]
 80176ba:	9a00      	ldr	r2, [sp, #0]
 80176bc:	2a00      	cmp	r2, #0
 80176be:	dc03      	bgt.n	80176c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80176c0:	f1bb 0f00 	cmp.w	fp, #0
 80176c4:	f340 80a0 	ble.w	8017808 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 80176c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80176ca:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80176ce:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80176d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80176d4:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 80176d8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80176dc:	2b00      	cmp	r3, #0
 80176de:	dd0c      	ble.n	80176fa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80176e0:	1406      	asrs	r6, r0, #16
 80176e2:	d405      	bmi.n	80176f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80176e4:	454e      	cmp	r6, r9
 80176e6:	da03      	bge.n	80176f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80176e8:	1416      	asrs	r6, r2, #16
 80176ea:	d401      	bmi.n	80176f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80176ec:	4546      	cmp	r6, r8
 80176ee:	db05      	blt.n	80176fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80176f0:	4470      	add	r0, lr
 80176f2:	4462      	add	r2, ip
 80176f4:	3b01      	subs	r3, #1
 80176f6:	3402      	adds	r4, #2
 80176f8:	e7f0      	b.n	80176dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80176fa:	d00f      	beq.n	801771c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80176fc:	1e5e      	subs	r6, r3, #1
 80176fe:	fb0e 0706 	mla	r7, lr, r6, r0
 8017702:	143f      	asrs	r7, r7, #16
 8017704:	d541      	bpl.n	801778a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 8017706:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801770a:	4698      	mov	r8, r3
 801770c:	9603      	str	r6, [sp, #12]
 801770e:	f1b8 0f00 	cmp.w	r8, #0
 8017712:	dc59      	bgt.n	80177c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8017714:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017718:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801771c:	9b00      	ldr	r3, [sp, #0]
 801771e:	2b00      	cmp	r3, #0
 8017720:	dd72      	ble.n	8017808 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8017722:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017726:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017728:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801772c:	eeb0 6a62 	vmov.f32	s12, s5
 8017730:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017734:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017738:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801773c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8017740:	eeb0 6a43 	vmov.f32	s12, s6
 8017744:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017748:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801774c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017750:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017754:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017758:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801775c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017760:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017764:	ee12 2a90 	vmov	r2, s5
 8017768:	eef0 2a47 	vmov.f32	s5, s14
 801776c:	fb92 fef3 	sdiv	lr, r2, r3
 8017770:	ee13 2a10 	vmov	r2, s6
 8017774:	eeb0 3a67 	vmov.f32	s6, s15
 8017778:	fb92 fcf3 	sdiv	ip, r2, r3
 801777c:	9b00      	ldr	r3, [sp, #0]
 801777e:	3b01      	subs	r3, #1
 8017780:	9300      	str	r3, [sp, #0]
 8017782:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017784:	bf08      	it	eq
 8017786:	465b      	moveq	r3, fp
 8017788:	e797      	b.n	80176ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801778a:	454f      	cmp	r7, r9
 801778c:	dabb      	bge.n	8017706 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801778e:	fb0c 2606 	mla	r6, ip, r6, r2
 8017792:	1436      	asrs	r6, r6, #16
 8017794:	d4b7      	bmi.n	8017706 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017796:	4546      	cmp	r6, r8
 8017798:	dab5      	bge.n	8017706 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801779a:	461e      	mov	r6, r3
 801779c:	46a0      	mov	r8, r4
 801779e:	2e00      	cmp	r6, #0
 80177a0:	ddb8      	ble.n	8017714 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80177a2:	1417      	asrs	r7, r2, #16
 80177a4:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 80177a8:	9901      	ldr	r1, [sp, #4]
 80177aa:	ea4f 4920 	mov.w	r9, r0, asr #16
 80177ae:	4462      	add	r2, ip
 80177b0:	4470      	add	r0, lr
 80177b2:	fb0a 1707 	mla	r7, sl, r7, r1
 80177b6:	9902      	ldr	r1, [sp, #8]
 80177b8:	3e01      	subs	r6, #1
 80177ba:	f817 7009 	ldrb.w	r7, [r7, r9]
 80177be:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 80177c2:	f828 7b02 	strh.w	r7, [r8], #2
 80177c6:	e7ea      	b.n	801779e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80177c8:	ea5f 4920 	movs.w	r9, r0, asr #16
 80177cc:	d417      	bmi.n	80177fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80177ce:	68ae      	ldr	r6, [r5, #8]
 80177d0:	454e      	cmp	r6, r9
 80177d2:	dd14      	ble.n	80177fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80177d4:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80177d8:	d411      	bmi.n	80177fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80177da:	68ef      	ldr	r7, [r5, #12]
 80177dc:	4557      	cmp	r7, sl
 80177de:	dd0e      	ble.n	80177fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80177e0:	9f01      	ldr	r7, [sp, #4]
 80177e2:	b236      	sxth	r6, r6
 80177e4:	f06f 0101 	mvn.w	r1, #1
 80177e8:	fb0a 7606 	mla	r6, sl, r6, r7
 80177ec:	9f02      	ldr	r7, [sp, #8]
 80177ee:	f816 6009 	ldrb.w	r6, [r6, r9]
 80177f2:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 80177f6:	fb01 f608 	mul.w	r6, r1, r8
 80177fa:	9903      	ldr	r1, [sp, #12]
 80177fc:	538f      	strh	r7, [r1, r6]
 80177fe:	4470      	add	r0, lr
 8017800:	4462      	add	r2, ip
 8017802:	f108 38ff 	add.w	r8, r8, #4294967295
 8017806:	e782      	b.n	801770e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8017808:	b005      	add	sp, #20
 801780a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801780e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801780e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017812:	b087      	sub	sp, #28
 8017814:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017816:	9205      	str	r2, [sp, #20]
 8017818:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801781c:	9102      	str	r1, [sp, #8]
 801781e:	9203      	str	r2, [sp, #12]
 8017820:	6861      	ldr	r1, [r4, #4]
 8017822:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8017826:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801782a:	fb01 2000 	mla	r0, r1, r0, r2
 801782e:	6822      	ldr	r2, [r4, #0]
 8017830:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8017834:	9200      	str	r2, [sp, #0]
 8017836:	f8dc 2000 	ldr.w	r2, [ip]
 801783a:	9204      	str	r2, [sp, #16]
 801783c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8017840:	3204      	adds	r2, #4
 8017842:	9201      	str	r2, [sp, #4]
 8017844:	9a03      	ldr	r2, [sp, #12]
 8017846:	43d5      	mvns	r5, r2
 8017848:	b2ed      	uxtb	r5, r5
 801784a:	9a02      	ldr	r2, [sp, #8]
 801784c:	2a00      	cmp	r2, #0
 801784e:	dc03      	bgt.n	8017858 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8017850:	9a05      	ldr	r2, [sp, #20]
 8017852:	2a00      	cmp	r2, #0
 8017854:	f340 812c 	ble.w	8017ab0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8017858:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801785a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801785e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8017862:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017864:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8017868:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801786c:	2b00      	cmp	r3, #0
 801786e:	dd10      	ble.n	8017892 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8017870:	140c      	asrs	r4, r1, #16
 8017872:	d405      	bmi.n	8017880 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017874:	4574      	cmp	r4, lr
 8017876:	da03      	bge.n	8017880 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017878:	1414      	asrs	r4, r2, #16
 801787a:	d401      	bmi.n	8017880 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801787c:	42bc      	cmp	r4, r7
 801787e:	db09      	blt.n	8017894 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8017880:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017882:	3b01      	subs	r3, #1
 8017884:	9800      	ldr	r0, [sp, #0]
 8017886:	4421      	add	r1, r4
 8017888:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801788a:	3002      	adds	r0, #2
 801788c:	4422      	add	r2, r4
 801788e:	9000      	str	r0, [sp, #0]
 8017890:	e7ec      	b.n	801786c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8017892:	d071      	beq.n	8017978 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8017894:	1e5c      	subs	r4, r3, #1
 8017896:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8017898:	fb06 1604 	mla	r6, r6, r4, r1
 801789c:	1436      	asrs	r6, r6, #16
 801789e:	d45d      	bmi.n	801795c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80178a0:	4576      	cmp	r6, lr
 80178a2:	da5b      	bge.n	801795c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80178a4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80178a6:	fb06 2404 	mla	r4, r6, r4, r2
 80178aa:	1424      	asrs	r4, r4, #16
 80178ac:	d456      	bmi.n	801795c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80178ae:	42bc      	cmp	r4, r7
 80178b0:	da54      	bge.n	801795c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80178b2:	4698      	mov	r8, r3
 80178b4:	f8dd 9000 	ldr.w	r9, [sp]
 80178b8:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 80178bc:	f1b8 0f00 	cmp.w	r8, #0
 80178c0:	dd54      	ble.n	801796c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80178c2:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 80178c6:	1414      	asrs	r4, r2, #16
 80178c8:	9804      	ldr	r0, [sp, #16]
 80178ca:	140e      	asrs	r6, r1, #16
 80178cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80178d0:	fb07 0404 	mla	r4, r7, r4, r0
 80178d4:	9801      	ldr	r0, [sp, #4]
 80178d6:	f814 e006 	ldrb.w	lr, [r4, r6]
 80178da:	f8b9 4000 	ldrh.w	r4, [r9]
 80178de:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80178e2:	1227      	asrs	r7, r4, #8
 80178e4:	eb00 0b0e 	add.w	fp, r0, lr
 80178e8:	f810 e00e 	ldrb.w	lr, [r0, lr]
 80178ec:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80178f0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80178f2:	f89b 6002 	ldrb.w	r6, [fp, #2]
 80178f6:	f89b b001 	ldrb.w	fp, [fp, #1]
 80178fa:	4401      	add	r1, r0
 80178fc:	fb16 f60a 	smulbb	r6, r6, sl
 8017900:	9814      	ldr	r0, [sp, #80]	; 0x50
 8017902:	fb1b fb0a 	smulbb	fp, fp, sl
 8017906:	fb07 6705 	mla	r7, r7, r5, r6
 801790a:	10e6      	asrs	r6, r4, #3
 801790c:	00e4      	lsls	r4, r4, #3
 801790e:	4402      	add	r2, r0
 8017910:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017914:	b2bf      	uxth	r7, r7
 8017916:	b2e4      	uxtb	r4, r4
 8017918:	fb06 b605 	mla	r6, r6, r5, fp
 801791c:	fb14 f405 	smulbb	r4, r4, r5
 8017920:	b2b6      	uxth	r6, r6
 8017922:	fb0e 4e0a 	mla	lr, lr, sl, r4
 8017926:	1c7c      	adds	r4, r7, #1
 8017928:	f106 0b01 	add.w	fp, r6, #1
 801792c:	fa1f fe8e 	uxth.w	lr, lr
 8017930:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8017934:	f10e 0401 	add.w	r4, lr, #1
 8017938:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801793c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8017940:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 8017944:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8017948:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801794c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8017950:	4327      	orrs	r7, r4
 8017952:	ea47 070b 	orr.w	r7, r7, fp
 8017956:	f829 7b02 	strh.w	r7, [r9], #2
 801795a:	e7af      	b.n	80178bc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801795c:	f04f 0e00 	mov.w	lr, #0
 8017960:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 8017964:	eb03 040e 	add.w	r4, r3, lr
 8017968:	2c00      	cmp	r4, #0
 801796a:	dc43      	bgt.n	80179f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801796c:	9a00      	ldr	r2, [sp, #0]
 801796e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017972:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8017976:	9300      	str	r3, [sp, #0]
 8017978:	9b02      	ldr	r3, [sp, #8]
 801797a:	2b00      	cmp	r3, #0
 801797c:	f340 8098 	ble.w	8017ab0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8017980:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017984:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017986:	ee30 0a04 	vadd.f32	s0, s0, s8
 801798a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801798e:	eef0 6a62 	vmov.f32	s13, s5
 8017992:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017996:	ee31 1a05 	vadd.f32	s2, s2, s10
 801799a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801799e:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 80179a2:	eef0 6a43 	vmov.f32	s13, s6
 80179a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80179aa:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 80179ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80179b2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80179b6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80179ba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80179be:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80179c2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80179c6:	ee12 2a90 	vmov	r2, s5
 80179ca:	eef0 2a47 	vmov.f32	s5, s14
 80179ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80179d2:	ee13 2a10 	vmov	r2, s6
 80179d6:	9313      	str	r3, [sp, #76]	; 0x4c
 80179d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80179da:	eeb0 3a67 	vmov.f32	s6, s15
 80179de:	fb92 f3f3 	sdiv	r3, r2, r3
 80179e2:	9314      	str	r3, [sp, #80]	; 0x50
 80179e4:	9b02      	ldr	r3, [sp, #8]
 80179e6:	9a05      	ldr	r2, [sp, #20]
 80179e8:	3b01      	subs	r3, #1
 80179ea:	9302      	str	r3, [sp, #8]
 80179ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80179ee:	bf08      	it	eq
 80179f0:	4613      	moveq	r3, r2
 80179f2:	e72a      	b.n	801784a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80179f4:	140f      	asrs	r7, r1, #16
 80179f6:	d454      	bmi.n	8017aa2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80179f8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80179fc:	42be      	cmp	r6, r7
 80179fe:	dd50      	ble.n	8017aa2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8017a00:	ea5f 4822 	movs.w	r8, r2, asr #16
 8017a04:	d44d      	bmi.n	8017aa2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8017a06:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8017a0a:	4544      	cmp	r4, r8
 8017a0c:	dd49      	ble.n	8017aa2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8017a0e:	9c04      	ldr	r4, [sp, #16]
 8017a10:	b236      	sxth	r6, r6
 8017a12:	f06f 0001 	mvn.w	r0, #1
 8017a16:	fb08 4606 	mla	r6, r8, r6, r4
 8017a1a:	9c01      	ldr	r4, [sp, #4]
 8017a1c:	fb00 fa0e 	mul.w	sl, r0, lr
 8017a20:	9800      	ldr	r0, [sp, #0]
 8017a22:	f816 8007 	ldrb.w	r8, [r6, r7]
 8017a26:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017a2a:	eb04 0b08 	add.w	fp, r4, r8
 8017a2e:	f830 400a 	ldrh.w	r4, [r0, sl]
 8017a32:	9801      	ldr	r0, [sp, #4]
 8017a34:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8017a38:	1227      	asrs	r7, r4, #8
 8017a3a:	f89b b001 	ldrb.w	fp, [fp, #1]
 8017a3e:	fb16 f609 	smulbb	r6, r6, r9
 8017a42:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017a46:	f810 8008 	ldrb.w	r8, [r0, r8]
 8017a4a:	fb1b fb09 	smulbb	fp, fp, r9
 8017a4e:	fb07 6705 	mla	r7, r7, r5, r6
 8017a52:	10e6      	asrs	r6, r4, #3
 8017a54:	00e4      	lsls	r4, r4, #3
 8017a56:	9800      	ldr	r0, [sp, #0]
 8017a58:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017a5c:	b2bf      	uxth	r7, r7
 8017a5e:	b2e4      	uxtb	r4, r4
 8017a60:	fb06 b605 	mla	r6, r6, r5, fp
 8017a64:	fb14 f405 	smulbb	r4, r4, r5
 8017a68:	b2b6      	uxth	r6, r6
 8017a6a:	fb08 4809 	mla	r8, r8, r9, r4
 8017a6e:	1c7c      	adds	r4, r7, #1
 8017a70:	f106 0b01 	add.w	fp, r6, #1
 8017a74:	fa1f f888 	uxth.w	r8, r8
 8017a78:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8017a7c:	f108 0401 	add.w	r4, r8, #1
 8017a80:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8017a84:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8017a88:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 8017a8c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8017a90:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8017a94:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8017a98:	4327      	orrs	r7, r4
 8017a9a:	ea47 070b 	orr.w	r7, r7, fp
 8017a9e:	f820 700a 	strh.w	r7, [r0, sl]
 8017aa2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8017aa4:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017aa8:	4401      	add	r1, r0
 8017aaa:	9814      	ldr	r0, [sp, #80]	; 0x50
 8017aac:	4402      	add	r2, r0
 8017aae:	e759      	b.n	8017964 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8017ab0:	b007      	add	sp, #28
 8017ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08017ab8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017abc:	b085      	sub	sp, #20
 8017abe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017ac2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8017ac4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8017ac6:	9203      	str	r2, [sp, #12]
 8017ac8:	6870      	ldr	r0, [r6, #4]
 8017aca:	686f      	ldr	r7, [r5, #4]
 8017acc:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 8017ad0:	3704      	adds	r7, #4
 8017ad2:	9101      	str	r1, [sp, #4]
 8017ad4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8017ad8:	fb00 2404 	mla	r4, r0, r4, r2
 8017adc:	6832      	ldr	r2, [r6, #0]
 8017ade:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8017ae2:	682a      	ldr	r2, [r5, #0]
 8017ae4:	9202      	str	r2, [sp, #8]
 8017ae6:	9a01      	ldr	r2, [sp, #4]
 8017ae8:	2a00      	cmp	r2, #0
 8017aea:	dc03      	bgt.n	8017af4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8017aec:	9a03      	ldr	r2, [sp, #12]
 8017aee:	2a00      	cmp	r2, #0
 8017af0:	f340 80cc 	ble.w	8017c8c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8017af4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017af6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8017afa:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8017afe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017b00:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8017b04:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	dd0d      	ble.n	8017b28 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017b0c:	1406      	asrs	r6, r0, #16
 8017b0e:	d405      	bmi.n	8017b1c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8017b10:	454e      	cmp	r6, r9
 8017b12:	da03      	bge.n	8017b1c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8017b14:	1416      	asrs	r6, r2, #16
 8017b16:	d401      	bmi.n	8017b1c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8017b18:	4546      	cmp	r6, r8
 8017b1a:	db06      	blt.n	8017b2a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017b1c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8017b1e:	4460      	add	r0, ip
 8017b20:	3b01      	subs	r3, #1
 8017b22:	3402      	adds	r4, #2
 8017b24:	4432      	add	r2, r6
 8017b26:	e7ef      	b.n	8017b08 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8017b28:	d00f      	beq.n	8017b4a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8017b2a:	1e5e      	subs	r6, r3, #1
 8017b2c:	fb0c 0e06 	mla	lr, ip, r6, r0
 8017b30:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8017b34:	d543      	bpl.n	8017bbe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8017b36:	4698      	mov	r8, r3
 8017b38:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 8017b3c:	f1b8 0f00 	cmp.w	r8, #0
 8017b40:	dc71      	bgt.n	8017c26 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8017b42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017b46:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017b4a:	9b01      	ldr	r3, [sp, #4]
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	f340 809d 	ble.w	8017c8c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8017b52:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017b56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b58:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017b5c:	eeb0 6a62 	vmov.f32	s12, s5
 8017b60:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017b64:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017b68:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017b6c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8017b70:	eeb0 6a43 	vmov.f32	s12, s6
 8017b74:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017b78:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8017b7c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017b80:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017b84:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017b88:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017b8c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017b90:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017b94:	ee12 2a90 	vmov	r2, s5
 8017b98:	eef0 2a47 	vmov.f32	s5, s14
 8017b9c:	fb92 fcf3 	sdiv	ip, r2, r3
 8017ba0:	ee13 2a10 	vmov	r2, s6
 8017ba4:	eeb0 3a67 	vmov.f32	s6, s15
 8017ba8:	fb92 f3f3 	sdiv	r3, r2, r3
 8017bac:	9312      	str	r3, [sp, #72]	; 0x48
 8017bae:	9b01      	ldr	r3, [sp, #4]
 8017bb0:	9a03      	ldr	r2, [sp, #12]
 8017bb2:	3b01      	subs	r3, #1
 8017bb4:	9301      	str	r3, [sp, #4]
 8017bb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017bb8:	bf08      	it	eq
 8017bba:	4613      	moveq	r3, r2
 8017bbc:	e793      	b.n	8017ae6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8017bbe:	45ce      	cmp	lr, r9
 8017bc0:	dab9      	bge.n	8017b36 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017bc2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017bc4:	fb01 2606 	mla	r6, r1, r6, r2
 8017bc8:	1436      	asrs	r6, r6, #16
 8017bca:	d4b4      	bmi.n	8017b36 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017bcc:	4546      	cmp	r6, r8
 8017bce:	dab2      	bge.n	8017b36 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017bd0:	4698      	mov	r8, r3
 8017bd2:	46a2      	mov	sl, r4
 8017bd4:	f1b8 0f00 	cmp.w	r8, #0
 8017bd8:	ddb3      	ble.n	8017b42 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8017bda:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8017bde:	1416      	asrs	r6, r2, #16
 8017be0:	9902      	ldr	r1, [sp, #8]
 8017be2:	ea4f 4e20 	mov.w	lr, r0, asr #16
 8017be6:	f108 38ff 	add.w	r8, r8, #4294967295
 8017bea:	4460      	add	r0, ip
 8017bec:	fb09 1606 	mla	r6, r9, r6, r1
 8017bf0:	4928      	ldr	r1, [pc, #160]	; (8017c94 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 8017bf2:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8017bf6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8017bfa:	eb07 0b0e 	add.w	fp, r7, lr
 8017bfe:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8017c02:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8017c06:	00f6      	lsls	r6, r6, #3
 8017c08:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8017c0c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017c0e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8017c12:	440a      	add	r2, r1
 8017c14:	ea49 0606 	orr.w	r6, r9, r6
 8017c18:	f817 900e 	ldrb.w	r9, [r7, lr]
 8017c1c:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 8017c20:	f82a 6b02 	strh.w	r6, [sl], #2
 8017c24:	e7d6      	b.n	8017bd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8017c26:	ea5f 4920 	movs.w	r9, r0, asr #16
 8017c2a:	d429      	bmi.n	8017c80 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8017c2c:	68ae      	ldr	r6, [r5, #8]
 8017c2e:	454e      	cmp	r6, r9
 8017c30:	dd26      	ble.n	8017c80 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8017c32:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8017c36:	d423      	bmi.n	8017c80 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8017c38:	68e9      	ldr	r1, [r5, #12]
 8017c3a:	4559      	cmp	r1, fp
 8017c3c:	dd20      	ble.n	8017c80 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8017c3e:	fa0f fe86 	sxth.w	lr, r6
 8017c42:	9902      	ldr	r1, [sp, #8]
 8017c44:	fb0b 1e0e 	mla	lr, fp, lr, r1
 8017c48:	f06f 0101 	mvn.w	r1, #1
 8017c4c:	f81e e009 	ldrb.w	lr, [lr, r9]
 8017c50:	fb01 f908 	mul.w	r9, r1, r8
 8017c54:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 8017c58:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8017c5c:	eb07 060e 	add.w	r6, r7, lr
 8017c60:	f896 b002 	ldrb.w	fp, [r6, #2]
 8017c64:	7876      	ldrb	r6, [r6, #1]
 8017c66:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 8017c6a:	00f6      	lsls	r6, r6, #3
 8017c6c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8017c70:	ea4b 0606 	orr.w	r6, fp, r6
 8017c74:	f817 b00e 	ldrb.w	fp, [r7, lr]
 8017c78:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 8017c7c:	f82a 6009 	strh.w	r6, [sl, r9]
 8017c80:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017c82:	4460      	add	r0, ip
 8017c84:	f108 38ff 	add.w	r8, r8, #4294967295
 8017c88:	440a      	add	r2, r1
 8017c8a:	e757      	b.n	8017b3c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8017c8c:	b005      	add	sp, #20
 8017c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c92:	bf00      	nop
 8017c94:	fffff800 	.word	0xfffff800

08017c98 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c9c:	b087      	sub	sp, #28
 8017c9e:	468b      	mov	fp, r1
 8017ca0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017ca4:	9815      	ldr	r0, [sp, #84]	; 0x54
 8017ca6:	9204      	str	r2, [sp, #16]
 8017ca8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8017cac:	6841      	ldr	r1, [r0, #4]
 8017cae:	9205      	str	r2, [sp, #20]
 8017cb0:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8017cb4:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8017cb8:	fb01 2404 	mla	r4, r1, r4, r2
 8017cbc:	6802      	ldr	r2, [r0, #0]
 8017cbe:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8017cc2:	f8dc 2000 	ldr.w	r2, [ip]
 8017cc6:	9201      	str	r2, [sp, #4]
 8017cc8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8017ccc:	3204      	adds	r2, #4
 8017cce:	9202      	str	r2, [sp, #8]
 8017cd0:	f1bb 0f00 	cmp.w	fp, #0
 8017cd4:	dc03      	bgt.n	8017cde <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8017cd6:	9a04      	ldr	r2, [sp, #16]
 8017cd8:	2a00      	cmp	r2, #0
 8017cda:	f340 8138 	ble.w	8017f4e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8017cde:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017ce0:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8017ce4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8017ce8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017cea:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 8017cee:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8017cf2:	2b00      	cmp	r3, #0
 8017cf4:	dd0e      	ble.n	8017d14 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017cf6:	1402      	asrs	r2, r0, #16
 8017cf8:	d405      	bmi.n	8017d06 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8017cfa:	42ba      	cmp	r2, r7
 8017cfc:	da03      	bge.n	8017d06 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8017cfe:	140a      	asrs	r2, r1, #16
 8017d00:	d401      	bmi.n	8017d06 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8017d02:	42b2      	cmp	r2, r6
 8017d04:	db07      	blt.n	8017d16 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017d06:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017d08:	3b01      	subs	r3, #1
 8017d0a:	3402      	adds	r4, #2
 8017d0c:	4410      	add	r0, r2
 8017d0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017d10:	4411      	add	r1, r2
 8017d12:	e7ee      	b.n	8017cf2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8017d14:	d019      	beq.n	8017d4a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8017d16:	1e5a      	subs	r2, r3, #1
 8017d18:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8017d1a:	fb05 0502 	mla	r5, r5, r2, r0
 8017d1e:	142d      	asrs	r5, r5, #16
 8017d20:	d409      	bmi.n	8017d36 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8017d22:	42bd      	cmp	r5, r7
 8017d24:	da07      	bge.n	8017d36 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8017d26:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8017d28:	fb05 1202 	mla	r2, r5, r2, r1
 8017d2c:	1412      	asrs	r2, r2, #16
 8017d2e:	d402      	bmi.n	8017d36 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8017d30:	42b2      	cmp	r2, r6
 8017d32:	f2c0 80ac 	blt.w	8017e8e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8017d36:	f04f 0e00 	mov.w	lr, #0
 8017d3a:	eb03 020e 	add.w	r2, r3, lr
 8017d3e:	2a00      	cmp	r2, #0
 8017d40:	dc3e      	bgt.n	8017dc0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8017d42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017d46:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017d4a:	f1bb 0f00 	cmp.w	fp, #0
 8017d4e:	f340 80fe 	ble.w	8017f4e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8017d52:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017d56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017d58:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017d5c:	f1bb 0b01 	subs.w	fp, fp, #1
 8017d60:	eeb0 6a62 	vmov.f32	s12, s5
 8017d64:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017d68:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017d6c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017d70:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8017d74:	eeb0 6a43 	vmov.f32	s12, s6
 8017d78:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017d7c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8017d80:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017d84:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017d88:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017d8c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017d90:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017d94:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017d98:	ee12 2a90 	vmov	r2, s5
 8017d9c:	eef0 2a47 	vmov.f32	s5, s14
 8017da0:	fb92 f3f3 	sdiv	r3, r2, r3
 8017da4:	ee13 2a10 	vmov	r2, s6
 8017da8:	9313      	str	r3, [sp, #76]	; 0x4c
 8017daa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017dac:	eeb0 3a67 	vmov.f32	s6, s15
 8017db0:	fb92 f3f3 	sdiv	r3, r2, r3
 8017db4:	9a04      	ldr	r2, [sp, #16]
 8017db6:	9314      	str	r3, [sp, #80]	; 0x50
 8017db8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017dba:	bf08      	it	eq
 8017dbc:	4613      	moveq	r3, r2
 8017dbe:	e787      	b.n	8017cd0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8017dc0:	1406      	asrs	r6, r0, #16
 8017dc2:	d45d      	bmi.n	8017e80 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8017dc4:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8017dc8:	42b5      	cmp	r5, r6
 8017dca:	dd59      	ble.n	8017e80 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8017dcc:	140f      	asrs	r7, r1, #16
 8017dce:	d457      	bmi.n	8017e80 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8017dd0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8017dd4:	42ba      	cmp	r2, r7
 8017dd6:	dd53      	ble.n	8017e80 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8017dd8:	9a01      	ldr	r2, [sp, #4]
 8017dda:	b22d      	sxth	r5, r5
 8017ddc:	fb07 2505 	mla	r5, r7, r5, r2
 8017de0:	5daa      	ldrb	r2, [r5, r6]
 8017de2:	9d02      	ldr	r5, [sp, #8]
 8017de4:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8017de8:	0e2e      	lsrs	r6, r5, #24
 8017dea:	d049      	beq.n	8017e80 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8017dec:	f06f 0201 	mvn.w	r2, #1
 8017df0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8017df4:	fb02 f20e 	mul.w	r2, r2, lr
 8017df8:	f834 8002 	ldrh.w	r8, [r4, r2]
 8017dfc:	9203      	str	r2, [sp, #12]
 8017dfe:	9a05      	ldr	r2, [sp, #20]
 8017e00:	ea4f 2728 	mov.w	r7, r8, asr #8
 8017e04:	4356      	muls	r6, r2
 8017e06:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017e0a:	1c72      	adds	r2, r6, #1
 8017e0c:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8017e10:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8017e14:	b2ed      	uxtb	r5, r5
 8017e16:	1212      	asrs	r2, r2, #8
 8017e18:	fa1f f982 	uxth.w	r9, r2
 8017e1c:	43d2      	mvns	r2, r2
 8017e1e:	fb16 f609 	smulbb	r6, r6, r9
 8017e22:	b2d2      	uxtb	r2, r2
 8017e24:	fb15 f509 	smulbb	r5, r5, r9
 8017e28:	fb07 6702 	mla	r7, r7, r2, r6
 8017e2c:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8017e30:	fb1a fa09 	smulbb	sl, sl, r9
 8017e34:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8017e38:	b2bf      	uxth	r7, r7
 8017e3a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017e3e:	fa5f f888 	uxtb.w	r8, r8
 8017e42:	fb06 a602 	mla	r6, r6, r2, sl
 8017e46:	fb08 5502 	mla	r5, r8, r2, r5
 8017e4a:	1c7a      	adds	r2, r7, #1
 8017e4c:	b2b6      	uxth	r6, r6
 8017e4e:	b2ad      	uxth	r5, r5
 8017e50:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8017e54:	9a03      	ldr	r2, [sp, #12]
 8017e56:	f105 0a01 	add.w	sl, r5, #1
 8017e5a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8017e5e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8017e62:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8017e66:	ea4a 0707 	orr.w	r7, sl, r7
 8017e6a:	f106 0a01 	add.w	sl, r6, #1
 8017e6e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8017e72:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017e76:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8017e7a:	ea47 070a 	orr.w	r7, r7, sl
 8017e7e:	52a7      	strh	r7, [r4, r2]
 8017e80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017e82:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017e86:	4410      	add	r0, r2
 8017e88:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017e8a:	4411      	add	r1, r2
 8017e8c:	e755      	b.n	8017d3a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8017e8e:	f04f 0800 	mov.w	r8, #0
 8017e92:	eba3 0208 	sub.w	r2, r3, r8
 8017e96:	2a00      	cmp	r2, #0
 8017e98:	f77f af53 	ble.w	8017d42 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8017e9c:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 8017ea0:	140a      	asrs	r2, r1, #16
 8017ea2:	9f01      	ldr	r7, [sp, #4]
 8017ea4:	1405      	asrs	r5, r0, #16
 8017ea6:	fb06 7202 	mla	r2, r6, r2, r7
 8017eaa:	5d52      	ldrb	r2, [r2, r5]
 8017eac:	9d02      	ldr	r5, [sp, #8]
 8017eae:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8017eb2:	0e2e      	lsrs	r6, r5, #24
 8017eb4:	d044      	beq.n	8017f40 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8017eb6:	9a05      	ldr	r2, [sp, #20]
 8017eb8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8017ebc:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8017ec0:	4356      	muls	r6, r2
 8017ec2:	ea4f 272e 	mov.w	r7, lr, asr #8
 8017ec6:	1c72      	adds	r2, r6, #1
 8017ec8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017ecc:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8017ed0:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8017ed4:	b2ed      	uxtb	r5, r5
 8017ed6:	1212      	asrs	r2, r2, #8
 8017ed8:	fa1f f982 	uxth.w	r9, r2
 8017edc:	43d2      	mvns	r2, r2
 8017ede:	fb16 f609 	smulbb	r6, r6, r9
 8017ee2:	b2d2      	uxtb	r2, r2
 8017ee4:	fb15 f509 	smulbb	r5, r5, r9
 8017ee8:	fb07 6702 	mla	r7, r7, r2, r6
 8017eec:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8017ef0:	fb1a fa09 	smulbb	sl, sl, r9
 8017ef4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8017ef8:	b2bf      	uxth	r7, r7
 8017efa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017efe:	fa5f fe8e 	uxtb.w	lr, lr
 8017f02:	fb06 a602 	mla	r6, r6, r2, sl
 8017f06:	fb0e 5502 	mla	r5, lr, r2, r5
 8017f0a:	1c7a      	adds	r2, r7, #1
 8017f0c:	b2b6      	uxth	r6, r6
 8017f0e:	b2ad      	uxth	r5, r5
 8017f10:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8017f14:	f105 0a01 	add.w	sl, r5, #1
 8017f18:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8017f1c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8017f20:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8017f24:	ea4a 0707 	orr.w	r7, sl, r7
 8017f28:	f106 0a01 	add.w	sl, r6, #1
 8017f2c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8017f30:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017f34:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8017f38:	ea47 070a 	orr.w	r7, r7, sl
 8017f3c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8017f40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017f42:	f108 0801 	add.w	r8, r8, #1
 8017f46:	4410      	add	r0, r2
 8017f48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017f4a:	4411      	add	r1, r2
 8017f4c:	e7a1      	b.n	8017e92 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8017f4e:	b007      	add	sp, #28
 8017f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017f54 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f58:	b085      	sub	sp, #20
 8017f5a:	468b      	mov	fp, r1
 8017f5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017f60:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8017f62:	9203      	str	r2, [sp, #12]
 8017f64:	6841      	ldr	r1, [r0, #4]
 8017f66:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8017f6a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8017f6e:	fb01 2404 	mla	r4, r1, r4, r2
 8017f72:	6802      	ldr	r2, [r0, #0]
 8017f74:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8017f78:	f8de 2000 	ldr.w	r2, [lr]
 8017f7c:	9200      	str	r2, [sp, #0]
 8017f7e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8017f82:	3204      	adds	r2, #4
 8017f84:	9201      	str	r2, [sp, #4]
 8017f86:	f1bb 0f00 	cmp.w	fp, #0
 8017f8a:	dc03      	bgt.n	8017f94 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8017f8c:	9a03      	ldr	r2, [sp, #12]
 8017f8e:	2a00      	cmp	r2, #0
 8017f90:	f340 8153 	ble.w	801823a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8017f94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017f96:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8017f9a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8017f9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017fa0:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8017fa4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	dd0e      	ble.n	8017fca <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8017fac:	1408      	asrs	r0, r1, #16
 8017fae:	d405      	bmi.n	8017fbc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8017fb0:	42b8      	cmp	r0, r7
 8017fb2:	da03      	bge.n	8017fbc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8017fb4:	1410      	asrs	r0, r2, #16
 8017fb6:	d401      	bmi.n	8017fbc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8017fb8:	42b0      	cmp	r0, r6
 8017fba:	db07      	blt.n	8017fcc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8017fbc:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017fbe:	3b01      	subs	r3, #1
 8017fc0:	3402      	adds	r4, #2
 8017fc2:	4401      	add	r1, r0
 8017fc4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017fc6:	4402      	add	r2, r0
 8017fc8:	e7ee      	b.n	8017fa8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8017fca:	d017      	beq.n	8017ffc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8017fcc:	1e58      	subs	r0, r3, #1
 8017fce:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017fd0:	fb05 1500 	mla	r5, r5, r0, r1
 8017fd4:	142d      	asrs	r5, r5, #16
 8017fd6:	d409      	bmi.n	8017fec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8017fd8:	42bd      	cmp	r5, r7
 8017fda:	da07      	bge.n	8017fec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8017fdc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8017fde:	fb05 2000 	mla	r0, r5, r0, r2
 8017fe2:	1400      	asrs	r0, r0, #16
 8017fe4:	d402      	bmi.n	8017fec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8017fe6:	42b0      	cmp	r0, r6
 8017fe8:	f2c0 80bc 	blt.w	8018164 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8017fec:	2600      	movs	r6, #0
 8017fee:	1998      	adds	r0, r3, r6
 8017ff0:	2800      	cmp	r0, #0
 8017ff2:	dc3e      	bgt.n	8018072 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8017ff4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017ff8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017ffc:	f1bb 0f00 	cmp.w	fp, #0
 8018000:	f340 811b 	ble.w	801823a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8018004:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018008:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801800a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801800e:	f1bb 0b01 	subs.w	fp, fp, #1
 8018012:	eeb0 6a62 	vmov.f32	s12, s5
 8018016:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801801a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801801e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018022:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8018026:	eeb0 6a43 	vmov.f32	s12, s6
 801802a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801802e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8018032:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018036:	ee61 7a27 	vmul.f32	s15, s2, s15
 801803a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801803e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018042:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018046:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801804a:	ee12 2a90 	vmov	r2, s5
 801804e:	eef0 2a47 	vmov.f32	s5, s14
 8018052:	fb92 f3f3 	sdiv	r3, r2, r3
 8018056:	ee13 2a10 	vmov	r2, s6
 801805a:	9311      	str	r3, [sp, #68]	; 0x44
 801805c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801805e:	eeb0 3a67 	vmov.f32	s6, s15
 8018062:	fb92 f3f3 	sdiv	r3, r2, r3
 8018066:	9a03      	ldr	r2, [sp, #12]
 8018068:	9312      	str	r3, [sp, #72]	; 0x48
 801806a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801806c:	bf08      	it	eq
 801806e:	4613      	moveq	r3, r2
 8018070:	e789      	b.n	8017f86 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8018072:	140f      	asrs	r7, r1, #16
 8018074:	d426      	bmi.n	80180c4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8018076:	f8de 5008 	ldr.w	r5, [lr, #8]
 801807a:	42bd      	cmp	r5, r7
 801807c:	dd22      	ble.n	80180c4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801807e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8018082:	d41f      	bmi.n	80180c4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8018084:	f8de 000c 	ldr.w	r0, [lr, #12]
 8018088:	4560      	cmp	r0, ip
 801808a:	dd1b      	ble.n	80180c4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801808c:	9800      	ldr	r0, [sp, #0]
 801808e:	b22d      	sxth	r5, r5
 8018090:	fb0c 0505 	mla	r5, ip, r5, r0
 8018094:	5de8      	ldrb	r0, [r5, r7]
 8018096:	9d01      	ldr	r5, [sp, #4]
 8018098:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801809c:	0e07      	lsrs	r7, r0, #24
 801809e:	2fff      	cmp	r7, #255	; 0xff
 80180a0:	d116      	bne.n	80180d0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80180a2:	f06f 0501 	mvn.w	r5, #1
 80180a6:	fb05 f706 	mul.w	r7, r5, r6
 80180aa:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 80180ae:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 80180b2:	0945      	lsrs	r5, r0, #5
 80180b4:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 80180b8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80180bc:	ea4c 0505 	orr.w	r5, ip, r5
 80180c0:	4305      	orrs	r5, r0
 80180c2:	53e5      	strh	r5, [r4, r7]
 80180c4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80180c6:	3e01      	subs	r6, #1
 80180c8:	4401      	add	r1, r0
 80180ca:	9812      	ldr	r0, [sp, #72]	; 0x48
 80180cc:	4402      	add	r2, r0
 80180ce:	e78e      	b.n	8017fee <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80180d0:	b2fd      	uxtb	r5, r7
 80180d2:	2f00      	cmp	r7, #0
 80180d4:	d0f6      	beq.n	80180c4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80180d6:	f06f 0701 	mvn.w	r7, #1
 80180da:	fa1f f985 	uxth.w	r9, r5
 80180de:	43ed      	mvns	r5, r5
 80180e0:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80180e4:	4377      	muls	r7, r6
 80180e6:	fb1a fa09 	smulbb	sl, sl, r9
 80180ea:	b2ed      	uxtb	r5, r5
 80180ec:	f834 8007 	ldrh.w	r8, [r4, r7]
 80180f0:	9702      	str	r7, [sp, #8]
 80180f2:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80180f6:	ea4f 2c28 	mov.w	ip, r8, asr #8
 80180fa:	fb17 f709 	smulbb	r7, r7, r9
 80180fe:	b2c0      	uxtb	r0, r0
 8018100:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018104:	fb10 f009 	smulbb	r0, r0, r9
 8018108:	fb0c 7c05 	mla	ip, ip, r5, r7
 801810c:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8018110:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8018114:	fa1f fc8c 	uxth.w	ip, ip
 8018118:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801811c:	fa5f f888 	uxtb.w	r8, r8
 8018120:	fb07 a705 	mla	r7, r7, r5, sl
 8018124:	fb08 0005 	mla	r0, r8, r5, r0
 8018128:	f10c 0501 	add.w	r5, ip, #1
 801812c:	b2bf      	uxth	r7, r7
 801812e:	b280      	uxth	r0, r0
 8018130:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8018134:	f100 0a01 	add.w	sl, r0, #1
 8018138:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801813c:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8018140:	9802      	ldr	r0, [sp, #8]
 8018142:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018146:	ea4a 0c0c 	orr.w	ip, sl, ip
 801814a:	f107 0a01 	add.w	sl, r7, #1
 801814e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8018152:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018156:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801815a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801815e:	f824 c000 	strh.w	ip, [r4, r0]
 8018162:	e7af      	b.n	80180c4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8018164:	f04f 0800 	mov.w	r8, #0
 8018168:	eba3 0008 	sub.w	r0, r3, r8
 801816c:	2800      	cmp	r0, #0
 801816e:	f77f af41 	ble.w	8017ff4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018172:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8018176:	1410      	asrs	r0, r2, #16
 8018178:	9f00      	ldr	r7, [sp, #0]
 801817a:	140d      	asrs	r5, r1, #16
 801817c:	fb06 7000 	mla	r0, r6, r0, r7
 8018180:	5d40      	ldrb	r0, [r0, r5]
 8018182:	9d01      	ldr	r5, [sp, #4]
 8018184:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8018188:	0e2e      	lsrs	r6, r5, #24
 801818a:	2eff      	cmp	r6, #255	; 0xff
 801818c:	d112      	bne.n	80181b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801818e:	482c      	ldr	r0, [pc, #176]	; (8018240 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8018190:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8018194:	0968      	lsrs	r0, r5, #5
 8018196:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801819a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801819e:	4330      	orrs	r0, r6
 80181a0:	4328      	orrs	r0, r5
 80181a2:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 80181a6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80181a8:	f108 0801 	add.w	r8, r8, #1
 80181ac:	4401      	add	r1, r0
 80181ae:	9812      	ldr	r0, [sp, #72]	; 0x48
 80181b0:	4402      	add	r2, r0
 80181b2:	e7d9      	b.n	8018168 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80181b4:	b2f0      	uxtb	r0, r6
 80181b6:	2e00      	cmp	r6, #0
 80181b8:	d0f5      	beq.n	80181a6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80181ba:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 80181be:	fa1f f980 	uxth.w	r9, r0
 80181c2:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80181c6:	43c0      	mvns	r0, r0
 80181c8:	ea4f 272c 	mov.w	r7, ip, asr #8
 80181cc:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80181d0:	fb16 f609 	smulbb	r6, r6, r9
 80181d4:	b2c0      	uxtb	r0, r0
 80181d6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80181da:	b2ed      	uxtb	r5, r5
 80181dc:	fb1a fa09 	smulbb	sl, sl, r9
 80181e0:	fb07 6700 	mla	r7, r7, r0, r6
 80181e4:	ea4f 06ec 	mov.w	r6, ip, asr #3
 80181e8:	fb15 f509 	smulbb	r5, r5, r9
 80181ec:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80181f0:	b2bf      	uxth	r7, r7
 80181f2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80181f6:	fa5f fc8c 	uxtb.w	ip, ip
 80181fa:	fb06 a600 	mla	r6, r6, r0, sl
 80181fe:	fb0c 5500 	mla	r5, ip, r0, r5
 8018202:	1c78      	adds	r0, r7, #1
 8018204:	b2b6      	uxth	r6, r6
 8018206:	b2ad      	uxth	r5, r5
 8018208:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801820c:	f105 0a01 	add.w	sl, r5, #1
 8018210:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8018214:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018218:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801821c:	ea4a 0707 	orr.w	r7, sl, r7
 8018220:	f106 0a01 	add.w	sl, r6, #1
 8018224:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8018228:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801822c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018230:	ea47 070a 	orr.w	r7, r7, sl
 8018234:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8018238:	e7b5      	b.n	80181a6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801823a:	b005      	add	sp, #20
 801823c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018240:	fffff800 	.word	0xfffff800

08018244 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018248:	b087      	sub	sp, #28
 801824a:	468b      	mov	fp, r1
 801824c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018250:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8018252:	9204      	str	r2, [sp, #16]
 8018254:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8018258:	6861      	ldr	r1, [r4, #4]
 801825a:	9205      	str	r2, [sp, #20]
 801825c:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8018260:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8018264:	fb01 2000 	mla	r0, r1, r0, r2
 8018268:	6822      	ldr	r2, [r4, #0]
 801826a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801826e:	f8de 2000 	ldr.w	r2, [lr]
 8018272:	9201      	str	r2, [sp, #4]
 8018274:	f8de 2004 	ldr.w	r2, [lr, #4]
 8018278:	9202      	str	r2, [sp, #8]
 801827a:	f1bb 0f00 	cmp.w	fp, #0
 801827e:	dc03      	bgt.n	8018288 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8018280:	9a04      	ldr	r2, [sp, #16]
 8018282:	2a00      	cmp	r2, #0
 8018284:	f340 8142 	ble.w	801850c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8018288:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801828a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801828e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018292:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018294:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8018298:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801829c:	2b00      	cmp	r3, #0
 801829e:	dd0e      	ble.n	80182be <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80182a0:	140c      	asrs	r4, r1, #16
 80182a2:	d405      	bmi.n	80182b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80182a4:	42bc      	cmp	r4, r7
 80182a6:	da03      	bge.n	80182b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80182a8:	1414      	asrs	r4, r2, #16
 80182aa:	d401      	bmi.n	80182b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80182ac:	42b4      	cmp	r4, r6
 80182ae:	db07      	blt.n	80182c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80182b0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80182b2:	3b01      	subs	r3, #1
 80182b4:	3002      	adds	r0, #2
 80182b6:	4421      	add	r1, r4
 80182b8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80182ba:	4422      	add	r2, r4
 80182bc:	e7ee      	b.n	801829c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80182be:	d019      	beq.n	80182f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80182c0:	1e5c      	subs	r4, r3, #1
 80182c2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80182c4:	fb05 1504 	mla	r5, r5, r4, r1
 80182c8:	142d      	asrs	r5, r5, #16
 80182ca:	d409      	bmi.n	80182e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80182cc:	42bd      	cmp	r5, r7
 80182ce:	da07      	bge.n	80182e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80182d0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80182d2:	fb05 2404 	mla	r4, r5, r4, r2
 80182d6:	1424      	asrs	r4, r4, #16
 80182d8:	d402      	bmi.n	80182e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80182da:	42b4      	cmp	r4, r6
 80182dc:	f2c0 80b1 	blt.w	8018442 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 80182e0:	f04f 0800 	mov.w	r8, #0
 80182e4:	eb03 0408 	add.w	r4, r3, r8
 80182e8:	2c00      	cmp	r4, #0
 80182ea:	dc3e      	bgt.n	801836a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80182ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80182f0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80182f4:	f1bb 0f00 	cmp.w	fp, #0
 80182f8:	f340 8108 	ble.w	801850c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 80182fc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018300:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018302:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018306:	f1bb 0b01 	subs.w	fp, fp, #1
 801830a:	eeb0 6a62 	vmov.f32	s12, s5
 801830e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018312:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018316:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801831a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801831e:	eeb0 6a43 	vmov.f32	s12, s6
 8018322:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018326:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801832a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801832e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018332:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018336:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801833a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801833e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018342:	ee12 2a90 	vmov	r2, s5
 8018346:	eef0 2a47 	vmov.f32	s5, s14
 801834a:	fb92 f3f3 	sdiv	r3, r2, r3
 801834e:	ee13 2a10 	vmov	r2, s6
 8018352:	9313      	str	r3, [sp, #76]	; 0x4c
 8018354:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018356:	eeb0 3a67 	vmov.f32	s6, s15
 801835a:	fb92 f3f3 	sdiv	r3, r2, r3
 801835e:	9a04      	ldr	r2, [sp, #16]
 8018360:	9314      	str	r3, [sp, #80]	; 0x50
 8018362:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018364:	bf08      	it	eq
 8018366:	4613      	moveq	r3, r2
 8018368:	e787      	b.n	801827a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801836a:	140e      	asrs	r6, r1, #16
 801836c:	d462      	bmi.n	8018434 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801836e:	f8de 5008 	ldr.w	r5, [lr, #8]
 8018372:	42b5      	cmp	r5, r6
 8018374:	dd5e      	ble.n	8018434 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018376:	1417      	asrs	r7, r2, #16
 8018378:	d45c      	bmi.n	8018434 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801837a:	f8de 400c 	ldr.w	r4, [lr, #12]
 801837e:	42bc      	cmp	r4, r7
 8018380:	dd58      	ble.n	8018434 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018382:	b22d      	sxth	r5, r5
 8018384:	9c02      	ldr	r4, [sp, #8]
 8018386:	fb07 6505 	mla	r5, r7, r5, r6
 801838a:	5d66      	ldrb	r6, [r4, r5]
 801838c:	2e00      	cmp	r6, #0
 801838e:	d051      	beq.n	8018434 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018390:	9c01      	ldr	r4, [sp, #4]
 8018392:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 8018396:	f06f 0401 	mvn.w	r4, #1
 801839a:	fb04 f408 	mul.w	r4, r4, r8
 801839e:	ea4f 2c29 	mov.w	ip, r9, asr #8
 80183a2:	5b05      	ldrh	r5, [r0, r4]
 80183a4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80183a8:	9403      	str	r4, [sp, #12]
 80183aa:	9c05      	ldr	r4, [sp, #20]
 80183ac:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80183b0:	4366      	muls	r6, r4
 80183b2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80183b6:	1c74      	adds	r4, r6, #1
 80183b8:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 80183bc:	122e      	asrs	r6, r5, #8
 80183be:	1224      	asrs	r4, r4, #8
 80183c0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80183c4:	00ed      	lsls	r5, r5, #3
 80183c6:	b2a7      	uxth	r7, r4
 80183c8:	43e4      	mvns	r4, r4
 80183ca:	b2ed      	uxtb	r5, r5
 80183cc:	b2e4      	uxtb	r4, r4
 80183ce:	fb16 f604 	smulbb	r6, r6, r4
 80183d2:	fb15 f504 	smulbb	r5, r5, r4
 80183d6:	fb0c 6c07 	mla	ip, ip, r7, r6
 80183da:	ea4f 06e9 	mov.w	r6, r9, asr #3
 80183de:	fb1a fa04 	smulbb	sl, sl, r4
 80183e2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80183e6:	fa1f fc8c 	uxth.w	ip, ip
 80183ea:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80183ee:	fa5f f989 	uxtb.w	r9, r9
 80183f2:	fb06 a607 	mla	r6, r6, r7, sl
 80183f6:	f10c 0401 	add.w	r4, ip, #1
 80183fa:	fb09 5507 	mla	r5, r9, r7, r5
 80183fe:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8018402:	9c03      	ldr	r4, [sp, #12]
 8018404:	b2ad      	uxth	r5, r5
 8018406:	b2b6      	uxth	r6, r6
 8018408:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801840c:	f105 0a01 	add.w	sl, r5, #1
 8018410:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018414:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018418:	ea4a 0c0c 	orr.w	ip, sl, ip
 801841c:	f106 0a01 	add.w	sl, r6, #1
 8018420:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8018424:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018428:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801842c:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018430:	f820 c004 	strh.w	ip, [r0, r4]
 8018434:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018436:	f108 38ff 	add.w	r8, r8, #4294967295
 801843a:	4421      	add	r1, r4
 801843c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801843e:	4422      	add	r2, r4
 8018440:	e750      	b.n	80182e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018442:	f04f 0900 	mov.w	r9, #0
 8018446:	eba3 0409 	sub.w	r4, r3, r9
 801844a:	2c00      	cmp	r4, #0
 801844c:	f77f af4e 	ble.w	80182ec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8018450:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8018454:	140d      	asrs	r5, r1, #16
 8018456:	1414      	asrs	r4, r2, #16
 8018458:	fb06 5404 	mla	r4, r6, r4, r5
 801845c:	9d02      	ldr	r5, [sp, #8]
 801845e:	5d2e      	ldrb	r6, [r5, r4]
 8018460:	2e00      	cmp	r6, #0
 8018462:	d04c      	beq.n	80184fe <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8018464:	9d01      	ldr	r5, [sp, #4]
 8018466:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801846a:	9c05      	ldr	r4, [sp, #20]
 801846c:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8018470:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8018474:	4366      	muls	r6, r4
 8018476:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801847a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801847e:	1c74      	adds	r4, r6, #1
 8018480:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8018484:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8018488:	122e      	asrs	r6, r5, #8
 801848a:	1224      	asrs	r4, r4, #8
 801848c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8018490:	00ed      	lsls	r5, r5, #3
 8018492:	b2a7      	uxth	r7, r4
 8018494:	43e4      	mvns	r4, r4
 8018496:	b2ed      	uxtb	r5, r5
 8018498:	b2e4      	uxtb	r4, r4
 801849a:	fb16 f604 	smulbb	r6, r6, r4
 801849e:	fb15 f504 	smulbb	r5, r5, r4
 80184a2:	fb0c 6c07 	mla	ip, ip, r7, r6
 80184a6:	ea4f 06e8 	mov.w	r6, r8, asr #3
 80184aa:	fb1a fa04 	smulbb	sl, sl, r4
 80184ae:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80184b2:	fa1f fc8c 	uxth.w	ip, ip
 80184b6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80184ba:	fa5f f888 	uxtb.w	r8, r8
 80184be:	fb06 a607 	mla	r6, r6, r7, sl
 80184c2:	f10c 0401 	add.w	r4, ip, #1
 80184c6:	fb08 5507 	mla	r5, r8, r7, r5
 80184ca:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80184ce:	b2ad      	uxth	r5, r5
 80184d0:	b2b6      	uxth	r6, r6
 80184d2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80184d6:	f105 0a01 	add.w	sl, r5, #1
 80184da:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80184de:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80184e2:	ea4a 0c0c 	orr.w	ip, sl, ip
 80184e6:	f106 0a01 	add.w	sl, r6, #1
 80184ea:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80184ee:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80184f2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80184f6:	ea4c 0c0a 	orr.w	ip, ip, sl
 80184fa:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 80184fe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018500:	f109 0901 	add.w	r9, r9, #1
 8018504:	4421      	add	r1, r4
 8018506:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018508:	4422      	add	r2, r4
 801850a:	e79c      	b.n	8018446 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801850c:	b007      	add	sp, #28
 801850e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018512 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018512:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018516:	b085      	sub	sp, #20
 8018518:	468b      	mov	fp, r1
 801851a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801851e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018520:	9203      	str	r2, [sp, #12]
 8018522:	6861      	ldr	r1, [r4, #4]
 8018524:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8018528:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801852c:	fb01 2000 	mla	r0, r1, r0, r2
 8018530:	6822      	ldr	r2, [r4, #0]
 8018532:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8018536:	f8d8 2000 	ldr.w	r2, [r8]
 801853a:	9200      	str	r2, [sp, #0]
 801853c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8018540:	9201      	str	r2, [sp, #4]
 8018542:	f1bb 0f00 	cmp.w	fp, #0
 8018546:	dc03      	bgt.n	8018550 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8018548:	9a03      	ldr	r2, [sp, #12]
 801854a:	2a00      	cmp	r2, #0
 801854c:	f340 8146 	ble.w	80187dc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8018550:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018552:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8018556:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801855a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801855c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8018560:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018564:	2b00      	cmp	r3, #0
 8018566:	dd0e      	ble.n	8018586 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8018568:	140c      	asrs	r4, r1, #16
 801856a:	d405      	bmi.n	8018578 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801856c:	42bc      	cmp	r4, r7
 801856e:	da03      	bge.n	8018578 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018570:	1414      	asrs	r4, r2, #16
 8018572:	d401      	bmi.n	8018578 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018574:	42b4      	cmp	r4, r6
 8018576:	db07      	blt.n	8018588 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018578:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801857a:	3b01      	subs	r3, #1
 801857c:	3002      	adds	r0, #2
 801857e:	4421      	add	r1, r4
 8018580:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018582:	4422      	add	r2, r4
 8018584:	e7ee      	b.n	8018564 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8018586:	d017      	beq.n	80185b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8018588:	1e5c      	subs	r4, r3, #1
 801858a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801858c:	fb05 1504 	mla	r5, r5, r4, r1
 8018590:	142d      	asrs	r5, r5, #16
 8018592:	d409      	bmi.n	80185a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018594:	42bd      	cmp	r5, r7
 8018596:	da07      	bge.n	80185a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018598:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801859a:	fb05 2404 	mla	r4, r5, r4, r2
 801859e:	1424      	asrs	r4, r4, #16
 80185a0:	d402      	bmi.n	80185a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80185a2:	42b4      	cmp	r4, r6
 80185a4:	f2c0 80b3 	blt.w	801870e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80185a8:	2600      	movs	r6, #0
 80185aa:	199c      	adds	r4, r3, r6
 80185ac:	2c00      	cmp	r4, #0
 80185ae:	dc3e      	bgt.n	801862e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80185b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80185b4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80185b8:	f1bb 0f00 	cmp.w	fp, #0
 80185bc:	f340 810e 	ble.w	80187dc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80185c0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80185c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80185c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80185ca:	f1bb 0b01 	subs.w	fp, fp, #1
 80185ce:	eeb0 6a62 	vmov.f32	s12, s5
 80185d2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80185d6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80185da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80185de:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80185e2:	eeb0 6a43 	vmov.f32	s12, s6
 80185e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80185ea:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80185ee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80185f2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80185f6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80185fa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80185fe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018602:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018606:	ee12 2a90 	vmov	r2, s5
 801860a:	eef0 2a47 	vmov.f32	s5, s14
 801860e:	fb92 f3f3 	sdiv	r3, r2, r3
 8018612:	ee13 2a10 	vmov	r2, s6
 8018616:	9311      	str	r3, [sp, #68]	; 0x44
 8018618:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801861a:	eeb0 3a67 	vmov.f32	s6, s15
 801861e:	fb92 f3f3 	sdiv	r3, r2, r3
 8018622:	9a03      	ldr	r2, [sp, #12]
 8018624:	9312      	str	r3, [sp, #72]	; 0x48
 8018626:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018628:	bf08      	it	eq
 801862a:	4613      	moveq	r3, r2
 801862c:	e789      	b.n	8018542 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801862e:	140f      	asrs	r7, r1, #16
 8018630:	d418      	bmi.n	8018664 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018632:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8018636:	42bd      	cmp	r5, r7
 8018638:	dd14      	ble.n	8018664 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801863a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801863e:	d411      	bmi.n	8018664 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018640:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8018644:	4564      	cmp	r4, ip
 8018646:	dd0d      	ble.n	8018664 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018648:	b22d      	sxth	r5, r5
 801864a:	9c01      	ldr	r4, [sp, #4]
 801864c:	fb0c 7505 	mla	r5, ip, r5, r7
 8018650:	5d64      	ldrb	r4, [r4, r5]
 8018652:	2cff      	cmp	r4, #255	; 0xff
 8018654:	d10c      	bne.n	8018670 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8018656:	9c00      	ldr	r4, [sp, #0]
 8018658:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801865c:	f06f 0401 	mvn.w	r4, #1
 8018660:	4374      	muls	r4, r6
 8018662:	5305      	strh	r5, [r0, r4]
 8018664:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018666:	3e01      	subs	r6, #1
 8018668:	4421      	add	r1, r4
 801866a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801866c:	4422      	add	r2, r4
 801866e:	e79c      	b.n	80185aa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018670:	2c00      	cmp	r4, #0
 8018672:	d0f7      	beq.n	8018664 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018674:	9f00      	ldr	r7, [sp, #0]
 8018676:	fa1f fc84 	uxth.w	ip, r4
 801867a:	43e4      	mvns	r4, r4
 801867c:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 8018680:	f06f 0501 	mvn.w	r5, #1
 8018684:	b2e4      	uxtb	r4, r4
 8018686:	4375      	muls	r5, r6
 8018688:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801868c:	9502      	str	r5, [sp, #8]
 801868e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8018692:	5b45      	ldrh	r5, [r0, r5]
 8018694:	122f      	asrs	r7, r5, #8
 8018696:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801869a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801869e:	00ed      	lsls	r5, r5, #3
 80186a0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80186a4:	fb17 f704 	smulbb	r7, r7, r4
 80186a8:	b2ed      	uxtb	r5, r5
 80186aa:	fb1a fa04 	smulbb	sl, sl, r4
 80186ae:	fb0e 7e0c 	mla	lr, lr, ip, r7
 80186b2:	ea4f 07e9 	mov.w	r7, r9, asr #3
 80186b6:	fb15 f504 	smulbb	r5, r5, r4
 80186ba:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80186be:	fa1f fe8e 	uxth.w	lr, lr
 80186c2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80186c6:	fa5f f989 	uxtb.w	r9, r9
 80186ca:	fb07 a70c 	mla	r7, r7, ip, sl
 80186ce:	f10e 0401 	add.w	r4, lr, #1
 80186d2:	fb09 550c 	mla	r5, r9, ip, r5
 80186d6:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 80186da:	9c02      	ldr	r4, [sp, #8]
 80186dc:	b2ad      	uxth	r5, r5
 80186de:	b2bf      	uxth	r7, r7
 80186e0:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 80186e4:	f105 0a01 	add.w	sl, r5, #1
 80186e8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80186ec:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80186f0:	ea4a 0e0e 	orr.w	lr, sl, lr
 80186f4:	f107 0a01 	add.w	sl, r7, #1
 80186f8:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80186fc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018700:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018704:	ea4e 0e0a 	orr.w	lr, lr, sl
 8018708:	f820 e004 	strh.w	lr, [r0, r4]
 801870c:	e7aa      	b.n	8018664 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801870e:	f04f 0900 	mov.w	r9, #0
 8018712:	eba3 0409 	sub.w	r4, r3, r9
 8018716:	2c00      	cmp	r4, #0
 8018718:	f77f af4a 	ble.w	80185b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801871c:	1414      	asrs	r4, r2, #16
 801871e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8018722:	140d      	asrs	r5, r1, #16
 8018724:	fb06 5504 	mla	r5, r6, r4, r5
 8018728:	9c01      	ldr	r4, [sp, #4]
 801872a:	5d64      	ldrb	r4, [r4, r5]
 801872c:	2cff      	cmp	r4, #255	; 0xff
 801872e:	d10b      	bne.n	8018748 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8018730:	9c00      	ldr	r4, [sp, #0]
 8018732:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 8018736:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801873a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801873c:	f109 0901 	add.w	r9, r9, #1
 8018740:	4421      	add	r1, r4
 8018742:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018744:	4422      	add	r2, r4
 8018746:	e7e4      	b.n	8018712 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8018748:	2c00      	cmp	r4, #0
 801874a:	d0f6      	beq.n	801873a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801874c:	9e00      	ldr	r6, [sp, #0]
 801874e:	b2a7      	uxth	r7, r4
 8018750:	43e4      	mvns	r4, r4
 8018752:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 8018756:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801875a:	b2e4      	uxtb	r4, r4
 801875c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8018760:	122e      	asrs	r6, r5, #8
 8018762:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8018766:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801876a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801876e:	00ed      	lsls	r5, r5, #3
 8018770:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8018774:	fb16 f604 	smulbb	r6, r6, r4
 8018778:	b2ed      	uxtb	r5, r5
 801877a:	fb1a fa04 	smulbb	sl, sl, r4
 801877e:	fb0c 6c07 	mla	ip, ip, r7, r6
 8018782:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8018786:	fb15 f504 	smulbb	r5, r5, r4
 801878a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801878e:	fa1f fc8c 	uxth.w	ip, ip
 8018792:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018796:	fa5f fe8e 	uxtb.w	lr, lr
 801879a:	fb06 a607 	mla	r6, r6, r7, sl
 801879e:	f10c 0401 	add.w	r4, ip, #1
 80187a2:	fb0e 5507 	mla	r5, lr, r7, r5
 80187a6:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80187aa:	b2ad      	uxth	r5, r5
 80187ac:	b2b6      	uxth	r6, r6
 80187ae:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80187b2:	f105 0a01 	add.w	sl, r5, #1
 80187b6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80187ba:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80187be:	ea4a 0c0c 	orr.w	ip, sl, ip
 80187c2:	f106 0a01 	add.w	sl, r6, #1
 80187c6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80187ca:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80187ce:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80187d2:	ea4c 0c0a 	orr.w	ip, ip, sl
 80187d6:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 80187da:	e7ae      	b.n	801873a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80187dc:	b005      	add	sp, #20
 80187de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080187e2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80187e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187e6:	b085      	sub	sp, #20
 80187e8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80187ea:	9203      	str	r2, [sp, #12]
 80187ec:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80187f0:	9100      	str	r1, [sp, #0]
 80187f2:	9201      	str	r2, [sp, #4]
 80187f4:	6841      	ldr	r1, [r0, #4]
 80187f6:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 80187fa:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80187fe:	fb01 2404 	mla	r4, r1, r4, r2
 8018802:	6802      	ldr	r2, [r0, #0]
 8018804:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018808:	f8de 2000 	ldr.w	r2, [lr]
 801880c:	9202      	str	r2, [sp, #8]
 801880e:	9a01      	ldr	r2, [sp, #4]
 8018810:	43d6      	mvns	r6, r2
 8018812:	b2f6      	uxtb	r6, r6
 8018814:	9a00      	ldr	r2, [sp, #0]
 8018816:	2a00      	cmp	r2, #0
 8018818:	dc03      	bgt.n	8018822 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801881a:	9a03      	ldr	r2, [sp, #12]
 801881c:	2a00      	cmp	r2, #0
 801881e:	f340 8124 	ble.w	8018a6a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8018822:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018824:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8018828:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801882c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801882e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8018832:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018836:	2b00      	cmp	r3, #0
 8018838:	dd0e      	ble.n	8018858 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801883a:	1408      	asrs	r0, r1, #16
 801883c:	d405      	bmi.n	801884a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801883e:	4560      	cmp	r0, ip
 8018840:	da03      	bge.n	801884a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018842:	1410      	asrs	r0, r2, #16
 8018844:	d401      	bmi.n	801884a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018846:	42b8      	cmp	r0, r7
 8018848:	db07      	blt.n	801885a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801884a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801884c:	3b01      	subs	r3, #1
 801884e:	3402      	adds	r4, #2
 8018850:	4401      	add	r1, r0
 8018852:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018854:	4402      	add	r2, r0
 8018856:	e7ee      	b.n	8018836 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8018858:	d06e      	beq.n	8018938 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801885a:	1e58      	subs	r0, r3, #1
 801885c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801885e:	fb05 1500 	mla	r5, r5, r0, r1
 8018862:	142d      	asrs	r5, r5, #16
 8018864:	d45c      	bmi.n	8018920 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8018866:	4565      	cmp	r5, ip
 8018868:	da5a      	bge.n	8018920 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801886a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801886c:	fb05 2000 	mla	r0, r5, r0, r2
 8018870:	1400      	asrs	r0, r0, #16
 8018872:	d455      	bmi.n	8018920 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8018874:	42b8      	cmp	r0, r7
 8018876:	da53      	bge.n	8018920 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8018878:	4699      	mov	r9, r3
 801887a:	46a2      	mov	sl, r4
 801887c:	f8bd b004 	ldrh.w	fp, [sp, #4]
 8018880:	f1b9 0f00 	cmp.w	r9, #0
 8018884:	dd54      	ble.n	8018930 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8018886:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801888a:	140d      	asrs	r5, r1, #16
 801888c:	1410      	asrs	r0, r2, #16
 801888e:	f109 39ff 	add.w	r9, r9, #4294967295
 8018892:	fb07 5000 	mla	r0, r7, r0, r5
 8018896:	9d02      	ldr	r5, [sp, #8]
 8018898:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801889c:	f8ba 5000 	ldrh.w	r5, [sl]
 80188a0:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80188a4:	122f      	asrs	r7, r5, #8
 80188a6:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80188aa:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80188ae:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80188b2:	00ed      	lsls	r5, r5, #3
 80188b4:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 80188b8:	fb17 f706 	smulbb	r7, r7, r6
 80188bc:	b2ed      	uxtb	r5, r5
 80188be:	fb18 f806 	smulbb	r8, r8, r6
 80188c2:	fb0c 7c0b 	mla	ip, ip, fp, r7
 80188c6:	10c7      	asrs	r7, r0, #3
 80188c8:	fb15 f506 	smulbb	r5, r5, r6
 80188cc:	00c0      	lsls	r0, r0, #3
 80188ce:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80188d2:	fa1f fc8c 	uxth.w	ip, ip
 80188d6:	b2c0      	uxtb	r0, r0
 80188d8:	fb07 870b 	mla	r7, r7, fp, r8
 80188dc:	fb00 500b 	mla	r0, r0, fp, r5
 80188e0:	f10c 0501 	add.w	r5, ip, #1
 80188e4:	b2bf      	uxth	r7, r7
 80188e6:	b280      	uxth	r0, r0
 80188e8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80188ec:	f107 0801 	add.w	r8, r7, #1
 80188f0:	1c45      	adds	r5, r0, #1
 80188f2:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 80188f6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80188fa:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80188fe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018900:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8018904:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8018908:	4401      	add	r1, r0
 801890a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801890e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018910:	ea45 0c0c 	orr.w	ip, r5, ip
 8018914:	4402      	add	r2, r0
 8018916:	ea4c 0c08 	orr.w	ip, ip, r8
 801891a:	f82a cb02 	strh.w	ip, [sl], #2
 801891e:	e7af      	b.n	8018880 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018920:	f04f 0800 	mov.w	r8, #0
 8018924:	f8bd a004 	ldrh.w	sl, [sp, #4]
 8018928:	eb03 0008 	add.w	r0, r3, r8
 801892c:	2800      	cmp	r0, #0
 801892e:	dc41      	bgt.n	80189b4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8018930:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018934:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018938:	9b00      	ldr	r3, [sp, #0]
 801893a:	2b00      	cmp	r3, #0
 801893c:	f340 8095 	ble.w	8018a6a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8018940:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018944:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018946:	ee30 0a04 	vadd.f32	s0, s0, s8
 801894a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801894e:	eef0 6a62 	vmov.f32	s13, s5
 8018952:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018956:	ee31 1a05 	vadd.f32	s2, s2, s10
 801895a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801895e:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8018962:	eef0 6a43 	vmov.f32	s13, s6
 8018966:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801896a:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801896e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018972:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018976:	ee77 2a62 	vsub.f32	s5, s14, s5
 801897a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801897e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018982:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018986:	ee12 2a90 	vmov	r2, s5
 801898a:	eef0 2a47 	vmov.f32	s5, s14
 801898e:	fb92 f3f3 	sdiv	r3, r2, r3
 8018992:	ee13 2a10 	vmov	r2, s6
 8018996:	9311      	str	r3, [sp, #68]	; 0x44
 8018998:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801899a:	eeb0 3a67 	vmov.f32	s6, s15
 801899e:	fb92 f3f3 	sdiv	r3, r2, r3
 80189a2:	9312      	str	r3, [sp, #72]	; 0x48
 80189a4:	9b00      	ldr	r3, [sp, #0]
 80189a6:	9a03      	ldr	r2, [sp, #12]
 80189a8:	3b01      	subs	r3, #1
 80189aa:	9300      	str	r3, [sp, #0]
 80189ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80189ae:	bf08      	it	eq
 80189b0:	4613      	moveq	r3, r2
 80189b2:	e72f      	b.n	8018814 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80189b4:	140f      	asrs	r7, r1, #16
 80189b6:	d451      	bmi.n	8018a5c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80189b8:	f8de 5008 	ldr.w	r5, [lr, #8]
 80189bc:	42bd      	cmp	r5, r7
 80189be:	dd4d      	ble.n	8018a5c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80189c0:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80189c4:	d44a      	bmi.n	8018a5c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80189c6:	f8de 000c 	ldr.w	r0, [lr, #12]
 80189ca:	4560      	cmp	r0, ip
 80189cc:	dd46      	ble.n	8018a5c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80189ce:	b22d      	sxth	r5, r5
 80189d0:	9802      	ldr	r0, [sp, #8]
 80189d2:	fb0c 7505 	mla	r5, ip, r5, r7
 80189d6:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 80189da:	f06f 0501 	mvn.w	r5, #1
 80189de:	fb05 fb08 	mul.w	fp, r5, r8
 80189e2:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80189e6:	f834 500b 	ldrh.w	r5, [r4, fp]
 80189ea:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80189ee:	122f      	asrs	r7, r5, #8
 80189f0:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80189f4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80189f8:	00ed      	lsls	r5, r5, #3
 80189fa:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80189fe:	fb17 f706 	smulbb	r7, r7, r6
 8018a02:	b2ed      	uxtb	r5, r5
 8018a04:	fb19 f906 	smulbb	r9, r9, r6
 8018a08:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8018a0c:	10c7      	asrs	r7, r0, #3
 8018a0e:	fb15 f506 	smulbb	r5, r5, r6
 8018a12:	00c0      	lsls	r0, r0, #3
 8018a14:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018a18:	fa1f fc8c 	uxth.w	ip, ip
 8018a1c:	b2c0      	uxtb	r0, r0
 8018a1e:	fb07 970a 	mla	r7, r7, sl, r9
 8018a22:	fb00 500a 	mla	r0, r0, sl, r5
 8018a26:	f10c 0501 	add.w	r5, ip, #1
 8018a2a:	b2bf      	uxth	r7, r7
 8018a2c:	b280      	uxth	r0, r0
 8018a2e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8018a32:	f107 0901 	add.w	r9, r7, #1
 8018a36:	1c45      	adds	r5, r0, #1
 8018a38:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8018a3c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018a40:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8018a44:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8018a48:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8018a4c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8018a50:	ea45 0c0c 	orr.w	ip, r5, ip
 8018a54:	ea4c 0c09 	orr.w	ip, ip, r9
 8018a58:	f824 c00b 	strh.w	ip, [r4, fp]
 8018a5c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018a5e:	f108 38ff 	add.w	r8, r8, #4294967295
 8018a62:	4401      	add	r1, r0
 8018a64:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018a66:	4402      	add	r2, r0
 8018a68:	e75e      	b.n	8018928 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8018a6a:	b005      	add	sp, #20
 8018a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018a70 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a74:	b085      	sub	sp, #20
 8018a76:	4693      	mov	fp, r2
 8018a78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018a7c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8018a7e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8018a80:	6870      	ldr	r0, [r6, #4]
 8018a82:	9101      	str	r1, [sp, #4]
 8018a84:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8018a88:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8018a8c:	fb00 2404 	mla	r4, r0, r4, r2
 8018a90:	6832      	ldr	r2, [r6, #0]
 8018a92:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018a96:	682a      	ldr	r2, [r5, #0]
 8018a98:	9202      	str	r2, [sp, #8]
 8018a9a:	9a01      	ldr	r2, [sp, #4]
 8018a9c:	2a00      	cmp	r2, #0
 8018a9e:	dc03      	bgt.n	8018aa8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8018aa0:	f1bb 0f00 	cmp.w	fp, #0
 8018aa4:	f340 809a 	ble.w	8018bdc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8018aa8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018aaa:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8018aae:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018ab2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018ab4:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8018ab8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018abc:	2b00      	cmp	r3, #0
 8018abe:	dd0c      	ble.n	8018ada <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8018ac0:	1406      	asrs	r6, r0, #16
 8018ac2:	d405      	bmi.n	8018ad0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8018ac4:	454e      	cmp	r6, r9
 8018ac6:	da03      	bge.n	8018ad0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8018ac8:	1416      	asrs	r6, r2, #16
 8018aca:	d401      	bmi.n	8018ad0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8018acc:	4546      	cmp	r6, r8
 8018ace:	db05      	blt.n	8018adc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8018ad0:	4470      	add	r0, lr
 8018ad2:	4462      	add	r2, ip
 8018ad4:	3b01      	subs	r3, #1
 8018ad6:	3402      	adds	r4, #2
 8018ad8:	e7f0      	b.n	8018abc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8018ada:	d00f      	beq.n	8018afc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8018adc:	1e5e      	subs	r6, r3, #1
 8018ade:	fb0e 0706 	mla	r7, lr, r6, r0
 8018ae2:	143f      	asrs	r7, r7, #16
 8018ae4:	d541      	bpl.n	8018b6a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 8018ae6:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8018aea:	4698      	mov	r8, r3
 8018aec:	9603      	str	r6, [sp, #12]
 8018aee:	f1b8 0f00 	cmp.w	r8, #0
 8018af2:	dc56      	bgt.n	8018ba2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8018af4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018af8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018afc:	9b01      	ldr	r3, [sp, #4]
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	dd6c      	ble.n	8018bdc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8018b02:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018b06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018b08:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018b0c:	eeb0 6a62 	vmov.f32	s12, s5
 8018b10:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018b14:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018b18:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018b1c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8018b20:	eeb0 6a43 	vmov.f32	s12, s6
 8018b24:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018b28:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8018b2c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018b30:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018b34:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018b38:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018b3c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018b40:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018b44:	ee12 2a90 	vmov	r2, s5
 8018b48:	eef0 2a47 	vmov.f32	s5, s14
 8018b4c:	fb92 fef3 	sdiv	lr, r2, r3
 8018b50:	ee13 2a10 	vmov	r2, s6
 8018b54:	eeb0 3a67 	vmov.f32	s6, s15
 8018b58:	fb92 fcf3 	sdiv	ip, r2, r3
 8018b5c:	9b01      	ldr	r3, [sp, #4]
 8018b5e:	3b01      	subs	r3, #1
 8018b60:	9301      	str	r3, [sp, #4]
 8018b62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018b64:	bf08      	it	eq
 8018b66:	465b      	moveq	r3, fp
 8018b68:	e797      	b.n	8018a9a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8018b6a:	454f      	cmp	r7, r9
 8018b6c:	dabb      	bge.n	8018ae6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018b6e:	fb0c 2606 	mla	r6, ip, r6, r2
 8018b72:	1436      	asrs	r6, r6, #16
 8018b74:	d4b7      	bmi.n	8018ae6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018b76:	4546      	cmp	r6, r8
 8018b78:	dab5      	bge.n	8018ae6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018b7a:	461e      	mov	r6, r3
 8018b7c:	46a0      	mov	r8, r4
 8018b7e:	2e00      	cmp	r6, #0
 8018b80:	ddb8      	ble.n	8018af4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8018b82:	1417      	asrs	r7, r2, #16
 8018b84:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8018b88:	ea4f 4920 	mov.w	r9, r0, asr #16
 8018b8c:	9902      	ldr	r1, [sp, #8]
 8018b8e:	4470      	add	r0, lr
 8018b90:	4462      	add	r2, ip
 8018b92:	fb0a 9707 	mla	r7, sl, r7, r9
 8018b96:	3e01      	subs	r6, #1
 8018b98:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8018b9c:	f828 7b02 	strh.w	r7, [r8], #2
 8018ba0:	e7ed      	b.n	8018b7e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8018ba2:	ea5f 4920 	movs.w	r9, r0, asr #16
 8018ba6:	d414      	bmi.n	8018bd2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8018ba8:	68ae      	ldr	r6, [r5, #8]
 8018baa:	454e      	cmp	r6, r9
 8018bac:	dd11      	ble.n	8018bd2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8018bae:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8018bb2:	d40e      	bmi.n	8018bd2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8018bb4:	68ef      	ldr	r7, [r5, #12]
 8018bb6:	4557      	cmp	r7, sl
 8018bb8:	dd0b      	ble.n	8018bd2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8018bba:	b236      	sxth	r6, r6
 8018bbc:	f06f 0101 	mvn.w	r1, #1
 8018bc0:	9f02      	ldr	r7, [sp, #8]
 8018bc2:	fb0a 9606 	mla	r6, sl, r6, r9
 8018bc6:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8018bca:	fb01 f608 	mul.w	r6, r1, r8
 8018bce:	9903      	ldr	r1, [sp, #12]
 8018bd0:	538f      	strh	r7, [r1, r6]
 8018bd2:	4470      	add	r0, lr
 8018bd4:	4462      	add	r2, ip
 8018bd6:	f108 38ff 	add.w	r8, r8, #4294967295
 8018bda:	e788      	b.n	8018aee <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018bdc:	b005      	add	sp, #20
 8018bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018be2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018be2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018be6:	b087      	sub	sp, #28
 8018be8:	468b      	mov	fp, r1
 8018bea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018bee:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018bf0:	9203      	str	r2, [sp, #12]
 8018bf2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8018bf6:	6841      	ldr	r1, [r0, #4]
 8018bf8:	9204      	str	r2, [sp, #16]
 8018bfa:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8018bfe:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8018c02:	fb01 2505 	mla	r5, r1, r5, r2
 8018c06:	6802      	ldr	r2, [r0, #0]
 8018c08:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8018c0c:	f8d9 2000 	ldr.w	r2, [r9]
 8018c10:	9201      	str	r2, [sp, #4]
 8018c12:	f1bb 0f00 	cmp.w	fp, #0
 8018c16:	dc03      	bgt.n	8018c20 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8018c18:	9a03      	ldr	r2, [sp, #12]
 8018c1a:	2a00      	cmp	r2, #0
 8018c1c:	f340 8158 	ble.w	8018ed0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8018c20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018c22:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8018c26:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018c2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018c2c:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8018c30:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	dd0e      	ble.n	8018c56 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8018c38:	1402      	asrs	r2, r0, #16
 8018c3a:	d405      	bmi.n	8018c48 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018c3c:	42ba      	cmp	r2, r7
 8018c3e:	da03      	bge.n	8018c48 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018c40:	140a      	asrs	r2, r1, #16
 8018c42:	d401      	bmi.n	8018c48 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018c44:	42b2      	cmp	r2, r6
 8018c46:	db07      	blt.n	8018c58 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018c48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018c4a:	3b01      	subs	r3, #1
 8018c4c:	3502      	adds	r5, #2
 8018c4e:	4410      	add	r0, r2
 8018c50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018c52:	4411      	add	r1, r2
 8018c54:	e7ee      	b.n	8018c34 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8018c56:	d017      	beq.n	8018c88 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8018c58:	1e5a      	subs	r2, r3, #1
 8018c5a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018c5c:	fb04 0402 	mla	r4, r4, r2, r0
 8018c60:	1424      	asrs	r4, r4, #16
 8018c62:	d409      	bmi.n	8018c78 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018c64:	42bc      	cmp	r4, r7
 8018c66:	da07      	bge.n	8018c78 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018c68:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018c6a:	fb04 1202 	mla	r2, r4, r2, r1
 8018c6e:	1412      	asrs	r2, r2, #16
 8018c70:	d402      	bmi.n	8018c78 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018c72:	42b2      	cmp	r2, r6
 8018c74:	f2c0 80bf 	blt.w	8018df6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8018c78:	2700      	movs	r7, #0
 8018c7a:	19da      	adds	r2, r3, r7
 8018c7c:	2a00      	cmp	r2, #0
 8018c7e:	dc3e      	bgt.n	8018cfe <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8018c80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018c84:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8018c88:	f1bb 0f00 	cmp.w	fp, #0
 8018c8c:	f340 8120 	ble.w	8018ed0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8018c90:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018c94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018c96:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018c9a:	f1bb 0b01 	subs.w	fp, fp, #1
 8018c9e:	eeb0 6a62 	vmov.f32	s12, s5
 8018ca2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018ca6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018caa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018cae:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8018cb2:	eeb0 6a43 	vmov.f32	s12, s6
 8018cb6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018cba:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8018cbe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018cc2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018cc6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018cca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018cce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018cd2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018cd6:	ee12 2a90 	vmov	r2, s5
 8018cda:	eef0 2a47 	vmov.f32	s5, s14
 8018cde:	fb92 f3f3 	sdiv	r3, r2, r3
 8018ce2:	ee13 2a10 	vmov	r2, s6
 8018ce6:	9313      	str	r3, [sp, #76]	; 0x4c
 8018ce8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018cea:	eeb0 3a67 	vmov.f32	s6, s15
 8018cee:	fb92 f3f3 	sdiv	r3, r2, r3
 8018cf2:	9a03      	ldr	r2, [sp, #12]
 8018cf4:	9314      	str	r3, [sp, #80]	; 0x50
 8018cf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018cf8:	bf08      	it	eq
 8018cfa:	4613      	moveq	r3, r2
 8018cfc:	e789      	b.n	8018c12 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8018cfe:	1406      	asrs	r6, r0, #16
 8018d00:	d42d      	bmi.n	8018d5e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8018d02:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8018d06:	42b4      	cmp	r4, r6
 8018d08:	dd29      	ble.n	8018d5e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8018d0a:	ea5f 4c21 	movs.w	ip, r1, asr #16
 8018d0e:	d426      	bmi.n	8018d5e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8018d10:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8018d14:	4562      	cmp	r2, ip
 8018d16:	dd22      	ble.n	8018d5e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8018d18:	b224      	sxth	r4, r4
 8018d1a:	9a01      	ldr	r2, [sp, #4]
 8018d1c:	fb0c 6404 	mla	r4, ip, r4, r6
 8018d20:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8018d24:	0e22      	lsrs	r2, r4, #24
 8018d26:	d01a      	beq.n	8018d5e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8018d28:	9e04      	ldr	r6, [sp, #16]
 8018d2a:	4372      	muls	r2, r6
 8018d2c:	1c56      	adds	r6, r2, #1
 8018d2e:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8018d32:	0a26      	lsrs	r6, r4, #8
 8018d34:	1212      	asrs	r2, r2, #8
 8018d36:	9605      	str	r6, [sp, #20]
 8018d38:	2aff      	cmp	r2, #255	; 0xff
 8018d3a:	d116      	bne.n	8018d6a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8018d3c:	f06f 0201 	mvn.w	r2, #1
 8018d40:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8018d44:	fb02 fc07 	mul.w	ip, r2, r7
 8018d48:	0962      	lsrs	r2, r4, #5
 8018d4a:	f026 0607 	bic.w	r6, r6, #7
 8018d4e:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8018d52:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8018d56:	4316      	orrs	r6, r2
 8018d58:	4326      	orrs	r6, r4
 8018d5a:	f825 600c 	strh.w	r6, [r5, ip]
 8018d5e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018d60:	3f01      	subs	r7, #1
 8018d62:	4410      	add	r0, r2
 8018d64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018d66:	4411      	add	r1, r2
 8018d68:	e787      	b.n	8018c7a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018d6a:	f06f 0601 	mvn.w	r6, #1
 8018d6e:	fa1f fa82 	uxth.w	sl, r2
 8018d72:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 8018d76:	43d2      	mvns	r2, r2
 8018d78:	437e      	muls	r6, r7
 8018d7a:	b2e4      	uxtb	r4, r4
 8018d7c:	fb1c fc0a 	smulbb	ip, ip, sl
 8018d80:	b2d2      	uxtb	r2, r2
 8018d82:	f835 8006 	ldrh.w	r8, [r5, r6]
 8018d86:	fb14 f40a 	smulbb	r4, r4, sl
 8018d8a:	9602      	str	r6, [sp, #8]
 8018d8c:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8018d90:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8018d94:	fb16 f60a 	smulbb	r6, r6, sl
 8018d98:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8018d9c:	fb0e ce02 	mla	lr, lr, r2, ip
 8018da0:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8018da4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8018da8:	fa1f fe8e 	uxth.w	lr, lr
 8018dac:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8018db0:	fa5f f888 	uxtb.w	r8, r8
 8018db4:	fb0c 6c02 	mla	ip, ip, r2, r6
 8018db8:	fb08 4402 	mla	r4, r8, r2, r4
 8018dbc:	f10e 0201 	add.w	r2, lr, #1
 8018dc0:	fa1f fc8c 	uxth.w	ip, ip
 8018dc4:	b2a4      	uxth	r4, r4
 8018dc6:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8018dca:	9a02      	ldr	r2, [sp, #8]
 8018dcc:	1c66      	adds	r6, r4, #1
 8018dce:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8018dd2:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8018dd6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8018dda:	ea46 0e0e 	orr.w	lr, r6, lr
 8018dde:	f10c 0601 	add.w	r6, ip, #1
 8018de2:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8018de6:	0976      	lsrs	r6, r6, #5
 8018de8:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8018dec:	ea4e 0e06 	orr.w	lr, lr, r6
 8018df0:	f825 e002 	strh.w	lr, [r5, r2]
 8018df4:	e7b3      	b.n	8018d5e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8018df6:	f04f 0800 	mov.w	r8, #0
 8018dfa:	eba3 0208 	sub.w	r2, r3, r8
 8018dfe:	2a00      	cmp	r2, #0
 8018e00:	f77f af3e 	ble.w	8018c80 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018e04:	1404      	asrs	r4, r0, #16
 8018e06:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8018e0a:	140a      	asrs	r2, r1, #16
 8018e0c:	fb06 4202 	mla	r2, r6, r2, r4
 8018e10:	9c01      	ldr	r4, [sp, #4]
 8018e12:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8018e16:	0e22      	lsrs	r2, r4, #24
 8018e18:	d015      	beq.n	8018e46 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8018e1a:	9e04      	ldr	r6, [sp, #16]
 8018e1c:	4372      	muls	r2, r6
 8018e1e:	1c56      	adds	r6, r2, #1
 8018e20:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8018e24:	0a26      	lsrs	r6, r4, #8
 8018e26:	1212      	asrs	r2, r2, #8
 8018e28:	2aff      	cmp	r2, #255	; 0xff
 8018e2a:	d113      	bne.n	8018e54 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8018e2c:	0962      	lsrs	r2, r4, #5
 8018e2e:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8018e32:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8018e36:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8018e3a:	f026 0607 	bic.w	r6, r6, #7
 8018e3e:	4316      	orrs	r6, r2
 8018e40:	4326      	orrs	r6, r4
 8018e42:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 8018e46:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018e48:	f108 0801 	add.w	r8, r8, #1
 8018e4c:	4410      	add	r0, r2
 8018e4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018e50:	4411      	add	r1, r2
 8018e52:	e7d2      	b.n	8018dfa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8018e54:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8018e58:	fa1f fa82 	uxth.w	sl, r2
 8018e5c:	f3c4 4707 	ubfx	r7, r4, #16, #8
 8018e60:	43d2      	mvns	r2, r2
 8018e62:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8018e66:	fb17 f70a 	smulbb	r7, r7, sl
 8018e6a:	b2d2      	uxtb	r2, r2
 8018e6c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018e70:	b2e4      	uxtb	r4, r4
 8018e72:	b2f6      	uxtb	r6, r6
 8018e74:	fb0c 7c02 	mla	ip, ip, r2, r7
 8018e78:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8018e7c:	fb14 f40a 	smulbb	r4, r4, sl
 8018e80:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8018e84:	fa1f fc8c 	uxth.w	ip, ip
 8018e88:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018e8c:	fb16 f60a 	smulbb	r6, r6, sl
 8018e90:	fa5f fe8e 	uxtb.w	lr, lr
 8018e94:	fb0e 4402 	mla	r4, lr, r2, r4
 8018e98:	fb07 6702 	mla	r7, r7, r2, r6
 8018e9c:	f10c 0201 	add.w	r2, ip, #1
 8018ea0:	b2a4      	uxth	r4, r4
 8018ea2:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8018ea6:	1c66      	adds	r6, r4, #1
 8018ea8:	b2bf      	uxth	r7, r7
 8018eaa:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018eae:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8018eb2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8018eb6:	ea46 0c0c 	orr.w	ip, r6, ip
 8018eba:	1c7e      	adds	r6, r7, #1
 8018ebc:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8018ec0:	0976      	lsrs	r6, r6, #5
 8018ec2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8018ec6:	ea4c 0c06 	orr.w	ip, ip, r6
 8018eca:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8018ece:	e7ba      	b.n	8018e46 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8018ed0:	b007      	add	sp, #28
 8018ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08018ed8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018edc:	b085      	sub	sp, #20
 8018ede:	468b      	mov	fp, r1
 8018ee0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018ee4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018ee6:	9203      	str	r2, [sp, #12]
 8018ee8:	6841      	ldr	r1, [r0, #4]
 8018eea:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8018eee:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8018ef2:	fb01 2404 	mla	r4, r1, r4, r2
 8018ef6:	6802      	ldr	r2, [r0, #0]
 8018ef8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018efc:	f8d8 2000 	ldr.w	r2, [r8]
 8018f00:	9201      	str	r2, [sp, #4]
 8018f02:	f1bb 0f00 	cmp.w	fp, #0
 8018f06:	dc03      	bgt.n	8018f10 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8018f08:	9a03      	ldr	r2, [sp, #12]
 8018f0a:	2a00      	cmp	r2, #0
 8018f0c:	f340 814f 	ble.w	80191ae <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8018f10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018f12:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8018f16:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018f1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018f1c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8018f20:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	dd0e      	ble.n	8018f46 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018f28:	1408      	asrs	r0, r1, #16
 8018f2a:	d405      	bmi.n	8018f38 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8018f2c:	42b8      	cmp	r0, r7
 8018f2e:	da03      	bge.n	8018f38 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8018f30:	1410      	asrs	r0, r2, #16
 8018f32:	d401      	bmi.n	8018f38 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8018f34:	42b0      	cmp	r0, r6
 8018f36:	db07      	blt.n	8018f48 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018f38:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018f3a:	3b01      	subs	r3, #1
 8018f3c:	3402      	adds	r4, #2
 8018f3e:	4401      	add	r1, r0
 8018f40:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018f42:	4402      	add	r2, r0
 8018f44:	e7ee      	b.n	8018f24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8018f46:	d017      	beq.n	8018f78 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018f48:	1e58      	subs	r0, r3, #1
 8018f4a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018f4c:	fb05 1500 	mla	r5, r5, r0, r1
 8018f50:	142d      	asrs	r5, r5, #16
 8018f52:	d409      	bmi.n	8018f68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8018f54:	42bd      	cmp	r5, r7
 8018f56:	da07      	bge.n	8018f68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8018f58:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8018f5a:	fb05 2000 	mla	r0, r5, r0, r2
 8018f5e:	1400      	asrs	r0, r0, #16
 8018f60:	d402      	bmi.n	8018f68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8018f62:	42b0      	cmp	r0, r6
 8018f64:	f2c0 80ba 	blt.w	80190dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8018f68:	2600      	movs	r6, #0
 8018f6a:	1998      	adds	r0, r3, r6
 8018f6c:	2800      	cmp	r0, #0
 8018f6e:	dc3e      	bgt.n	8018fee <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8018f70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018f74:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018f78:	f1bb 0f00 	cmp.w	fp, #0
 8018f7c:	f340 8117 	ble.w	80191ae <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8018f80:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018f84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018f86:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018f8a:	f1bb 0b01 	subs.w	fp, fp, #1
 8018f8e:	eeb0 6a62 	vmov.f32	s12, s5
 8018f92:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018f96:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018f9a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018f9e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8018fa2:	eeb0 6a43 	vmov.f32	s12, s6
 8018fa6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018faa:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8018fae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018fb2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018fb6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018fba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018fbe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018fc2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018fc6:	ee12 2a90 	vmov	r2, s5
 8018fca:	eef0 2a47 	vmov.f32	s5, s14
 8018fce:	fb92 f3f3 	sdiv	r3, r2, r3
 8018fd2:	ee13 2a10 	vmov	r2, s6
 8018fd6:	9311      	str	r3, [sp, #68]	; 0x44
 8018fd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018fda:	eeb0 3a67 	vmov.f32	s6, s15
 8018fde:	fb92 f3f3 	sdiv	r3, r2, r3
 8018fe2:	9a03      	ldr	r2, [sp, #12]
 8018fe4:	9312      	str	r3, [sp, #72]	; 0x48
 8018fe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018fe8:	bf08      	it	eq
 8018fea:	4613      	moveq	r3, r2
 8018fec:	e789      	b.n	8018f02 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8018fee:	140f      	asrs	r7, r1, #16
 8018ff0:	d424      	bmi.n	801903c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018ff2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8018ff6:	42bd      	cmp	r5, r7
 8018ff8:	dd20      	ble.n	801903c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018ffa:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8018ffe:	d41d      	bmi.n	801903c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019000:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8019004:	4560      	cmp	r0, ip
 8019006:	dd19      	ble.n	801903c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019008:	b22d      	sxth	r5, r5
 801900a:	9801      	ldr	r0, [sp, #4]
 801900c:	fb0c 7505 	mla	r5, ip, r5, r7
 8019010:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8019014:	0e07      	lsrs	r7, r0, #24
 8019016:	2fff      	cmp	r7, #255	; 0xff
 8019018:	d116      	bne.n	8019048 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801901a:	f06f 0501 	mvn.w	r5, #1
 801901e:	fb05 f706 	mul.w	r7, r5, r6
 8019022:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8019026:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801902a:	0945      	lsrs	r5, r0, #5
 801902c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8019030:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019034:	ea4c 0505 	orr.w	r5, ip, r5
 8019038:	4305      	orrs	r5, r0
 801903a:	53e5      	strh	r5, [r4, r7]
 801903c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801903e:	3e01      	subs	r6, #1
 8019040:	4401      	add	r1, r0
 8019042:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019044:	4402      	add	r2, r0
 8019046:	e790      	b.n	8018f6a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8019048:	b2fd      	uxtb	r5, r7
 801904a:	2f00      	cmp	r7, #0
 801904c:	d0f6      	beq.n	801903c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801904e:	f06f 0701 	mvn.w	r7, #1
 8019052:	fa1f f985 	uxth.w	r9, r5
 8019056:	43ed      	mvns	r5, r5
 8019058:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801905c:	4377      	muls	r7, r6
 801905e:	fb1a fa09 	smulbb	sl, sl, r9
 8019062:	b2ed      	uxtb	r5, r5
 8019064:	f834 e007 	ldrh.w	lr, [r4, r7]
 8019068:	9702      	str	r7, [sp, #8]
 801906a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801906e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8019072:	fb17 f709 	smulbb	r7, r7, r9
 8019076:	b2c0      	uxtb	r0, r0
 8019078:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801907c:	fb10 f009 	smulbb	r0, r0, r9
 8019080:	fb0c 7c05 	mla	ip, ip, r5, r7
 8019084:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8019088:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801908c:	fa1f fc8c 	uxth.w	ip, ip
 8019090:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019094:	fa5f fe8e 	uxtb.w	lr, lr
 8019098:	fb07 a705 	mla	r7, r7, r5, sl
 801909c:	fb0e 0005 	mla	r0, lr, r5, r0
 80190a0:	f10c 0501 	add.w	r5, ip, #1
 80190a4:	b2bf      	uxth	r7, r7
 80190a6:	b280      	uxth	r0, r0
 80190a8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80190ac:	f100 0a01 	add.w	sl, r0, #1
 80190b0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80190b4:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 80190b8:	9802      	ldr	r0, [sp, #8]
 80190ba:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80190be:	ea4a 0c0c 	orr.w	ip, sl, ip
 80190c2:	f107 0a01 	add.w	sl, r7, #1
 80190c6:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80190ca:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80190ce:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80190d2:	ea4c 0c0a 	orr.w	ip, ip, sl
 80190d6:	f824 c000 	strh.w	ip, [r4, r0]
 80190da:	e7af      	b.n	801903c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80190dc:	f04f 0e00 	mov.w	lr, #0
 80190e0:	eba3 000e 	sub.w	r0, r3, lr
 80190e4:	2800      	cmp	r0, #0
 80190e6:	f77f af43 	ble.w	8018f70 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80190ea:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 80190ee:	140d      	asrs	r5, r1, #16
 80190f0:	1410      	asrs	r0, r2, #16
 80190f2:	fb06 5000 	mla	r0, r6, r0, r5
 80190f6:	9d01      	ldr	r5, [sp, #4]
 80190f8:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 80190fc:	0e2e      	lsrs	r6, r5, #24
 80190fe:	2eff      	cmp	r6, #255	; 0xff
 8019100:	d112      	bne.n	8019128 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8019102:	482c      	ldr	r0, [pc, #176]	; (80191b4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8019104:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8019108:	0968      	lsrs	r0, r5, #5
 801910a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801910e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019112:	4330      	orrs	r0, r6
 8019114:	4328      	orrs	r0, r5
 8019116:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801911a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801911c:	f10e 0e01 	add.w	lr, lr, #1
 8019120:	4401      	add	r1, r0
 8019122:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019124:	4402      	add	r2, r0
 8019126:	e7db      	b.n	80190e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8019128:	b2f0      	uxtb	r0, r6
 801912a:	2e00      	cmp	r6, #0
 801912c:	d0f5      	beq.n	801911a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801912e:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8019132:	fa1f f980 	uxth.w	r9, r0
 8019136:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801913a:	43c0      	mvns	r0, r0
 801913c:	ea4f 272c 	mov.w	r7, ip, asr #8
 8019140:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8019144:	fb16 f609 	smulbb	r6, r6, r9
 8019148:	b2c0      	uxtb	r0, r0
 801914a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801914e:	b2ed      	uxtb	r5, r5
 8019150:	fb1a fa09 	smulbb	sl, sl, r9
 8019154:	fb07 6700 	mla	r7, r7, r0, r6
 8019158:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801915c:	fb15 f509 	smulbb	r5, r5, r9
 8019160:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8019164:	b2bf      	uxth	r7, r7
 8019166:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801916a:	fa5f fc8c 	uxtb.w	ip, ip
 801916e:	fb06 a600 	mla	r6, r6, r0, sl
 8019172:	fb0c 5500 	mla	r5, ip, r0, r5
 8019176:	1c78      	adds	r0, r7, #1
 8019178:	b2b6      	uxth	r6, r6
 801917a:	b2ad      	uxth	r5, r5
 801917c:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8019180:	f105 0a01 	add.w	sl, r5, #1
 8019184:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019188:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801918c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019190:	ea4a 0707 	orr.w	r7, sl, r7
 8019194:	f106 0a01 	add.w	sl, r6, #1
 8019198:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801919c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80191a0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80191a4:	ea47 070a 	orr.w	r7, r7, sl
 80191a8:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 80191ac:	e7b5      	b.n	801911a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80191ae:	b005      	add	sp, #20
 80191b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191b4:	fffff800 	.word	0xfffff800

080191b8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80191b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191bc:	b087      	sub	sp, #28
 80191be:	468b      	mov	fp, r1
 80191c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80191c4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80191c6:	9203      	str	r2, [sp, #12]
 80191c8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80191cc:	6841      	ldr	r1, [r0, #4]
 80191ce:	9204      	str	r2, [sp, #16]
 80191d0:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80191d4:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80191d8:	fb01 2404 	mla	r4, r1, r4, r2
 80191dc:	6802      	ldr	r2, [r0, #0]
 80191de:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80191e2:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80191e6:	3201      	adds	r2, #1
 80191e8:	f022 0201 	bic.w	r2, r2, #1
 80191ec:	9200      	str	r2, [sp, #0]
 80191ee:	f8d9 2000 	ldr.w	r2, [r9]
 80191f2:	9201      	str	r2, [sp, #4]
 80191f4:	f1bb 0f00 	cmp.w	fp, #0
 80191f8:	dc03      	bgt.n	8019202 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80191fa:	9a03      	ldr	r2, [sp, #12]
 80191fc:	2a00      	cmp	r2, #0
 80191fe:	f340 816a 	ble.w	80194d6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8019202:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019204:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8019208:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801920c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801920e:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8019212:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019216:	2b00      	cmp	r3, #0
 8019218:	dd0e      	ble.n	8019238 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801921a:	1402      	asrs	r2, r0, #16
 801921c:	d405      	bmi.n	801922a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801921e:	42ba      	cmp	r2, r7
 8019220:	da03      	bge.n	801922a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019222:	140a      	asrs	r2, r1, #16
 8019224:	d401      	bmi.n	801922a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019226:	42b2      	cmp	r2, r6
 8019228:	db07      	blt.n	801923a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801922a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801922c:	3b01      	subs	r3, #1
 801922e:	3402      	adds	r4, #2
 8019230:	4410      	add	r0, r2
 8019232:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019234:	4411      	add	r1, r2
 8019236:	e7ee      	b.n	8019216 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8019238:	d017      	beq.n	801926a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801923a:	1e5a      	subs	r2, r3, #1
 801923c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801923e:	fb05 0502 	mla	r5, r5, r2, r0
 8019242:	142d      	asrs	r5, r5, #16
 8019244:	d409      	bmi.n	801925a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8019246:	42bd      	cmp	r5, r7
 8019248:	da07      	bge.n	801925a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801924a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801924c:	fb05 1202 	mla	r2, r5, r2, r1
 8019250:	1412      	asrs	r2, r2, #16
 8019252:	d402      	bmi.n	801925a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8019254:	42b2      	cmp	r2, r6
 8019256:	f2c0 80c8 	blt.w	80193ea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801925a:	2700      	movs	r7, #0
 801925c:	19da      	adds	r2, r3, r7
 801925e:	2a00      	cmp	r2, #0
 8019260:	dc3e      	bgt.n	80192e0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8019262:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019266:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801926a:	f1bb 0f00 	cmp.w	fp, #0
 801926e:	f340 8132 	ble.w	80194d6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8019272:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019276:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019278:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801927c:	f1bb 0b01 	subs.w	fp, fp, #1
 8019280:	eeb0 6a62 	vmov.f32	s12, s5
 8019284:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019288:	ee31 1a05 	vadd.f32	s2, s2, s10
 801928c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019290:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8019294:	eeb0 6a43 	vmov.f32	s12, s6
 8019298:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801929c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80192a0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80192a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80192a8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80192ac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80192b0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80192b4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80192b8:	ee12 2a90 	vmov	r2, s5
 80192bc:	eef0 2a47 	vmov.f32	s5, s14
 80192c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80192c4:	ee13 2a10 	vmov	r2, s6
 80192c8:	9313      	str	r3, [sp, #76]	; 0x4c
 80192ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80192cc:	eeb0 3a67 	vmov.f32	s6, s15
 80192d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80192d4:	9a03      	ldr	r2, [sp, #12]
 80192d6:	9314      	str	r3, [sp, #80]	; 0x50
 80192d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80192da:	bf08      	it	eq
 80192dc:	4613      	moveq	r3, r2
 80192de:	e789      	b.n	80191f4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80192e0:	1405      	asrs	r5, r0, #16
 80192e2:	d436      	bmi.n	8019352 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80192e4:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80192e8:	42aa      	cmp	r2, r5
 80192ea:	dd32      	ble.n	8019352 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80192ec:	140e      	asrs	r6, r1, #16
 80192ee:	d430      	bmi.n	8019352 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80192f0:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80192f4:	42b2      	cmp	r2, r6
 80192f6:	dd2c      	ble.n	8019352 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80192f8:	9a00      	ldr	r2, [sp, #0]
 80192fa:	fb06 5502 	mla	r5, r6, r2, r5
 80192fe:	9e01      	ldr	r6, [sp, #4]
 8019300:	086a      	lsrs	r2, r5, #1
 8019302:	5cb2      	ldrb	r2, [r6, r2]
 8019304:	07ee      	lsls	r6, r5, #31
 8019306:	bf54      	ite	pl
 8019308:	f002 020f 	andpl.w	r2, r2, #15
 801930c:	1112      	asrmi	r2, r2, #4
 801930e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019312:	b2d2      	uxtb	r2, r2
 8019314:	b1ea      	cbz	r2, 8019352 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8019316:	9d04      	ldr	r5, [sp, #16]
 8019318:	436a      	muls	r2, r5
 801931a:	1c55      	adds	r5, r2, #1
 801931c:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8019320:	4d6e      	ldr	r5, [pc, #440]	; (80194dc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8019322:	1212      	asrs	r2, r2, #8
 8019324:	682d      	ldr	r5, [r5, #0]
 8019326:	2aff      	cmp	r2, #255	; 0xff
 8019328:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801932c:	9605      	str	r6, [sp, #20]
 801932e:	d116      	bne.n	801935e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8019330:	f06f 0201 	mvn.w	r2, #1
 8019334:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8019338:	fb02 fc07 	mul.w	ip, r2, r7
 801933c:	096a      	lsrs	r2, r5, #5
 801933e:	f026 0607 	bic.w	r6, r6, #7
 8019342:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8019346:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801934a:	4316      	orrs	r6, r2
 801934c:	432e      	orrs	r6, r5
 801934e:	f824 600c 	strh.w	r6, [r4, ip]
 8019352:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019354:	3f01      	subs	r7, #1
 8019356:	4410      	add	r0, r2
 8019358:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801935a:	4411      	add	r1, r2
 801935c:	e77e      	b.n	801925c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801935e:	f06f 0601 	mvn.w	r6, #1
 8019362:	fa1f fa82 	uxth.w	sl, r2
 8019366:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801936a:	43d2      	mvns	r2, r2
 801936c:	437e      	muls	r6, r7
 801936e:	b2ed      	uxtb	r5, r5
 8019370:	fb1c fc0a 	smulbb	ip, ip, sl
 8019374:	b2d2      	uxtb	r2, r2
 8019376:	f834 8006 	ldrh.w	r8, [r4, r6]
 801937a:	fb15 f50a 	smulbb	r5, r5, sl
 801937e:	9602      	str	r6, [sp, #8]
 8019380:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8019384:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8019388:	fb16 f60a 	smulbb	r6, r6, sl
 801938c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8019390:	fb0e ce02 	mla	lr, lr, r2, ip
 8019394:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8019398:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801939c:	fa1f fe8e 	uxth.w	lr, lr
 80193a0:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80193a4:	fa5f f888 	uxtb.w	r8, r8
 80193a8:	fb0c 6c02 	mla	ip, ip, r2, r6
 80193ac:	fb08 5502 	mla	r5, r8, r2, r5
 80193b0:	f10e 0201 	add.w	r2, lr, #1
 80193b4:	fa1f fc8c 	uxth.w	ip, ip
 80193b8:	b2ad      	uxth	r5, r5
 80193ba:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 80193be:	9a02      	ldr	r2, [sp, #8]
 80193c0:	1c6e      	adds	r6, r5, #1
 80193c2:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 80193c6:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 80193ca:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80193ce:	ea46 0e0e 	orr.w	lr, r6, lr
 80193d2:	f10c 0601 	add.w	r6, ip, #1
 80193d6:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 80193da:	0976      	lsrs	r6, r6, #5
 80193dc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80193e0:	ea4e 0e06 	orr.w	lr, lr, r6
 80193e4:	f824 e002 	strh.w	lr, [r4, r2]
 80193e8:	e7b3      	b.n	8019352 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80193ea:	f04f 0800 	mov.w	r8, #0
 80193ee:	eba3 0208 	sub.w	r2, r3, r8
 80193f2:	2a00      	cmp	r2, #0
 80193f4:	f77f af35 	ble.w	8019262 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80193f8:	1402      	asrs	r2, r0, #16
 80193fa:	9e00      	ldr	r6, [sp, #0]
 80193fc:	140d      	asrs	r5, r1, #16
 80193fe:	fb06 2505 	mla	r5, r6, r5, r2
 8019402:	9e01      	ldr	r6, [sp, #4]
 8019404:	086a      	lsrs	r2, r5, #1
 8019406:	07ed      	lsls	r5, r5, #31
 8019408:	5cb2      	ldrb	r2, [r6, r2]
 801940a:	bf54      	ite	pl
 801940c:	f002 020f 	andpl.w	r2, r2, #15
 8019410:	1112      	asrmi	r2, r2, #4
 8019412:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019416:	b2d2      	uxtb	r2, r2
 8019418:	b1c2      	cbz	r2, 801944c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801941a:	9d04      	ldr	r5, [sp, #16]
 801941c:	436a      	muls	r2, r5
 801941e:	1c55      	adds	r5, r2, #1
 8019420:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8019424:	4d2d      	ldr	r5, [pc, #180]	; (80194dc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8019426:	1212      	asrs	r2, r2, #8
 8019428:	682e      	ldr	r6, [r5, #0]
 801942a:	2aff      	cmp	r2, #255	; 0xff
 801942c:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8019430:	d113      	bne.n	801945a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019432:	0972      	lsrs	r2, r6, #5
 8019434:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 8019438:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801943c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019440:	f025 0507 	bic.w	r5, r5, #7
 8019444:	4315      	orrs	r5, r2
 8019446:	4335      	orrs	r5, r6
 8019448:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801944c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801944e:	f108 0801 	add.w	r8, r8, #1
 8019452:	4410      	add	r0, r2
 8019454:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019456:	4411      	add	r1, r2
 8019458:	e7c9      	b.n	80193ee <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801945a:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801945e:	fa1f fa82 	uxth.w	sl, r2
 8019462:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8019466:	43d2      	mvns	r2, r2
 8019468:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801946c:	fb17 f70a 	smulbb	r7, r7, sl
 8019470:	b2d2      	uxtb	r2, r2
 8019472:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019476:	b2f6      	uxtb	r6, r6
 8019478:	b2ed      	uxtb	r5, r5
 801947a:	fb0c 7c02 	mla	ip, ip, r2, r7
 801947e:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8019482:	fb16 f60a 	smulbb	r6, r6, sl
 8019486:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801948a:	fa1f fc8c 	uxth.w	ip, ip
 801948e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019492:	fb15 f50a 	smulbb	r5, r5, sl
 8019496:	fa5f fe8e 	uxtb.w	lr, lr
 801949a:	fb0e 6602 	mla	r6, lr, r2, r6
 801949e:	fb07 5702 	mla	r7, r7, r2, r5
 80194a2:	f10c 0201 	add.w	r2, ip, #1
 80194a6:	b2b6      	uxth	r6, r6
 80194a8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80194ac:	1c75      	adds	r5, r6, #1
 80194ae:	b2bf      	uxth	r7, r7
 80194b0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80194b4:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 80194b8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80194bc:	ea45 0c0c 	orr.w	ip, r5, ip
 80194c0:	1c7d      	adds	r5, r7, #1
 80194c2:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 80194c6:	096d      	lsrs	r5, r5, #5
 80194c8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80194cc:	ea4c 0c05 	orr.w	ip, ip, r5
 80194d0:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 80194d4:	e7ba      	b.n	801944c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80194d6:	b007      	add	sp, #28
 80194d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194dc:	20021000 	.word	0x20021000

080194e0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80194e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194e4:	b087      	sub	sp, #28
 80194e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80194ea:	f8df 8308 	ldr.w	r8, [pc, #776]	; 80197f4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 80194ee:	9815      	ldr	r0, [sp, #84]	; 0x54
 80194f0:	9101      	str	r1, [sp, #4]
 80194f2:	9205      	str	r2, [sp, #20]
 80194f4:	6841      	ldr	r1, [r0, #4]
 80194f6:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 80194fa:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80194fe:	fb01 2404 	mla	r4, r1, r4, r2
 8019502:	6802      	ldr	r2, [r0, #0]
 8019504:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019508:	f8db 2008 	ldr.w	r2, [fp, #8]
 801950c:	3201      	adds	r2, #1
 801950e:	f022 0201 	bic.w	r2, r2, #1
 8019512:	9202      	str	r2, [sp, #8]
 8019514:	f8db 2000 	ldr.w	r2, [fp]
 8019518:	9203      	str	r2, [sp, #12]
 801951a:	9a01      	ldr	r2, [sp, #4]
 801951c:	2a00      	cmp	r2, #0
 801951e:	dc03      	bgt.n	8019528 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8019520:	9a05      	ldr	r2, [sp, #20]
 8019522:	2a00      	cmp	r2, #0
 8019524:	f340 8162 	ble.w	80197ec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8019528:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801952a:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801952e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019532:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019534:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8019538:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801953c:	2b00      	cmp	r3, #0
 801953e:	dd0e      	ble.n	801955e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019540:	1402      	asrs	r2, r0, #16
 8019542:	d405      	bmi.n	8019550 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019544:	42ba      	cmp	r2, r7
 8019546:	da03      	bge.n	8019550 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019548:	140a      	asrs	r2, r1, #16
 801954a:	d401      	bmi.n	8019550 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801954c:	42b2      	cmp	r2, r6
 801954e:	db07      	blt.n	8019560 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8019550:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019552:	3b01      	subs	r3, #1
 8019554:	3402      	adds	r4, #2
 8019556:	4410      	add	r0, r2
 8019558:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801955a:	4411      	add	r1, r2
 801955c:	e7ee      	b.n	801953c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801955e:	d017      	beq.n	8019590 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8019560:	1e5a      	subs	r2, r3, #1
 8019562:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019564:	fb05 0502 	mla	r5, r5, r2, r0
 8019568:	142d      	asrs	r5, r5, #16
 801956a:	d409      	bmi.n	8019580 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801956c:	42bd      	cmp	r5, r7
 801956e:	da07      	bge.n	8019580 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019570:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019572:	fb05 1202 	mla	r2, r5, r2, r1
 8019576:	1412      	asrs	r2, r2, #16
 8019578:	d402      	bmi.n	8019580 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801957a:	42b2      	cmp	r2, r6
 801957c:	f2c0 80c3 	blt.w	8019706 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8019580:	2500      	movs	r5, #0
 8019582:	195a      	adds	r2, r3, r5
 8019584:	2a00      	cmp	r2, #0
 8019586:	dc3f      	bgt.n	8019608 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8019588:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801958c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019590:	9b01      	ldr	r3, [sp, #4]
 8019592:	2b00      	cmp	r3, #0
 8019594:	f340 812a 	ble.w	80197ec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8019598:	ee30 0a04 	vadd.f32	s0, s0, s8
 801959c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801959e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80195a2:	eeb0 6a62 	vmov.f32	s12, s5
 80195a6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80195aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80195ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80195b2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80195b6:	eeb0 6a43 	vmov.f32	s12, s6
 80195ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80195be:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80195c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80195c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80195ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 80195ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80195d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80195d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80195da:	ee12 2a90 	vmov	r2, s5
 80195de:	eef0 2a47 	vmov.f32	s5, s14
 80195e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80195e6:	ee13 2a10 	vmov	r2, s6
 80195ea:	9313      	str	r3, [sp, #76]	; 0x4c
 80195ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80195ee:	eeb0 3a67 	vmov.f32	s6, s15
 80195f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80195f6:	9314      	str	r3, [sp, #80]	; 0x50
 80195f8:	9b01      	ldr	r3, [sp, #4]
 80195fa:	9a05      	ldr	r2, [sp, #20]
 80195fc:	3b01      	subs	r3, #1
 80195fe:	9301      	str	r3, [sp, #4]
 8019600:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019602:	bf08      	it	eq
 8019604:	4613      	moveq	r3, r2
 8019606:	e788      	b.n	801951a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8019608:	1406      	asrs	r6, r0, #16
 801960a:	d42c      	bmi.n	8019666 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801960c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8019610:	42b2      	cmp	r2, r6
 8019612:	dd28      	ble.n	8019666 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019614:	140f      	asrs	r7, r1, #16
 8019616:	d426      	bmi.n	8019666 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019618:	f8db 200c 	ldr.w	r2, [fp, #12]
 801961c:	42ba      	cmp	r2, r7
 801961e:	dd22      	ble.n	8019666 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019620:	9a02      	ldr	r2, [sp, #8]
 8019622:	fb07 6602 	mla	r6, r7, r2, r6
 8019626:	9f03      	ldr	r7, [sp, #12]
 8019628:	0872      	lsrs	r2, r6, #1
 801962a:	07f6      	lsls	r6, r6, #31
 801962c:	5cba      	ldrb	r2, [r7, r2]
 801962e:	bf54      	ite	pl
 8019630:	f002 020f 	andpl.w	r2, r2, #15
 8019634:	1112      	asrmi	r2, r2, #4
 8019636:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801963a:	b2d2      	uxtb	r2, r2
 801963c:	2aff      	cmp	r2, #255	; 0xff
 801963e:	d118      	bne.n	8019672 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8019640:	f06f 0601 	mvn.w	r6, #1
 8019644:	f8d8 2000 	ldr.w	r2, [r8]
 8019648:	fb06 f705 	mul.w	r7, r6, r5
 801964c:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 8019650:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8019654:	0956      	lsrs	r6, r2, #5
 8019656:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801965a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801965e:	ea4c 0606 	orr.w	r6, ip, r6
 8019662:	4316      	orrs	r6, r2
 8019664:	53e6      	strh	r6, [r4, r7]
 8019666:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019668:	3d01      	subs	r5, #1
 801966a:	4410      	add	r0, r2
 801966c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801966e:	4411      	add	r1, r2
 8019670:	e787      	b.n	8019582 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8019672:	2a00      	cmp	r2, #0
 8019674:	d0f7      	beq.n	8019666 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019676:	f06f 0601 	mvn.w	r6, #1
 801967a:	f8d8 c000 	ldr.w	ip, [r8]
 801967e:	fa1f f982 	uxth.w	r9, r2
 8019682:	43d2      	mvns	r2, r2
 8019684:	436e      	muls	r6, r5
 8019686:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801968a:	b2d2      	uxtb	r2, r2
 801968c:	f834 e006 	ldrh.w	lr, [r4, r6]
 8019690:	fb1a fa09 	smulbb	sl, sl, r9
 8019694:	9604      	str	r6, [sp, #16]
 8019696:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801969a:	ea4f 272e 	mov.w	r7, lr, asr #8
 801969e:	fb16 f609 	smulbb	r6, r6, r9
 80196a2:	fa5f fc8c 	uxtb.w	ip, ip
 80196a6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80196aa:	fb1c fc09 	smulbb	ip, ip, r9
 80196ae:	fb07 6702 	mla	r7, r7, r2, r6
 80196b2:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80196b6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80196ba:	b2bf      	uxth	r7, r7
 80196bc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80196c0:	fa5f fe8e 	uxtb.w	lr, lr
 80196c4:	fb06 a602 	mla	r6, r6, r2, sl
 80196c8:	fb0e cc02 	mla	ip, lr, r2, ip
 80196cc:	1c7a      	adds	r2, r7, #1
 80196ce:	b2b6      	uxth	r6, r6
 80196d0:	fa1f fc8c 	uxth.w	ip, ip
 80196d4:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80196d8:	9a04      	ldr	r2, [sp, #16]
 80196da:	f10c 0a01 	add.w	sl, ip, #1
 80196de:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80196e2:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80196e6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80196ea:	ea4a 0707 	orr.w	r7, sl, r7
 80196ee:	f106 0a01 	add.w	sl, r6, #1
 80196f2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80196f6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80196fa:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80196fe:	ea47 070a 	orr.w	r7, r7, sl
 8019702:	52a7      	strh	r7, [r4, r2]
 8019704:	e7af      	b.n	8019666 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019706:	f04f 0e00 	mov.w	lr, #0
 801970a:	eba3 020e 	sub.w	r2, r3, lr
 801970e:	2a00      	cmp	r2, #0
 8019710:	f77f af3a 	ble.w	8019588 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8019714:	1402      	asrs	r2, r0, #16
 8019716:	9e02      	ldr	r6, [sp, #8]
 8019718:	140d      	asrs	r5, r1, #16
 801971a:	fb06 2505 	mla	r5, r6, r5, r2
 801971e:	9e03      	ldr	r6, [sp, #12]
 8019720:	086a      	lsrs	r2, r5, #1
 8019722:	07ed      	lsls	r5, r5, #31
 8019724:	5cb2      	ldrb	r2, [r6, r2]
 8019726:	bf54      	ite	pl
 8019728:	f002 020f 	andpl.w	r2, r2, #15
 801972c:	1112      	asrmi	r2, r2, #4
 801972e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019732:	b2d2      	uxtb	r2, r2
 8019734:	2aff      	cmp	r2, #255	; 0xff
 8019736:	d115      	bne.n	8019764 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8019738:	f8d8 5000 	ldr.w	r5, [r8]
 801973c:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 8019740:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8019744:	096a      	lsrs	r2, r5, #5
 8019746:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801974a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801974e:	4332      	orrs	r2, r6
 8019750:	432a      	orrs	r2, r5
 8019752:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 8019756:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019758:	f10e 0e01 	add.w	lr, lr, #1
 801975c:	4410      	add	r0, r2
 801975e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019760:	4411      	add	r1, r2
 8019762:	e7d2      	b.n	801970a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8019764:	2a00      	cmp	r2, #0
 8019766:	d0f6      	beq.n	8019756 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8019768:	f8d8 7000 	ldr.w	r7, [r8]
 801976c:	fa1f f982 	uxth.w	r9, r2
 8019770:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8019774:	43d2      	mvns	r2, r2
 8019776:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801977a:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801977e:	ea4f 262c 	mov.w	r6, ip, asr #8
 8019782:	fb15 f509 	smulbb	r5, r5, r9
 8019786:	b2d2      	uxtb	r2, r2
 8019788:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801978c:	b2ff      	uxtb	r7, r7
 801978e:	fb1a fa09 	smulbb	sl, sl, r9
 8019792:	fb06 5602 	mla	r6, r6, r2, r5
 8019796:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801979a:	fb17 f709 	smulbb	r7, r7, r9
 801979e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80197a2:	b2b6      	uxth	r6, r6
 80197a4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80197a8:	fa5f fc8c 	uxtb.w	ip, ip
 80197ac:	fb05 a502 	mla	r5, r5, r2, sl
 80197b0:	fb0c 7702 	mla	r7, ip, r2, r7
 80197b4:	1c72      	adds	r2, r6, #1
 80197b6:	b2ad      	uxth	r5, r5
 80197b8:	b2bf      	uxth	r7, r7
 80197ba:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80197be:	f107 0a01 	add.w	sl, r7, #1
 80197c2:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80197c6:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80197ca:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80197ce:	ea4a 0606 	orr.w	r6, sl, r6
 80197d2:	f105 0a01 	add.w	sl, r5, #1
 80197d6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80197da:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80197de:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80197e2:	ea46 060a 	orr.w	r6, r6, sl
 80197e6:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 80197ea:	e7b4      	b.n	8019756 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80197ec:	b007      	add	sp, #28
 80197ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197f2:	bf00      	nop
 80197f4:	20021000 	.word	0x20021000

080197f8 <_ZN8touchgfx8LCD16bppD1Ev>:
 80197f8:	4770      	bx	lr

080197fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80197fa:	4770      	bx	lr

080197fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80197fc:	4770      	bx	lr

080197fe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80197fe:	4770      	bx	lr

08019800 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8019800:	4770      	bx	lr

08019802 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8019802:	4770      	bx	lr

08019804 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8019804:	4770      	bx	lr

08019806 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8019806:	4770      	bx	lr

08019808 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8019808:	4770      	bx	lr

0801980a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801980a:	4770      	bx	lr

0801980c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801980c:	4770      	bx	lr

0801980e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801980e:	4770      	bx	lr

08019810 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8019810:	4770      	bx	lr

08019812 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8019812:	4770      	bx	lr

08019814 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8019814:	4770      	bx	lr

08019816 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8019816:	4770      	bx	lr

08019818 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8019818:	4770      	bx	lr

0801981a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801981a:	4770      	bx	lr

0801981c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801981c:	4770      	bx	lr

0801981e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801981e:	4770      	bx	lr

08019820 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8019820:	4770      	bx	lr

08019822 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8019822:	4770      	bx	lr

08019824 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8019824:	4770      	bx	lr

08019826 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8019826:	4770      	bx	lr

08019828 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8019828:	4770      	bx	lr

0801982a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801982a:	4770      	bx	lr

0801982c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801982c:	4770      	bx	lr

0801982e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801982e:	4770      	bx	lr

08019830 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8019830:	4770      	bx	lr
	...

08019834 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8019834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019838:	4692      	mov	sl, r2
 801983a:	4a22      	ldr	r2, [pc, #136]	; (80198c4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x90>)
 801983c:	b088      	sub	sp, #32
 801983e:	4605      	mov	r5, r0
 8019840:	6812      	ldr	r2, [r2, #0]
 8019842:	4689      	mov	r9, r1
 8019844:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8019848:	2a02      	cmp	r2, #2
 801984a:	d106      	bne.n	801985a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801984c:	4b1e      	ldr	r3, [pc, #120]	; (80198c8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x94>)
 801984e:	f44f 7158 	mov.w	r1, #864	; 0x360
 8019852:	4a1e      	ldr	r2, [pc, #120]	; (80198cc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x98>)
 8019854:	481e      	ldr	r0, [pc, #120]	; (80198d0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x9c>)
 8019856:	f00b f8cf 	bl	80249f8 <__assert_func>
 801985a:	ac08      	add	r4, sp, #32
 801985c:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8019860:	4620      	mov	r0, r4
 8019862:	f7fd fce3 	bl	801722c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019866:	682b      	ldr	r3, [r5, #0]
 8019868:	4606      	mov	r6, r0
 801986a:	4628      	mov	r0, r5
 801986c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801986e:	4798      	blx	r3
 8019870:	4286      	cmp	r6, r0
 8019872:	d004      	beq.n	801987e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8019874:	4b17      	ldr	r3, [pc, #92]	; (80198d4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa0>)
 8019876:	f240 3162 	movw	r1, #866	; 0x362
 801987a:	4a14      	ldr	r2, [pc, #80]	; (80198cc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x98>)
 801987c:	e7ea      	b.n	8019854 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801987e:	4620      	mov	r0, r4
 8019880:	f7fd fc4a 	bl	8017118 <_ZNK8touchgfx6Bitmap7getDataEv>
 8019884:	4606      	mov	r6, r0
 8019886:	b920      	cbnz	r0, 8019892 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8019888:	4b13      	ldr	r3, [pc, #76]	; (80198d8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa4>)
 801988a:	f44f 7159 	mov.w	r1, #868	; 0x364
 801988e:	4a0f      	ldr	r2, [pc, #60]	; (80198cc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x98>)
 8019890:	e7e0      	b.n	8019854 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8019892:	682b      	ldr	r3, [r5, #0]
 8019894:	4620      	mov	r0, r4
 8019896:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801989a:	f7fd fb21 	bl	8016ee0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801989e:	4607      	mov	r7, r0
 80198a0:	4620      	mov	r0, r4
 80198a2:	f7fd fb61 	bl	8016f68 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80198a6:	4653      	mov	r3, sl
 80198a8:	b200      	sxth	r0, r0
 80198aa:	464a      	mov	r2, r9
 80198ac:	b23f      	sxth	r7, r7
 80198ae:	4629      	mov	r1, r5
 80198b0:	9002      	str	r0, [sp, #8]
 80198b2:	a806      	add	r0, sp, #24
 80198b4:	e9cd 6700 	strd	r6, r7, [sp]
 80198b8:	47c0      	blx	r8
 80198ba:	4630      	mov	r0, r6
 80198bc:	b008      	add	sp, #32
 80198be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80198c2:	bf00      	nop
 80198c4:	20020fd8 	.word	0x20020fd8
 80198c8:	08029e9e 	.word	0x08029e9e
 80198cc:	0802a79b 	.word	0x0802a79b
 80198d0:	08029f50 	.word	0x08029f50
 80198d4:	08029f82 	.word	0x08029f82
 80198d8:	08029fd7 	.word	0x08029fd7

080198dc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 80198dc:	b508      	push	{r3, lr}
 80198de:	4b06      	ldr	r3, [pc, #24]	; (80198f8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 80198e0:	8818      	ldrh	r0, [r3, #0]
 80198e2:	b928      	cbnz	r0, 80198f0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 80198e4:	4b05      	ldr	r3, [pc, #20]	; (80198fc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 80198e6:	2153      	movs	r1, #83	; 0x53
 80198e8:	4a05      	ldr	r2, [pc, #20]	; (8019900 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 80198ea:	4806      	ldr	r0, [pc, #24]	; (8019904 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 80198ec:	f00b f884 	bl	80249f8 <__assert_func>
 80198f0:	0040      	lsls	r0, r0, #1
 80198f2:	b280      	uxth	r0, r0
 80198f4:	bd08      	pop	{r3, pc}
 80198f6:	bf00      	nop
 80198f8:	20020fd2 	.word	0x20020fd2
 80198fc:	0802a046 	.word	0x0802a046
 8019900:	0802a658 	.word	0x0802a658
 8019904:	0802a088 	.word	0x0802a088

08019908 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8019908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801990c:	2300      	movs	r3, #0
 801990e:	9300      	str	r3, [sp, #0]
 8019910:	4b3d      	ldr	r3, [pc, #244]	; (8019a08 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 8019912:	781b      	ldrb	r3, [r3, #0]
 8019914:	2b00      	cmp	r3, #0
 8019916:	d137      	bne.n	8019988 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 8019918:	4a3c      	ldr	r2, [pc, #240]	; (8019a0c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801991a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801991e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019922:	2b00      	cmp	r3, #0
 8019924:	d132      	bne.n	801998c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 8019926:	4b3a      	ldr	r3, [pc, #232]	; (8019a10 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8019928:	f9b3 3000 	ldrsh.w	r3, [r3]
 801992c:	ac02      	add	r4, sp, #8
 801992e:	6808      	ldr	r0, [r1, #0]
 8019930:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019934:	ab02      	add	r3, sp, #8
 8019936:	6849      	ldr	r1, [r1, #4]
 8019938:	4d36      	ldr	r5, [pc, #216]	; (8019a14 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801993a:	c303      	stmia	r3!, {r0, r1}
 801993c:	4669      	mov	r1, sp
 801993e:	4620      	mov	r0, r4
 8019940:	f7fa f802 	bl	8013948 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019944:	4668      	mov	r0, sp
 8019946:	f7f9 ffbb 	bl	80138c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801994a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801994e:	f8bd 2000 	ldrh.w	r2, [sp]
 8019952:	462f      	mov	r7, r5
 8019954:	6828      	ldr	r0, [r5, #0]
 8019956:	4413      	add	r3, r2
 8019958:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801995c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8019960:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019964:	4413      	add	r3, r2
 8019966:	f8ad 300a 	strh.w	r3, [sp, #10]
 801996a:	6803      	ldr	r3, [r0, #0]
 801996c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801996e:	4798      	blx	r3
 8019970:	f010 0f01 	tst.w	r0, #1
 8019974:	d00c      	beq.n	8019990 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 8019976:	6828      	ldr	r0, [r5, #0]
 8019978:	6803      	ldr	r3, [r0, #0]
 801997a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801997e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019980:	4798      	blx	r3
 8019982:	b004      	add	sp, #16
 8019984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019988:	4a21      	ldr	r2, [pc, #132]	; (8019a10 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801998a:	e7c6      	b.n	801991a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801998c:	4b1f      	ldr	r3, [pc, #124]	; (8019a0c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801998e:	e7cb      	b.n	8019928 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8019990:	6838      	ldr	r0, [r7, #0]
 8019992:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8019996:	6803      	ldr	r3, [r0, #0]
 8019998:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801999c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80199a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80199a2:	4798      	blx	r3
 80199a4:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80199a8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80199ac:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 80199b0:	fb16 3602 	smlabb	r6, r6, r2, r3
 80199b4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80199b8:	6838      	ldr	r0, [r7, #0]
 80199ba:	6803      	ldr	r3, [r0, #0]
 80199bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80199be:	4798      	blx	r3
 80199c0:	4a12      	ldr	r2, [pc, #72]	; (8019a0c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80199c2:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 80199c6:	8813      	ldrh	r3, [r2, #0]
 80199c8:	4691      	mov	r9, r2
 80199ca:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80199ce:	435d      	muls	r5, r3
 80199d0:	fb03 1404 	mla	r4, r3, r4, r1
 80199d4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80199d8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80199dc:	6838      	ldr	r0, [r7, #0]
 80199de:	42ac      	cmp	r4, r5
 80199e0:	6803      	ldr	r3, [r0, #0]
 80199e2:	d20e      	bcs.n	8019a02 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 80199e4:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 80199e8:	4632      	mov	r2, r6
 80199ea:	4643      	mov	r3, r8
 80199ec:	4621      	mov	r1, r4
 80199ee:	47d0      	blx	sl
 80199f0:	f8b9 3000 	ldrh.w	r3, [r9]
 80199f4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80199f8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80199fc:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8019a00:	e7ec      	b.n	80199dc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 8019a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019a04:	4798      	blx	r3
 8019a06:	e7bc      	b.n	8019982 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8019a08:	20020fd0 	.word	0x20020fd0
 8019a0c:	20020fd2 	.word	0x20020fd2
 8019a10:	20020fd4 	.word	0x20020fd4
 8019a14:	20020fd8 	.word	0x20020fd8

08019a18 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8019a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a1c:	b08b      	sub	sp, #44	; 0x2c
 8019a1e:	460f      	mov	r7, r1
 8019a20:	4616      	mov	r6, r2
 8019a22:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8019a26:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8019a2a:	f1bb 0f00 	cmp.w	fp, #0
 8019a2e:	d049      	beq.n	8019ac4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8019a30:	6810      	ldr	r0, [r2, #0]
 8019a32:	ad06      	add	r5, sp, #24
 8019a34:	6851      	ldr	r1, [r2, #4]
 8019a36:	c503      	stmia	r5!, {r0, r1}
 8019a38:	6818      	ldr	r0, [r3, #0]
 8019a3a:	ad08      	add	r5, sp, #32
 8019a3c:	6859      	ldr	r1, [r3, #4]
 8019a3e:	c503      	stmia	r5!, {r0, r1}
 8019a40:	a806      	add	r0, sp, #24
 8019a42:	f7f9 ff3d 	bl	80138c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019a46:	4631      	mov	r1, r6
 8019a48:	a808      	add	r0, sp, #32
 8019a4a:	f7f9 ff7d 	bl	8013948 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019a4e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8019a52:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8019a56:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8019a5a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8019a5e:	fb16 2103 	smlabb	r1, r6, r3, r2
 8019a62:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8019a66:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8019a6a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8019a6e:	4f5f      	ldr	r7, [pc, #380]	; (8019bec <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8019a70:	440a      	add	r2, r1
 8019a72:	6838      	ldr	r0, [r7, #0]
 8019a74:	46b9      	mov	r9, r7
 8019a76:	f8ad 2020 	strh.w	r2, [sp, #32]
 8019a7a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019a7e:	4413      	add	r3, r2
 8019a80:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019a84:	6803      	ldr	r3, [r0, #0]
 8019a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a88:	4798      	blx	r3
 8019a8a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8019a8e:	d01c      	beq.n	8019aca <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8019a90:	f010 0f04 	tst.w	r0, #4
 8019a94:	d01d      	beq.n	8019ad2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8019a96:	f8d9 0000 	ldr.w	r0, [r9]
 8019a9a:	2700      	movs	r7, #0
 8019a9c:	b2ad      	uxth	r5, r5
 8019a9e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8019aa2:	6801      	ldr	r1, [r0, #0]
 8019aa4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8019aa8:	f8cd b00c 	str.w	fp, [sp, #12]
 8019aac:	9501      	str	r5, [sp, #4]
 8019aae:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8019ab2:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8019ab6:	9402      	str	r4, [sp, #8]
 8019ab8:	fa1f f488 	uxth.w	r4, r8
 8019abc:	9400      	str	r4, [sp, #0]
 8019abe:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8019ac0:	4631      	mov	r1, r6
 8019ac2:	47a0      	blx	r4
 8019ac4:	b00b      	add	sp, #44	; 0x2c
 8019ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019aca:	b914      	cbnz	r4, 8019ad2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8019acc:	f010 0f01 	tst.w	r0, #1
 8019ad0:	e7e0      	b.n	8019a94 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 8019ad2:	f8d9 0000 	ldr.w	r0, [r9]
 8019ad6:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8019ada:	6803      	ldr	r3, [r0, #0]
 8019adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019ade:	4798      	blx	r3
 8019ae0:	4b43      	ldr	r3, [pc, #268]	; (8019bf0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 8019ae2:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8019ae6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8019aea:	881a      	ldrh	r2, [r3, #0]
 8019aec:	469a      	mov	sl, r3
 8019aee:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8019af2:	fb05 f502 	mul.w	r5, r5, r2
 8019af6:	fb02 1404 	mla	r4, r2, r4, r1
 8019afa:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8019afe:	d059      	beq.n	8019bb4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8019b00:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 8019b04:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8019b08:	fa1f f28b 	uxth.w	r2, fp
 8019b0c:	469e      	mov	lr, r3
 8019b0e:	fa1f f989 	uxth.w	r9, r9
 8019b12:	42ac      	cmp	r4, r5
 8019b14:	d264      	bcs.n	8019be0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8019b16:	eb04 0a07 	add.w	sl, r4, r7
 8019b1a:	4554      	cmp	r4, sl
 8019b1c:	d23d      	bcs.n	8019b9a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 8019b1e:	8821      	ldrh	r1, [r4, #0]
 8019b20:	f836 3b02 	ldrh.w	r3, [r6], #2
 8019b24:	1208      	asrs	r0, r1, #8
 8019b26:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8019b2a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8019b2e:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8019b32:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019b36:	00c9      	lsls	r1, r1, #3
 8019b38:	fb10 f009 	smulbb	r0, r0, r9
 8019b3c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8019b40:	b2c9      	uxtb	r1, r1
 8019b42:	fb0c 0c02 	mla	ip, ip, r2, r0
 8019b46:	10d8      	asrs	r0, r3, #3
 8019b48:	fb1b fb09 	smulbb	fp, fp, r9
 8019b4c:	00db      	lsls	r3, r3, #3
 8019b4e:	fa1f fc8c 	uxth.w	ip, ip
 8019b52:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8019b56:	fb11 f109 	smulbb	r1, r1, r9
 8019b5a:	b2db      	uxtb	r3, r3
 8019b5c:	fb00 b002 	mla	r0, r0, r2, fp
 8019b60:	f10c 0b01 	add.w	fp, ip, #1
 8019b64:	fb03 1302 	mla	r3, r3, r2, r1
 8019b68:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8019b6c:	b29b      	uxth	r3, r3
 8019b6e:	b280      	uxth	r0, r0
 8019b70:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 8019b74:	f103 0c01 	add.w	ip, r3, #1
 8019b78:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8019b7c:	1c43      	adds	r3, r0, #1
 8019b7e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8019b82:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8019b86:	0940      	lsrs	r0, r0, #5
 8019b88:	ea4c 0c0b 	orr.w	ip, ip, fp
 8019b8c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019b90:	ea4c 0c00 	orr.w	ip, ip, r0
 8019b94:	f824 cb02 	strh.w	ip, [r4], #2
 8019b98:	e7bf      	b.n	8019b1a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 8019b9a:	f8be 3000 	ldrh.w	r3, [lr]
 8019b9e:	eba3 0308 	sub.w	r3, r3, r8
 8019ba2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019ba6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019baa:	eba3 0308 	sub.w	r3, r3, r8
 8019bae:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8019bb2:	e7ae      	b.n	8019b12 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 8019bb4:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8019bb8:	f8d9 0000 	ldr.w	r0, [r9]
 8019bbc:	42ac      	cmp	r4, r5
 8019bbe:	6803      	ldr	r3, [r0, #0]
 8019bc0:	d20e      	bcs.n	8019be0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8019bc2:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8019bc6:	4632      	mov	r2, r6
 8019bc8:	463b      	mov	r3, r7
 8019bca:	4621      	mov	r1, r4
 8019bcc:	47c0      	blx	r8
 8019bce:	f8ba 3000 	ldrh.w	r3, [sl]
 8019bd2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019bd6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019bda:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8019bde:	e7eb      	b.n	8019bb8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8019be0:	4b02      	ldr	r3, [pc, #8]	; (8019bec <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8019be2:	6818      	ldr	r0, [r3, #0]
 8019be4:	6803      	ldr	r3, [r0, #0]
 8019be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019be8:	4798      	blx	r3
 8019bea:	e76b      	b.n	8019ac4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8019bec:	20020fd8 	.word	0x20020fd8
 8019bf0:	20020fd2 	.word	0x20020fd2

08019bf4 <_ZN8touchgfx8LCD16bppD0Ev>:
 8019bf4:	b510      	push	{r4, lr}
 8019bf6:	4604      	mov	r4, r0
 8019bf8:	2178      	movs	r1, #120	; 0x78
 8019bfa:	f00a fece 	bl	802499a <_ZdlPvj>
 8019bfe:	4620      	mov	r0, r4
 8019c00:	bd10      	pop	{r4, pc}

08019c02 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8019c02:	b510      	push	{r4, lr}
 8019c04:	4604      	mov	r4, r0
 8019c06:	2104      	movs	r1, #4
 8019c08:	f00a fec7 	bl	802499a <_ZdlPvj>
 8019c0c:	4620      	mov	r0, r4
 8019c0e:	bd10      	pop	{r4, pc}

08019c10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8019c10:	b510      	push	{r4, lr}
 8019c12:	4604      	mov	r4, r0
 8019c14:	2104      	movs	r1, #4
 8019c16:	f00a fec0 	bl	802499a <_ZdlPvj>
 8019c1a:	4620      	mov	r0, r4
 8019c1c:	bd10      	pop	{r4, pc}

08019c1e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8019c1e:	b510      	push	{r4, lr}
 8019c20:	4604      	mov	r4, r0
 8019c22:	2104      	movs	r1, #4
 8019c24:	f00a feb9 	bl	802499a <_ZdlPvj>
 8019c28:	4620      	mov	r0, r4
 8019c2a:	bd10      	pop	{r4, pc}

08019c2c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8019c2c:	b510      	push	{r4, lr}
 8019c2e:	4604      	mov	r4, r0
 8019c30:	2104      	movs	r1, #4
 8019c32:	f00a feb2 	bl	802499a <_ZdlPvj>
 8019c36:	4620      	mov	r0, r4
 8019c38:	bd10      	pop	{r4, pc}

08019c3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8019c3a:	b510      	push	{r4, lr}
 8019c3c:	4604      	mov	r4, r0
 8019c3e:	2104      	movs	r1, #4
 8019c40:	f00a feab 	bl	802499a <_ZdlPvj>
 8019c44:	4620      	mov	r0, r4
 8019c46:	bd10      	pop	{r4, pc}

08019c48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8019c48:	b510      	push	{r4, lr}
 8019c4a:	4604      	mov	r4, r0
 8019c4c:	2104      	movs	r1, #4
 8019c4e:	f00a fea4 	bl	802499a <_ZdlPvj>
 8019c52:	4620      	mov	r0, r4
 8019c54:	bd10      	pop	{r4, pc}

08019c56 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8019c56:	b510      	push	{r4, lr}
 8019c58:	4604      	mov	r4, r0
 8019c5a:	2104      	movs	r1, #4
 8019c5c:	f00a fe9d 	bl	802499a <_ZdlPvj>
 8019c60:	4620      	mov	r0, r4
 8019c62:	bd10      	pop	{r4, pc}

08019c64 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8019c64:	b510      	push	{r4, lr}
 8019c66:	4604      	mov	r4, r0
 8019c68:	2104      	movs	r1, #4
 8019c6a:	f00a fe96 	bl	802499a <_ZdlPvj>
 8019c6e:	4620      	mov	r0, r4
 8019c70:	bd10      	pop	{r4, pc}

08019c72 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8019c72:	b510      	push	{r4, lr}
 8019c74:	4604      	mov	r4, r0
 8019c76:	2104      	movs	r1, #4
 8019c78:	f00a fe8f 	bl	802499a <_ZdlPvj>
 8019c7c:	4620      	mov	r0, r4
 8019c7e:	bd10      	pop	{r4, pc}

08019c80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8019c80:	b510      	push	{r4, lr}
 8019c82:	4604      	mov	r4, r0
 8019c84:	2104      	movs	r1, #4
 8019c86:	f00a fe88 	bl	802499a <_ZdlPvj>
 8019c8a:	4620      	mov	r0, r4
 8019c8c:	bd10      	pop	{r4, pc}

08019c8e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8019c8e:	b510      	push	{r4, lr}
 8019c90:	4604      	mov	r4, r0
 8019c92:	2104      	movs	r1, #4
 8019c94:	f00a fe81 	bl	802499a <_ZdlPvj>
 8019c98:	4620      	mov	r0, r4
 8019c9a:	bd10      	pop	{r4, pc}

08019c9c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8019c9c:	b510      	push	{r4, lr}
 8019c9e:	4604      	mov	r4, r0
 8019ca0:	2104      	movs	r1, #4
 8019ca2:	f00a fe7a 	bl	802499a <_ZdlPvj>
 8019ca6:	4620      	mov	r0, r4
 8019ca8:	bd10      	pop	{r4, pc}

08019caa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8019caa:	b510      	push	{r4, lr}
 8019cac:	4604      	mov	r4, r0
 8019cae:	2104      	movs	r1, #4
 8019cb0:	f00a fe73 	bl	802499a <_ZdlPvj>
 8019cb4:	4620      	mov	r0, r4
 8019cb6:	bd10      	pop	{r4, pc}

08019cb8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8019cb8:	b510      	push	{r4, lr}
 8019cba:	4604      	mov	r4, r0
 8019cbc:	2104      	movs	r1, #4
 8019cbe:	f00a fe6c 	bl	802499a <_ZdlPvj>
 8019cc2:	4620      	mov	r0, r4
 8019cc4:	bd10      	pop	{r4, pc}

08019cc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8019cc6:	b510      	push	{r4, lr}
 8019cc8:	4604      	mov	r4, r0
 8019cca:	2104      	movs	r1, #4
 8019ccc:	f00a fe65 	bl	802499a <_ZdlPvj>
 8019cd0:	4620      	mov	r0, r4
 8019cd2:	bd10      	pop	{r4, pc}

08019cd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8019cd4:	b510      	push	{r4, lr}
 8019cd6:	4604      	mov	r4, r0
 8019cd8:	2104      	movs	r1, #4
 8019cda:	f00a fe5e 	bl	802499a <_ZdlPvj>
 8019cde:	4620      	mov	r0, r4
 8019ce0:	bd10      	pop	{r4, pc}

08019ce2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8019ce2:	b510      	push	{r4, lr}
 8019ce4:	4604      	mov	r4, r0
 8019ce6:	2104      	movs	r1, #4
 8019ce8:	f00a fe57 	bl	802499a <_ZdlPvj>
 8019cec:	4620      	mov	r0, r4
 8019cee:	bd10      	pop	{r4, pc}

08019cf0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8019cf0:	b510      	push	{r4, lr}
 8019cf2:	4604      	mov	r4, r0
 8019cf4:	2104      	movs	r1, #4
 8019cf6:	f00a fe50 	bl	802499a <_ZdlPvj>
 8019cfa:	4620      	mov	r0, r4
 8019cfc:	bd10      	pop	{r4, pc}

08019cfe <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8019cfe:	b510      	push	{r4, lr}
 8019d00:	4604      	mov	r4, r0
 8019d02:	2104      	movs	r1, #4
 8019d04:	f00a fe49 	bl	802499a <_ZdlPvj>
 8019d08:	4620      	mov	r0, r4
 8019d0a:	bd10      	pop	{r4, pc}

08019d0c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8019d0c:	b510      	push	{r4, lr}
 8019d0e:	4604      	mov	r4, r0
 8019d10:	2104      	movs	r1, #4
 8019d12:	f00a fe42 	bl	802499a <_ZdlPvj>
 8019d16:	4620      	mov	r0, r4
 8019d18:	bd10      	pop	{r4, pc}

08019d1a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8019d1a:	b510      	push	{r4, lr}
 8019d1c:	4604      	mov	r4, r0
 8019d1e:	2104      	movs	r1, #4
 8019d20:	f00a fe3b 	bl	802499a <_ZdlPvj>
 8019d24:	4620      	mov	r0, r4
 8019d26:	bd10      	pop	{r4, pc}

08019d28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8019d28:	b510      	push	{r4, lr}
 8019d2a:	4604      	mov	r4, r0
 8019d2c:	2104      	movs	r1, #4
 8019d2e:	f00a fe34 	bl	802499a <_ZdlPvj>
 8019d32:	4620      	mov	r0, r4
 8019d34:	bd10      	pop	{r4, pc}

08019d36 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8019d36:	b510      	push	{r4, lr}
 8019d38:	4604      	mov	r4, r0
 8019d3a:	2104      	movs	r1, #4
 8019d3c:	f00a fe2d 	bl	802499a <_ZdlPvj>
 8019d40:	4620      	mov	r0, r4
 8019d42:	bd10      	pop	{r4, pc}

08019d44 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8019d44:	b510      	push	{r4, lr}
 8019d46:	4604      	mov	r4, r0
 8019d48:	2104      	movs	r1, #4
 8019d4a:	f00a fe26 	bl	802499a <_ZdlPvj>
 8019d4e:	4620      	mov	r0, r4
 8019d50:	bd10      	pop	{r4, pc}

08019d52 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8019d52:	b510      	push	{r4, lr}
 8019d54:	4604      	mov	r4, r0
 8019d56:	2104      	movs	r1, #4
 8019d58:	f00a fe1f 	bl	802499a <_ZdlPvj>
 8019d5c:	4620      	mov	r0, r4
 8019d5e:	bd10      	pop	{r4, pc}

08019d60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8019d60:	b510      	push	{r4, lr}
 8019d62:	4604      	mov	r4, r0
 8019d64:	2104      	movs	r1, #4
 8019d66:	f00a fe18 	bl	802499a <_ZdlPvj>
 8019d6a:	4620      	mov	r0, r4
 8019d6c:	bd10      	pop	{r4, pc}

08019d6e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8019d6e:	b510      	push	{r4, lr}
 8019d70:	4604      	mov	r4, r0
 8019d72:	2104      	movs	r1, #4
 8019d74:	f00a fe11 	bl	802499a <_ZdlPvj>
 8019d78:	4620      	mov	r0, r4
 8019d7a:	bd10      	pop	{r4, pc}

08019d7c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8019d7c:	b510      	push	{r4, lr}
 8019d7e:	4604      	mov	r4, r0
 8019d80:	2104      	movs	r1, #4
 8019d82:	f00a fe0a 	bl	802499a <_ZdlPvj>
 8019d86:	4620      	mov	r0, r4
 8019d88:	bd10      	pop	{r4, pc}
	...

08019d8c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8019d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d8e:	4606      	mov	r6, r0
 8019d90:	b087      	sub	sp, #28
 8019d92:	460c      	mov	r4, r1
 8019d94:	4617      	mov	r7, r2
 8019d96:	461d      	mov	r5, r3
 8019d98:	b333      	cbz	r3, 8019de8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8019d9a:	4608      	mov	r0, r1
 8019d9c:	f7f3 fdfd 	bl	800d99a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019da0:	bb10      	cbnz	r0, 8019de8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8019da2:	6820      	ldr	r0, [r4, #0]
 8019da4:	ab04      	add	r3, sp, #16
 8019da6:	6861      	ldr	r1, [r4, #4]
 8019da8:	4c1b      	ldr	r4, [pc, #108]	; (8019e18 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8019daa:	c303      	stmia	r3!, {r0, r1}
 8019dac:	a804      	add	r0, sp, #16
 8019dae:	f7f9 fd87 	bl	80138c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019db2:	6820      	ldr	r0, [r4, #0]
 8019db4:	6803      	ldr	r3, [r0, #0]
 8019db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019db8:	4798      	blx	r3
 8019dba:	2dff      	cmp	r5, #255	; 0xff
 8019dbc:	d016      	beq.n	8019dec <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8019dbe:	f010 0f08 	tst.w	r0, #8
 8019dc2:	6820      	ldr	r0, [r4, #0]
 8019dc4:	d015      	beq.n	8019df2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8019dc6:	2400      	movs	r4, #0
 8019dc8:	6801      	ldr	r1, [r0, #0]
 8019dca:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019dce:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019dd2:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8019dd6:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8019dda:	9401      	str	r4, [sp, #4]
 8019ddc:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8019de0:	9400      	str	r4, [sp, #0]
 8019de2:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8019de4:	4639      	mov	r1, r7
 8019de6:	47a0      	blx	r4
 8019de8:	b007      	add	sp, #28
 8019dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019dec:	f010 0f02 	tst.w	r0, #2
 8019df0:	e7e7      	b.n	8019dc2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8019df2:	6803      	ldr	r3, [r0, #0]
 8019df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019df6:	4798      	blx	r3
 8019df8:	4b08      	ldr	r3, [pc, #32]	; (8019e1c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8019dfa:	4601      	mov	r1, r0
 8019dfc:	4630      	mov	r0, r6
 8019dfe:	881a      	ldrh	r2, [r3, #0]
 8019e00:	6833      	ldr	r3, [r6, #0]
 8019e02:	e9cd 7500 	strd	r7, r5, [sp]
 8019e06:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8019e08:	ab04      	add	r3, sp, #16
 8019e0a:	47a8      	blx	r5
 8019e0c:	6820      	ldr	r0, [r4, #0]
 8019e0e:	6803      	ldr	r3, [r0, #0]
 8019e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e12:	4798      	blx	r3
 8019e14:	e7e8      	b.n	8019de8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8019e16:	bf00      	nop
 8019e18:	20020fd8 	.word	0x20020fd8
 8019e1c:	20020fd2 	.word	0x20020fd2

08019e20 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8019e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e24:	4690      	mov	r8, r2
 8019e26:	4a8d      	ldr	r2, [pc, #564]	; (801a05c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x23c>)
 8019e28:	b091      	sub	sp, #68	; 0x44
 8019e2a:	4606      	mov	r6, r0
 8019e2c:	6812      	ldr	r2, [r2, #0]
 8019e2e:	460d      	mov	r5, r1
 8019e30:	461c      	mov	r4, r3
 8019e32:	f9bd b06c 	ldrsh.w	fp, [sp, #108]	; 0x6c
 8019e36:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8019e3a:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 8019e3e:	2a02      	cmp	r2, #2
 8019e40:	d106      	bne.n	8019e50 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x30>
 8019e42:	4b87      	ldr	r3, [pc, #540]	; (801a060 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x240>)
 8019e44:	f240 316b 	movw	r1, #875	; 0x36b
 8019e48:	4a86      	ldr	r2, [pc, #536]	; (801a064 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x244>)
 8019e4a:	4887      	ldr	r0, [pc, #540]	; (801a068 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x248>)
 8019e4c:	f00a fdd4 	bl	80249f8 <__assert_func>
 8019e50:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019e52:	b923      	cbnz	r3, 8019e5e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3e>
 8019e54:	4b85      	ldr	r3, [pc, #532]	; (801a06c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x24c>)
 8019e56:	f44f 715b 	mov.w	r1, #876	; 0x36c
 8019e5a:	4a82      	ldr	r2, [pc, #520]	; (801a064 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x244>)
 8019e5c:	e7f5      	b.n	8019e4a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x2a>
 8019e5e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019e62:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8019e66:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019e6a:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 8019e6e:	4648      	mov	r0, r9
 8019e70:	4621      	mov	r1, r4
 8019e72:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8019e76:	f8ad b02c 	strh.w	fp, [sp, #44]	; 0x2c
 8019e7a:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 8019e7e:	f7f3 fd49 	bl	800d914 <_ZN8touchgfx4RectaNERKS0_>
 8019e82:	4641      	mov	r1, r8
 8019e84:	4648      	mov	r0, r9
 8019e86:	f7f3 fd45 	bl	800d914 <_ZN8touchgfx4RectaNERKS0_>
 8019e8a:	4a79      	ldr	r2, [pc, #484]	; (801a070 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x250>)
 8019e8c:	f8b2 c000 	ldrh.w	ip, [r2]
 8019e90:	4a78      	ldr	r2, [pc, #480]	; (801a074 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x254>)
 8019e92:	fa0f f18c 	sxth.w	r1, ip
 8019e96:	8810      	ldrh	r0, [r2, #0]
 8019e98:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8019e9c:	fa0f fe80 	sxth.w	lr, r0
 8019ea0:	2a00      	cmp	r2, #0
 8019ea2:	da07      	bge.n	8019eb4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x94>
 8019ea4:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
 8019ea8:	4442      	add	r2, r8
 8019eaa:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8019eae:	2200      	movs	r2, #0
 8019eb0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8019eb4:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8019eb8:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8019ebc:	1a89      	subs	r1, r1, r2
 8019ebe:	4588      	cmp	r8, r1
 8019ec0:	bfc4      	itt	gt
 8019ec2:	ebac 0102 	subgt.w	r1, ip, r2
 8019ec6:	f8ad 102c 	strhgt.w	r1, [sp, #44]	; 0x2c
 8019eca:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8019ece:	2900      	cmp	r1, #0
 8019ed0:	da07      	bge.n	8019ee2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xc2>
 8019ed2:	f8bd 802e 	ldrh.w	r8, [sp, #46]	; 0x2e
 8019ed6:	4441      	add	r1, r8
 8019ed8:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8019edc:	2100      	movs	r1, #0
 8019ede:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 8019ee2:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8019ee6:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
 8019eea:	ebae 0e0a 	sub.w	lr, lr, sl
 8019eee:	4571      	cmp	r1, lr
 8019ef0:	bfc4      	itt	gt
 8019ef2:	eba0 010a 	subgt.w	r1, r0, sl
 8019ef6:	f8ad 102e 	strhgt.w	r1, [sp, #46]	; 0x2e
 8019efa:	495f      	ldr	r1, [pc, #380]	; (801a078 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x258>)
 8019efc:	7809      	ldrb	r1, [r1, #0]
 8019efe:	b9a9      	cbnz	r1, 8019f2c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x10c>
 8019f00:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8019f04:	45e0      	cmp	r8, ip
 8019f06:	bf14      	ite	ne
 8019f08:	2300      	movne	r3, #0
 8019f0a:	2301      	moveq	r3, #1
 8019f0c:	4648      	mov	r0, r9
 8019f0e:	9202      	str	r2, [sp, #8]
 8019f10:	9305      	str	r3, [sp, #20]
 8019f12:	f7f3 fd42 	bl	800d99a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019f16:	9a02      	ldr	r2, [sp, #8]
 8019f18:	b160      	cbz	r0, 8019f34 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x114>
 8019f1a:	2300      	movs	r3, #0
 8019f1c:	8033      	strh	r3, [r6, #0]
 8019f1e:	8073      	strh	r3, [r6, #2]
 8019f20:	80b3      	strh	r3, [r6, #4]
 8019f22:	4630      	mov	r0, r6
 8019f24:	80f3      	strh	r3, [r6, #6]
 8019f26:	b011      	add	sp, #68	; 0x44
 8019f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f2c:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 8019f30:	4580      	cmp	r8, r0
 8019f32:	e7e8      	b.n	8019f06 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe6>
 8019f34:	8821      	ldrh	r1, [r4, #0]
 8019f36:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8019f3a:	1a52      	subs	r2, r2, r1
 8019f3c:	900e      	str	r0, [sp, #56]	; 0x38
 8019f3e:	9304      	str	r3, [sp, #16]
 8019f40:	a90e      	add	r1, sp, #56	; 0x38
 8019f42:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8019f46:	a80c      	add	r0, sp, #48	; 0x30
 8019f48:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 8019f4c:	9306      	str	r3, [sp, #24]
 8019f4e:	b213      	sxth	r3, r2
 8019f50:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
 8019f54:	9302      	str	r3, [sp, #8]
 8019f56:	8863      	ldrh	r3, [r4, #2]
 8019f58:	f8df 8100 	ldr.w	r8, [pc, #256]	; 801a05c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x23c>
 8019f5c:	ebaa 0a03 	sub.w	sl, sl, r3
 8019f60:	fa0f f38a 	sxth.w	r3, sl
 8019f64:	9303      	str	r3, [sp, #12]
 8019f66:	9b02      	ldr	r3, [sp, #8]
 8019f68:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8019f6c:	9b03      	ldr	r3, [sp, #12]
 8019f6e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8019f72:	9b04      	ldr	r3, [sp, #16]
 8019f74:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8019f78:	9b06      	ldr	r3, [sp, #24]
 8019f7a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8019f7e:	f7f9 fce3 	bl	8013948 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019f82:	4648      	mov	r0, r9
 8019f84:	f7f9 fc9c 	bl	80138c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019f88:	a80e      	add	r0, sp, #56	; 0x38
 8019f8a:	f7f9 fc99 	bl	80138c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019f8e:	4b3b      	ldr	r3, [pc, #236]	; (801a07c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x25c>)
 8019f90:	4628      	mov	r0, r5
 8019f92:	f9bd 703c 	ldrsh.w	r7, [sp, #60]	; 0x3c
 8019f96:	881b      	ldrh	r3, [r3, #0]
 8019f98:	9307      	str	r3, [sp, #28]
 8019f9a:	682b      	ldr	r3, [r5, #0]
 8019f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019f9e:	4798      	blx	r3
 8019fa0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8019fa4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8019fa8:	4682      	mov	sl, r0
 8019faa:	f8d8 0000 	ldr.w	r0, [r8]
 8019fae:	fb17 2303 	smlabb	r3, r7, r3, r2
 8019fb2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8019fb4:	eb02 0443 	add.w	r4, r2, r3, lsl #1
 8019fb8:	6803      	ldr	r3, [r0, #0]
 8019fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019fbc:	4798      	blx	r3
 8019fbe:	9009      	str	r0, [sp, #36]	; 0x24
 8019fc0:	f8d8 0000 	ldr.w	r0, [r8]
 8019fc4:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8019fc8:	6802      	ldr	r2, [r0, #0]
 8019fca:	9308      	str	r3, [sp, #32]
 8019fcc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8019fce:	f9bd 502a 	ldrsh.w	r5, [sp, #42]	; 0x2a
 8019fd2:	4790      	blx	r2
 8019fd4:	f010 0f01 	tst.w	r0, #1
 8019fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019fda:	d011      	beq.n	801a000 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e0>
 8019fdc:	f8d8 0000 	ldr.w	r0, [r8]
 8019fe0:	6803      	ldr	r3, [r0, #0]
 8019fe2:	f8cd b000 	str.w	fp, [sp]
 8019fe6:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8019fe8:	4623      	mov	r3, r4
 8019fea:	e899 0006 	ldmia.w	r9, {r1, r2}
 8019fee:	47a8      	blx	r5
 8019ff0:	9b02      	ldr	r3, [sp, #8]
 8019ff2:	8033      	strh	r3, [r6, #0]
 8019ff4:	9b03      	ldr	r3, [sp, #12]
 8019ff6:	8073      	strh	r3, [r6, #2]
 8019ff8:	9b04      	ldr	r3, [sp, #16]
 8019ffa:	80b3      	strh	r3, [r6, #4]
 8019ffc:	9b06      	ldr	r3, [sp, #24]
 8019ffe:	e790      	b.n	8019f22 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x102>
 801a000:	9a08      	ldr	r2, [sp, #32]
 801a002:	fb0a f505 	mul.w	r5, sl, r5
 801a006:	eb05 0542 	add.w	r5, r5, r2, lsl #1
 801a00a:	9a05      	ldr	r2, [sp, #20]
 801a00c:	441d      	add	r5, r3
 801a00e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801a012:	b162      	cbz	r2, 801a02e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x20e>
 801a014:	9a07      	ldr	r2, [sp, #28]
 801a016:	4297      	cmp	r7, r2
 801a018:	d109      	bne.n	801a02e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x20e>
 801a01a:	f8d8 0000 	ldr.w	r0, [r8]
 801a01e:	fb03 f30a 	mul.w	r3, r3, sl
 801a022:	4621      	mov	r1, r4
 801a024:	6802      	ldr	r2, [r0, #0]
 801a026:	6b57      	ldr	r7, [r2, #52]	; 0x34
 801a028:	462a      	mov	r2, r5
 801a02a:	47b8      	blx	r7
 801a02c:	e7e0      	b.n	8019ff0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d0>
 801a02e:	437b      	muls	r3, r7
 801a030:	f8df b028 	ldr.w	fp, [pc, #40]	; 801a05c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x23c>
 801a034:	007f      	lsls	r7, r7, #1
 801a036:	eb04 0843 	add.w	r8, r4, r3, lsl #1
 801a03a:	4544      	cmp	r4, r8
 801a03c:	d2d8      	bcs.n	8019ff0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d0>
 801a03e:	f8db 0000 	ldr.w	r0, [fp]
 801a042:	4621      	mov	r1, r4
 801a044:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801a048:	443c      	add	r4, r7
 801a04a:	6802      	ldr	r2, [r0, #0]
 801a04c:	005b      	lsls	r3, r3, #1
 801a04e:	f8d2 9034 	ldr.w	r9, [r2, #52]	; 0x34
 801a052:	462a      	mov	r2, r5
 801a054:	47c8      	blx	r9
 801a056:	4455      	add	r5, sl
 801a058:	e7ef      	b.n	801a03a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21a>
 801a05a:	bf00      	nop
 801a05c:	20020fd8 	.word	0x20020fd8
 801a060:	08029e9e 	.word	0x08029e9e
 801a064:	0802a708 	.word	0x0802a708
 801a068:	08029f50 	.word	0x08029f50
 801a06c:	08029e50 	.word	0x08029e50
 801a070:	20020fcc 	.word	0x20020fcc
 801a074:	20020fce 	.word	0x20020fce
 801a078:	20020fd0 	.word	0x20020fd0
 801a07c:	20020fd2 	.word	0x20020fd2

0801a080 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801a080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a084:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801a088:	4688      	mov	r8, r1
 801a08a:	4614      	mov	r4, r2
 801a08c:	461d      	mov	r5, r3
 801a08e:	9e08      	ldr	r6, [sp, #32]
 801a090:	2f00      	cmp	r7, #0
 801a092:	f000 80b4 	beq.w	801a1fe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801a096:	4618      	mov	r0, r3
 801a098:	f7f3 fc7f 	bl	800d99a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a09c:	2800      	cmp	r0, #0
 801a09e:	f040 80ae 	bne.w	801a1fe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801a0a2:	f9b5 1000 	ldrsh.w	r1, [r5]
 801a0a6:	2fff      	cmp	r7, #255	; 0xff
 801a0a8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801a0ac:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801a0b0:	fb04 1303 	mla	r3, r4, r3, r1
 801a0b4:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801a0b8:	eba4 0200 	sub.w	r2, r4, r0
 801a0bc:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801a0c0:	fb04 f505 	mul.w	r5, r4, r5
 801a0c4:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801a0c8:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801a0cc:	d04b      	beq.n	801a166 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe6>
 801a0ce:	b2bc      	uxth	r4, r7
 801a0d0:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801a0d4:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801a0d8:	fa5f f788 	uxtb.w	r7, r8
 801a0dc:	b2f3      	uxtb	r3, r6
 801a0de:	0040      	lsls	r0, r0, #1
 801a0e0:	fb0e fe04 	mul.w	lr, lr, r4
 801a0e4:	4367      	muls	r7, r4
 801a0e6:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801a0ea:	4363      	muls	r3, r4
 801a0ec:	fa1f fc8c 	uxth.w	ip, ip
 801a0f0:	42a9      	cmp	r1, r5
 801a0f2:	f080 8084 	bcs.w	801a1fe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801a0f6:	eb01 0900 	add.w	r9, r1, r0
 801a0fa:	4549      	cmp	r1, r9
 801a0fc:	d231      	bcs.n	801a162 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 801a0fe:	880a      	ldrh	r2, [r1, #0]
 801a100:	1214      	asrs	r4, r2, #8
 801a102:	10d6      	asrs	r6, r2, #3
 801a104:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801a108:	00d2      	lsls	r2, r2, #3
 801a10a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a10e:	b2d2      	uxtb	r2, r2
 801a110:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801a114:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801a118:	fb14 f40c 	smulbb	r4, r4, ip
 801a11c:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801a120:	fb12 f20c 	smulbb	r2, r2, ip
 801a124:	fb16 f60c 	smulbb	r6, r6, ip
 801a128:	4474      	add	r4, lr
 801a12a:	441a      	add	r2, r3
 801a12c:	b2a4      	uxth	r4, r4
 801a12e:	443e      	add	r6, r7
 801a130:	b292      	uxth	r2, r2
 801a132:	f104 0a01 	add.w	sl, r4, #1
 801a136:	b2b6      	uxth	r6, r6
 801a138:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801a13c:	f102 0a01 	add.w	sl, r2, #1
 801a140:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801a144:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801a148:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801a14c:	4322      	orrs	r2, r4
 801a14e:	1c74      	adds	r4, r6, #1
 801a150:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801a154:	0976      	lsrs	r6, r6, #5
 801a156:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a15a:	4332      	orrs	r2, r6
 801a15c:	f821 2b02 	strh.w	r2, [r1], #2
 801a160:	e7cb      	b.n	801a0fa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x7a>
 801a162:	4441      	add	r1, r8
 801a164:	e7c4      	b.n	801a0f0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801a166:	0973      	lsrs	r3, r6, #5
 801a168:	4f26      	ldr	r7, [pc, #152]	; (801a204 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>)
 801a16a:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801a16e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a172:	ea08 0707 	and.w	r7, r8, r7
 801a176:	433b      	orrs	r3, r7
 801a178:	4333      	orrs	r3, r6
 801a17a:	07e6      	lsls	r6, r4, #31
 801a17c:	b29b      	uxth	r3, r3
 801a17e:	d50b      	bpl.n	801a198 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801a180:	0040      	lsls	r0, r0, #1
 801a182:	0052      	lsls	r2, r2, #1
 801a184:	42a9      	cmp	r1, r5
 801a186:	d23a      	bcs.n	801a1fe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801a188:	180c      	adds	r4, r1, r0
 801a18a:	42a1      	cmp	r1, r4
 801a18c:	d202      	bcs.n	801a194 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801a18e:	f821 3b02 	strh.w	r3, [r1], #2
 801a192:	e7fa      	b.n	801a18a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 801a194:	4411      	add	r1, r2
 801a196:	e7f5      	b.n	801a184 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 801a198:	078f      	lsls	r7, r1, #30
 801a19a:	d008      	beq.n	801a1ae <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 801a19c:	0066      	lsls	r6, r4, #1
 801a19e:	460a      	mov	r2, r1
 801a1a0:	42aa      	cmp	r2, r5
 801a1a2:	d202      	bcs.n	801a1aa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801a1a4:	8013      	strh	r3, [r2, #0]
 801a1a6:	4432      	add	r2, r6
 801a1a8:	e7fa      	b.n	801a1a0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 801a1aa:	3102      	adds	r1, #2
 801a1ac:	3801      	subs	r0, #1
 801a1ae:	07c6      	lsls	r6, r0, #31
 801a1b0:	d50b      	bpl.n	801a1ca <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801a1b2:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801a1b6:	0066      	lsls	r6, r4, #1
 801a1b8:	3a01      	subs	r2, #1
 801a1ba:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801a1be:	42aa      	cmp	r2, r5
 801a1c0:	d202      	bcs.n	801a1c8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 801a1c2:	8013      	strh	r3, [r2, #0]
 801a1c4:	4432      	add	r2, r6
 801a1c6:	e7fa      	b.n	801a1be <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 801a1c8:	3801      	subs	r0, #1
 801a1ca:	b1c0      	cbz	r0, 801a1fe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801a1cc:	1040      	asrs	r0, r0, #1
 801a1ce:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801a1d2:	0080      	lsls	r0, r0, #2
 801a1d4:	0064      	lsls	r4, r4, #1
 801a1d6:	42a9      	cmp	r1, r5
 801a1d8:	d211      	bcs.n	801a1fe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 801a1da:	078a      	lsls	r2, r1, #30
 801a1dc:	d006      	beq.n	801a1ec <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801a1de:	4b0a      	ldr	r3, [pc, #40]	; (801a208 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x188>)
 801a1e0:	f240 4137 	movw	r1, #1079	; 0x437
 801a1e4:	4a09      	ldr	r2, [pc, #36]	; (801a20c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>)
 801a1e6:	480a      	ldr	r0, [pc, #40]	; (801a210 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x190>)
 801a1e8:	f00a fc06 	bl	80249f8 <__assert_func>
 801a1ec:	180e      	adds	r6, r1, r0
 801a1ee:	460a      	mov	r2, r1
 801a1f0:	42b2      	cmp	r2, r6
 801a1f2:	d202      	bcs.n	801a1fa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17a>
 801a1f4:	f842 3b04 	str.w	r3, [r2], #4
 801a1f8:	e7fa      	b.n	801a1f0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>
 801a1fa:	4421      	add	r1, r4
 801a1fc:	e7eb      	b.n	801a1d6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801a1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a202:	bf00      	nop
 801a204:	00fff800 	.word	0x00fff800
 801a208:	08029d01 	.word	0x08029d01
 801a20c:	0802a354 	.word	0x0802a354
 801a210:	08029f50 	.word	0x08029f50

0801a214 <_ZN8touchgfx8LCD16bppC1Ev>:
 801a214:	2200      	movs	r2, #0
 801a216:	4910      	ldr	r1, [pc, #64]	; (801a258 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801a218:	6042      	str	r2, [r0, #4]
 801a21a:	6001      	str	r1, [r0, #0]
 801a21c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801a220:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801a224:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801a228:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801a22c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801a230:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801a234:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801a238:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801a23c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801a240:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801a244:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801a248:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801a24c:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801a250:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801a254:	4770      	bx	lr
 801a256:	bf00      	nop
 801a258:	0802a304 	.word	0x0802a304

0801a25c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801a25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a260:	b08d      	sub	sp, #52	; 0x34
 801a262:	460d      	mov	r5, r1
 801a264:	4604      	mov	r4, r0
 801a266:	4699      	mov	r9, r3
 801a268:	6808      	ldr	r0, [r1, #0]
 801a26a:	ab08      	add	r3, sp, #32
 801a26c:	6849      	ldr	r1, [r1, #4]
 801a26e:	c303      	stmia	r3!, {r0, r1}
 801a270:	6810      	ldr	r0, [r2, #0]
 801a272:	ab0a      	add	r3, sp, #40	; 0x28
 801a274:	6851      	ldr	r1, [r2, #4]
 801a276:	c303      	stmia	r3!, {r0, r1}
 801a278:	a808      	add	r0, sp, #32
 801a27a:	f7f9 fb21 	bl	80138c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a27e:	4629      	mov	r1, r5
 801a280:	a80a      	add	r0, sp, #40	; 0x28
 801a282:	4d67      	ldr	r5, [pc, #412]	; (801a420 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801a284:	f7f9 fb60 	bl	8013948 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a288:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801a28c:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801a290:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801a294:	6828      	ldr	r0, [r5, #0]
 801a296:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a29a:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801a29e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801a2a2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801a2a6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801a2aa:	440a      	add	r2, r1
 801a2ac:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801a2b0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801a2b4:	4413      	add	r3, r2
 801a2b6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801a2ba:	6803      	ldr	r3, [r0, #0]
 801a2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a2be:	4798      	blx	r3
 801a2c0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a2c4:	d119      	bne.n	801a2fa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801a2c6:	f010 0f20 	tst.w	r0, #32
 801a2ca:	6828      	ldr	r0, [r5, #0]
 801a2cc:	d018      	beq.n	801a300 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801a2ce:	2500      	movs	r5, #0
 801a2d0:	6801      	ldr	r1, [r0, #0]
 801a2d2:	b2b6      	uxth	r6, r6
 801a2d4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801a2d8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801a2dc:	9601      	str	r6, [sp, #4]
 801a2de:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801a2e2:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801a2e6:	9502      	str	r5, [sp, #8]
 801a2e8:	fa1f f588 	uxth.w	r5, r8
 801a2ec:	9500      	str	r5, [sp, #0]
 801a2ee:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801a2f0:	4621      	mov	r1, r4
 801a2f2:	47a8      	blx	r5
 801a2f4:	b00d      	add	sp, #52	; 0x34
 801a2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a2fe:	e7e4      	b.n	801a2ca <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801a300:	6803      	ldr	r3, [r0, #0]
 801a302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a304:	4798      	blx	r3
 801a306:	4947      	ldr	r1, [pc, #284]	; (801a424 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801a308:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801a30c:	880b      	ldrh	r3, [r1, #0]
 801a30e:	468a      	mov	sl, r1
 801a310:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801a314:	fb03 5202 	mla	r2, r3, r2, r5
 801a318:	4373      	muls	r3, r6
 801a31a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801a31e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a322:	9307      	str	r3, [sp, #28]
 801a324:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801a328:	9306      	str	r3, [sp, #24]
 801a32a:	9b07      	ldr	r3, [sp, #28]
 801a32c:	4298      	cmp	r0, r3
 801a32e:	d270      	bcs.n	801a412 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801a330:	9b06      	ldr	r3, [sp, #24]
 801a332:	4621      	mov	r1, r4
 801a334:	eb00 0b03 	add.w	fp, r0, r3
 801a338:	4558      	cmp	r0, fp
 801a33a:	d25d      	bcs.n	801a3f8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801a33c:	f851 4b04 	ldr.w	r4, [r1], #4
 801a340:	0e23      	lsrs	r3, r4, #24
 801a342:	d014      	beq.n	801a36e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801a344:	2bff      	cmp	r3, #255	; 0xff
 801a346:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801a34a:	d112      	bne.n	801a372 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801a34c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a350:	d10f      	bne.n	801a372 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801a352:	0963      	lsrs	r3, r4, #5
 801a354:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801a358:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801a35c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a360:	f02c 0c07 	bic.w	ip, ip, #7
 801a364:	ea43 0c0c 	orr.w	ip, r3, ip
 801a368:	ea4c 0404 	orr.w	r4, ip, r4
 801a36c:	8004      	strh	r4, [r0, #0]
 801a36e:	3002      	adds	r0, #2
 801a370:	e7e2      	b.n	801a338 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801a372:	fb09 f303 	mul.w	r3, r9, r3
 801a376:	8807      	ldrh	r7, [r0, #0]
 801a378:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801a37c:	fa5f fc8c 	uxtb.w	ip, ip
 801a380:	1c5a      	adds	r2, r3, #1
 801a382:	123e      	asrs	r6, r7, #8
 801a384:	10fd      	asrs	r5, r7, #3
 801a386:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801a38a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801a38e:	00ff      	lsls	r7, r7, #3
 801a390:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801a394:	1212      	asrs	r2, r2, #8
 801a396:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801a39a:	b293      	uxth	r3, r2
 801a39c:	43d2      	mvns	r2, r2
 801a39e:	b2ff      	uxtb	r7, r7
 801a3a0:	fb1e fe03 	smulbb	lr, lr, r3
 801a3a4:	b2d2      	uxtb	r2, r2
 801a3a6:	fb1c fc03 	smulbb	ip, ip, r3
 801a3aa:	b2e4      	uxtb	r4, r4
 801a3ac:	fb06 e602 	mla	r6, r6, r2, lr
 801a3b0:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801a3b4:	fb14 f403 	smulbb	r4, r4, r3
 801a3b8:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801a3bc:	b2b6      	uxth	r6, r6
 801a3be:	fb05 c502 	mla	r5, r5, r2, ip
 801a3c2:	fb07 4702 	mla	r7, r7, r2, r4
 801a3c6:	f106 0e01 	add.w	lr, r6, #1
 801a3ca:	b2ad      	uxth	r5, r5
 801a3cc:	b2bf      	uxth	r7, r7
 801a3ce:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801a3d2:	f105 0c01 	add.w	ip, r5, #1
 801a3d6:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801a3da:	1c7e      	adds	r6, r7, #1
 801a3dc:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801a3e0:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801a3e4:	096d      	lsrs	r5, r5, #5
 801a3e6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801a3ea:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a3ee:	ea46 060e 	orr.w	r6, r6, lr
 801a3f2:	432e      	orrs	r6, r5
 801a3f4:	8006      	strh	r6, [r0, #0]
 801a3f6:	e7ba      	b.n	801a36e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801a3f8:	f8ba 3000 	ldrh.w	r3, [sl]
 801a3fc:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801a400:	eba3 0308 	sub.w	r3, r3, r8
 801a404:	eba4 0408 	sub.w	r4, r4, r8
 801a408:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a40c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801a410:	e78b      	b.n	801a32a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801a412:	4b03      	ldr	r3, [pc, #12]	; (801a420 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801a414:	6818      	ldr	r0, [r3, #0]
 801a416:	6803      	ldr	r3, [r0, #0]
 801a418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a41a:	4798      	blx	r3
 801a41c:	e76a      	b.n	801a2f4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801a41e:	bf00      	nop
 801a420:	20020fd8 	.word	0x20020fd8
 801a424:	20020fd2 	.word	0x20020fd2

0801a428 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801a428:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a42c:	b085      	sub	sp, #20
 801a42e:	6810      	ldr	r0, [r2, #0]
 801a430:	460c      	mov	r4, r1
 801a432:	6851      	ldr	r1, [r2, #4]
 801a434:	466d      	mov	r5, sp
 801a436:	4616      	mov	r6, r2
 801a438:	c503      	stmia	r5!, {r0, r1}
 801a43a:	6818      	ldr	r0, [r3, #0]
 801a43c:	6859      	ldr	r1, [r3, #4]
 801a43e:	c503      	stmia	r5!, {r0, r1}
 801a440:	4668      	mov	r0, sp
 801a442:	4d2e      	ldr	r5, [pc, #184]	; (801a4fc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801a444:	f7f9 fa3c 	bl	80138c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a448:	4631      	mov	r1, r6
 801a44a:	a802      	add	r0, sp, #8
 801a44c:	4e2c      	ldr	r6, [pc, #176]	; (801a500 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801a44e:	f7f9 fa7b 	bl	8013948 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a452:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801a456:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801a45a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801a45e:	6828      	ldr	r0, [r5, #0]
 801a460:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a464:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801a468:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801a46c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801a470:	f8bd 1000 	ldrh.w	r1, [sp]
 801a474:	440a      	add	r2, r1
 801a476:	f8ad 2008 	strh.w	r2, [sp, #8]
 801a47a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801a47e:	4413      	add	r3, r2
 801a480:	f8ad 300a 	strh.w	r3, [sp, #10]
 801a484:	6803      	ldr	r3, [r0, #0]
 801a486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a488:	4798      	blx	r3
 801a48a:	8833      	ldrh	r3, [r6, #0]
 801a48c:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801a490:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801a494:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801a498:	f8df e068 	ldr.w	lr, [pc, #104]	; 801a504 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801a49c:	fb03 1202 	mla	r2, r3, r2, r1
 801a4a0:	fb08 f303 	mul.w	r3, r8, r3
 801a4a4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801a4a8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a4ac:	4298      	cmp	r0, r3
 801a4ae:	d21d      	bcs.n	801a4ec <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801a4b0:	eb00 080c 	add.w	r8, r0, ip
 801a4b4:	4540      	cmp	r0, r8
 801a4b6:	d20f      	bcs.n	801a4d8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801a4b8:	f854 1b04 	ldr.w	r1, [r4], #4
 801a4bc:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801a4c0:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801a4c4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801a4c8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801a4cc:	ea42 0209 	orr.w	r2, r2, r9
 801a4d0:	430a      	orrs	r2, r1
 801a4d2:	f820 2b02 	strh.w	r2, [r0], #2
 801a4d6:	e7ed      	b.n	801a4b4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801a4d8:	8832      	ldrh	r2, [r6, #0]
 801a4da:	1bd2      	subs	r2, r2, r7
 801a4dc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801a4e0:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801a4e4:	1bd2      	subs	r2, r2, r7
 801a4e6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801a4ea:	e7df      	b.n	801a4ac <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801a4ec:	6828      	ldr	r0, [r5, #0]
 801a4ee:	6803      	ldr	r3, [r0, #0]
 801a4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a4f2:	4798      	blx	r3
 801a4f4:	b005      	add	sp, #20
 801a4f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a4fa:	bf00      	nop
 801a4fc:	20020fd8 	.word	0x20020fd8
 801a500:	20020fd2 	.word	0x20020fd2
 801a504:	fffff800 	.word	0xfffff800

0801a508 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801a508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a50c:	b08e      	sub	sp, #56	; 0x38
 801a50e:	460e      	mov	r6, r1
 801a510:	4604      	mov	r4, r0
 801a512:	461d      	mov	r5, r3
 801a514:	6808      	ldr	r0, [r1, #0]
 801a516:	ab0a      	add	r3, sp, #40	; 0x28
 801a518:	6849      	ldr	r1, [r1, #4]
 801a51a:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 801a6f0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801a51e:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801a6f4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801a522:	c303      	stmia	r3!, {r0, r1}
 801a524:	6810      	ldr	r0, [r2, #0]
 801a526:	ab0c      	add	r3, sp, #48	; 0x30
 801a528:	6851      	ldr	r1, [r2, #4]
 801a52a:	c303      	stmia	r3!, {r0, r1}
 801a52c:	a80a      	add	r0, sp, #40	; 0x28
 801a52e:	f7f9 f9c7 	bl	80138c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a532:	4631      	mov	r1, r6
 801a534:	a80c      	add	r0, sp, #48	; 0x30
 801a536:	f7f9 fa07 	bl	8013948 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a53a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801a53e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801a542:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801a546:	f8d8 0000 	ldr.w	r0, [r8]
 801a54a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a54e:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801a552:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801a556:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a55a:	440c      	add	r4, r1
 801a55c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801a560:	440a      	add	r2, r1
 801a562:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801a566:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801a56a:	4413      	add	r3, r2
 801a56c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801a570:	6803      	ldr	r3, [r0, #0]
 801a572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a574:	4798      	blx	r3
 801a576:	2dff      	cmp	r5, #255	; 0xff
 801a578:	d124      	bne.n	801a5c4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801a57a:	f010 0f01 	tst.w	r0, #1
 801a57e:	f8d8 0000 	ldr.w	r0, [r8]
 801a582:	d022      	beq.n	801a5ca <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801a584:	2100      	movs	r1, #0
 801a586:	f04f 0e01 	mov.w	lr, #1
 801a58a:	f8d0 c000 	ldr.w	ip, [r0]
 801a58e:	b2b6      	uxth	r6, r6
 801a590:	f8cd e018 	str.w	lr, [sp, #24]
 801a594:	b2bf      	uxth	r7, r7
 801a596:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801a59a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801a59e:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801a5a2:	f8b9 e000 	ldrh.w	lr, [r9]
 801a5a6:	9503      	str	r5, [sp, #12]
 801a5a8:	9601      	str	r6, [sp, #4]
 801a5aa:	9700      	str	r7, [sp, #0]
 801a5ac:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801a5b0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801a5b4:	9102      	str	r1, [sp, #8]
 801a5b6:	4621      	mov	r1, r4
 801a5b8:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801a5bc:	47a8      	blx	r5
 801a5be:	b00e      	add	sp, #56	; 0x38
 801a5c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5c4:	f010 0f04 	tst.w	r0, #4
 801a5c8:	e7d9      	b.n	801a57e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801a5ca:	6803      	ldr	r3, [r0, #0]
 801a5cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a5ce:	4798      	blx	r3
 801a5d0:	f8b9 3000 	ldrh.w	r3, [r9]
 801a5d4:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801a5d8:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801a5dc:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801a5e0:	435e      	muls	r6, r3
 801a5e2:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801a5e6:	2dff      	cmp	r5, #255	; 0xff
 801a5e8:	fb03 1202 	mla	r2, r3, r2, r1
 801a5ec:	ebac 0c07 	sub.w	ip, ip, r7
 801a5f0:	eba3 0707 	sub.w	r7, r3, r7
 801a5f4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801a5f8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801a5fc:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801a600:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801a604:	d049      	beq.n	801a69a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801a606:	43eb      	mvns	r3, r5
 801a608:	fa1f f985 	uxth.w	r9, r5
 801a60c:	b2db      	uxtb	r3, r3
 801a60e:	42b0      	cmp	r0, r6
 801a610:	d266      	bcs.n	801a6e0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801a612:	eb00 0a0e 	add.w	sl, r0, lr
 801a616:	4550      	cmp	r0, sl
 801a618:	4621      	mov	r1, r4
 801a61a:	f104 0403 	add.w	r4, r4, #3
 801a61e:	d25b      	bcs.n	801a6d8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801a620:	8802      	ldrh	r2, [r0, #0]
 801a622:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801a626:	ea4f 2822 	mov.w	r8, r2, asr #8
 801a62a:	fb11 f109 	smulbb	r1, r1, r9
 801a62e:	10d5      	asrs	r5, r2, #3
 801a630:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801a634:	00d2      	lsls	r2, r2, #3
 801a636:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801a63a:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801a63e:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801a642:	fb08 1803 	mla	r8, r8, r3, r1
 801a646:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801a64a:	b2d2      	uxtb	r2, r2
 801a64c:	fb11 f109 	smulbb	r1, r1, r9
 801a650:	fa1f f888 	uxth.w	r8, r8
 801a654:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801a658:	fb05 1503 	mla	r5, r5, r3, r1
 801a65c:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801a660:	fb11 f109 	smulbb	r1, r1, r9
 801a664:	b2ad      	uxth	r5, r5
 801a666:	fb02 1203 	mla	r2, r2, r3, r1
 801a66a:	f108 0101 	add.w	r1, r8, #1
 801a66e:	b292      	uxth	r2, r2
 801a670:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801a674:	1c51      	adds	r1, r2, #1
 801a676:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801a67a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801a67e:	1c69      	adds	r1, r5, #1
 801a680:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801a684:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801a688:	096d      	lsrs	r5, r5, #5
 801a68a:	ea42 0208 	orr.w	r2, r2, r8
 801a68e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a692:	432a      	orrs	r2, r5
 801a694:	f820 2b02 	strh.w	r2, [r0], #2
 801a698:	e7bd      	b.n	801a616 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801a69a:	4a14      	ldr	r2, [pc, #80]	; (801a6ec <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801a69c:	42b0      	cmp	r0, r6
 801a69e:	d21f      	bcs.n	801a6e0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801a6a0:	eb00 050e 	add.w	r5, r0, lr
 801a6a4:	42a8      	cmp	r0, r5
 801a6a6:	4621      	mov	r1, r4
 801a6a8:	f104 0403 	add.w	r4, r4, #3
 801a6ac:	d210      	bcs.n	801a6d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801a6ae:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801a6b2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801a6b6:	00db      	lsls	r3, r3, #3
 801a6b8:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801a6bc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a6c0:	430b      	orrs	r3, r1
 801a6c2:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801a6c6:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801a6ca:	f820 3b02 	strh.w	r3, [r0], #2
 801a6ce:	e7e9      	b.n	801a6a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801a6d0:	4438      	add	r0, r7
 801a6d2:	eb01 040c 	add.w	r4, r1, ip
 801a6d6:	e7e1      	b.n	801a69c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801a6d8:	4438      	add	r0, r7
 801a6da:	eb01 040c 	add.w	r4, r1, ip
 801a6de:	e796      	b.n	801a60e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801a6e0:	4b03      	ldr	r3, [pc, #12]	; (801a6f0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801a6e2:	6818      	ldr	r0, [r3, #0]
 801a6e4:	6803      	ldr	r3, [r0, #0]
 801a6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a6e8:	4798      	blx	r3
 801a6ea:	e768      	b.n	801a5be <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801a6ec:	fffff800 	.word	0xfffff800
 801a6f0:	20020fd8 	.word	0x20020fd8
 801a6f4:	20020fd2 	.word	0x20020fd2

0801a6f8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801a6f8:	b570      	push	{r4, r5, r6, lr}
 801a6fa:	9c04      	ldr	r4, [sp, #16]
 801a6fc:	4605      	mov	r5, r0
 801a6fe:	f89d 6018 	ldrb.w	r6, [sp, #24]
 801a702:	4608      	mov	r0, r1
 801a704:	4619      	mov	r1, r3
 801a706:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801a70a:	2a0d      	cmp	r2, #13
 801a70c:	d825      	bhi.n	801a75a <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x62>
 801a70e:	e8df f002 	tbb	[pc, r2]
 801a712:	1807      	.short	0x1807
 801a714:	1d1d1d13 	.word	0x1d1d1d13
 801a718:	1d1d1d1d 	.word	0x1d1d1d1d
 801a71c:	1d1d1d1d 	.word	0x1d1d1d1d
 801a720:	682a      	ldr	r2, [r5, #0]
 801a722:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801a726:	68d6      	ldr	r6, [r2, #12]
 801a728:	4623      	mov	r3, r4
 801a72a:	460a      	mov	r2, r1
 801a72c:	4601      	mov	r1, r0
 801a72e:	46b4      	mov	ip, r6
 801a730:	4628      	mov	r0, r5
 801a732:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a736:	4760      	bx	ip
 801a738:	4622      	mov	r2, r4
 801a73a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a73e:	f7ff bd8d 	b.w	801a25c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801a742:	4622      	mov	r2, r4
 801a744:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a748:	f7ff bede 	b.w	801a508 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801a74c:	4b03      	ldr	r3, [pc, #12]	; (801a75c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801a74e:	f240 3159 	movw	r1, #857	; 0x359
 801a752:	4a03      	ldr	r2, [pc, #12]	; (801a760 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801a754:	4803      	ldr	r0, [pc, #12]	; (801a764 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801a756:	f00a f94f 	bl	80249f8 <__assert_func>
 801a75a:	bd70      	pop	{r4, r5, r6, pc}
 801a75c:	0802a015 	.word	0x0802a015
 801a760:	0802a821 	.word	0x0802a821
 801a764:	08029f50 	.word	0x08029f50

0801a768 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801a768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a76c:	b093      	sub	sp, #76	; 0x4c
 801a76e:	880e      	ldrh	r6, [r1, #0]
 801a770:	4681      	mov	r9, r0
 801a772:	4688      	mov	r8, r1
 801a774:	4615      	mov	r5, r2
 801a776:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801a77a:	b136      	cbz	r6, 801a78a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 801a77c:	4b70      	ldr	r3, [pc, #448]	; (801a940 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801a77e:	f44f 71c3 	mov.w	r1, #390	; 0x186
 801a782:	4a70      	ldr	r2, [pc, #448]	; (801a944 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801a784:	4870      	ldr	r0, [pc, #448]	; (801a948 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801a786:	f00a f937 	bl	80249f8 <__assert_func>
 801a78a:	6810      	ldr	r0, [r2, #0]
 801a78c:	ac0e      	add	r4, sp, #56	; 0x38
 801a78e:	6851      	ldr	r1, [r2, #4]
 801a790:	4f6e      	ldr	r7, [pc, #440]	; (801a94c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801a792:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 801a950 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801a796:	c403      	stmia	r4!, {r0, r1}
 801a798:	6818      	ldr	r0, [r3, #0]
 801a79a:	ac10      	add	r4, sp, #64	; 0x40
 801a79c:	6859      	ldr	r1, [r3, #4]
 801a79e:	c403      	stmia	r4!, {r0, r1}
 801a7a0:	a80e      	add	r0, sp, #56	; 0x38
 801a7a2:	f7f9 f88d 	bl	80138c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a7a6:	4629      	mov	r1, r5
 801a7a8:	a810      	add	r0, sp, #64	; 0x40
 801a7aa:	f7f9 f8cd 	bl	8013948 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a7ae:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801a7b2:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801a7b6:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801a7ba:	6838      	ldr	r0, [r7, #0]
 801a7bc:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a7c0:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801a7c4:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801a7c8:	4489      	add	r9, r1
 801a7ca:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801a7ce:	440a      	add	r2, r1
 801a7d0:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801a7d4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801a7d8:	4413      	add	r3, r2
 801a7da:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801a7de:	6803      	ldr	r3, [r0, #0]
 801a7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a7e2:	4798      	blx	r3
 801a7e4:	f010 0f80 	tst.w	r0, #128	; 0x80
 801a7e8:	6838      	ldr	r0, [r7, #0]
 801a7ea:	d01d      	beq.n	801a828 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 801a7ec:	210b      	movs	r1, #11
 801a7ee:	6802      	ldr	r2, [r0, #0]
 801a7f0:	b2a4      	uxth	r4, r4
 801a7f2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801a7f6:	9107      	str	r1, [sp, #28]
 801a7f8:	b2ad      	uxth	r5, r5
 801a7fa:	e9cd 6608 	strd	r6, r6, [sp, #32]
 801a7fe:	f8bb 1000 	ldrh.w	r1, [fp]
 801a802:	9502      	str	r5, [sp, #8]
 801a804:	9106      	str	r1, [sp, #24]
 801a806:	2101      	movs	r1, #1
 801a808:	9401      	str	r4, [sp, #4]
 801a80a:	e9cd a104 	strd	sl, r1, [sp, #16]
 801a80e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801a812:	9103      	str	r1, [sp, #12]
 801a814:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 801a818:	9100      	str	r1, [sp, #0]
 801a81a:	4649      	mov	r1, r9
 801a81c:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 801a81e:	4642      	mov	r2, r8
 801a820:	47a0      	blx	r4
 801a822:	b013      	add	sp, #76	; 0x4c
 801a824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a828:	6803      	ldr	r3, [r0, #0]
 801a82a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a82c:	4798      	blx	r3
 801a82e:	f8bb 3000 	ldrh.w	r3, [fp]
 801a832:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801a836:	f04f 0e04 	mov.w	lr, #4
 801a83a:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801a83e:	435d      	muls	r5, r3
 801a840:	fb03 1202 	mla	r2, r3, r2, r1
 801a844:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801a848:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801a84c:	920c      	str	r2, [sp, #48]	; 0x30
 801a84e:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801a852:	1b12      	subs	r2, r2, r4
 801a854:	920d      	str	r2, [sp, #52]	; 0x34
 801a856:	0062      	lsls	r2, r4, #1
 801a858:	1b1c      	subs	r4, r3, r4
 801a85a:	920a      	str	r2, [sp, #40]	; 0x28
 801a85c:	0063      	lsls	r3, r4, #1
 801a85e:	930b      	str	r3, [sp, #44]	; 0x2c
 801a860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a862:	4298      	cmp	r0, r3
 801a864:	d266      	bcs.n	801a934 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 801a866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a868:	eb00 0b03 	add.w	fp, r0, r3
 801a86c:	4558      	cmp	r0, fp
 801a86e:	d25c      	bcs.n	801a92a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c2>
 801a870:	f819 3b01 	ldrb.w	r3, [r9], #1
 801a874:	fb1e e303 	smlabb	r3, lr, r3, lr
 801a878:	f858 2003 	ldr.w	r2, [r8, r3]
 801a87c:	0e11      	lsrs	r1, r2, #24
 801a87e:	d012      	beq.n	801a8a6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 801a880:	29ff      	cmp	r1, #255	; 0xff
 801a882:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801a886:	d110      	bne.n	801a8aa <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 801a888:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801a88c:	d10d      	bne.n	801a8aa <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 801a88e:	0953      	lsrs	r3, r2, #5
 801a890:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801a894:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801a898:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a89c:	f027 0707 	bic.w	r7, r7, #7
 801a8a0:	431f      	orrs	r7, r3
 801a8a2:	433a      	orrs	r2, r7
 801a8a4:	8002      	strh	r2, [r0, #0]
 801a8a6:	3002      	adds	r0, #2
 801a8a8:	e7e0      	b.n	801a86c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x104>
 801a8aa:	fb0a f101 	mul.w	r1, sl, r1
 801a8ae:	8806      	ldrh	r6, [r0, #0]
 801a8b0:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801a8b4:	b2d2      	uxtb	r2, r2
 801a8b6:	1c4b      	adds	r3, r1, #1
 801a8b8:	1235      	asrs	r5, r6, #8
 801a8ba:	10f4      	asrs	r4, r6, #3
 801a8bc:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801a8c0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801a8c4:	00f6      	lsls	r6, r6, #3
 801a8c6:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801a8ca:	121b      	asrs	r3, r3, #8
 801a8cc:	b2f6      	uxtb	r6, r6
 801a8ce:	b299      	uxth	r1, r3
 801a8d0:	43db      	mvns	r3, r3
 801a8d2:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801a8d6:	fb1c fc01 	smulbb	ip, ip, r1
 801a8da:	b2db      	uxtb	r3, r3
 801a8dc:	fb12 f201 	smulbb	r2, r2, r1
 801a8e0:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801a8e4:	fb05 c503 	mla	r5, r5, r3, ip
 801a8e8:	b2ff      	uxtb	r7, r7
 801a8ea:	fb06 2203 	mla	r2, r6, r3, r2
 801a8ee:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801a8f2:	fb17 f701 	smulbb	r7, r7, r1
 801a8f6:	b2ad      	uxth	r5, r5
 801a8f8:	b292      	uxth	r2, r2
 801a8fa:	fb04 7403 	mla	r4, r4, r3, r7
 801a8fe:	f105 0c01 	add.w	ip, r5, #1
 801a902:	1c57      	adds	r7, r2, #1
 801a904:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801a908:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801a90c:	b2a4      	uxth	r4, r4
 801a90e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801a912:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801a916:	433d      	orrs	r5, r7
 801a918:	1c67      	adds	r7, r4, #1
 801a91a:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801a91e:	0964      	lsrs	r4, r4, #5
 801a920:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801a924:	4325      	orrs	r5, r4
 801a926:	8005      	strh	r5, [r0, #0]
 801a928:	e7bd      	b.n	801a8a6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 801a92a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a92c:	4418      	add	r0, r3
 801a92e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a930:	4499      	add	r9, r3
 801a932:	e795      	b.n	801a860 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 801a934:	4b05      	ldr	r3, [pc, #20]	; (801a94c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801a936:	6818      	ldr	r0, [r3, #0]
 801a938:	6803      	ldr	r3, [r0, #0]
 801a93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a93c:	4798      	blx	r3
 801a93e:	e770      	b.n	801a822 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xba>
 801a940:	08029e00 	.word	0x08029e00
 801a944:	0802a55f 	.word	0x0802a55f
 801a948:	08029f50 	.word	0x08029f50
 801a94c:	20020fd8 	.word	0x20020fd8
 801a950:	20020fd2 	.word	0x20020fd2

0801a954 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801a954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a958:	4614      	mov	r4, r2
 801a95a:	880a      	ldrh	r2, [r1, #0]
 801a95c:	b087      	sub	sp, #28
 801a95e:	4680      	mov	r8, r0
 801a960:	2a02      	cmp	r2, #2
 801a962:	460d      	mov	r5, r1
 801a964:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801a968:	d006      	beq.n	801a978 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 801a96a:	4b63      	ldr	r3, [pc, #396]	; (801aaf8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a4>)
 801a96c:	f240 11dd 	movw	r1, #477	; 0x1dd
 801a970:	4a62      	ldr	r2, [pc, #392]	; (801aafc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801a972:	4863      	ldr	r0, [pc, #396]	; (801ab00 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ac>)
 801a974:	f00a f840 	bl	80249f8 <__assert_func>
 801a978:	2e00      	cmp	r6, #0
 801a97a:	f000 80b9 	beq.w	801aaf0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19c>
 801a97e:	6820      	ldr	r0, [r4, #0]
 801a980:	af02      	add	r7, sp, #8
 801a982:	6861      	ldr	r1, [r4, #4]
 801a984:	c703      	stmia	r7!, {r0, r1}
 801a986:	6818      	ldr	r0, [r3, #0]
 801a988:	af04      	add	r7, sp, #16
 801a98a:	6859      	ldr	r1, [r3, #4]
 801a98c:	c703      	stmia	r7!, {r0, r1}
 801a98e:	a802      	add	r0, sp, #8
 801a990:	f7f8 ff96 	bl	80138c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a994:	4621      	mov	r1, r4
 801a996:	a804      	add	r0, sp, #16
 801a998:	f7f8 ffd6 	bl	8013948 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a99c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801a9a0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a9a4:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801a9a8:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801a9ac:	fb14 2103 	smlabb	r1, r4, r3, r2
 801a9b0:	eb08 0401 	add.w	r4, r8, r1
 801a9b4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801a9b8:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801a9bc:	440a      	add	r2, r1
 801a9be:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801a9c2:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a9c6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801a9ca:	4413      	add	r3, r2
 801a9cc:	f8ad 3012 	strh.w	r3, [sp, #18]
 801a9d0:	4b4c      	ldr	r3, [pc, #304]	; (801ab04 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801a9d2:	6818      	ldr	r0, [r3, #0]
 801a9d4:	6803      	ldr	r3, [r0, #0]
 801a9d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a9d8:	4798      	blx	r3
 801a9da:	4b4b      	ldr	r3, [pc, #300]	; (801ab08 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b4>)
 801a9dc:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801a9e0:	2eff      	cmp	r6, #255	; 0xff
 801a9e2:	881a      	ldrh	r2, [r3, #0]
 801a9e4:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801a9e8:	fb02 c101 	mla	r1, r2, r1, ip
 801a9ec:	fb02 f207 	mul.w	r2, r2, r7
 801a9f0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801a9f4:	f105 0104 	add.w	r1, r5, #4
 801a9f8:	461d      	mov	r5, r3
 801a9fa:	d05a      	beq.n	801aab2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x15e>
 801a9fc:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801aa00:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801aa04:	b2b6      	uxth	r6, r6
 801aa06:	9301      	str	r3, [sp, #4]
 801aa08:	fa1f fe8e 	uxth.w	lr, lr
 801aa0c:	4282      	cmp	r2, r0
 801aa0e:	d96a      	bls.n	801aae6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 801aa10:	eb00 0b0a 	add.w	fp, r0, sl
 801aa14:	4583      	cmp	fp, r0
 801aa16:	d940      	bls.n	801aa9a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x146>
 801aa18:	8805      	ldrh	r5, [r0, #0]
 801aa1a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801aa1e:	122f      	asrs	r7, r5, #8
 801aa20:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801aa24:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801aa28:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801aa2c:	00ed      	lsls	r5, r5, #3
 801aa2e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801aa32:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801aa36:	fb17 f70e 	smulbb	r7, r7, lr
 801aa3a:	b2ed      	uxtb	r5, r5
 801aa3c:	fb19 f90e 	smulbb	r9, r9, lr
 801aa40:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801aa44:	fb15 f50e 	smulbb	r5, r5, lr
 801aa48:	fb0c 7c06 	mla	ip, ip, r6, r7
 801aa4c:	10df      	asrs	r7, r3, #3
 801aa4e:	00db      	lsls	r3, r3, #3
 801aa50:	fa1f fc8c 	uxth.w	ip, ip
 801aa54:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801aa58:	b2db      	uxtb	r3, r3
 801aa5a:	fb07 9706 	mla	r7, r7, r6, r9
 801aa5e:	f10c 0901 	add.w	r9, ip, #1
 801aa62:	fb03 5306 	mla	r3, r3, r6, r5
 801aa66:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801aa6a:	b29b      	uxth	r3, r3
 801aa6c:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801aa70:	b2bf      	uxth	r7, r7
 801aa72:	f103 0c01 	add.w	ip, r3, #1
 801aa76:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801aa7a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801aa7e:	ea4c 0c09 	orr.w	ip, ip, r9
 801aa82:	f107 0901 	add.w	r9, r7, #1
 801aa86:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801aa8a:	097f      	lsrs	r7, r7, #5
 801aa8c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801aa90:	ea4c 0c07 	orr.w	ip, ip, r7
 801aa94:	f820 cb02 	strh.w	ip, [r0], #2
 801aa98:	e7bc      	b.n	801aa14 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801aa9a:	9b01      	ldr	r3, [sp, #4]
 801aa9c:	881b      	ldrh	r3, [r3, #0]
 801aa9e:	eba3 0308 	sub.w	r3, r3, r8
 801aaa2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801aaa6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801aaaa:	eba3 0308 	sub.w	r3, r3, r8
 801aaae:	441c      	add	r4, r3
 801aab0:	e7ac      	b.n	801aa0c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb8>
 801aab2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801aab6:	4282      	cmp	r2, r0
 801aab8:	d915      	bls.n	801aae6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 801aaba:	eb00 060a 	add.w	r6, r0, sl
 801aabe:	4286      	cmp	r6, r0
 801aac0:	d906      	bls.n	801aad0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17c>
 801aac2:	f814 3b01 	ldrb.w	r3, [r4], #1
 801aac6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801aaca:	f820 3b02 	strh.w	r3, [r0], #2
 801aace:	e7f6      	b.n	801aabe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x16a>
 801aad0:	882b      	ldrh	r3, [r5, #0]
 801aad2:	eba3 0308 	sub.w	r3, r3, r8
 801aad6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801aada:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801aade:	eba3 0308 	sub.w	r3, r3, r8
 801aae2:	441c      	add	r4, r3
 801aae4:	e7e7      	b.n	801aab6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x162>
 801aae6:	4b07      	ldr	r3, [pc, #28]	; (801ab04 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801aae8:	6818      	ldr	r0, [r3, #0]
 801aaea:	6803      	ldr	r3, [r0, #0]
 801aaec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aaee:	4798      	blx	r3
 801aaf0:	b007      	add	sp, #28
 801aaf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aaf6:	bf00      	nop
 801aaf8:	08029d30 	.word	0x08029d30
 801aafc:	0802a3c9 	.word	0x0802a3c9
 801ab00:	08029f50 	.word	0x08029f50
 801ab04:	20020fd8 	.word	0x20020fd8
 801ab08:	20020fd2 	.word	0x20020fd2

0801ab0c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801ab0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab10:	f8b1 9000 	ldrh.w	r9, [r1]
 801ab14:	b091      	sub	sp, #68	; 0x44
 801ab16:	4604      	mov	r4, r0
 801ab18:	460f      	mov	r7, r1
 801ab1a:	f1b9 0f01 	cmp.w	r9, #1
 801ab1e:	4690      	mov	r8, r2
 801ab20:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801ab24:	d006      	beq.n	801ab34 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x28>
 801ab26:	4b84      	ldr	r3, [pc, #528]	; (801ad38 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22c>)
 801ab28:	f240 212b 	movw	r1, #555	; 0x22b
 801ab2c:	4a83      	ldr	r2, [pc, #524]	; (801ad3c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x230>)
 801ab2e:	4884      	ldr	r0, [pc, #528]	; (801ad40 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x234>)
 801ab30:	f009 ff62 	bl	80249f8 <__assert_func>
 801ab34:	2d00      	cmp	r5, #0
 801ab36:	d04f      	beq.n	801abd8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 801ab38:	6810      	ldr	r0, [r2, #0]
 801ab3a:	ae0c      	add	r6, sp, #48	; 0x30
 801ab3c:	6851      	ldr	r1, [r2, #4]
 801ab3e:	f8df b208 	ldr.w	fp, [pc, #520]	; 801ad48 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>
 801ab42:	c603      	stmia	r6!, {r0, r1}
 801ab44:	6818      	ldr	r0, [r3, #0]
 801ab46:	ae0e      	add	r6, sp, #56	; 0x38
 801ab48:	6859      	ldr	r1, [r3, #4]
 801ab4a:	c603      	stmia	r6!, {r0, r1}
 801ab4c:	a80c      	add	r0, sp, #48	; 0x30
 801ab4e:	f7f8 feb7 	bl	80138c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ab52:	4641      	mov	r1, r8
 801ab54:	a80e      	add	r0, sp, #56	; 0x38
 801ab56:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 801ad4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x240>
 801ab5a:	f7f8 fef5 	bl	8013948 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ab5e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801ab62:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801ab66:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801ab6a:	f8db 0000 	ldr.w	r0, [fp]
 801ab6e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ab72:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801ab76:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801ab7a:	440c      	add	r4, r1
 801ab7c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801ab80:	440a      	add	r2, r1
 801ab82:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801ab86:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801ab8a:	4413      	add	r3, r2
 801ab8c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801ab90:	6803      	ldr	r3, [r0, #0]
 801ab92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ab94:	4798      	blx	r3
 801ab96:	f010 0f80 	tst.w	r0, #128	; 0x80
 801ab9a:	f8db 0000 	ldr.w	r0, [fp]
 801ab9e:	d01e      	beq.n	801abde <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd2>
 801aba0:	2200      	movs	r2, #0
 801aba2:	6801      	ldr	r1, [r0, #0]
 801aba4:	b2b6      	uxth	r6, r6
 801aba6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801abaa:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801abae:	220b      	movs	r2, #11
 801abb0:	9207      	str	r2, [sp, #28]
 801abb2:	f8b8 2000 	ldrh.w	r2, [r8]
 801abb6:	9504      	str	r5, [sp, #16]
 801abb8:	9601      	str	r6, [sp, #4]
 801abba:	e9cd 9205 	strd	r9, r2, [sp, #20]
 801abbe:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801abc2:	9203      	str	r2, [sp, #12]
 801abc4:	fa1f f28a 	uxth.w	r2, sl
 801abc8:	9202      	str	r2, [sp, #8]
 801abca:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801abce:	9200      	str	r2, [sp, #0]
 801abd0:	463a      	mov	r2, r7
 801abd2:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801abd4:	4621      	mov	r1, r4
 801abd6:	47a8      	blx	r5
 801abd8:	b011      	add	sp, #68	; 0x44
 801abda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abde:	6803      	ldr	r3, [r0, #0]
 801abe0:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801abe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801abe6:	4798      	blx	r3
 801abe8:	f8b8 2000 	ldrh.w	r2, [r8]
 801abec:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801abf0:	2dff      	cmp	r5, #255	; 0xff
 801abf2:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801abf6:	fb0a fa02 	mul.w	sl, sl, r2
 801abfa:	fb02 1303 	mla	r3, r2, r3, r1
 801abfe:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ac02:	d062      	beq.n	801acca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1be>
 801ac04:	ea6f 0c05 	mvn.w	ip, r5
 801ac08:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801ac0c:	b2ad      	uxth	r5, r5
 801ac0e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801ac12:	fa5f fc8c 	uxtb.w	ip, ip
 801ac16:	930a      	str	r3, [sp, #40]	; 0x28
 801ac18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ac1a:	4298      	cmp	r0, r3
 801ac1c:	f080 8085 	bcs.w	801ad2a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 801ac20:	eb00 0b09 	add.w	fp, r0, r9
 801ac24:	4558      	cmp	r0, fp
 801ac26:	d246      	bcs.n	801acb6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801ac28:	f814 eb01 	ldrb.w	lr, [r4], #1
 801ac2c:	2303      	movs	r3, #3
 801ac2e:	2204      	movs	r2, #4
 801ac30:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801ac34:	8803      	ldrh	r3, [r0, #0]
 801ac36:	eb07 0a0e 	add.w	sl, r7, lr
 801ac3a:	1219      	asrs	r1, r3, #8
 801ac3c:	10da      	asrs	r2, r3, #3
 801ac3e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801ac42:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801ac46:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801ac4a:	00db      	lsls	r3, r3, #3
 801ac4c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801ac50:	fb18 f805 	smulbb	r8, r8, r5
 801ac54:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801ac58:	fb1e fe05 	smulbb	lr, lr, r5
 801ac5c:	b2db      	uxtb	r3, r3
 801ac5e:	fb01 810c 	mla	r1, r1, ip, r8
 801ac62:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801ac66:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801ac6a:	fb18 f805 	smulbb	r8, r8, r5
 801ac6e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801ac72:	b289      	uxth	r1, r1
 801ac74:	fb02 820c 	mla	r2, r2, ip, r8
 801ac78:	fb03 e30c 	mla	r3, r3, ip, lr
 801ac7c:	f101 0801 	add.w	r8, r1, #1
 801ac80:	b292      	uxth	r2, r2
 801ac82:	b29b      	uxth	r3, r3
 801ac84:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801ac88:	f102 0801 	add.w	r8, r2, #1
 801ac8c:	f103 0e01 	add.w	lr, r3, #1
 801ac90:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801ac94:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801ac98:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801ac9c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801aca0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801aca4:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801aca8:	ea4e 0101 	orr.w	r1, lr, r1
 801acac:	ea41 0108 	orr.w	r1, r1, r8
 801acb0:	f820 1b02 	strh.w	r1, [r0], #2
 801acb4:	e7b6      	b.n	801ac24 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 801acb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801acb8:	881b      	ldrh	r3, [r3, #0]
 801acba:	1b9b      	subs	r3, r3, r6
 801acbc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801acc0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801acc4:	1b9b      	subs	r3, r3, r6
 801acc6:	441c      	add	r4, r3
 801acc8:	e7a6      	b.n	801ac18 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 801acca:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801acce:	2203      	movs	r2, #3
 801acd0:	2504      	movs	r5, #4
 801acd2:	491c      	ldr	r1, [pc, #112]	; (801ad44 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x238>)
 801acd4:	4550      	cmp	r0, sl
 801acd6:	d228      	bcs.n	801ad2a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 801acd8:	eb00 0c09 	add.w	ip, r0, r9
 801acdc:	4560      	cmp	r0, ip
 801acde:	4623      	mov	r3, r4
 801ace0:	d219      	bcs.n	801ad16 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801ace2:	f893 e000 	ldrb.w	lr, [r3]
 801ace6:	3401      	adds	r4, #1
 801ace8:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801acec:	eb07 0b0e 	add.w	fp, r7, lr
 801acf0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801acf4:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801acf8:	f89b b001 	ldrb.w	fp, [fp, #1]
 801acfc:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801ad00:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801ad04:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801ad08:	ea43 030b 	orr.w	r3, r3, fp
 801ad0c:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801ad10:	f820 3b02 	strh.w	r3, [r0], #2
 801ad14:	e7e2      	b.n	801acdc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801ad16:	f8b8 3000 	ldrh.w	r3, [r8]
 801ad1a:	1b9b      	subs	r3, r3, r6
 801ad1c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ad20:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801ad24:	1b9b      	subs	r3, r3, r6
 801ad26:	441c      	add	r4, r3
 801ad28:	e7d4      	b.n	801acd4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 801ad2a:	4b07      	ldr	r3, [pc, #28]	; (801ad48 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>)
 801ad2c:	6818      	ldr	r0, [r3, #0]
 801ad2e:	6803      	ldr	r3, [r0, #0]
 801ad30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad32:	4798      	blx	r3
 801ad34:	e750      	b.n	801abd8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 801ad36:	bf00      	nop
 801ad38:	08029d7e 	.word	0x08029d7e
 801ad3c:	0802a452 	.word	0x0802a452
 801ad40:	08029f50 	.word	0x08029f50
 801ad44:	fffff800 	.word	0xfffff800
 801ad48:	20020fd8 	.word	0x20020fd8
 801ad4c:	20020fd2 	.word	0x20020fd2

0801ad50 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801ad50:	b430      	push	{r4, r5}
 801ad52:	780d      	ldrb	r5, [r1, #0]
 801ad54:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801ad58:	2d01      	cmp	r5, #1
 801ad5a:	d00a      	beq.n	801ad72 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801ad5c:	d305      	bcc.n	801ad6a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801ad5e:	2d02      	cmp	r5, #2
 801ad60:	d10b      	bne.n	801ad7a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801ad62:	9402      	str	r4, [sp, #8]
 801ad64:	bc30      	pop	{r4, r5}
 801ad66:	f7ff bdf5 	b.w	801a954 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801ad6a:	9402      	str	r4, [sp, #8]
 801ad6c:	bc30      	pop	{r4, r5}
 801ad6e:	f7ff bcfb 	b.w	801a768 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801ad72:	9402      	str	r4, [sp, #8]
 801ad74:	bc30      	pop	{r4, r5}
 801ad76:	f7ff bec9 	b.w	801ab0c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801ad7a:	bc30      	pop	{r4, r5}
 801ad7c:	4770      	bx	lr
	...

0801ad80 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801ad80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad84:	b087      	sub	sp, #28
 801ad86:	4604      	mov	r4, r0
 801ad88:	460e      	mov	r6, r1
 801ad8a:	6810      	ldr	r0, [r2, #0]
 801ad8c:	6851      	ldr	r1, [r2, #4]
 801ad8e:	ad02      	add	r5, sp, #8
 801ad90:	4617      	mov	r7, r2
 801ad92:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801ad96:	f8df 9230 	ldr.w	r9, [pc, #560]	; 801afc8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801ad9a:	c503      	stmia	r5!, {r0, r1}
 801ad9c:	6818      	ldr	r0, [r3, #0]
 801ad9e:	ad04      	add	r5, sp, #16
 801ada0:	6859      	ldr	r1, [r3, #4]
 801ada2:	c503      	stmia	r5!, {r0, r1}
 801ada4:	a802      	add	r0, sp, #8
 801ada6:	f7f8 fd8b 	bl	80138c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801adaa:	4639      	mov	r1, r7
 801adac:	a804      	add	r0, sp, #16
 801adae:	f7f8 fdcb 	bl	8013948 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801adb2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801adb6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801adba:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801adbe:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801adc2:	fb11 2103 	smlabb	r1, r1, r3, r2
 801adc6:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801adca:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801adce:	440e      	add	r6, r1
 801add0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801add4:	440a      	add	r2, r1
 801add6:	f8ad 2010 	strh.w	r2, [sp, #16]
 801adda:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801adde:	4413      	add	r3, r2
 801ade0:	f8ad 3012 	strh.w	r3, [sp, #18]
 801ade4:	4b77      	ldr	r3, [pc, #476]	; (801afc4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801ade6:	6818      	ldr	r0, [r3, #0]
 801ade8:	6803      	ldr	r3, [r0, #0]
 801adea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801adec:	4798      	blx	r3
 801adee:	f8b9 b000 	ldrh.w	fp, [r9]
 801adf2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801adf6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801adfa:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801adfe:	fb05 f50b 	mul.w	r5, r5, fp
 801ae02:	fb0b 2303 	mla	r3, fp, r3, r2
 801ae06:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ae0a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801ae0e:	9300      	str	r3, [sp, #0]
 801ae10:	d069      	beq.n	801aee6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801ae12:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801ae16:	4558      	cmp	r0, fp
 801ae18:	f080 80cc 	bcs.w	801afb4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801ae1c:	9b00      	ldr	r3, [sp, #0]
 801ae1e:	4631      	mov	r1, r6
 801ae20:	18c3      	adds	r3, r0, r3
 801ae22:	9301      	str	r3, [sp, #4]
 801ae24:	9b01      	ldr	r3, [sp, #4]
 801ae26:	4298      	cmp	r0, r3
 801ae28:	d24f      	bcs.n	801aeca <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801ae2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ae2e:	2a00      	cmp	r2, #0
 801ae30:	d048      	beq.n	801aec4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801ae32:	fb0a f202 	mul.w	r2, sl, r2
 801ae36:	1c53      	adds	r3, r2, #1
 801ae38:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ae3c:	121b      	asrs	r3, r3, #8
 801ae3e:	d041      	beq.n	801aec4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801ae40:	8802      	ldrh	r2, [r0, #0]
 801ae42:	b29e      	uxth	r6, r3
 801ae44:	f8b4 c000 	ldrh.w	ip, [r4]
 801ae48:	43db      	mvns	r3, r3
 801ae4a:	1215      	asrs	r5, r2, #8
 801ae4c:	b2db      	uxtb	r3, r3
 801ae4e:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ae52:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801ae56:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801ae5a:	fb15 f503 	smulbb	r5, r5, r3
 801ae5e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ae62:	00d2      	lsls	r2, r2, #3
 801ae64:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801ae68:	fb07 5706 	mla	r7, r7, r6, r5
 801ae6c:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801ae70:	b2d2      	uxtb	r2, r2
 801ae72:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ae76:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801ae7a:	fb1e fe03 	smulbb	lr, lr, r3
 801ae7e:	b2bf      	uxth	r7, r7
 801ae80:	fb12 f203 	smulbb	r2, r2, r3
 801ae84:	fa5f fc8c 	uxtb.w	ip, ip
 801ae88:	fb05 e506 	mla	r5, r5, r6, lr
 801ae8c:	f107 0e01 	add.w	lr, r7, #1
 801ae90:	fb0c 2c06 	mla	ip, ip, r6, r2
 801ae94:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801ae98:	fa1f fc8c 	uxth.w	ip, ip
 801ae9c:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801aea0:	b2ad      	uxth	r5, r5
 801aea2:	f10c 0701 	add.w	r7, ip, #1
 801aea6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801aeaa:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801aeae:	ea47 070e 	orr.w	r7, r7, lr
 801aeb2:	f105 0e01 	add.w	lr, r5, #1
 801aeb6:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801aeba:	096d      	lsrs	r5, r5, #5
 801aebc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801aec0:	432f      	orrs	r7, r5
 801aec2:	8007      	strh	r7, [r0, #0]
 801aec4:	3002      	adds	r0, #2
 801aec6:	3402      	adds	r4, #2
 801aec8:	e7ac      	b.n	801ae24 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801aeca:	f8b9 3000 	ldrh.w	r3, [r9]
 801aece:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801aed2:	eba3 0308 	sub.w	r3, r3, r8
 801aed6:	eba6 0608 	sub.w	r6, r6, r8
 801aeda:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801aede:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801aee2:	440e      	add	r6, r1
 801aee4:	e797      	b.n	801ae16 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801aee6:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801aeea:	42a8      	cmp	r0, r5
 801aeec:	d262      	bcs.n	801afb4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801aeee:	9b00      	ldr	r3, [sp, #0]
 801aef0:	4631      	mov	r1, r6
 801aef2:	eb00 0b03 	add.w	fp, r0, r3
 801aef6:	4558      	cmp	r0, fp
 801aef8:	d24e      	bcs.n	801af98 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801aefa:	f811 3b01 	ldrb.w	r3, [r1], #1
 801aefe:	b12b      	cbz	r3, 801af0c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801af00:	2bff      	cmp	r3, #255	; 0xff
 801af02:	f8b4 e000 	ldrh.w	lr, [r4]
 801af06:	d104      	bne.n	801af12 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801af08:	f8a0 e000 	strh.w	lr, [r0]
 801af0c:	3002      	adds	r0, #2
 801af0e:	3402      	adds	r4, #2
 801af10:	e7f1      	b.n	801aef6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801af12:	8802      	ldrh	r2, [r0, #0]
 801af14:	b29f      	uxth	r7, r3
 801af16:	43db      	mvns	r3, r3
 801af18:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801af1c:	1216      	asrs	r6, r2, #8
 801af1e:	b2db      	uxtb	r3, r3
 801af20:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801af24:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801af28:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801af2c:	00d2      	lsls	r2, r2, #3
 801af2e:	fb16 f603 	smulbb	r6, r6, r3
 801af32:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801af36:	b2d2      	uxtb	r2, r2
 801af38:	fb0c 6c07 	mla	ip, ip, r7, r6
 801af3c:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801af40:	fb1a fa03 	smulbb	sl, sl, r3
 801af44:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801af48:	fa1f fc8c 	uxth.w	ip, ip
 801af4c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801af50:	fb12 f303 	smulbb	r3, r2, r3
 801af54:	fa5f fe8e 	uxtb.w	lr, lr
 801af58:	fb06 a607 	mla	r6, r6, r7, sl
 801af5c:	f10c 0201 	add.w	r2, ip, #1
 801af60:	fb0e 3307 	mla	r3, lr, r7, r3
 801af64:	b2b6      	uxth	r6, r6
 801af66:	b29b      	uxth	r3, r3
 801af68:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801af6c:	f106 0a01 	add.w	sl, r6, #1
 801af70:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801af74:	f103 0c01 	add.w	ip, r3, #1
 801af78:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801af7c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801af80:	0976      	lsrs	r6, r6, #5
 801af82:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801af86:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801af8a:	ea4c 0c02 	orr.w	ip, ip, r2
 801af8e:	ea4c 0c06 	orr.w	ip, ip, r6
 801af92:	f8a0 c000 	strh.w	ip, [r0]
 801af96:	e7b9      	b.n	801af0c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801af98:	f8b9 3000 	ldrh.w	r3, [r9]
 801af9c:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801afa0:	eba3 0308 	sub.w	r3, r3, r8
 801afa4:	eba6 0608 	sub.w	r6, r6, r8
 801afa8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801afac:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801afb0:	440e      	add	r6, r1
 801afb2:	e79a      	b.n	801aeea <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801afb4:	4b03      	ldr	r3, [pc, #12]	; (801afc4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801afb6:	6818      	ldr	r0, [r3, #0]
 801afb8:	6803      	ldr	r3, [r0, #0]
 801afba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801afbc:	4798      	blx	r3
 801afbe:	b007      	add	sp, #28
 801afc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afc4:	20020fd8 	.word	0x20020fd8
 801afc8:	20020fd2 	.word	0x20020fd2

0801afcc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801afcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afd0:	b089      	sub	sp, #36	; 0x24
 801afd2:	4682      	mov	sl, r0
 801afd4:	460f      	mov	r7, r1
 801afd6:	4691      	mov	r9, r2
 801afd8:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801afdc:	4698      	mov	r8, r3
 801afde:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801afe0:	2e00      	cmp	r6, #0
 801afe2:	d03d      	beq.n	801b060 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801afe4:	4608      	mov	r0, r1
 801afe6:	f7fb ff7b 	bl	8016ee0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801afea:	4605      	mov	r5, r0
 801afec:	4638      	mov	r0, r7
 801afee:	f7fb ffbb 	bl	8016f68 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801aff2:	f8ad 000e 	strh.w	r0, [sp, #14]
 801aff6:	4638      	mov	r0, r7
 801aff8:	f8ad 9008 	strh.w	r9, [sp, #8]
 801affc:	f8ad 500c 	strh.w	r5, [sp, #12]
 801b000:	f8ad 800a 	strh.w	r8, [sp, #10]
 801b004:	f7fc f888 	bl	8017118 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b008:	4605      	mov	r5, r0
 801b00a:	4638      	mov	r0, r7
 801b00c:	f7fc f8b6 	bl	801717c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801b010:	4681      	mov	r9, r0
 801b012:	4638      	mov	r0, r7
 801b014:	f7fc f90a 	bl	801722c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b018:	280b      	cmp	r0, #11
 801b01a:	f200 816f 	bhi.w	801b2fc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x330>
 801b01e:	e8df f010 	tbh	[pc, r0, lsl #1]
 801b022:	00c3      	.short	0x00c3
 801b024:	000c00b4 	.word	0x000c00b4
 801b028:	016d016d 	.word	0x016d016d
 801b02c:	016d016d 	.word	0x016d016d
 801b030:	016d016d 	.word	0x016d016d
 801b034:	016d016d 	.word	0x016d016d
 801b038:	00bb      	.short	0x00bb
 801b03a:	4bb3      	ldr	r3, [pc, #716]	; (801b308 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x33c>)
 801b03c:	6818      	ldr	r0, [r3, #0]
 801b03e:	6803      	ldr	r3, [r0, #0]
 801b040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b042:	4798      	blx	r3
 801b044:	2eff      	cmp	r6, #255	; 0xff
 801b046:	d121      	bne.n	801b08c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801b048:	0683      	lsls	r3, r0, #26
 801b04a:	d41f      	bmi.n	801b08c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801b04c:	4638      	mov	r0, r7
 801b04e:	f7fc f829 	bl	80170a4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801b052:	b940      	cbnz	r0, 801b066 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 801b054:	4623      	mov	r3, r4
 801b056:	aa02      	add	r2, sp, #8
 801b058:	4629      	mov	r1, r5
 801b05a:	4650      	mov	r0, sl
 801b05c:	f7ff f9e4 	bl	801a428 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801b060:	b009      	add	sp, #36	; 0x24
 801b062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b066:	f10d 0818 	add.w	r8, sp, #24
 801b06a:	4639      	mov	r1, r7
 801b06c:	af04      	add	r7, sp, #16
 801b06e:	4640      	mov	r0, r8
 801b070:	f7fb ffbe 	bl	8016ff0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b074:	e898 0003 	ldmia.w	r8, {r0, r1}
 801b078:	e887 0003 	stmia.w	r7, {r0, r1}
 801b07c:	4638      	mov	r0, r7
 801b07e:	4621      	mov	r1, r4
 801b080:	f7f2 fc48 	bl	800d914 <_ZN8touchgfx4RectaNERKS0_>
 801b084:	4638      	mov	r0, r7
 801b086:	f7f2 fc88 	bl	800d99a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b08a:	b130      	cbz	r0, 801b09a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xce>
 801b08c:	4633      	mov	r3, r6
 801b08e:	4622      	mov	r2, r4
 801b090:	a902      	add	r1, sp, #8
 801b092:	4628      	mov	r0, r5
 801b094:	f7ff f8e2 	bl	801a25c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b098:	e7e2      	b.n	801b060 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801b09a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b09e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b0a2:	4293      	cmp	r3, r2
 801b0a4:	dd12      	ble.n	801b0cc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x100>
 801b0a6:	1a9b      	subs	r3, r3, r2
 801b0a8:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b0ac:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b0b0:	f8ad 0018 	strh.w	r0, [sp, #24]
 801b0b4:	4628      	mov	r0, r5
 801b0b6:	f8ad 201a 	strh.w	r2, [sp, #26]
 801b0ba:	4642      	mov	r2, r8
 801b0bc:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b0c0:	a902      	add	r1, sp, #8
 801b0c2:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b0c6:	4633      	mov	r3, r6
 801b0c8:	f7ff f8c8 	bl	801a25c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b0cc:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801b0d0:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b0d4:	4293      	cmp	r3, r2
 801b0d6:	dd12      	ble.n	801b0fe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x132>
 801b0d8:	1a9b      	subs	r3, r3, r2
 801b0da:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801b0de:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801b0e2:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b0e6:	4642      	mov	r2, r8
 801b0e8:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b0ec:	4628      	mov	r0, r5
 801b0ee:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b0f2:	23ff      	movs	r3, #255	; 0xff
 801b0f4:	f8ad 101e 	strh.w	r1, [sp, #30]
 801b0f8:	a902      	add	r1, sp, #8
 801b0fa:	f7ff f8af 	bl	801a25c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b0fe:	463b      	mov	r3, r7
 801b100:	aa02      	add	r2, sp, #8
 801b102:	4629      	mov	r1, r5
 801b104:	4650      	mov	r0, sl
 801b106:	f7ff f98f 	bl	801a428 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801b10a:	88a2      	ldrh	r2, [r4, #4]
 801b10c:	8823      	ldrh	r3, [r4, #0]
 801b10e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801b112:	4413      	add	r3, r2
 801b114:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b118:	440a      	add	r2, r1
 801b11a:	b29b      	uxth	r3, r3
 801b11c:	b292      	uxth	r2, r2
 801b11e:	b218      	sxth	r0, r3
 801b120:	b211      	sxth	r1, r2
 801b122:	4288      	cmp	r0, r1
 801b124:	dd12      	ble.n	801b14c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>
 801b126:	1a9b      	subs	r3, r3, r2
 801b128:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801b12c:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801b130:	4642      	mov	r2, r8
 801b132:	f8ad 1018 	strh.w	r1, [sp, #24]
 801b136:	a902      	add	r1, sp, #8
 801b138:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b13c:	23ff      	movs	r3, #255	; 0xff
 801b13e:	f8ad 001e 	strh.w	r0, [sp, #30]
 801b142:	4628      	mov	r0, r5
 801b144:	f8ad 601a 	strh.w	r6, [sp, #26]
 801b148:	f7ff f888 	bl	801a25c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b14c:	88e2      	ldrh	r2, [r4, #6]
 801b14e:	8863      	ldrh	r3, [r4, #2]
 801b150:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801b154:	4413      	add	r3, r2
 801b156:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801b15a:	440a      	add	r2, r1
 801b15c:	b29b      	uxth	r3, r3
 801b15e:	b292      	uxth	r2, r2
 801b160:	b218      	sxth	r0, r3
 801b162:	b211      	sxth	r1, r2
 801b164:	4288      	cmp	r0, r1
 801b166:	f77f af7b 	ble.w	801b060 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801b16a:	1a9b      	subs	r3, r3, r2
 801b16c:	f9b4 6000 	ldrsh.w	r6, [r4]
 801b170:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b174:	4642      	mov	r2, r8
 801b176:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b17a:	23ff      	movs	r3, #255	; 0xff
 801b17c:	f8ad 6018 	strh.w	r6, [sp, #24]
 801b180:	f8ad 101a 	strh.w	r1, [sp, #26]
 801b184:	f8ad 001c 	strh.w	r0, [sp, #28]
 801b188:	e782      	b.n	801b090 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 801b18a:	4633      	mov	r3, r6
 801b18c:	4622      	mov	r2, r4
 801b18e:	a902      	add	r1, sp, #8
 801b190:	4628      	mov	r0, r5
 801b192:	f7ff f9b9 	bl	801a508 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801b196:	e763      	b.n	801b060 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801b198:	9600      	str	r6, [sp, #0]
 801b19a:	4623      	mov	r3, r4
 801b19c:	aa02      	add	r2, sp, #8
 801b19e:	4649      	mov	r1, r9
 801b1a0:	4628      	mov	r0, r5
 801b1a2:	f7ff fdd5 	bl	801ad50 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801b1a6:	e75b      	b.n	801b060 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801b1a8:	4638      	mov	r0, r7
 801b1aa:	f7fb ff7b 	bl	80170a4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801b1ae:	b950      	cbnz	r0, 801b1c6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fa>
 801b1b0:	f8da 3000 	ldr.w	r3, [sl]
 801b1b4:	aa02      	add	r2, sp, #8
 801b1b6:	4629      	mov	r1, r5
 801b1b8:	e9cd 6000 	strd	r6, r0, [sp]
 801b1bc:	4650      	mov	r0, sl
 801b1be:	68de      	ldr	r6, [r3, #12]
 801b1c0:	4623      	mov	r3, r4
 801b1c2:	47b0      	blx	r6
 801b1c4:	e74c      	b.n	801b060 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801b1c6:	f10d 0818 	add.w	r8, sp, #24
 801b1ca:	4639      	mov	r1, r7
 801b1cc:	af04      	add	r7, sp, #16
 801b1ce:	4640      	mov	r0, r8
 801b1d0:	f7fb ff0e 	bl	8016ff0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b1d4:	e898 0003 	ldmia.w	r8, {r0, r1}
 801b1d8:	e887 0003 	stmia.w	r7, {r0, r1}
 801b1dc:	4638      	mov	r0, r7
 801b1de:	4621      	mov	r1, r4
 801b1e0:	f7f2 fb98 	bl	800d914 <_ZN8touchgfx4RectaNERKS0_>
 801b1e4:	4638      	mov	r0, r7
 801b1e6:	f7f2 fbd8 	bl	800d99a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b1ea:	b138      	cbz	r0, 801b1fc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 801b1ec:	4623      	mov	r3, r4
 801b1ee:	9600      	str	r6, [sp, #0]
 801b1f0:	aa02      	add	r2, sp, #8
 801b1f2:	4649      	mov	r1, r9
 801b1f4:	4628      	mov	r0, r5
 801b1f6:	f7ff fdc3 	bl	801ad80 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801b1fa:	e731      	b.n	801b060 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801b1fc:	f8da 3000 	ldr.w	r3, [sl]
 801b200:	aa02      	add	r2, sp, #8
 801b202:	4629      	mov	r1, r5
 801b204:	e9cd 6000 	strd	r6, r0, [sp]
 801b208:	4650      	mov	r0, sl
 801b20a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801b20e:	463b      	mov	r3, r7
 801b210:	47d8      	blx	fp
 801b212:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b216:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b21a:	4293      	cmp	r3, r2
 801b21c:	dd13      	ble.n	801b246 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x27a>
 801b21e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b222:	1a9b      	subs	r3, r3, r2
 801b224:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b228:	f8ad 0018 	strh.w	r0, [sp, #24]
 801b22c:	4628      	mov	r0, r5
 801b22e:	f8ad 201a 	strh.w	r2, [sp, #26]
 801b232:	aa02      	add	r2, sp, #8
 801b234:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b238:	4649      	mov	r1, r9
 801b23a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b23e:	4643      	mov	r3, r8
 801b240:	9600      	str	r6, [sp, #0]
 801b242:	f7ff fd9d 	bl	801ad80 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801b246:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801b24a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b24e:	4293      	cmp	r3, r2
 801b250:	dd13      	ble.n	801b27a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2ae>
 801b252:	1a9b      	subs	r3, r3, r2
 801b254:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801b258:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801b25c:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b260:	aa02      	add	r2, sp, #8
 801b262:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b266:	4628      	mov	r0, r5
 801b268:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b26c:	4643      	mov	r3, r8
 801b26e:	f8ad 101e 	strh.w	r1, [sp, #30]
 801b272:	4649      	mov	r1, r9
 801b274:	9600      	str	r6, [sp, #0]
 801b276:	f7ff fd83 	bl	801ad80 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801b27a:	88a2      	ldrh	r2, [r4, #4]
 801b27c:	8823      	ldrh	r3, [r4, #0]
 801b27e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801b282:	4413      	add	r3, r2
 801b284:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b288:	440a      	add	r2, r1
 801b28a:	b29b      	uxth	r3, r3
 801b28c:	b292      	uxth	r2, r2
 801b28e:	b218      	sxth	r0, r3
 801b290:	b211      	sxth	r1, r2
 801b292:	4288      	cmp	r0, r1
 801b294:	dd13      	ble.n	801b2be <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2f2>
 801b296:	1a9b      	subs	r3, r3, r2
 801b298:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801b29c:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801b2a0:	aa02      	add	r2, sp, #8
 801b2a2:	f8ad 1018 	strh.w	r1, [sp, #24]
 801b2a6:	4649      	mov	r1, r9
 801b2a8:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b2ac:	4643      	mov	r3, r8
 801b2ae:	f8ad 001e 	strh.w	r0, [sp, #30]
 801b2b2:	4628      	mov	r0, r5
 801b2b4:	9600      	str	r6, [sp, #0]
 801b2b6:	f8ad 701a 	strh.w	r7, [sp, #26]
 801b2ba:	f7ff fd61 	bl	801ad80 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801b2be:	88e2      	ldrh	r2, [r4, #6]
 801b2c0:	8863      	ldrh	r3, [r4, #2]
 801b2c2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801b2c6:	4413      	add	r3, r2
 801b2c8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801b2cc:	440a      	add	r2, r1
 801b2ce:	b29b      	uxth	r3, r3
 801b2d0:	b292      	uxth	r2, r2
 801b2d2:	b218      	sxth	r0, r3
 801b2d4:	b211      	sxth	r1, r2
 801b2d6:	4288      	cmp	r0, r1
 801b2d8:	f77f aec2 	ble.w	801b060 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801b2dc:	f9b4 7000 	ldrsh.w	r7, [r4]
 801b2e0:	1a9b      	subs	r3, r3, r2
 801b2e2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b2e6:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b2ea:	4643      	mov	r3, r8
 801b2ec:	f8ad 7018 	strh.w	r7, [sp, #24]
 801b2f0:	f8ad 101a 	strh.w	r1, [sp, #26]
 801b2f4:	f8ad 001c 	strh.w	r0, [sp, #28]
 801b2f8:	9600      	str	r6, [sp, #0]
 801b2fa:	e779      	b.n	801b1f0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 801b2fc:	4b03      	ldr	r3, [pc, #12]	; (801b30c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x340>)
 801b2fe:	21b0      	movs	r1, #176	; 0xb0
 801b300:	4a03      	ldr	r2, [pc, #12]	; (801b310 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x344>)
 801b302:	4804      	ldr	r0, [pc, #16]	; (801b314 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x348>)
 801b304:	f009 fb78 	bl	80249f8 <__assert_func>
 801b308:	20020fd8 	.word	0x20020fd8
 801b30c:	08029dcc 	.word	0x08029dcc
 801b310:	0802a4db 	.word	0x0802a4db
 801b314:	08029f50 	.word	0x08029f50

0801b318 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801b318:	b508      	push	{r3, lr}
 801b31a:	b180      	cbz	r0, 801b33e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 801b31c:	2902      	cmp	r1, #2
 801b31e:	d014      	beq.n	801b34a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 801b320:	2903      	cmp	r1, #3
 801b322:	d01d      	beq.n	801b360 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801b324:	2901      	cmp	r1, #1
 801b326:	d101      	bne.n	801b32c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801b328:	2001      	movs	r0, #1
 801b32a:	bd08      	pop	{r3, pc}
 801b32c:	4b0e      	ldr	r3, [pc, #56]	; (801b368 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801b32e:	8818      	ldrh	r0, [r3, #0]
 801b330:	b990      	cbnz	r0, 801b358 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801b332:	4b0e      	ldr	r3, [pc, #56]	; (801b36c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 801b334:	2153      	movs	r1, #83	; 0x53
 801b336:	4a0e      	ldr	r2, [pc, #56]	; (801b370 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 801b338:	480e      	ldr	r0, [pc, #56]	; (801b374 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 801b33a:	f009 fb5d 	bl	80249f8 <__assert_func>
 801b33e:	2902      	cmp	r1, #2
 801b340:	d00e      	beq.n	801b360 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801b342:	2903      	cmp	r1, #3
 801b344:	d0f2      	beq.n	801b32c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801b346:	2901      	cmp	r1, #1
 801b348:	d1ee      	bne.n	801b328 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 801b34a:	4b07      	ldr	r3, [pc, #28]	; (801b368 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801b34c:	8818      	ldrh	r0, [r3, #0]
 801b34e:	2800      	cmp	r0, #0
 801b350:	d0ef      	beq.n	801b332 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801b352:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801b356:	e7e8      	b.n	801b32a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801b358:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801b35c:	4240      	negs	r0, r0
 801b35e:	e7e4      	b.n	801b32a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801b360:	f04f 30ff 	mov.w	r0, #4294967295
 801b364:	e7e1      	b.n	801b32a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801b366:	bf00      	nop
 801b368:	20020fd2 	.word	0x20020fd2
 801b36c:	0802a046 	.word	0x0802a046
 801b370:	0802a658 	.word	0x0802a658
 801b374:	0802a088 	.word	0x0802a088

0801b378 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801b378:	b508      	push	{r3, lr}
 801b37a:	b180      	cbz	r0, 801b39e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 801b37c:	2902      	cmp	r1, #2
 801b37e:	d014      	beq.n	801b3aa <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 801b380:	2903      	cmp	r1, #3
 801b382:	d018      	beq.n	801b3b6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801b384:	2901      	cmp	r1, #1
 801b386:	d001      	beq.n	801b38c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801b388:	2001      	movs	r0, #1
 801b38a:	e013      	b.n	801b3b4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801b38c:	4b0e      	ldr	r3, [pc, #56]	; (801b3c8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801b38e:	8818      	ldrh	r0, [r3, #0]
 801b390:	b970      	cbnz	r0, 801b3b0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 801b392:	4b0e      	ldr	r3, [pc, #56]	; (801b3cc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 801b394:	2153      	movs	r1, #83	; 0x53
 801b396:	4a0e      	ldr	r2, [pc, #56]	; (801b3d0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 801b398:	480e      	ldr	r0, [pc, #56]	; (801b3d4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 801b39a:	f009 fb2d 	bl	80249f8 <__assert_func>
 801b39e:	2902      	cmp	r1, #2
 801b3a0:	d009      	beq.n	801b3b6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801b3a2:	2903      	cmp	r1, #3
 801b3a4:	d0f0      	beq.n	801b388 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 801b3a6:	2901      	cmp	r1, #1
 801b3a8:	d1f0      	bne.n	801b38c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801b3aa:	f04f 30ff 	mov.w	r0, #4294967295
 801b3ae:	e001      	b.n	801b3b4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801b3b0:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801b3b4:	bd08      	pop	{r3, pc}
 801b3b6:	4b04      	ldr	r3, [pc, #16]	; (801b3c8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801b3b8:	8818      	ldrh	r0, [r3, #0]
 801b3ba:	2800      	cmp	r0, #0
 801b3bc:	d0e9      	beq.n	801b392 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 801b3be:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801b3c2:	4240      	negs	r0, r0
 801b3c4:	e7f6      	b.n	801b3b4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801b3c6:	bf00      	nop
 801b3c8:	20020fd2 	.word	0x20020fd2
 801b3cc:	0802a046 	.word	0x0802a046
 801b3d0:	0802a658 	.word	0x0802a658
 801b3d4:	0802a088 	.word	0x0802a088

0801b3d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801b3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3dc:	b099      	sub	sp, #100	; 0x64
 801b3de:	910b      	str	r1, [sp, #44]	; 0x2c
 801b3e0:	a914      	add	r1, sp, #80	; 0x50
 801b3e2:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 801b3e6:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 801b3ea:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 801b3ee:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801b3f2:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801b3f6:	e881 000c 	stmia.w	r1, {r2, r3}
 801b3fa:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801b3fe:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801b402:	930a      	str	r3, [sp, #40]	; 0x28
 801b404:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801b408:	f891 900d 	ldrb.w	r9, [r1, #13]
 801b40c:	9311      	str	r3, [sp, #68]	; 0x44
 801b40e:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801b412:	7988      	ldrb	r0, [r1, #6]
 801b414:	930c      	str	r3, [sp, #48]	; 0x30
 801b416:	ea4f 1349 	mov.w	r3, r9, lsl #5
 801b41a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b41e:	4303      	orrs	r3, r0
 801b420:	9309      	str	r3, [sp, #36]	; 0x24
 801b422:	f000 81a1 	beq.w	801b768 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801b426:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801b42a:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801b42e:	f891 9007 	ldrb.w	r9, [r1, #7]
 801b432:	ea59 0903 	orrs.w	r9, r9, r3
 801b436:	f000 8197 	beq.w	801b768 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801b43a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801b43e:	b29b      	uxth	r3, r3
 801b440:	2e00      	cmp	r6, #0
 801b442:	f000 813a 	beq.w	801b6ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801b446:	1af6      	subs	r6, r6, r3
 801b448:	b2b6      	uxth	r6, r6
 801b44a:	0433      	lsls	r3, r6, #16
 801b44c:	d502      	bpl.n	801b454 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 801b44e:	1bad      	subs	r5, r5, r6
 801b450:	2600      	movs	r6, #0
 801b452:	b22d      	sxth	r5, r5
 801b454:	f9b2 1000 	ldrsh.w	r1, [r2]
 801b458:	a814      	add	r0, sp, #80	; 0x50
 801b45a:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801b45e:	428d      	cmp	r5, r1
 801b460:	b28b      	uxth	r3, r1
 801b462:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801b466:	bfbf      	itttt	lt
 801b468:	18f6      	addlt	r6, r6, r3
 801b46a:	1b75      	sublt	r5, r6, r5
 801b46c:	b2ae      	uxthlt	r6, r5
 801b46e:	460d      	movlt	r5, r1
 801b470:	8891      	ldrh	r1, [r2, #4]
 801b472:	440b      	add	r3, r1
 801b474:	4629      	mov	r1, r5
 801b476:	b21b      	sxth	r3, r3
 801b478:	9310      	str	r3, [sp, #64]	; 0x40
 801b47a:	88d3      	ldrh	r3, [r2, #6]
 801b47c:	8852      	ldrh	r2, [r2, #2]
 801b47e:	4413      	add	r3, r2
 801b480:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b482:	b21b      	sxth	r3, r3
 801b484:	930f      	str	r3, [sp, #60]	; 0x3c
 801b486:	4bbd      	ldr	r3, [pc, #756]	; (801b77c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801b488:	f893 b000 	ldrb.w	fp, [r3]
 801b48c:	f10b 3cff 	add.w	ip, fp, #4294967295
 801b490:	f1dc 0300 	rsbs	r3, ip, #0
 801b494:	eb43 030c 	adc.w	r3, r3, ip
 801b498:	930e      	str	r3, [sp, #56]	; 0x38
 801b49a:	4653      	mov	r3, sl
 801b49c:	f7f8 f894 	bl	80135c8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801b4a0:	4629      	mov	r1, r5
 801b4a2:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801b4a6:	4653      	mov	r3, sl
 801b4a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b4aa:	a814      	add	r0, sp, #80	; 0x50
 801b4ac:	f7f8 f8a4 	bl	80135f8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801b4b0:	a918      	add	r1, sp, #96	; 0x60
 801b4b2:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801b4b6:	a817      	add	r0, sp, #92	; 0x5c
 801b4b8:	f7f8 f9c0 	bl	801383c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801b4bc:	f1ba 0f00 	cmp.w	sl, #0
 801b4c0:	f040 80fe 	bne.w	801b6c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 801b4c4:	f1bb 0f01 	cmp.w	fp, #1
 801b4c8:	f040 8102 	bne.w	801b6d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 801b4cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b4ce:	b153      	cbz	r3, 801b4e6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801b4d0:	2408      	movs	r4, #8
 801b4d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b4d4:	fb94 f3f8 	sdiv	r3, r4, r8
 801b4d8:	1e5c      	subs	r4, r3, #1
 801b4da:	4414      	add	r4, r2
 801b4dc:	fb94 f4f3 	sdiv	r4, r4, r3
 801b4e0:	fb14 f403 	smulbb	r4, r4, r3
 801b4e4:	b2a4      	uxth	r4, r4
 801b4e6:	b906      	cbnz	r6, 801b4ea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 801b4e8:	b16f      	cbz	r7, 801b506 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12e>
 801b4ea:	fb07 6304 	mla	r3, r7, r4, r6
 801b4ee:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801b4f0:	463a      	mov	r2, r7
 801b4f2:	fb08 f303 	mul.w	r3, r8, r3
 801b4f6:	f003 0707 	and.w	r7, r3, #7
 801b4fa:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 801b4fe:	9328      	str	r3, [sp, #160]	; 0xa0
 801b500:	eba9 0302 	sub.w	r3, r9, r2
 801b504:	930d      	str	r3, [sp, #52]	; 0x34
 801b506:	4651      	mov	r1, sl
 801b508:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b50a:	f7ff ff05 	bl	801b318 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801b50e:	4651      	mov	r1, sl
 801b510:	4681      	mov	r9, r0
 801b512:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b514:	f7ff ff30 	bl	801b378 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801b518:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b51a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b51c:	4683      	mov	fp, r0
 801b51e:	eba3 0a02 	sub.w	sl, r3, r2
 801b522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b524:	459a      	cmp	sl, r3
 801b526:	bfa8      	it	ge
 801b528:	469a      	movge	sl, r3
 801b52a:	f1ba 0f00 	cmp.w	sl, #0
 801b52e:	f340 811b 	ble.w	801b768 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801b532:	1bad      	subs	r5, r5, r6
 801b534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b536:	1b5d      	subs	r5, r3, r5
 801b538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b53a:	429d      	cmp	r5, r3
 801b53c:	bfd4      	ite	le
 801b53e:	ebc6 0605 	rsble	r6, r6, r5
 801b542:	ebc6 0603 	rsbgt	r6, r6, r3
 801b546:	2e00      	cmp	r6, #0
 801b548:	f340 810e 	ble.w	801b768 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801b54c:	1ba4      	subs	r4, r4, r6
 801b54e:	fb08 f304 	mul.w	r3, r8, r4
 801b552:	930f      	str	r3, [sp, #60]	; 0x3c
 801b554:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b556:	2b00      	cmp	r3, #0
 801b558:	f040 810b 	bne.w	801b772 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801b55c:	4b88      	ldr	r3, [pc, #544]	; (801b780 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801b55e:	6818      	ldr	r0, [r3, #0]
 801b560:	6803      	ldr	r3, [r0, #0]
 801b562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b564:	4798      	blx	r3
 801b566:	2301      	movs	r3, #1
 801b568:	4a86      	ldr	r2, [pc, #536]	; (801b784 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801b56a:	fa03 f308 	lsl.w	r3, r3, r8
 801b56e:	8811      	ldrh	r1, [r2, #0]
 801b570:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801b574:	3b01      	subs	r3, #1
 801b576:	b2db      	uxtb	r3, r3
 801b578:	930e      	str	r3, [sp, #56]	; 0x38
 801b57a:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801b57e:	fb01 2303 	mla	r3, r1, r3, r2
 801b582:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b586:	930a      	str	r3, [sp, #40]	; 0x28
 801b588:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b58a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801b58e:	9313      	str	r3, [sp, #76]	; 0x4c
 801b590:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b592:	0a19      	lsrs	r1, r3, #8
 801b594:	b2cb      	uxtb	r3, r1
 801b596:	9312      	str	r3, [sp, #72]	; 0x48
 801b598:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b59a:	b2db      	uxtb	r3, r3
 801b59c:	9311      	str	r3, [sp, #68]	; 0x44
 801b59e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b5a0:	095a      	lsrs	r2, r3, #5
 801b5a2:	4b79      	ldr	r3, [pc, #484]	; (801b788 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 801b5a4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b5a8:	400b      	ands	r3, r1
 801b5aa:	4313      	orrs	r3, r2
 801b5ac:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801b5ae:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801b5b2:	4313      	orrs	r3, r2
 801b5b4:	b29b      	uxth	r3, r3
 801b5b6:	9310      	str	r3, [sp, #64]	; 0x40
 801b5b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b5ba:	781a      	ldrb	r2, [r3, #0]
 801b5bc:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801b5c0:	fb06 b919 	mls	r9, r6, r9, fp
 801b5c4:	413a      	asrs	r2, r7
 801b5c6:	fb03 fb06 	mul.w	fp, r3, r6
 801b5ca:	930d      	str	r3, [sp, #52]	; 0x34
 801b5cc:	b2d2      	uxtb	r2, r2
 801b5ce:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801b5d2:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801b5d6:	f0c0 80ea 	bcc.w	801b7ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d6>
 801b5da:	46b6      	mov	lr, r6
 801b5dc:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801b5e0:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801b5e4:	f0c0 80d2 	bcc.w	801b78c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 801b5e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b5ea:	4013      	ands	r3, r2
 801b5ec:	d055      	beq.n	801b69a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c2>
 801b5ee:	20ff      	movs	r0, #255	; 0xff
 801b5f0:	990e      	ldr	r1, [sp, #56]	; 0x38
 801b5f2:	fb90 f1f1 	sdiv	r1, r0, r1
 801b5f6:	434b      	muls	r3, r1
 801b5f8:	2bfe      	cmp	r3, #254	; 0xfe
 801b5fa:	dd03      	ble.n	801b604 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22c>
 801b5fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b5fe:	4281      	cmp	r1, r0
 801b600:	f000 80b9 	beq.w	801b776 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801b604:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b606:	f8bc 4000 	ldrh.w	r4, [ip]
 801b60a:	fb11 f303 	smulbb	r3, r1, r3
 801b60e:	1220      	asrs	r0, r4, #8
 801b610:	b29b      	uxth	r3, r3
 801b612:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801b616:	1c59      	adds	r1, r3, #1
 801b618:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801b61c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801b620:	10e1      	asrs	r1, r4, #3
 801b622:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b626:	00e4      	lsls	r4, r4, #3
 801b628:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801b62c:	b29d      	uxth	r5, r3
 801b62e:	43db      	mvns	r3, r3
 801b630:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801b634:	b2db      	uxtb	r3, r3
 801b636:	b2e4      	uxtb	r4, r4
 801b638:	9309      	str	r3, [sp, #36]	; 0x24
 801b63a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b63c:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801b640:	fb13 f905 	smulbb	r9, r3, r5
 801b644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b646:	fb00 9003 	mla	r0, r0, r3, r9
 801b64a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b64c:	fb13 f905 	smulbb	r9, r3, r5
 801b650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b652:	b280      	uxth	r0, r0
 801b654:	fb01 9103 	mla	r1, r1, r3, r9
 801b658:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b65a:	fb13 f505 	smulbb	r5, r3, r5
 801b65e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b660:	b289      	uxth	r1, r1
 801b662:	fb04 5403 	mla	r4, r4, r3, r5
 801b666:	1c43      	adds	r3, r0, #1
 801b668:	b2a4      	uxth	r4, r4
 801b66a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801b66e:	f104 0901 	add.w	r9, r4, #1
 801b672:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801b676:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801b67a:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801b67e:	ea49 0000 	orr.w	r0, r9, r0
 801b682:	f101 0901 	add.w	r9, r1, #1
 801b686:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801b68a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801b68e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801b692:	ea40 0009 	orr.w	r0, r0, r9
 801b696:	f8ac 0000 	strh.w	r0, [ip]
 801b69a:	4447      	add	r7, r8
 801b69c:	b2bf      	uxth	r7, r7
 801b69e:	2f07      	cmp	r7, #7
 801b6a0:	bf89      	itett	hi
 801b6a2:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801b6a4:	fa42 f208 	asrls.w	r2, r2, r8
 801b6a8:	2700      	movhi	r7, #0
 801b6aa:	785a      	ldrbhi	r2, [r3, #1]
 801b6ac:	bf8a      	itet	hi
 801b6ae:	3301      	addhi	r3, #1
 801b6b0:	b2d2      	uxtbls	r2, r2
 801b6b2:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801b6b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b6b6:	449c      	add	ip, r3
 801b6b8:	e792      	b.n	801b5e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 801b6ba:	441d      	add	r5, r3
 801b6bc:	b22d      	sxth	r5, r5
 801b6be:	e6c9      	b.n	801b454 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 801b6c0:	f1ba 0f01 	cmp.w	sl, #1
 801b6c4:	f47f af02 	bne.w	801b4cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801b6c8:	f1bb 0f01 	cmp.w	fp, #1
 801b6cc:	f47f aefe 	bne.w	801b4cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801b6d0:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801b780 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>
 801b6d4:	f8db 0000 	ldr.w	r0, [fp]
 801b6d8:	6803      	ldr	r3, [r0, #0]
 801b6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b6dc:	4798      	blx	r3
 801b6de:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801b6e2:	465a      	mov	r2, fp
 801b6e4:	d006      	beq.n	801b6f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 801b6e6:	f1b8 0f04 	cmp.w	r8, #4
 801b6ea:	d140      	bne.n	801b76e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801b6ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b6ee:	3300      	adds	r3, #0
 801b6f0:	bf18      	it	ne
 801b6f2:	2301      	movne	r3, #1
 801b6f4:	0580      	lsls	r0, r0, #22
 801b6f6:	d563      	bpl.n	801b7c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 801b6f8:	f1b8 0f08 	cmp.w	r8, #8
 801b6fc:	d160      	bne.n	801b7c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 801b6fe:	2b00      	cmp	r3, #0
 801b700:	bf0c      	ite	eq
 801b702:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801b706:	f44f 7180 	movne.w	r1, #256	; 0x100
 801b70a:	2e00      	cmp	r6, #0
 801b70c:	f47f aede 	bne.w	801b4cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801b710:	2f00      	cmp	r7, #0
 801b712:	f47f aedb 	bne.w	801b4cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801b716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b718:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b71a:	18eb      	adds	r3, r5, r3
 801b71c:	4283      	cmp	r3, r0
 801b71e:	f73f aed5 	bgt.w	801b4cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801b722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b724:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b726:	444b      	add	r3, r9
 801b728:	4283      	cmp	r3, r0
 801b72a:	f73f aecf 	bgt.w	801b4cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801b72e:	f1b8 0f08 	cmp.w	r8, #8
 801b732:	6810      	ldr	r0, [r2, #0]
 801b734:	f04f 0600 	mov.w	r6, #0
 801b738:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801b73c:	bf18      	it	ne
 801b73e:	3401      	addne	r4, #1
 801b740:	6805      	ldr	r5, [r0, #0]
 801b742:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801b746:	bf18      	it	ne
 801b748:	f024 0401 	bicne.w	r4, r4, #1
 801b74c:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801b750:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b752:	bf18      	it	ne
 801b754:	b2a4      	uxthne	r4, r4
 801b756:	9104      	str	r1, [sp, #16]
 801b758:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801b75a:	e9cd 4900 	strd	r4, r9, [sp]
 801b75e:	e9cd 4102 	strd	r4, r1, [sp, #8]
 801b762:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801b764:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 801b766:	47a0      	blx	r4
 801b768:	b019      	add	sp, #100	; 0x64
 801b76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b76e:	2300      	movs	r3, #0
 801b770:	e7c0      	b.n	801b6f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 801b772:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b774:	e6f7      	b.n	801b566 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 801b776:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b778:	e78d      	b.n	801b696 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2be>
 801b77a:	bf00      	nop
 801b77c:	20020fd0 	.word	0x20020fd0
 801b780:	20020fd8 	.word	0x20020fd8
 801b784:	20020fd2 	.word	0x20020fd2
 801b788:	00fff800 	.word	0x00fff800
 801b78c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b78e:	b153      	cbz	r3, 801b7a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 801b790:	441f      	add	r7, r3
 801b792:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b794:	b2bf      	uxth	r7, r7
 801b796:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 801b79a:	f007 0707 	and.w	r7, r7, #7
 801b79e:	781a      	ldrb	r2, [r3, #0]
 801b7a0:	9328      	str	r3, [sp, #160]	; 0xa0
 801b7a2:	413a      	asrs	r2, r7
 801b7a4:	b2d2      	uxtb	r2, r2
 801b7a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b7a8:	445b      	add	r3, fp
 801b7aa:	930a      	str	r3, [sp, #40]	; 0x28
 801b7ac:	e711      	b.n	801b5d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 801b7ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b7b0:	2b00      	cmp	r3, #0
 801b7b2:	d1d9      	bne.n	801b768 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801b7b4:	4b05      	ldr	r3, [pc, #20]	; (801b7cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>)
 801b7b6:	6818      	ldr	r0, [r3, #0]
 801b7b8:	6803      	ldr	r3, [r0, #0]
 801b7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b7bc:	4798      	blx	r3
 801b7be:	e7d3      	b.n	801b768 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	f43f ae83 	beq.w	801b4cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801b7c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 801b7ca:	e79e      	b.n	801b70a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801b7cc:	20020fd8 	.word	0x20020fd8

0801b7d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801b7d0:	b538      	push	{r3, r4, r5, lr}
 801b7d2:	4c15      	ldr	r4, [pc, #84]	; (801b828 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801b7d4:	4605      	mov	r5, r0
 801b7d6:	7823      	ldrb	r3, [r4, #0]
 801b7d8:	f3bf 8f5b 	dmb	ish
 801b7dc:	07da      	lsls	r2, r3, #31
 801b7de:	d40b      	bmi.n	801b7f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801b7e0:	4620      	mov	r0, r4
 801b7e2:	f009 f8dc 	bl	802499e <__cxa_guard_acquire>
 801b7e6:	b138      	cbz	r0, 801b7f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801b7e8:	4620      	mov	r0, r4
 801b7ea:	f009 f8e4 	bl	80249b6 <__cxa_guard_release>
 801b7ee:	4a0f      	ldr	r2, [pc, #60]	; (801b82c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801b7f0:	490f      	ldr	r1, [pc, #60]	; (801b830 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801b7f2:	4810      	ldr	r0, [pc, #64]	; (801b834 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801b7f4:	f009 f8cc 	bl	8024990 <__aeabi_atexit>
 801b7f8:	4c0f      	ldr	r4, [pc, #60]	; (801b838 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801b7fa:	7823      	ldrb	r3, [r4, #0]
 801b7fc:	f3bf 8f5b 	dmb	ish
 801b800:	07db      	lsls	r3, r3, #31
 801b802:	d40b      	bmi.n	801b81c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801b804:	4620      	mov	r0, r4
 801b806:	f009 f8ca 	bl	802499e <__cxa_guard_acquire>
 801b80a:	b138      	cbz	r0, 801b81c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801b80c:	4620      	mov	r0, r4
 801b80e:	f009 f8d2 	bl	80249b6 <__cxa_guard_release>
 801b812:	4a06      	ldr	r2, [pc, #24]	; (801b82c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801b814:	4909      	ldr	r1, [pc, #36]	; (801b83c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801b816:	480a      	ldr	r0, [pc, #40]	; (801b840 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801b818:	f009 f8ba 	bl	8024990 <__aeabi_atexit>
 801b81c:	4b05      	ldr	r3, [pc, #20]	; (801b834 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801b81e:	612b      	str	r3, [r5, #16]
 801b820:	4b07      	ldr	r3, [pc, #28]	; (801b840 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801b822:	616b      	str	r3, [r5, #20]
 801b824:	bd38      	pop	{r3, r4, r5, pc}
 801b826:	bf00      	nop
 801b828:	200210c4 	.word	0x200210c4
 801b82c:	20000000 	.word	0x20000000
 801b830:	0801982d 	.word	0x0801982d
 801b834:	2000009c 	.word	0x2000009c
 801b838:	200210c8 	.word	0x200210c8
 801b83c:	0801982b 	.word	0x0801982b
 801b840:	200000a0 	.word	0x200000a0

0801b844 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801b844:	b538      	push	{r3, r4, r5, lr}
 801b846:	4c15      	ldr	r4, [pc, #84]	; (801b89c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801b848:	4605      	mov	r5, r0
 801b84a:	7823      	ldrb	r3, [r4, #0]
 801b84c:	f3bf 8f5b 	dmb	ish
 801b850:	07da      	lsls	r2, r3, #31
 801b852:	d40b      	bmi.n	801b86c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801b854:	4620      	mov	r0, r4
 801b856:	f009 f8a2 	bl	802499e <__cxa_guard_acquire>
 801b85a:	b138      	cbz	r0, 801b86c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801b85c:	4620      	mov	r0, r4
 801b85e:	f009 f8aa 	bl	80249b6 <__cxa_guard_release>
 801b862:	4a0f      	ldr	r2, [pc, #60]	; (801b8a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801b864:	490f      	ldr	r1, [pc, #60]	; (801b8a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801b866:	4810      	ldr	r0, [pc, #64]	; (801b8a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801b868:	f009 f892 	bl	8024990 <__aeabi_atexit>
 801b86c:	4c0f      	ldr	r4, [pc, #60]	; (801b8ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801b86e:	7823      	ldrb	r3, [r4, #0]
 801b870:	f3bf 8f5b 	dmb	ish
 801b874:	07db      	lsls	r3, r3, #31
 801b876:	d40b      	bmi.n	801b890 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801b878:	4620      	mov	r0, r4
 801b87a:	f009 f890 	bl	802499e <__cxa_guard_acquire>
 801b87e:	b138      	cbz	r0, 801b890 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801b880:	4620      	mov	r0, r4
 801b882:	f009 f898 	bl	80249b6 <__cxa_guard_release>
 801b886:	4a06      	ldr	r2, [pc, #24]	; (801b8a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801b888:	4909      	ldr	r1, [pc, #36]	; (801b8b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801b88a:	480a      	ldr	r0, [pc, #40]	; (801b8b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801b88c:	f009 f880 	bl	8024990 <__aeabi_atexit>
 801b890:	4b05      	ldr	r3, [pc, #20]	; (801b8a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801b892:	60ab      	str	r3, [r5, #8]
 801b894:	4b07      	ldr	r3, [pc, #28]	; (801b8b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801b896:	60eb      	str	r3, [r5, #12]
 801b898:	bd38      	pop	{r3, r4, r5, pc}
 801b89a:	bf00      	nop
 801b89c:	2002109c 	.word	0x2002109c
 801b8a0:	20000000 	.word	0x20000000
 801b8a4:	08019831 	.word	0x08019831
 801b8a8:	20000074 	.word	0x20000074
 801b8ac:	200210a0 	.word	0x200210a0
 801b8b0:	0801982f 	.word	0x0801982f
 801b8b4:	20000078 	.word	0x20000078

0801b8b8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801b8b8:	b510      	push	{r4, lr}
 801b8ba:	4604      	mov	r4, r0
 801b8bc:	f7ff ff88 	bl	801b7d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801b8c0:	4620      	mov	r0, r4
 801b8c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b8c6:	f7ff bfbd 	b.w	801b844 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801b8cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801b8cc:	b538      	push	{r3, r4, r5, lr}
 801b8ce:	4c15      	ldr	r4, [pc, #84]	; (801b924 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801b8d0:	4605      	mov	r5, r0
 801b8d2:	7823      	ldrb	r3, [r4, #0]
 801b8d4:	f3bf 8f5b 	dmb	ish
 801b8d8:	07da      	lsls	r2, r3, #31
 801b8da:	d40b      	bmi.n	801b8f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801b8dc:	4620      	mov	r0, r4
 801b8de:	f009 f85e 	bl	802499e <__cxa_guard_acquire>
 801b8e2:	b138      	cbz	r0, 801b8f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801b8e4:	4620      	mov	r0, r4
 801b8e6:	f009 f866 	bl	80249b6 <__cxa_guard_release>
 801b8ea:	4a0f      	ldr	r2, [pc, #60]	; (801b928 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801b8ec:	490f      	ldr	r1, [pc, #60]	; (801b92c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801b8ee:	4810      	ldr	r0, [pc, #64]	; (801b930 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801b8f0:	f009 f84e 	bl	8024990 <__aeabi_atexit>
 801b8f4:	4c0f      	ldr	r4, [pc, #60]	; (801b934 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801b8f6:	7823      	ldrb	r3, [r4, #0]
 801b8f8:	f3bf 8f5b 	dmb	ish
 801b8fc:	07db      	lsls	r3, r3, #31
 801b8fe:	d40b      	bmi.n	801b918 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801b900:	4620      	mov	r0, r4
 801b902:	f009 f84c 	bl	802499e <__cxa_guard_acquire>
 801b906:	b138      	cbz	r0, 801b918 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801b908:	4620      	mov	r0, r4
 801b90a:	f009 f854 	bl	80249b6 <__cxa_guard_release>
 801b90e:	4a06      	ldr	r2, [pc, #24]	; (801b928 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801b910:	4909      	ldr	r1, [pc, #36]	; (801b938 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801b912:	480a      	ldr	r0, [pc, #40]	; (801b93c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801b914:	f009 f83c 	bl	8024990 <__aeabi_atexit>
 801b918:	4b05      	ldr	r3, [pc, #20]	; (801b930 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801b91a:	622b      	str	r3, [r5, #32]
 801b91c:	4b07      	ldr	r3, [pc, #28]	; (801b93c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801b91e:	626b      	str	r3, [r5, #36]	; 0x24
 801b920:	bd38      	pop	{r3, r4, r5, pc}
 801b922:	bf00      	nop
 801b924:	200210cc 	.word	0x200210cc
 801b928:	20000000 	.word	0x20000000
 801b92c:	08019825 	.word	0x08019825
 801b930:	200000a4 	.word	0x200000a4
 801b934:	200210d0 	.word	0x200210d0
 801b938:	08019823 	.word	0x08019823
 801b93c:	200000a8 	.word	0x200000a8

0801b940 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801b940:	b538      	push	{r3, r4, r5, lr}
 801b942:	4c15      	ldr	r4, [pc, #84]	; (801b998 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801b944:	4605      	mov	r5, r0
 801b946:	7823      	ldrb	r3, [r4, #0]
 801b948:	f3bf 8f5b 	dmb	ish
 801b94c:	07da      	lsls	r2, r3, #31
 801b94e:	d40b      	bmi.n	801b968 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801b950:	4620      	mov	r0, r4
 801b952:	f009 f824 	bl	802499e <__cxa_guard_acquire>
 801b956:	b138      	cbz	r0, 801b968 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801b958:	4620      	mov	r0, r4
 801b95a:	f009 f82c 	bl	80249b6 <__cxa_guard_release>
 801b95e:	4a0f      	ldr	r2, [pc, #60]	; (801b99c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801b960:	490f      	ldr	r1, [pc, #60]	; (801b9a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801b962:	4810      	ldr	r0, [pc, #64]	; (801b9a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801b964:	f009 f814 	bl	8024990 <__aeabi_atexit>
 801b968:	4c0f      	ldr	r4, [pc, #60]	; (801b9a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801b96a:	7823      	ldrb	r3, [r4, #0]
 801b96c:	f3bf 8f5b 	dmb	ish
 801b970:	07db      	lsls	r3, r3, #31
 801b972:	d40b      	bmi.n	801b98c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801b974:	4620      	mov	r0, r4
 801b976:	f009 f812 	bl	802499e <__cxa_guard_acquire>
 801b97a:	b138      	cbz	r0, 801b98c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801b97c:	4620      	mov	r0, r4
 801b97e:	f009 f81a 	bl	80249b6 <__cxa_guard_release>
 801b982:	4a06      	ldr	r2, [pc, #24]	; (801b99c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801b984:	4909      	ldr	r1, [pc, #36]	; (801b9ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801b986:	480a      	ldr	r0, [pc, #40]	; (801b9b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801b988:	f009 f802 	bl	8024990 <__aeabi_atexit>
 801b98c:	4b05      	ldr	r3, [pc, #20]	; (801b9a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801b98e:	61ab      	str	r3, [r5, #24]
 801b990:	4b07      	ldr	r3, [pc, #28]	; (801b9b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801b992:	61eb      	str	r3, [r5, #28]
 801b994:	bd38      	pop	{r3, r4, r5, pc}
 801b996:	bf00      	nop
 801b998:	200210a4 	.word	0x200210a4
 801b99c:	20000000 	.word	0x20000000
 801b9a0:	08019829 	.word	0x08019829
 801b9a4:	2000007c 	.word	0x2000007c
 801b9a8:	200210a8 	.word	0x200210a8
 801b9ac:	08019827 	.word	0x08019827
 801b9b0:	20000080 	.word	0x20000080

0801b9b4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801b9b4:	b510      	push	{r4, lr}
 801b9b6:	4604      	mov	r4, r0
 801b9b8:	f7ff ff88 	bl	801b8cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801b9bc:	4620      	mov	r0, r4
 801b9be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b9c2:	f7ff bfbd 	b.w	801b940 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801b9c8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801b9c8:	b538      	push	{r3, r4, r5, lr}
 801b9ca:	4c15      	ldr	r4, [pc, #84]	; (801ba20 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801b9cc:	4605      	mov	r5, r0
 801b9ce:	7823      	ldrb	r3, [r4, #0]
 801b9d0:	f3bf 8f5b 	dmb	ish
 801b9d4:	07da      	lsls	r2, r3, #31
 801b9d6:	d40b      	bmi.n	801b9f0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801b9d8:	4620      	mov	r0, r4
 801b9da:	f008 ffe0 	bl	802499e <__cxa_guard_acquire>
 801b9de:	b138      	cbz	r0, 801b9f0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801b9e0:	4620      	mov	r0, r4
 801b9e2:	f008 ffe8 	bl	80249b6 <__cxa_guard_release>
 801b9e6:	4a0f      	ldr	r2, [pc, #60]	; (801ba24 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801b9e8:	490f      	ldr	r1, [pc, #60]	; (801ba28 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801b9ea:	4810      	ldr	r0, [pc, #64]	; (801ba2c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801b9ec:	f008 ffd0 	bl	8024990 <__aeabi_atexit>
 801b9f0:	4c0f      	ldr	r4, [pc, #60]	; (801ba30 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801b9f2:	7823      	ldrb	r3, [r4, #0]
 801b9f4:	f3bf 8f5b 	dmb	ish
 801b9f8:	07db      	lsls	r3, r3, #31
 801b9fa:	d40b      	bmi.n	801ba14 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801b9fc:	4620      	mov	r0, r4
 801b9fe:	f008 ffce 	bl	802499e <__cxa_guard_acquire>
 801ba02:	b138      	cbz	r0, 801ba14 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801ba04:	4620      	mov	r0, r4
 801ba06:	f008 ffd6 	bl	80249b6 <__cxa_guard_release>
 801ba0a:	4a06      	ldr	r2, [pc, #24]	; (801ba24 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801ba0c:	4909      	ldr	r1, [pc, #36]	; (801ba34 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801ba0e:	480a      	ldr	r0, [pc, #40]	; (801ba38 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801ba10:	f008 ffbe 	bl	8024990 <__aeabi_atexit>
 801ba14:	4b05      	ldr	r3, [pc, #20]	; (801ba2c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801ba16:	632b      	str	r3, [r5, #48]	; 0x30
 801ba18:	4b07      	ldr	r3, [pc, #28]	; (801ba38 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801ba1a:	636b      	str	r3, [r5, #52]	; 0x34
 801ba1c:	bd38      	pop	{r3, r4, r5, pc}
 801ba1e:	bf00      	nop
 801ba20:	200210dc 	.word	0x200210dc
 801ba24:	20000000 	.word	0x20000000
 801ba28:	0801981d 	.word	0x0801981d
 801ba2c:	200000b4 	.word	0x200000b4
 801ba30:	200210e0 	.word	0x200210e0
 801ba34:	0801981b 	.word	0x0801981b
 801ba38:	200000b8 	.word	0x200000b8

0801ba3c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801ba3c:	b538      	push	{r3, r4, r5, lr}
 801ba3e:	4c15      	ldr	r4, [pc, #84]	; (801ba94 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801ba40:	4605      	mov	r5, r0
 801ba42:	7823      	ldrb	r3, [r4, #0]
 801ba44:	f3bf 8f5b 	dmb	ish
 801ba48:	07da      	lsls	r2, r3, #31
 801ba4a:	d40b      	bmi.n	801ba64 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801ba4c:	4620      	mov	r0, r4
 801ba4e:	f008 ffa6 	bl	802499e <__cxa_guard_acquire>
 801ba52:	b138      	cbz	r0, 801ba64 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801ba54:	4620      	mov	r0, r4
 801ba56:	f008 ffae 	bl	80249b6 <__cxa_guard_release>
 801ba5a:	4a0f      	ldr	r2, [pc, #60]	; (801ba98 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801ba5c:	490f      	ldr	r1, [pc, #60]	; (801ba9c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801ba5e:	4810      	ldr	r0, [pc, #64]	; (801baa0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801ba60:	f008 ff96 	bl	8024990 <__aeabi_atexit>
 801ba64:	4c0f      	ldr	r4, [pc, #60]	; (801baa4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801ba66:	7823      	ldrb	r3, [r4, #0]
 801ba68:	f3bf 8f5b 	dmb	ish
 801ba6c:	07db      	lsls	r3, r3, #31
 801ba6e:	d40b      	bmi.n	801ba88 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801ba70:	4620      	mov	r0, r4
 801ba72:	f008 ff94 	bl	802499e <__cxa_guard_acquire>
 801ba76:	b138      	cbz	r0, 801ba88 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801ba78:	4620      	mov	r0, r4
 801ba7a:	f008 ff9c 	bl	80249b6 <__cxa_guard_release>
 801ba7e:	4a06      	ldr	r2, [pc, #24]	; (801ba98 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801ba80:	4909      	ldr	r1, [pc, #36]	; (801baa8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801ba82:	480a      	ldr	r0, [pc, #40]	; (801baac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801ba84:	f008 ff84 	bl	8024990 <__aeabi_atexit>
 801ba88:	4b05      	ldr	r3, [pc, #20]	; (801baa0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801ba8a:	62ab      	str	r3, [r5, #40]	; 0x28
 801ba8c:	4b07      	ldr	r3, [pc, #28]	; (801baac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801ba8e:	62eb      	str	r3, [r5, #44]	; 0x2c
 801ba90:	bd38      	pop	{r3, r4, r5, pc}
 801ba92:	bf00      	nop
 801ba94:	200210ac 	.word	0x200210ac
 801ba98:	20000000 	.word	0x20000000
 801ba9c:	08019821 	.word	0x08019821
 801baa0:	20000084 	.word	0x20000084
 801baa4:	200210b0 	.word	0x200210b0
 801baa8:	0801981f 	.word	0x0801981f
 801baac:	20000088 	.word	0x20000088

0801bab0 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801bab0:	b510      	push	{r4, lr}
 801bab2:	4604      	mov	r4, r0
 801bab4:	f7ff ff88 	bl	801b9c8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801bab8:	4620      	mov	r0, r4
 801baba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801babe:	f7ff bfbd 	b.w	801ba3c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801bac4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801bac4:	b538      	push	{r3, r4, r5, lr}
 801bac6:	4c15      	ldr	r4, [pc, #84]	; (801bb1c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801bac8:	4605      	mov	r5, r0
 801baca:	7823      	ldrb	r3, [r4, #0]
 801bacc:	f3bf 8f5b 	dmb	ish
 801bad0:	07da      	lsls	r2, r3, #31
 801bad2:	d40b      	bmi.n	801baec <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801bad4:	4620      	mov	r0, r4
 801bad6:	f008 ff62 	bl	802499e <__cxa_guard_acquire>
 801bada:	b138      	cbz	r0, 801baec <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801badc:	4620      	mov	r0, r4
 801bade:	f008 ff6a 	bl	80249b6 <__cxa_guard_release>
 801bae2:	4a0f      	ldr	r2, [pc, #60]	; (801bb20 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801bae4:	490f      	ldr	r1, [pc, #60]	; (801bb24 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801bae6:	4810      	ldr	r0, [pc, #64]	; (801bb28 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801bae8:	f008 ff52 	bl	8024990 <__aeabi_atexit>
 801baec:	4c0f      	ldr	r4, [pc, #60]	; (801bb2c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801baee:	7823      	ldrb	r3, [r4, #0]
 801baf0:	f3bf 8f5b 	dmb	ish
 801baf4:	07db      	lsls	r3, r3, #31
 801baf6:	d40b      	bmi.n	801bb10 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801baf8:	4620      	mov	r0, r4
 801bafa:	f008 ff50 	bl	802499e <__cxa_guard_acquire>
 801bafe:	b138      	cbz	r0, 801bb10 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801bb00:	4620      	mov	r0, r4
 801bb02:	f008 ff58 	bl	80249b6 <__cxa_guard_release>
 801bb06:	4a06      	ldr	r2, [pc, #24]	; (801bb20 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801bb08:	4909      	ldr	r1, [pc, #36]	; (801bb30 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801bb0a:	480a      	ldr	r0, [pc, #40]	; (801bb34 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801bb0c:	f008 ff40 	bl	8024990 <__aeabi_atexit>
 801bb10:	4b05      	ldr	r3, [pc, #20]	; (801bb28 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801bb12:	652b      	str	r3, [r5, #80]	; 0x50
 801bb14:	4b07      	ldr	r3, [pc, #28]	; (801bb34 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801bb16:	656b      	str	r3, [r5, #84]	; 0x54
 801bb18:	bd38      	pop	{r3, r4, r5, pc}
 801bb1a:	bf00      	nop
 801bb1c:	200210e4 	.word	0x200210e4
 801bb20:	20000000 	.word	0x20000000
 801bb24:	0801980d 	.word	0x0801980d
 801bb28:	200000bc 	.word	0x200000bc
 801bb2c:	200210e8 	.word	0x200210e8
 801bb30:	0801980b 	.word	0x0801980b
 801bb34:	200000c0 	.word	0x200000c0

0801bb38 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801bb38:	b538      	push	{r3, r4, r5, lr}
 801bb3a:	4c15      	ldr	r4, [pc, #84]	; (801bb90 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801bb3c:	4605      	mov	r5, r0
 801bb3e:	7823      	ldrb	r3, [r4, #0]
 801bb40:	f3bf 8f5b 	dmb	ish
 801bb44:	07da      	lsls	r2, r3, #31
 801bb46:	d40b      	bmi.n	801bb60 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801bb48:	4620      	mov	r0, r4
 801bb4a:	f008 ff28 	bl	802499e <__cxa_guard_acquire>
 801bb4e:	b138      	cbz	r0, 801bb60 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801bb50:	4620      	mov	r0, r4
 801bb52:	f008 ff30 	bl	80249b6 <__cxa_guard_release>
 801bb56:	4a0f      	ldr	r2, [pc, #60]	; (801bb94 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801bb58:	490f      	ldr	r1, [pc, #60]	; (801bb98 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801bb5a:	4810      	ldr	r0, [pc, #64]	; (801bb9c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801bb5c:	f008 ff18 	bl	8024990 <__aeabi_atexit>
 801bb60:	4c0f      	ldr	r4, [pc, #60]	; (801bba0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801bb62:	7823      	ldrb	r3, [r4, #0]
 801bb64:	f3bf 8f5b 	dmb	ish
 801bb68:	07db      	lsls	r3, r3, #31
 801bb6a:	d40b      	bmi.n	801bb84 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801bb6c:	4620      	mov	r0, r4
 801bb6e:	f008 ff16 	bl	802499e <__cxa_guard_acquire>
 801bb72:	b138      	cbz	r0, 801bb84 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801bb74:	4620      	mov	r0, r4
 801bb76:	f008 ff1e 	bl	80249b6 <__cxa_guard_release>
 801bb7a:	4a06      	ldr	r2, [pc, #24]	; (801bb94 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801bb7c:	4909      	ldr	r1, [pc, #36]	; (801bba4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801bb7e:	480a      	ldr	r0, [pc, #40]	; (801bba8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801bb80:	f008 ff06 	bl	8024990 <__aeabi_atexit>
 801bb84:	4b05      	ldr	r3, [pc, #20]	; (801bb9c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801bb86:	64ab      	str	r3, [r5, #72]	; 0x48
 801bb88:	4b07      	ldr	r3, [pc, #28]	; (801bba8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801bb8a:	64eb      	str	r3, [r5, #76]	; 0x4c
 801bb8c:	bd38      	pop	{r3, r4, r5, pc}
 801bb8e:	bf00      	nop
 801bb90:	200210ec 	.word	0x200210ec
 801bb94:	20000000 	.word	0x20000000
 801bb98:	08019811 	.word	0x08019811
 801bb9c:	200000c4 	.word	0x200000c4
 801bba0:	200210f0 	.word	0x200210f0
 801bba4:	0801980f 	.word	0x0801980f
 801bba8:	200000c8 	.word	0x200000c8

0801bbac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801bbac:	b538      	push	{r3, r4, r5, lr}
 801bbae:	4c15      	ldr	r4, [pc, #84]	; (801bc04 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801bbb0:	4605      	mov	r5, r0
 801bbb2:	7823      	ldrb	r3, [r4, #0]
 801bbb4:	f3bf 8f5b 	dmb	ish
 801bbb8:	07da      	lsls	r2, r3, #31
 801bbba:	d40b      	bmi.n	801bbd4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801bbbc:	4620      	mov	r0, r4
 801bbbe:	f008 feee 	bl	802499e <__cxa_guard_acquire>
 801bbc2:	b138      	cbz	r0, 801bbd4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801bbc4:	4620      	mov	r0, r4
 801bbc6:	f008 fef6 	bl	80249b6 <__cxa_guard_release>
 801bbca:	4a0f      	ldr	r2, [pc, #60]	; (801bc08 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801bbcc:	490f      	ldr	r1, [pc, #60]	; (801bc0c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801bbce:	4810      	ldr	r0, [pc, #64]	; (801bc10 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801bbd0:	f008 fede 	bl	8024990 <__aeabi_atexit>
 801bbd4:	4c0f      	ldr	r4, [pc, #60]	; (801bc14 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801bbd6:	7823      	ldrb	r3, [r4, #0]
 801bbd8:	f3bf 8f5b 	dmb	ish
 801bbdc:	07db      	lsls	r3, r3, #31
 801bbde:	d40b      	bmi.n	801bbf8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801bbe0:	4620      	mov	r0, r4
 801bbe2:	f008 fedc 	bl	802499e <__cxa_guard_acquire>
 801bbe6:	b138      	cbz	r0, 801bbf8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801bbe8:	4620      	mov	r0, r4
 801bbea:	f008 fee4 	bl	80249b6 <__cxa_guard_release>
 801bbee:	4a06      	ldr	r2, [pc, #24]	; (801bc08 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801bbf0:	4909      	ldr	r1, [pc, #36]	; (801bc18 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801bbf2:	480a      	ldr	r0, [pc, #40]	; (801bc1c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801bbf4:	f008 fecc 	bl	8024990 <__aeabi_atexit>
 801bbf8:	4b05      	ldr	r3, [pc, #20]	; (801bc10 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801bbfa:	642b      	str	r3, [r5, #64]	; 0x40
 801bbfc:	4b07      	ldr	r3, [pc, #28]	; (801bc1c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801bbfe:	646b      	str	r3, [r5, #68]	; 0x44
 801bc00:	bd38      	pop	{r3, r4, r5, pc}
 801bc02:	bf00      	nop
 801bc04:	200210b4 	.word	0x200210b4
 801bc08:	20000000 	.word	0x20000000
 801bc0c:	08019815 	.word	0x08019815
 801bc10:	2000008c 	.word	0x2000008c
 801bc14:	200210b8 	.word	0x200210b8
 801bc18:	08019813 	.word	0x08019813
 801bc1c:	20000090 	.word	0x20000090

0801bc20 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801bc20:	b538      	push	{r3, r4, r5, lr}
 801bc22:	4c15      	ldr	r4, [pc, #84]	; (801bc78 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801bc24:	4605      	mov	r5, r0
 801bc26:	7823      	ldrb	r3, [r4, #0]
 801bc28:	f3bf 8f5b 	dmb	ish
 801bc2c:	07da      	lsls	r2, r3, #31
 801bc2e:	d40b      	bmi.n	801bc48 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801bc30:	4620      	mov	r0, r4
 801bc32:	f008 feb4 	bl	802499e <__cxa_guard_acquire>
 801bc36:	b138      	cbz	r0, 801bc48 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801bc38:	4620      	mov	r0, r4
 801bc3a:	f008 febc 	bl	80249b6 <__cxa_guard_release>
 801bc3e:	4a0f      	ldr	r2, [pc, #60]	; (801bc7c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801bc40:	490f      	ldr	r1, [pc, #60]	; (801bc80 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801bc42:	4810      	ldr	r0, [pc, #64]	; (801bc84 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801bc44:	f008 fea4 	bl	8024990 <__aeabi_atexit>
 801bc48:	4c0f      	ldr	r4, [pc, #60]	; (801bc88 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801bc4a:	7823      	ldrb	r3, [r4, #0]
 801bc4c:	f3bf 8f5b 	dmb	ish
 801bc50:	07db      	lsls	r3, r3, #31
 801bc52:	d40b      	bmi.n	801bc6c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801bc54:	4620      	mov	r0, r4
 801bc56:	f008 fea2 	bl	802499e <__cxa_guard_acquire>
 801bc5a:	b138      	cbz	r0, 801bc6c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801bc5c:	4620      	mov	r0, r4
 801bc5e:	f008 feaa 	bl	80249b6 <__cxa_guard_release>
 801bc62:	4a06      	ldr	r2, [pc, #24]	; (801bc7c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801bc64:	4909      	ldr	r1, [pc, #36]	; (801bc8c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801bc66:	480a      	ldr	r0, [pc, #40]	; (801bc90 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801bc68:	f008 fe92 	bl	8024990 <__aeabi_atexit>
 801bc6c:	4b05      	ldr	r3, [pc, #20]	; (801bc84 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801bc6e:	63ab      	str	r3, [r5, #56]	; 0x38
 801bc70:	4b07      	ldr	r3, [pc, #28]	; (801bc90 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801bc72:	63eb      	str	r3, [r5, #60]	; 0x3c
 801bc74:	bd38      	pop	{r3, r4, r5, pc}
 801bc76:	bf00      	nop
 801bc78:	200210d4 	.word	0x200210d4
 801bc7c:	20000000 	.word	0x20000000
 801bc80:	08019819 	.word	0x08019819
 801bc84:	200000ac 	.word	0x200000ac
 801bc88:	200210d8 	.word	0x200210d8
 801bc8c:	08019817 	.word	0x08019817
 801bc90:	200000b0 	.word	0x200000b0

0801bc94 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801bc94:	b510      	push	{r4, lr}
 801bc96:	4604      	mov	r4, r0
 801bc98:	f7ff ff14 	bl	801bac4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801bc9c:	4620      	mov	r0, r4
 801bc9e:	f7ff ff85 	bl	801bbac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801bca2:	4620      	mov	r0, r4
 801bca4:	f7ff ff48 	bl	801bb38 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801bca8:	4620      	mov	r0, r4
 801bcaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bcae:	f7ff bfb7 	b.w	801bc20 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801bcb4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801bcb4:	b538      	push	{r3, r4, r5, lr}
 801bcb6:	4c15      	ldr	r4, [pc, #84]	; (801bd0c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801bcb8:	4605      	mov	r5, r0
 801bcba:	7823      	ldrb	r3, [r4, #0]
 801bcbc:	f3bf 8f5b 	dmb	ish
 801bcc0:	07da      	lsls	r2, r3, #31
 801bcc2:	d40b      	bmi.n	801bcdc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801bcc4:	4620      	mov	r0, r4
 801bcc6:	f008 fe6a 	bl	802499e <__cxa_guard_acquire>
 801bcca:	b138      	cbz	r0, 801bcdc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801bccc:	4620      	mov	r0, r4
 801bcce:	f008 fe72 	bl	80249b6 <__cxa_guard_release>
 801bcd2:	4a0f      	ldr	r2, [pc, #60]	; (801bd10 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801bcd4:	490f      	ldr	r1, [pc, #60]	; (801bd14 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801bcd6:	4810      	ldr	r0, [pc, #64]	; (801bd18 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801bcd8:	f008 fe5a 	bl	8024990 <__aeabi_atexit>
 801bcdc:	4c0f      	ldr	r4, [pc, #60]	; (801bd1c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801bcde:	7823      	ldrb	r3, [r4, #0]
 801bce0:	f3bf 8f5b 	dmb	ish
 801bce4:	07db      	lsls	r3, r3, #31
 801bce6:	d40b      	bmi.n	801bd00 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801bce8:	4620      	mov	r0, r4
 801bcea:	f008 fe58 	bl	802499e <__cxa_guard_acquire>
 801bcee:	b138      	cbz	r0, 801bd00 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801bcf0:	4620      	mov	r0, r4
 801bcf2:	f008 fe60 	bl	80249b6 <__cxa_guard_release>
 801bcf6:	4a06      	ldr	r2, [pc, #24]	; (801bd10 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801bcf8:	4909      	ldr	r1, [pc, #36]	; (801bd20 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801bcfa:	480a      	ldr	r0, [pc, #40]	; (801bd24 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801bcfc:	f008 fe48 	bl	8024990 <__aeabi_atexit>
 801bd00:	4b05      	ldr	r3, [pc, #20]	; (801bd18 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801bd02:	662b      	str	r3, [r5, #96]	; 0x60
 801bd04:	4b07      	ldr	r3, [pc, #28]	; (801bd24 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801bd06:	666b      	str	r3, [r5, #100]	; 0x64
 801bd08:	bd38      	pop	{r3, r4, r5, pc}
 801bd0a:	bf00      	nop
 801bd0c:	200210bc 	.word	0x200210bc
 801bd10:	20000000 	.word	0x20000000
 801bd14:	08019805 	.word	0x08019805
 801bd18:	20000094 	.word	0x20000094
 801bd1c:	200210c0 	.word	0x200210c0
 801bd20:	08019803 	.word	0x08019803
 801bd24:	20000098 	.word	0x20000098

0801bd28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801bd28:	b538      	push	{r3, r4, r5, lr}
 801bd2a:	4c15      	ldr	r4, [pc, #84]	; (801bd80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801bd2c:	4605      	mov	r5, r0
 801bd2e:	7823      	ldrb	r3, [r4, #0]
 801bd30:	f3bf 8f5b 	dmb	ish
 801bd34:	07da      	lsls	r2, r3, #31
 801bd36:	d40b      	bmi.n	801bd50 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801bd38:	4620      	mov	r0, r4
 801bd3a:	f008 fe30 	bl	802499e <__cxa_guard_acquire>
 801bd3e:	b138      	cbz	r0, 801bd50 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801bd40:	4620      	mov	r0, r4
 801bd42:	f008 fe38 	bl	80249b6 <__cxa_guard_release>
 801bd46:	4a0f      	ldr	r2, [pc, #60]	; (801bd84 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801bd48:	490f      	ldr	r1, [pc, #60]	; (801bd88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801bd4a:	4810      	ldr	r0, [pc, #64]	; (801bd8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801bd4c:	f008 fe20 	bl	8024990 <__aeabi_atexit>
 801bd50:	4c0f      	ldr	r4, [pc, #60]	; (801bd90 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801bd52:	7823      	ldrb	r3, [r4, #0]
 801bd54:	f3bf 8f5b 	dmb	ish
 801bd58:	07db      	lsls	r3, r3, #31
 801bd5a:	d40b      	bmi.n	801bd74 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801bd5c:	4620      	mov	r0, r4
 801bd5e:	f008 fe1e 	bl	802499e <__cxa_guard_acquire>
 801bd62:	b138      	cbz	r0, 801bd74 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801bd64:	4620      	mov	r0, r4
 801bd66:	f008 fe26 	bl	80249b6 <__cxa_guard_release>
 801bd6a:	4a06      	ldr	r2, [pc, #24]	; (801bd84 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801bd6c:	4909      	ldr	r1, [pc, #36]	; (801bd94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801bd6e:	480a      	ldr	r0, [pc, #40]	; (801bd98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801bd70:	f008 fe0e 	bl	8024990 <__aeabi_atexit>
 801bd74:	4b05      	ldr	r3, [pc, #20]	; (801bd8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801bd76:	65ab      	str	r3, [r5, #88]	; 0x58
 801bd78:	4b07      	ldr	r3, [pc, #28]	; (801bd98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801bd7a:	65eb      	str	r3, [r5, #92]	; 0x5c
 801bd7c:	bd38      	pop	{r3, r4, r5, pc}
 801bd7e:	bf00      	nop
 801bd80:	20021094 	.word	0x20021094
 801bd84:	20000000 	.word	0x20000000
 801bd88:	08019809 	.word	0x08019809
 801bd8c:	2000006c 	.word	0x2000006c
 801bd90:	20021098 	.word	0x20021098
 801bd94:	08019807 	.word	0x08019807
 801bd98:	20000070 	.word	0x20000070

0801bd9c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801bd9c:	b510      	push	{r4, lr}
 801bd9e:	4604      	mov	r4, r0
 801bda0:	f7ff ff88 	bl	801bcb4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801bda4:	4620      	mov	r0, r4
 801bda6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bdaa:	f7ff bfbd 	b.w	801bd28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801bdb0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801bdb0:	b538      	push	{r3, r4, r5, lr}
 801bdb2:	4c15      	ldr	r4, [pc, #84]	; (801be08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801bdb4:	4605      	mov	r5, r0
 801bdb6:	7823      	ldrb	r3, [r4, #0]
 801bdb8:	f3bf 8f5b 	dmb	ish
 801bdbc:	07da      	lsls	r2, r3, #31
 801bdbe:	d40b      	bmi.n	801bdd8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801bdc0:	4620      	mov	r0, r4
 801bdc2:	f008 fdec 	bl	802499e <__cxa_guard_acquire>
 801bdc6:	b138      	cbz	r0, 801bdd8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801bdc8:	4620      	mov	r0, r4
 801bdca:	f008 fdf4 	bl	80249b6 <__cxa_guard_release>
 801bdce:	4a0f      	ldr	r2, [pc, #60]	; (801be0c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801bdd0:	490f      	ldr	r1, [pc, #60]	; (801be10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801bdd2:	4810      	ldr	r0, [pc, #64]	; (801be14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801bdd4:	f008 fddc 	bl	8024990 <__aeabi_atexit>
 801bdd8:	4c0f      	ldr	r4, [pc, #60]	; (801be18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801bdda:	7823      	ldrb	r3, [r4, #0]
 801bddc:	f3bf 8f5b 	dmb	ish
 801bde0:	07db      	lsls	r3, r3, #31
 801bde2:	d40b      	bmi.n	801bdfc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801bde4:	4620      	mov	r0, r4
 801bde6:	f008 fdda 	bl	802499e <__cxa_guard_acquire>
 801bdea:	b138      	cbz	r0, 801bdfc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801bdec:	4620      	mov	r0, r4
 801bdee:	f008 fde2 	bl	80249b6 <__cxa_guard_release>
 801bdf2:	4a06      	ldr	r2, [pc, #24]	; (801be0c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801bdf4:	4909      	ldr	r1, [pc, #36]	; (801be1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801bdf6:	480a      	ldr	r0, [pc, #40]	; (801be20 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801bdf8:	f008 fdca 	bl	8024990 <__aeabi_atexit>
 801bdfc:	4b05      	ldr	r3, [pc, #20]	; (801be14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801bdfe:	672b      	str	r3, [r5, #112]	; 0x70
 801be00:	4b07      	ldr	r3, [pc, #28]	; (801be20 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801be02:	676b      	str	r3, [r5, #116]	; 0x74
 801be04:	bd38      	pop	{r3, r4, r5, pc}
 801be06:	bf00      	nop
 801be08:	2002108c 	.word	0x2002108c
 801be0c:	20000000 	.word	0x20000000
 801be10:	080197fd 	.word	0x080197fd
 801be14:	20000064 	.word	0x20000064
 801be18:	20021090 	.word	0x20021090
 801be1c:	080197fb 	.word	0x080197fb
 801be20:	20000068 	.word	0x20000068

0801be24 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801be24:	b538      	push	{r3, r4, r5, lr}
 801be26:	4c15      	ldr	r4, [pc, #84]	; (801be7c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801be28:	4605      	mov	r5, r0
 801be2a:	7823      	ldrb	r3, [r4, #0]
 801be2c:	f3bf 8f5b 	dmb	ish
 801be30:	07da      	lsls	r2, r3, #31
 801be32:	d40b      	bmi.n	801be4c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801be34:	4620      	mov	r0, r4
 801be36:	f008 fdb2 	bl	802499e <__cxa_guard_acquire>
 801be3a:	b138      	cbz	r0, 801be4c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801be3c:	4620      	mov	r0, r4
 801be3e:	f008 fdba 	bl	80249b6 <__cxa_guard_release>
 801be42:	4a0f      	ldr	r2, [pc, #60]	; (801be80 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801be44:	490f      	ldr	r1, [pc, #60]	; (801be84 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801be46:	4810      	ldr	r0, [pc, #64]	; (801be88 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801be48:	f008 fda2 	bl	8024990 <__aeabi_atexit>
 801be4c:	4c0f      	ldr	r4, [pc, #60]	; (801be8c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801be4e:	7823      	ldrb	r3, [r4, #0]
 801be50:	f3bf 8f5b 	dmb	ish
 801be54:	07db      	lsls	r3, r3, #31
 801be56:	d40b      	bmi.n	801be70 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801be58:	4620      	mov	r0, r4
 801be5a:	f008 fda0 	bl	802499e <__cxa_guard_acquire>
 801be5e:	b138      	cbz	r0, 801be70 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801be60:	4620      	mov	r0, r4
 801be62:	f008 fda8 	bl	80249b6 <__cxa_guard_release>
 801be66:	4a06      	ldr	r2, [pc, #24]	; (801be80 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801be68:	4909      	ldr	r1, [pc, #36]	; (801be90 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801be6a:	480a      	ldr	r0, [pc, #40]	; (801be94 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801be6c:	f008 fd90 	bl	8024990 <__aeabi_atexit>
 801be70:	4b05      	ldr	r3, [pc, #20]	; (801be88 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801be72:	66ab      	str	r3, [r5, #104]	; 0x68
 801be74:	4b07      	ldr	r3, [pc, #28]	; (801be94 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801be76:	66eb      	str	r3, [r5, #108]	; 0x6c
 801be78:	bd38      	pop	{r3, r4, r5, pc}
 801be7a:	bf00      	nop
 801be7c:	20021084 	.word	0x20021084
 801be80:	20000000 	.word	0x20000000
 801be84:	08019801 	.word	0x08019801
 801be88:	2000005c 	.word	0x2000005c
 801be8c:	20021088 	.word	0x20021088
 801be90:	080197ff 	.word	0x080197ff
 801be94:	20000060 	.word	0x20000060

0801be98 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801be98:	b510      	push	{r4, lr}
 801be9a:	4604      	mov	r4, r0
 801be9c:	f7ff ff88 	bl	801bdb0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801bea0:	4620      	mov	r0, r4
 801bea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bea6:	f7ff bfbd 	b.w	801be24 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801beaa <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801beaa:	b510      	push	{r4, lr}
 801beac:	4604      	mov	r4, r0
 801beae:	f7ff fff3 	bl	801be98 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801beb2:	4620      	mov	r0, r4
 801beb4:	f7ff ff72 	bl	801bd9c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801beb8:	4620      	mov	r0, r4
 801beba:	f7ff fdf9 	bl	801bab0 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801bebe:	4620      	mov	r0, r4
 801bec0:	f7ff fcfa 	bl	801b8b8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801bec4:	4620      	mov	r0, r4
 801bec6:	f7ff fd75 	bl	801b9b4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801beca:	4620      	mov	r0, r4
 801becc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bed0:	f7ff bee0 	b.w	801bc94 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801bed4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801bed4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bed8:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 801bedc:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801bee0:	f1be 0f00 	cmp.w	lr, #0
 801bee4:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801bee8:	fb0e 4708 	mla	r7, lr, r8, r4
 801beec:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801bef0:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 801bef4:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 801bef8:	eb02 0a07 	add.w	sl, r2, r7
 801befc:	8808      	ldrh	r0, [r1, #0]
 801befe:	db37      	blt.n	801bf70 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 801bf00:	45f3      	cmp	fp, lr
 801bf02:	dd35      	ble.n	801bf70 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 801bf04:	2c00      	cmp	r4, #0
 801bf06:	db31      	blt.n	801bf6c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 801bf08:	45a0      	cmp	r8, r4
 801bf0a:	dd2f      	ble.n	801bf6c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 801bf0c:	5dd2      	ldrb	r2, [r2, r7]
 801bf0e:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 801bf12:	1c62      	adds	r2, r4, #1
 801bf14:	d42f      	bmi.n	801bf76 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801bf16:	4590      	cmp	r8, r2
 801bf18:	dd2d      	ble.n	801bf76 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801bf1a:	b366      	cbz	r6, 801bf76 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801bf1c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801bf20:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801bf24:	f11e 0e01 	adds.w	lr, lr, #1
 801bf28:	d429      	bmi.n	801bf7e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 801bf2a:	45f3      	cmp	fp, lr
 801bf2c:	dd27      	ble.n	801bf7e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 801bf2e:	f1bc 0f00 	cmp.w	ip, #0
 801bf32:	f000 80a1 	beq.w	801c078 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a4>
 801bf36:	2c00      	cmp	r4, #0
 801bf38:	db1f      	blt.n	801bf7a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801bf3a:	45a0      	cmp	r8, r4
 801bf3c:	dd1d      	ble.n	801bf7a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801bf3e:	f81a 2008 	ldrb.w	r2, [sl, r8]
 801bf42:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 801bf46:	3401      	adds	r4, #1
 801bf48:	d41c      	bmi.n	801bf84 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 801bf4a:	45a0      	cmp	r8, r4
 801bf4c:	dd1a      	ble.n	801bf84 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 801bf4e:	b1de      	cbz	r6, 801bf88 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 801bf50:	44d0      	add	r8, sl
 801bf52:	f898 2001 	ldrb.w	r2, [r8, #1]
 801bf56:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801bf5a:	2e0f      	cmp	r6, #15
 801bf5c:	d915      	bls.n	801bf8a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 801bf5e:	4b49      	ldr	r3, [pc, #292]	; (801c084 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 801bf60:	f240 11db 	movw	r1, #475	; 0x1db
 801bf64:	4a48      	ldr	r2, [pc, #288]	; (801c088 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 801bf66:	4849      	ldr	r0, [pc, #292]	; (801c08c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 801bf68:	f008 fd46 	bl	80249f8 <__assert_func>
 801bf6c:	4681      	mov	r9, r0
 801bf6e:	e7d0      	b.n	801bf12 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 801bf70:	4607      	mov	r7, r0
 801bf72:	4681      	mov	r9, r0
 801bf74:	e7d6      	b.n	801bf24 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801bf76:	4607      	mov	r7, r0
 801bf78:	e7d4      	b.n	801bf24 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801bf7a:	4686      	mov	lr, r0
 801bf7c:	e7e3      	b.n	801bf46 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 801bf7e:	4603      	mov	r3, r0
 801bf80:	4686      	mov	lr, r0
 801bf82:	e7ea      	b.n	801bf5a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 801bf84:	4603      	mov	r3, r0
 801bf86:	e7e8      	b.n	801bf5a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 801bf88:	4603      	mov	r3, r0
 801bf8a:	f1bc 0f0f 	cmp.w	ip, #15
 801bf8e:	d8e6      	bhi.n	801bf5e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 801bf90:	fb16 f80c 	smulbb	r8, r6, ip
 801bf94:	ea4f 4409 	mov.w	r4, r9, lsl #16
 801bf98:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801bf9c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801bfa0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801bfa4:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801bfa8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801bfac:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801bfb0:	ea44 0909 	orr.w	r9, r4, r9
 801bfb4:	f1cc 0410 	rsb	r4, ip, #16
 801bfb8:	041a      	lsls	r2, r3, #16
 801bfba:	ea4a 0707 	orr.w	r7, sl, r7
 801bfbe:	1ba4      	subs	r4, r4, r6
 801bfc0:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 801bfc4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801bfc8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801bfcc:	4377      	muls	r7, r6
 801bfce:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801bfd2:	4313      	orrs	r3, r2
 801bfd4:	ea4f 420e 	mov.w	r2, lr, lsl #16
 801bfd8:	fb04 7409 	mla	r4, r4, r9, r7
 801bfdc:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 801bfe0:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801bfe4:	b2af      	uxth	r7, r5
 801bfe6:	fb08 4303 	mla	r3, r8, r3, r4
 801bfea:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 801bfee:	43ed      	mvns	r5, r5
 801bff0:	10c6      	asrs	r6, r0, #3
 801bff2:	4322      	orrs	r2, r4
 801bff4:	b2ed      	uxtb	r5, r5
 801bff6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801bffa:	fb0c 3202 	mla	r2, ip, r2, r3
 801bffe:	fb16 f605 	smulbb	r6, r6, r5
 801c002:	0d53      	lsrs	r3, r2, #21
 801c004:	0952      	lsrs	r2, r2, #5
 801c006:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c00a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c00e:	431a      	orrs	r2, r3
 801c010:	b293      	uxth	r3, r2
 801c012:	1202      	asrs	r2, r0, #8
 801c014:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801c018:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801c01c:	00dc      	lsls	r4, r3, #3
 801c01e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c022:	fb12 f205 	smulbb	r2, r2, r5
 801c026:	b2e4      	uxtb	r4, r4
 801c028:	fb0c 2c07 	mla	ip, ip, r7, r2
 801c02c:	10da      	asrs	r2, r3, #3
 801c02e:	00c3      	lsls	r3, r0, #3
 801c030:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801c034:	fa1f fc8c 	uxth.w	ip, ip
 801c038:	b2db      	uxtb	r3, r3
 801c03a:	fb02 6207 	mla	r2, r2, r7, r6
 801c03e:	fb13 f305 	smulbb	r3, r3, r5
 801c042:	b296      	uxth	r6, r2
 801c044:	fb04 3307 	mla	r3, r4, r7, r3
 801c048:	b29a      	uxth	r2, r3
 801c04a:	f10c 0301 	add.w	r3, ip, #1
 801c04e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c052:	1c53      	adds	r3, r2, #1
 801c054:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c058:	1c72      	adds	r2, r6, #1
 801c05a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c05e:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 801c062:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801c066:	0952      	lsrs	r2, r2, #5
 801c068:	ea43 030c 	orr.w	r3, r3, ip
 801c06c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c070:	4313      	orrs	r3, r2
 801c072:	800b      	strh	r3, [r1, #0]
 801c074:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c078:	2e0f      	cmp	r6, #15
 801c07a:	f63f af70 	bhi.w	801bf5e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 801c07e:	4603      	mov	r3, r0
 801c080:	4686      	mov	lr, r0
 801c082:	e785      	b.n	801bf90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 801c084:	0802a0bb 	.word	0x0802a0bb
 801c088:	0802a693 	.word	0x0802a693
 801c08c:	0802a088 	.word	0x0802a088

0801c090 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c094:	ed2d 8b08 	vpush	{d8-d11}
 801c098:	b099      	sub	sp, #100	; 0x64
 801c09a:	eeb0 aa40 	vmov.f32	s20, s0
 801c09e:	eef0 9a60 	vmov.f32	s19, s1
 801c0a2:	9215      	str	r2, [sp, #84]	; 0x54
 801c0a4:	eeb0 9a41 	vmov.f32	s18, s2
 801c0a8:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801c0aa:	eeb0 8a62 	vmov.f32	s16, s5
 801c0ae:	9309      	str	r3, [sp, #36]	; 0x24
 801c0b0:	eef0 8a43 	vmov.f32	s17, s6
 801c0b4:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 801c0b8:	eef0 ba44 	vmov.f32	s23, s8
 801c0bc:	9016      	str	r0, [sp, #88]	; 0x58
 801c0be:	eeb0 ba64 	vmov.f32	s22, s9
 801c0c2:	930d      	str	r3, [sp, #52]	; 0x34
 801c0c4:	eef0 aa45 	vmov.f32	s21, s10
 801c0c8:	6850      	ldr	r0, [r2, #4]
 801c0ca:	910c      	str	r1, [sp, #48]	; 0x30
 801c0cc:	6812      	ldr	r2, [r2, #0]
 801c0ce:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801c0d2:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 801c0d6:	fb00 1303 	mla	r3, r0, r3, r1
 801c0da:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801c0de:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c0e0:	681b      	ldr	r3, [r3, #0]
 801c0e2:	930b      	str	r3, [sp, #44]	; 0x2c
 801c0e4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c0e6:	685e      	ldr	r6, [r3, #4]
 801c0e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c0ea:	3604      	adds	r6, #4
 801c0ec:	43db      	mvns	r3, r3
 801c0ee:	b2db      	uxtb	r3, r3
 801c0f0:	930a      	str	r3, [sp, #40]	; 0x28
 801c0f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	dc03      	bgt.n	801c100 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c0f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c0fa:	2b00      	cmp	r3, #0
 801c0fc:	f340 8225 	ble.w	801c54a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 801c100:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c102:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c106:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c10a:	1e48      	subs	r0, r1, #1
 801c10c:	1e57      	subs	r7, r2, #1
 801c10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c110:	2b00      	cmp	r3, #0
 801c112:	f340 80e3 	ble.w	801c2dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 801c116:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801c11a:	ea4f 4325 	mov.w	r3, r5, asr #16
 801c11e:	d406      	bmi.n	801c12e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c120:	4584      	cmp	ip, r0
 801c122:	da04      	bge.n	801c12e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c124:	2b00      	cmp	r3, #0
 801c126:	db02      	blt.n	801c12e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c128:	42bb      	cmp	r3, r7
 801c12a:	f2c0 80d8 	blt.w	801c2de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 801c12e:	f11c 0c01 	adds.w	ip, ip, #1
 801c132:	f100 80c9 	bmi.w	801c2c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801c136:	4561      	cmp	r1, ip
 801c138:	f2c0 80c6 	blt.w	801c2c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801c13c:	3301      	adds	r3, #1
 801c13e:	f100 80c3 	bmi.w	801c2c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801c142:	429a      	cmp	r2, r3
 801c144:	f2c0 80c0 	blt.w	801c2c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801c148:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801c14c:	4647      	mov	r7, r8
 801c14e:	f1bb 0f00 	cmp.w	fp, #0
 801c152:	f340 80e3 	ble.w	801c31c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801c156:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801c158:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801c15c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c15e:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801c162:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801c166:	ea5f 422a 	movs.w	r2, sl, asr #16
 801c16a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c16e:	689b      	ldr	r3, [r3, #8]
 801c170:	f100 8121 	bmi.w	801c3b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801c174:	f103 39ff 	add.w	r9, r3, #4294967295
 801c178:	454a      	cmp	r2, r9
 801c17a:	f280 811c 	bge.w	801c3b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801c17e:	f1bc 0f00 	cmp.w	ip, #0
 801c182:	f2c0 8118 	blt.w	801c3b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801c186:	f10e 39ff 	add.w	r9, lr, #4294967295
 801c18a:	45cc      	cmp	ip, r9
 801c18c:	f280 8113 	bge.w	801c3b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801c190:	b21b      	sxth	r3, r3
 801c192:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c194:	fb0c 2203 	mla	r2, ip, r3, r2
 801c198:	eb04 0902 	add.w	r9, r4, r2
 801c19c:	5ca2      	ldrb	r2, [r4, r2]
 801c19e:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801c1a2:	2800      	cmp	r0, #0
 801c1a4:	f000 80fe 	beq.w	801c3a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801c1a8:	f899 2001 	ldrb.w	r2, [r9, #1]
 801c1ac:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801c1b0:	9211      	str	r2, [sp, #68]	; 0x44
 801c1b2:	b151      	cbz	r1, 801c1ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c1b4:	eb09 0203 	add.w	r2, r9, r3
 801c1b8:	f819 3003 	ldrb.w	r3, [r9, r3]
 801c1bc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c1c0:	930f      	str	r3, [sp, #60]	; 0x3c
 801c1c2:	7853      	ldrb	r3, [r2, #1]
 801c1c4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c1c8:	9312      	str	r3, [sp, #72]	; 0x48
 801c1ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c1cc:	fb10 f201 	smulbb	r2, r0, r1
 801c1d0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c1d2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801c1d6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c1da:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801c1de:	10d2      	asrs	r2, r2, #3
 801c1e0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c1e4:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801c1e8:	ea4c 0c03 	orr.w	ip, ip, r3
 801c1ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c1ee:	041b      	lsls	r3, r3, #16
 801c1f0:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801c1f4:	4323      	orrs	r3, r4
 801c1f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c1f8:	4353      	muls	r3, r2
 801c1fa:	fb09 330c 	mla	r3, r9, ip, r3
 801c1fe:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801c202:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801c206:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c20a:	ea4c 0e0e 	orr.w	lr, ip, lr
 801c20e:	f1c1 0c10 	rsb	ip, r1, #16
 801c212:	ebac 0c00 	sub.w	ip, ip, r0
 801c216:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801c21a:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801c21e:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801c222:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c224:	0418      	lsls	r0, r3, #16
 801c226:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c22a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801c22e:	4318      	orrs	r0, r3
 801c230:	fb02 c200 	mla	r2, r2, r0, ip
 801c234:	8838      	ldrh	r0, [r7, #0]
 801c236:	0d53      	lsrs	r3, r2, #21
 801c238:	0952      	lsrs	r2, r2, #5
 801c23a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c23e:	1201      	asrs	r1, r0, #8
 801c240:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c244:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801c248:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801c24c:	00c0      	lsls	r0, r0, #3
 801c24e:	431a      	orrs	r2, r3
 801c250:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801c254:	fb11 f104 	smulbb	r1, r1, r4
 801c258:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801c25c:	b292      	uxth	r2, r2
 801c25e:	fb1e fe04 	smulbb	lr, lr, r4
 801c262:	b2c0      	uxtb	r0, r0
 801c264:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801c268:	fb10 f004 	smulbb	r0, r0, r4
 801c26c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c270:	fb0c 1c03 	mla	ip, ip, r3, r1
 801c274:	10d1      	asrs	r1, r2, #3
 801c276:	00d2      	lsls	r2, r2, #3
 801c278:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801c27c:	fa1f fc8c 	uxth.w	ip, ip
 801c280:	b2d2      	uxtb	r2, r2
 801c282:	fb01 e103 	mla	r1, r1, r3, lr
 801c286:	fb02 0303 	mla	r3, r2, r3, r0
 801c28a:	b289      	uxth	r1, r1
 801c28c:	b29a      	uxth	r2, r3
 801c28e:	f10c 0301 	add.w	r3, ip, #1
 801c292:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c296:	1c53      	adds	r3, r2, #1
 801c298:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c29c:	1c4a      	adds	r2, r1, #1
 801c29e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c2a2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801c2a6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801c2aa:	0949      	lsrs	r1, r1, #5
 801c2ac:	ea43 030c 	orr.w	r3, r3, ip
 801c2b0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c2b4:	430b      	orrs	r3, r1
 801c2b6:	803b      	strh	r3, [r7, #0]
 801c2b8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801c2ba:	3702      	adds	r7, #2
 801c2bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c2c0:	449a      	add	sl, r3
 801c2c2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c2c4:	441d      	add	r5, r3
 801c2c6:	e742      	b.n	801c14e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801c2c8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801c2ca:	f108 0802 	add.w	r8, r8, #2
 801c2ce:	449a      	add	sl, r3
 801c2d0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c2d2:	441d      	add	r5, r3
 801c2d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c2d6:	3b01      	subs	r3, #1
 801c2d8:	9309      	str	r3, [sp, #36]	; 0x24
 801c2da:	e718      	b.n	801c10e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c2dc:	d023      	beq.n	801c326 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801c2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c2e0:	982d      	ldr	r0, [sp, #180]	; 0xb4
 801c2e2:	3b01      	subs	r3, #1
 801c2e4:	fb00 a003 	mla	r0, r0, r3, sl
 801c2e8:	1400      	asrs	r0, r0, #16
 801c2ea:	f53f af2d 	bmi.w	801c148 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801c2ee:	3901      	subs	r1, #1
 801c2f0:	4288      	cmp	r0, r1
 801c2f2:	f6bf af29 	bge.w	801c148 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801c2f6:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801c2f8:	fb01 5303 	mla	r3, r1, r3, r5
 801c2fc:	141b      	asrs	r3, r3, #16
 801c2fe:	f53f af23 	bmi.w	801c148 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801c302:	3a01      	subs	r2, #1
 801c304:	4293      	cmp	r3, r2
 801c306:	f6bf af1f 	bge.w	801c148 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801c30a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801c30e:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801c312:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801c316:	f1be 0f00 	cmp.w	lr, #0
 801c31a:	dc6c      	bgt.n	801c3f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801c31c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c31e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c322:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801c326:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c328:	2b00      	cmp	r3, #0
 801c32a:	f340 810e 	ble.w	801c54a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 801c32e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c332:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c334:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801c338:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801c33c:	eef0 6a48 	vmov.f32	s13, s16
 801c340:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801c344:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801c348:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c34c:	ee16 aa90 	vmov	sl, s13
 801c350:	eef0 6a68 	vmov.f32	s13, s17
 801c354:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c358:	ee16 5a90 	vmov	r5, s13
 801c35c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801c360:	ee69 7a27 	vmul.f32	s15, s18, s15
 801c364:	ee37 8a48 	vsub.f32	s16, s14, s16
 801c368:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801c36c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801c370:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801c374:	ee18 2a10 	vmov	r2, s16
 801c378:	eeb0 8a47 	vmov.f32	s16, s14
 801c37c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c380:	ee18 2a90 	vmov	r2, s17
 801c384:	932d      	str	r3, [sp, #180]	; 0xb4
 801c386:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c388:	eef0 8a67 	vmov.f32	s17, s15
 801c38c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c390:	932e      	str	r3, [sp, #184]	; 0xb8
 801c392:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c394:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801c396:	3b01      	subs	r3, #1
 801c398:	930c      	str	r3, [sp, #48]	; 0x30
 801c39a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c39c:	bf08      	it	eq
 801c39e:	4613      	moveq	r3, r2
 801c3a0:	9309      	str	r3, [sp, #36]	; 0x24
 801c3a2:	e6a6      	b.n	801c0f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801c3a4:	2900      	cmp	r1, #0
 801c3a6:	f43f af10 	beq.w	801c1ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c3aa:	f819 3003 	ldrb.w	r3, [r9, r3]
 801c3ae:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c3b2:	930f      	str	r3, [sp, #60]	; 0x3c
 801c3b4:	e709      	b.n	801c1ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c3b6:	f112 0901 	adds.w	r9, r2, #1
 801c3ba:	f53f af7d 	bmi.w	801c2b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801c3be:	454b      	cmp	r3, r9
 801c3c0:	f6ff af7a 	blt.w	801c2b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801c3c4:	f11c 0901 	adds.w	r9, ip, #1
 801c3c8:	f53f af76 	bmi.w	801c2b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801c3cc:	45ce      	cmp	lr, r9
 801c3ce:	f6ff af73 	blt.w	801c2b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801c3d2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c3d4:	b21b      	sxth	r3, r3
 801c3d6:	9202      	str	r2, [sp, #8]
 801c3d8:	fa0f f28e 	sxth.w	r2, lr
 801c3dc:	9300      	str	r3, [sp, #0]
 801c3de:	4633      	mov	r3, r6
 801c3e0:	9201      	str	r2, [sp, #4]
 801c3e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c3e4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801c3e8:	e9cd c003 	strd	ip, r0, [sp, #12]
 801c3ec:	4639      	mov	r1, r7
 801c3ee:	9816      	ldr	r0, [sp, #88]	; 0x58
 801c3f0:	f7ff fd70 	bl	801bed4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801c3f4:	e760      	b.n	801c2b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801c3f6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c3f8:	ea4f 422a 	mov.w	r2, sl, asr #16
 801c3fc:	1429      	asrs	r1, r5, #16
 801c3fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c400:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801c404:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801c408:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801c40c:	fb03 2101 	mla	r1, r3, r1, r2
 801c410:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c412:	440a      	add	r2, r1
 801c414:	5c61      	ldrb	r1, [r4, r1]
 801c416:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801c41a:	f1bc 0f00 	cmp.w	ip, #0
 801c41e:	f000 808c 	beq.w	801c53a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 801c422:	7857      	ldrb	r7, [r2, #1]
 801c424:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801c428:	9413      	str	r4, [sp, #76]	; 0x4c
 801c42a:	b140      	cbz	r0, 801c43e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801c42c:	18d7      	adds	r7, r2, r3
 801c42e:	5cd3      	ldrb	r3, [r2, r3]
 801c430:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c434:	9310      	str	r3, [sp, #64]	; 0x40
 801c436:	787b      	ldrb	r3, [r7, #1]
 801c438:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c43c:	9314      	str	r3, [sp, #80]	; 0x50
 801c43e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c440:	fb1c f200 	smulbb	r2, ip, r0
 801c444:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c446:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c44a:	041f      	lsls	r7, r3, #16
 801c44c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c450:	10d2      	asrs	r2, r2, #3
 801c452:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801c456:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801c45a:	431f      	orrs	r7, r3
 801c45c:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801c460:	9317      	str	r3, [sp, #92]	; 0x5c
 801c462:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c464:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801c466:	041b      	lsls	r3, r3, #16
 801c468:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801c46c:	ea43 030b 	orr.w	r3, r3, fp
 801c470:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801c474:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801c478:	4353      	muls	r3, r2
 801c47a:	fb04 3707 	mla	r7, r4, r7, r3
 801c47e:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801c482:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c484:	ea43 0b01 	orr.w	fp, r3, r1
 801c488:	f1c0 0110 	rsb	r1, r0, #16
 801c48c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c48e:	eba1 0c0c 	sub.w	ip, r1, ip
 801c492:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801c496:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801c49a:	fb0c 770b 	mla	r7, ip, fp, r7
 801c49e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801c4a2:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801c4a6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c4aa:	ea4c 0c0b 	orr.w	ip, ip, fp
 801c4ae:	fb02 770c 	mla	r7, r2, ip, r7
 801c4b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c4b4:	0d79      	lsrs	r1, r7, #21
 801c4b6:	8812      	ldrh	r2, [r2, #0]
 801c4b8:	097f      	lsrs	r7, r7, #5
 801c4ba:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c4be:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801c4c2:	430f      	orrs	r7, r1
 801c4c4:	1211      	asrs	r1, r2, #8
 801c4c6:	b2bb      	uxth	r3, r7
 801c4c8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801c4cc:	10d7      	asrs	r7, r2, #3
 801c4ce:	fb11 f104 	smulbb	r1, r1, r4
 801c4d2:	1218      	asrs	r0, r3, #8
 801c4d4:	00d2      	lsls	r2, r2, #3
 801c4d6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c4da:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801c4de:	fb17 f704 	smulbb	r7, r7, r4
 801c4e2:	b2d2      	uxtb	r2, r2
 801c4e4:	fb00 1009 	mla	r0, r0, r9, r1
 801c4e8:	10d9      	asrs	r1, r3, #3
 801c4ea:	fb12 f204 	smulbb	r2, r2, r4
 801c4ee:	00db      	lsls	r3, r3, #3
 801c4f0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801c4f4:	b280      	uxth	r0, r0
 801c4f6:	b2db      	uxtb	r3, r3
 801c4f8:	fb01 7109 	mla	r1, r1, r9, r7
 801c4fc:	fb03 2309 	mla	r3, r3, r9, r2
 801c500:	1c42      	adds	r2, r0, #1
 801c502:	b289      	uxth	r1, r1
 801c504:	b29b      	uxth	r3, r3
 801c506:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801c50a:	1c4f      	adds	r7, r1, #1
 801c50c:	1c5a      	adds	r2, r3, #1
 801c50e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801c512:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801c516:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c51a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c51c:	0949      	lsrs	r1, r1, #5
 801c51e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c522:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c526:	4310      	orrs	r0, r2
 801c528:	4308      	orrs	r0, r1
 801c52a:	f823 0b02 	strh.w	r0, [r3], #2
 801c52e:	930e      	str	r3, [sp, #56]	; 0x38
 801c530:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801c532:	449a      	add	sl, r3
 801c534:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c536:	441d      	add	r5, r3
 801c538:	e6ed      	b.n	801c316 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 801c53a:	2800      	cmp	r0, #0
 801c53c:	f43f af7f 	beq.w	801c43e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801c540:	5cd3      	ldrb	r3, [r2, r3]
 801c542:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c546:	9310      	str	r3, [sp, #64]	; 0x40
 801c548:	e779      	b.n	801c43e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801c54a:	b019      	add	sp, #100	; 0x64
 801c54c:	ecbd 8b08 	vpop	{d8-d11}
 801c550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c554 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801c554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c558:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 801c55c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801c560:	2e00      	cmp	r6, #0
 801c562:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801c566:	fb06 570e 	mla	r7, r6, lr, r5
 801c56a:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 801c56e:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801c572:	eb02 0807 	add.w	r8, r2, r7
 801c576:	8808      	ldrh	r0, [r1, #0]
 801c578:	db38      	blt.n	801c5ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 801c57a:	45b1      	cmp	r9, r6
 801c57c:	dd36      	ble.n	801c5ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 801c57e:	2d00      	cmp	r5, #0
 801c580:	db32      	blt.n	801c5e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 801c582:	45ae      	cmp	lr, r5
 801c584:	dd30      	ble.n	801c5e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 801c586:	5dd2      	ldrb	r2, [r2, r7]
 801c588:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801c58c:	1c6a      	adds	r2, r5, #1
 801c58e:	d430      	bmi.n	801c5f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801c590:	4596      	cmp	lr, r2
 801c592:	dd2e      	ble.n	801c5f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801c594:	b36c      	cbz	r4, 801c5f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801c596:	f898 2001 	ldrb.w	r2, [r8, #1]
 801c59a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801c59e:	3601      	adds	r6, #1
 801c5a0:	d42b      	bmi.n	801c5fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 801c5a2:	45b1      	cmp	r9, r6
 801c5a4:	dd29      	ble.n	801c5fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 801c5a6:	f1bc 0f00 	cmp.w	ip, #0
 801c5aa:	d028      	beq.n	801c5fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 801c5ac:	2d00      	cmp	r5, #0
 801c5ae:	db22      	blt.n	801c5f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 801c5b0:	45ae      	cmp	lr, r5
 801c5b2:	dd20      	ble.n	801c5f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 801c5b4:	f818 600e 	ldrb.w	r6, [r8, lr]
 801c5b8:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 801c5bc:	3501      	adds	r5, #1
 801c5be:	d407      	bmi.n	801c5d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801c5c0:	45ae      	cmp	lr, r5
 801c5c2:	dd05      	ble.n	801c5d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801c5c4:	b134      	cbz	r4, 801c5d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801c5c6:	44c6      	add	lr, r8
 801c5c8:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801c5cc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801c5d0:	2c0f      	cmp	r4, #15
 801c5d2:	d802      	bhi.n	801c5da <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 801c5d4:	f1bc 0f0f 	cmp.w	ip, #15
 801c5d8:	d914      	bls.n	801c604 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 801c5da:	4b26      	ldr	r3, [pc, #152]	; (801c674 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 801c5dc:	f240 11db 	movw	r1, #475	; 0x1db
 801c5e0:	4a25      	ldr	r2, [pc, #148]	; (801c678 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 801c5e2:	4826      	ldr	r0, [pc, #152]	; (801c67c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 801c5e4:	f008 fa08 	bl	80249f8 <__assert_func>
 801c5e8:	4607      	mov	r7, r0
 801c5ea:	e7cf      	b.n	801c58c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 801c5ec:	4602      	mov	r2, r0
 801c5ee:	4607      	mov	r7, r0
 801c5f0:	e7d5      	b.n	801c59e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 801c5f2:	4602      	mov	r2, r0
 801c5f4:	e7d3      	b.n	801c59e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 801c5f6:	4606      	mov	r6, r0
 801c5f8:	e7e0      	b.n	801c5bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 801c5fa:	4606      	mov	r6, r0
 801c5fc:	e7e8      	b.n	801c5d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801c5fe:	2c0f      	cmp	r4, #15
 801c600:	d8eb      	bhi.n	801c5da <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 801c602:	4606      	mov	r6, r0
 801c604:	fb14 f30c 	smulbb	r3, r4, ip
 801c608:	043d      	lsls	r5, r7, #16
 801c60a:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 801c60e:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801c612:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 801c616:	10db      	asrs	r3, r3, #3
 801c618:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801c61c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c620:	432f      	orrs	r7, r5
 801c622:	f1cc 0510 	rsb	r5, ip, #16
 801c626:	ea4e 0202 	orr.w	r2, lr, r2
 801c62a:	1b2d      	subs	r5, r5, r4
 801c62c:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 801c630:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801c634:	4354      	muls	r4, r2
 801c636:	fb05 4507 	mla	r5, r5, r7, r4
 801c63a:	0404      	lsls	r4, r0, #16
 801c63c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801c640:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801c644:	4320      	orrs	r0, r4
 801c646:	fb03 5400 	mla	r4, r3, r0, r5
 801c64a:	0430      	lsls	r0, r6, #16
 801c64c:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 801c650:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801c654:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801c658:	4330      	orrs	r0, r6
 801c65a:	fb03 4000 	mla	r0, r3, r0, r4
 801c65e:	0d43      	lsrs	r3, r0, #21
 801c660:	0940      	lsrs	r0, r0, #5
 801c662:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c666:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801c66a:	4318      	orrs	r0, r3
 801c66c:	8008      	strh	r0, [r1, #0]
 801c66e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c672:	bf00      	nop
 801c674:	0802a0bb 	.word	0x0802a0bb
 801c678:	0802a693 	.word	0x0802a693
 801c67c:	0802a088 	.word	0x0802a088

0801c680 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c684:	ed2d 8b0a 	vpush	{d8-d12}
 801c688:	b093      	sub	sp, #76	; 0x4c
 801c68a:	eeb0 aa40 	vmov.f32	s20, s0
 801c68e:	eef0 9a60 	vmov.f32	s19, s1
 801c692:	920f      	str	r2, [sp, #60]	; 0x3c
 801c694:	eeb0 9a41 	vmov.f32	s18, s2
 801c698:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801c69a:	eeb0 8a62 	vmov.f32	s16, s5
 801c69e:	9010      	str	r0, [sp, #64]	; 0x40
 801c6a0:	eef0 8a43 	vmov.f32	s17, s6
 801c6a4:	6850      	ldr	r0, [r2, #4]
 801c6a6:	eeb0 ca44 	vmov.f32	s24, s8
 801c6aa:	9108      	str	r1, [sp, #32]
 801c6ac:	eef0 ba64 	vmov.f32	s23, s9
 801c6b0:	9306      	str	r3, [sp, #24]
 801c6b2:	eeb0 ba45 	vmov.f32	s22, s10
 801c6b6:	6812      	ldr	r2, [r2, #0]
 801c6b8:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801c6bc:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801c6c0:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 801c6c4:	fb00 1303 	mla	r3, r0, r3, r1
 801c6c8:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801c6cc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c6ce:	681b      	ldr	r3, [r3, #0]
 801c6d0:	9307      	str	r3, [sp, #28]
 801c6d2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c6d4:	685f      	ldr	r7, [r3, #4]
 801c6d6:	3704      	adds	r7, #4
 801c6d8:	9b08      	ldr	r3, [sp, #32]
 801c6da:	2b00      	cmp	r3, #0
 801c6dc:	dc03      	bgt.n	801c6e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c6de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c6e0:	2b00      	cmp	r3, #0
 801c6e2:	f340 81b2 	ble.w	801ca4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801c6e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c6e8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c6ec:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c6f0:	1e48      	subs	r0, r1, #1
 801c6f2:	f102 3cff 	add.w	ip, r2, #4294967295
 801c6f6:	9b06      	ldr	r3, [sp, #24]
 801c6f8:	2b00      	cmp	r3, #0
 801c6fa:	f340 80a9 	ble.w	801c850 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801c6fe:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801c702:	ea4f 4326 	mov.w	r3, r6, asr #16
 801c706:	d406      	bmi.n	801c716 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c708:	4586      	cmp	lr, r0
 801c70a:	da04      	bge.n	801c716 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c70c:	2b00      	cmp	r3, #0
 801c70e:	db02      	blt.n	801c716 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c710:	4563      	cmp	r3, ip
 801c712:	f2c0 809e 	blt.w	801c852 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801c716:	f11e 0e01 	adds.w	lr, lr, #1
 801c71a:	f100 808f 	bmi.w	801c83c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801c71e:	4571      	cmp	r1, lr
 801c720:	f2c0 808c 	blt.w	801c83c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801c724:	3301      	adds	r3, #1
 801c726:	f100 8089 	bmi.w	801c83c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801c72a:	429a      	cmp	r2, r3
 801c72c:	f2c0 8086 	blt.w	801c83c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801c730:	f8dd b018 	ldr.w	fp, [sp, #24]
 801c734:	46c8      	mov	r8, r9
 801c736:	f1bb 0f00 	cmp.w	fp, #0
 801c73a:	f340 80a6 	ble.w	801c88a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801c73e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801c740:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801c744:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c746:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801c74a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801c74e:	1422      	asrs	r2, r4, #16
 801c750:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801c754:	689b      	ldr	r3, [r3, #8]
 801c756:	f100 80e3 	bmi.w	801c920 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801c75a:	f103 3aff 	add.w	sl, r3, #4294967295
 801c75e:	4552      	cmp	r2, sl
 801c760:	f280 80de 	bge.w	801c920 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801c764:	f1bc 0f00 	cmp.w	ip, #0
 801c768:	f2c0 80da 	blt.w	801c920 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801c76c:	f10e 3aff 	add.w	sl, lr, #4294967295
 801c770:	45d4      	cmp	ip, sl
 801c772:	f280 80d5 	bge.w	801c920 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801c776:	b21b      	sxth	r3, r3
 801c778:	9d07      	ldr	r5, [sp, #28]
 801c77a:	fb0c 2203 	mla	r2, ip, r3, r2
 801c77e:	eb05 0a02 	add.w	sl, r5, r2
 801c782:	5caa      	ldrb	r2, [r5, r2]
 801c784:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801c788:	2800      	cmp	r0, #0
 801c78a:	f000 80c0 	beq.w	801c90e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 801c78e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801c792:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801c796:	920b      	str	r2, [sp, #44]	; 0x2c
 801c798:	b151      	cbz	r1, 801c7b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 801c79a:	eb0a 0203 	add.w	r2, sl, r3
 801c79e:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801c7a2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801c7a6:	9309      	str	r3, [sp, #36]	; 0x24
 801c7a8:	7853      	ldrb	r3, [r2, #1]
 801c7aa:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801c7ae:	930c      	str	r3, [sp, #48]	; 0x30
 801c7b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c7b2:	fb10 f201 	smulbb	r2, r0, r1
 801c7b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c7b8:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801c7bc:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c7c0:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801c7c4:	10d2      	asrs	r2, r2, #3
 801c7c6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c7ca:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801c7ce:	ea4c 0c03 	orr.w	ip, ip, r3
 801c7d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c7d4:	041b      	lsls	r3, r3, #16
 801c7d6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801c7da:	432b      	orrs	r3, r5
 801c7dc:	4353      	muls	r3, r2
 801c7de:	fb0a 330c 	mla	r3, sl, ip, r3
 801c7e2:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801c7e6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801c7ea:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c7ee:	ea4c 0e0e 	orr.w	lr, ip, lr
 801c7f2:	f1c1 0c10 	rsb	ip, r1, #16
 801c7f6:	ebac 0c00 	sub.w	ip, ip, r0
 801c7fa:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801c7fe:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801c802:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801c806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c808:	0418      	lsls	r0, r3, #16
 801c80a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c80e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801c812:	4318      	orrs	r0, r3
 801c814:	fb02 c200 	mla	r2, r2, r0, ip
 801c818:	0d53      	lsrs	r3, r2, #21
 801c81a:	0952      	lsrs	r2, r2, #5
 801c81c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c820:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c824:	431a      	orrs	r2, r3
 801c826:	f8a8 2000 	strh.w	r2, [r8]
 801c82a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c82c:	f108 0802 	add.w	r8, r8, #2
 801c830:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c834:	441c      	add	r4, r3
 801c836:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c838:	441e      	add	r6, r3
 801c83a:	e77c      	b.n	801c736 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801c83c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c83e:	f109 0902 	add.w	r9, r9, #2
 801c842:	441c      	add	r4, r3
 801c844:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c846:	441e      	add	r6, r3
 801c848:	9b06      	ldr	r3, [sp, #24]
 801c84a:	3b01      	subs	r3, #1
 801c84c:	9306      	str	r3, [sp, #24]
 801c84e:	e752      	b.n	801c6f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c850:	d020      	beq.n	801c894 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c852:	9b06      	ldr	r3, [sp, #24]
 801c854:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801c856:	3b01      	subs	r3, #1
 801c858:	fb00 4003 	mla	r0, r0, r3, r4
 801c85c:	1400      	asrs	r0, r0, #16
 801c85e:	f53f af67 	bmi.w	801c730 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801c862:	3901      	subs	r1, #1
 801c864:	4288      	cmp	r0, r1
 801c866:	f6bf af63 	bge.w	801c730 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801c86a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801c86c:	fb01 6303 	mla	r3, r1, r3, r6
 801c870:	141b      	asrs	r3, r3, #16
 801c872:	f53f af5d 	bmi.w	801c730 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801c876:	3a01      	subs	r2, #1
 801c878:	4293      	cmp	r3, r2
 801c87a:	f6bf af59 	bge.w	801c730 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801c87e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801c882:	46ca      	mov	sl, r9
 801c884:	f1b8 0f00 	cmp.w	r8, #0
 801c888:	dc67      	bgt.n	801c95a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 801c88a:	9b06      	ldr	r3, [sp, #24]
 801c88c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801c890:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801c894:	9b08      	ldr	r3, [sp, #32]
 801c896:	2b00      	cmp	r3, #0
 801c898:	f340 80d7 	ble.w	801ca4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801c89c:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801c8a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c8a2:	ee79 9aab 	vadd.f32	s19, s19, s23
 801c8a6:	eef0 6a48 	vmov.f32	s13, s16
 801c8aa:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801c8ae:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801c8b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c8b6:	ee16 4a90 	vmov	r4, s13
 801c8ba:	eef0 6a68 	vmov.f32	s13, s17
 801c8be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c8c2:	ee16 6a90 	vmov	r6, s13
 801c8c6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801c8ca:	ee69 7a27 	vmul.f32	s15, s18, s15
 801c8ce:	ee37 8a48 	vsub.f32	s16, s14, s16
 801c8d2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801c8d6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801c8da:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801c8de:	ee18 2a10 	vmov	r2, s16
 801c8e2:	eeb0 8a47 	vmov.f32	s16, s14
 801c8e6:	fb92 f3f3 	sdiv	r3, r2, r3
 801c8ea:	ee18 2a90 	vmov	r2, s17
 801c8ee:	9329      	str	r3, [sp, #164]	; 0xa4
 801c8f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c8f2:	eef0 8a67 	vmov.f32	s17, s15
 801c8f6:	fb92 f3f3 	sdiv	r3, r2, r3
 801c8fa:	932a      	str	r3, [sp, #168]	; 0xa8
 801c8fc:	9b08      	ldr	r3, [sp, #32]
 801c8fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c900:	3b01      	subs	r3, #1
 801c902:	9308      	str	r3, [sp, #32]
 801c904:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c906:	bf08      	it	eq
 801c908:	4613      	moveq	r3, r2
 801c90a:	9306      	str	r3, [sp, #24]
 801c90c:	e6e4      	b.n	801c6d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801c90e:	2900      	cmp	r1, #0
 801c910:	f43f af4e 	beq.w	801c7b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 801c914:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801c918:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801c91c:	9309      	str	r3, [sp, #36]	; 0x24
 801c91e:	e747      	b.n	801c7b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 801c920:	f112 0a01 	adds.w	sl, r2, #1
 801c924:	d481      	bmi.n	801c82a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801c926:	4553      	cmp	r3, sl
 801c928:	f6ff af7f 	blt.w	801c82a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801c92c:	f11c 0a01 	adds.w	sl, ip, #1
 801c930:	f53f af7b 	bmi.w	801c82a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801c934:	45d6      	cmp	lr, sl
 801c936:	f6ff af78 	blt.w	801c82a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801c93a:	b21b      	sxth	r3, r3
 801c93c:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801c940:	fa0f f28e 	sxth.w	r2, lr
 801c944:	9300      	str	r3, [sp, #0]
 801c946:	463b      	mov	r3, r7
 801c948:	9201      	str	r2, [sp, #4]
 801c94a:	9a07      	ldr	r2, [sp, #28]
 801c94c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c950:	4641      	mov	r1, r8
 801c952:	9810      	ldr	r0, [sp, #64]	; 0x40
 801c954:	f7ff fdfe 	bl	801c554 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801c958:	e767      	b.n	801c82a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801c95a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c95c:	1422      	asrs	r2, r4, #16
 801c95e:	1431      	asrs	r1, r6, #16
 801c960:	9d07      	ldr	r5, [sp, #28]
 801c962:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801c966:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801c96a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801c96e:	fb03 2101 	mla	r1, r3, r1, r2
 801c972:	9a07      	ldr	r2, [sp, #28]
 801c974:	440a      	add	r2, r1
 801c976:	5c69      	ldrb	r1, [r5, r1]
 801c978:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801c97c:	f1be 0f00 	cmp.w	lr, #0
 801c980:	d05c      	beq.n	801ca3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 801c982:	f892 c001 	ldrb.w	ip, [r2, #1]
 801c986:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801c98a:	950d      	str	r5, [sp, #52]	; 0x34
 801c98c:	b150      	cbz	r0, 801c9a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 801c98e:	eb02 0c03 	add.w	ip, r2, r3
 801c992:	5cd3      	ldrb	r3, [r2, r3]
 801c994:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801c998:	930a      	str	r3, [sp, #40]	; 0x28
 801c99a:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801c99e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801c9a2:	930e      	str	r3, [sp, #56]	; 0x38
 801c9a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c9a6:	fb1e f200 	smulbb	r2, lr, r0
 801c9aa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801c9ac:	f108 38ff 	add.w	r8, r8, #4294967295
 801c9b0:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801c9b4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c9b8:	10d2      	asrs	r2, r2, #3
 801c9ba:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801c9be:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c9c2:	ea4c 0c03 	orr.w	ip, ip, r3
 801c9c6:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801c9ca:	9311      	str	r3, [sp, #68]	; 0x44
 801c9cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c9ce:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c9d0:	041b      	lsls	r3, r3, #16
 801c9d2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801c9d6:	ea43 030b 	orr.w	r3, r3, fp
 801c9da:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801c9de:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801c9e2:	4353      	muls	r3, r2
 801c9e4:	fb05 3c0c 	mla	ip, r5, ip, r3
 801c9e8:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801c9ec:	ea43 0b01 	orr.w	fp, r3, r1
 801c9f0:	f1c0 0110 	rsb	r1, r0, #16
 801c9f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c9f6:	eba1 0e0e 	sub.w	lr, r1, lr
 801c9fa:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801c9fe:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801ca02:	fb0e cc0b 	mla	ip, lr, fp, ip
 801ca06:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801ca0a:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801ca0e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801ca12:	ea4b 0e0e 	orr.w	lr, fp, lr
 801ca16:	fb02 cc0e 	mla	ip, r2, lr, ip
 801ca1a:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801ca1e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801ca22:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ca26:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801ca2a:	ea43 0c0c 	orr.w	ip, r3, ip
 801ca2e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ca30:	441c      	add	r4, r3
 801ca32:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ca34:	f82a cb02 	strh.w	ip, [sl], #2
 801ca38:	441e      	add	r6, r3
 801ca3a:	e723      	b.n	801c884 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801ca3c:	2800      	cmp	r0, #0
 801ca3e:	d0b1      	beq.n	801c9a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 801ca40:	5cd3      	ldrb	r3, [r2, r3]
 801ca42:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ca46:	930a      	str	r3, [sp, #40]	; 0x28
 801ca48:	e7ac      	b.n	801c9a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 801ca4a:	b013      	add	sp, #76	; 0x4c
 801ca4c:	ecbd 8b0a 	vpop	{d8-d12}
 801ca50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ca54 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801ca54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca58:	468b      	mov	fp, r1
 801ca5a:	8809      	ldrh	r1, [r1, #0]
 801ca5c:	b089      	sub	sp, #36	; 0x24
 801ca5e:	10cd      	asrs	r5, r1, #3
 801ca60:	ea4f 2921 	mov.w	r9, r1, asr #8
 801ca64:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 801ca68:	00c9      	lsls	r1, r1, #3
 801ca6a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801ca6e:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801ca72:	9202      	str	r2, [sp, #8]
 801ca74:	b2c9      	uxtb	r1, r1
 801ca76:	9500      	str	r5, [sp, #0]
 801ca78:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 801ca7c:	9101      	str	r1, [sp, #4]
 801ca7e:	9900      	ldr	r1, [sp, #0]
 801ca80:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801ca84:	0209      	lsls	r1, r1, #8
 801ca86:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801ca8a:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 801ca8e:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 801ca92:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 801ca96:	fb04 650e 	mla	r5, r4, lr, r6
 801ca9a:	2c00      	cmp	r4, #0
 801ca9c:	eb02 0805 	add.w	r8, r2, r5
 801caa0:	9a01      	ldr	r2, [sp, #4]
 801caa2:	ea41 0102 	orr.w	r1, r1, r2
 801caa6:	9107      	str	r1, [sp, #28]
 801caa8:	db43      	blt.n	801cb32 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 801caaa:	45a2      	cmp	sl, r4
 801caac:	dd41      	ble.n	801cb32 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 801caae:	2e00      	cmp	r6, #0
 801cab0:	db3d      	blt.n	801cb2e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 801cab2:	45b6      	cmp	lr, r6
 801cab4:	dd3b      	ble.n	801cb2e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 801cab6:	9a02      	ldr	r2, [sp, #8]
 801cab8:	5d55      	ldrb	r5, [r2, r5]
 801caba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cabe:	441d      	add	r5, r3
 801cac0:	1c72      	adds	r2, r6, #1
 801cac2:	d439      	bmi.n	801cb38 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 801cac4:	4596      	cmp	lr, r2
 801cac6:	dd37      	ble.n	801cb38 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 801cac8:	2f00      	cmp	r7, #0
 801caca:	d035      	beq.n	801cb38 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 801cacc:	f898 1001 	ldrb.w	r1, [r8, #1]
 801cad0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801cad4:	4419      	add	r1, r3
 801cad6:	3401      	adds	r4, #1
 801cad8:	d432      	bmi.n	801cb40 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 801cada:	45a2      	cmp	sl, r4
 801cadc:	dd30      	ble.n	801cb40 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 801cade:	b378      	cbz	r0, 801cb40 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 801cae0:	2e00      	cmp	r6, #0
 801cae2:	db2b      	blt.n	801cb3c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 801cae4:	45b6      	cmp	lr, r6
 801cae6:	dd29      	ble.n	801cb3c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 801cae8:	f818 400e 	ldrb.w	r4, [r8, lr]
 801caec:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801caf0:	441c      	add	r4, r3
 801caf2:	3601      	adds	r6, #1
 801caf4:	d427      	bmi.n	801cb46 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 801caf6:	45b6      	cmp	lr, r6
 801caf8:	dd25      	ble.n	801cb46 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 801cafa:	b327      	cbz	r7, 801cb46 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 801cafc:	44c6      	add	lr, r8
 801cafe:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801cb02:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cb06:	4413      	add	r3, r2
 801cb08:	782a      	ldrb	r2, [r5, #0]
 801cb0a:	2f0f      	cmp	r7, #15
 801cb0c:	9202      	str	r2, [sp, #8]
 801cb0e:	780a      	ldrb	r2, [r1, #0]
 801cb10:	9203      	str	r2, [sp, #12]
 801cb12:	7822      	ldrb	r2, [r4, #0]
 801cb14:	9204      	str	r2, [sp, #16]
 801cb16:	781a      	ldrb	r2, [r3, #0]
 801cb18:	9205      	str	r2, [sp, #20]
 801cb1a:	d801      	bhi.n	801cb20 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xcc>
 801cb1c:	280f      	cmp	r0, #15
 801cb1e:	d914      	bls.n	801cb4a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf6>
 801cb20:	4b3f      	ldr	r3, [pc, #252]	; (801cc20 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 801cb22:	f240 11f9 	movw	r1, #505	; 0x1f9
 801cb26:	4a3f      	ldr	r2, [pc, #252]	; (801cc24 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 801cb28:	483f      	ldr	r0, [pc, #252]	; (801cc28 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>)
 801cb2a:	f007 ff65 	bl	80249f8 <__assert_func>
 801cb2e:	ad07      	add	r5, sp, #28
 801cb30:	e7c6      	b.n	801cac0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 801cb32:	a907      	add	r1, sp, #28
 801cb34:	460d      	mov	r5, r1
 801cb36:	e7ce      	b.n	801cad6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 801cb38:	a907      	add	r1, sp, #28
 801cb3a:	e7cc      	b.n	801cad6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 801cb3c:	ac07      	add	r4, sp, #28
 801cb3e:	e7d8      	b.n	801caf2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9e>
 801cb40:	ab07      	add	r3, sp, #28
 801cb42:	461c      	mov	r4, r3
 801cb44:	e7e0      	b.n	801cb08 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801cb46:	ab07      	add	r3, sp, #28
 801cb48:	e7de      	b.n	801cb08 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801cb4a:	b2ba      	uxth	r2, r7
 801cb4c:	f891 8002 	ldrb.w	r8, [r1, #2]
 801cb50:	b280      	uxth	r0, r0
 801cb52:	7849      	ldrb	r1, [r1, #1]
 801cb54:	78ae      	ldrb	r6, [r5, #2]
 801cb56:	fa1f f78c 	uxth.w	r7, ip
 801cb5a:	fb02 fa00 	mul.w	sl, r2, r0
 801cb5e:	0112      	lsls	r2, r2, #4
 801cb60:	786d      	ldrb	r5, [r5, #1]
 801cb62:	ea6f 0c0c 	mvn.w	ip, ip
 801cb66:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801cb6a:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801cb6e:	eba2 020a 	sub.w	r2, r2, sl
 801cb72:	fa5f fc8c 	uxtb.w	ip, ip
 801cb76:	b280      	uxth	r0, r0
 801cb78:	fb19 f90c 	smulbb	r9, r9, ip
 801cb7c:	b292      	uxth	r2, r2
 801cb7e:	ebae 0e00 	sub.w	lr, lr, r0
 801cb82:	4351      	muls	r1, r2
 801cb84:	fa1f fe8e 	uxth.w	lr, lr
 801cb88:	fb02 f808 	mul.w	r8, r2, r8
 801cb8c:	fb0e 1505 	mla	r5, lr, r5, r1
 801cb90:	7861      	ldrb	r1, [r4, #1]
 801cb92:	fb0e 8806 	mla	r8, lr, r6, r8
 801cb96:	78a6      	ldrb	r6, [r4, #2]
 801cb98:	fb00 5501 	mla	r5, r0, r1, r5
 801cb9c:	7859      	ldrb	r1, [r3, #1]
 801cb9e:	fb00 8806 	mla	r8, r0, r6, r8
 801cba2:	789e      	ldrb	r6, [r3, #2]
 801cba4:	9b00      	ldr	r3, [sp, #0]
 801cba6:	fb0a 5101 	mla	r1, sl, r1, r5
 801cbaa:	fb0a 8606 	mla	r6, sl, r6, r8
 801cbae:	fb13 f50c 	smulbb	r5, r3, ip
 801cbb2:	9b03      	ldr	r3, [sp, #12]
 801cbb4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801cbb8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801cbbc:	435a      	muls	r2, r3
 801cbbe:	9b02      	ldr	r3, [sp, #8]
 801cbc0:	fb06 9607 	mla	r6, r6, r7, r9
 801cbc4:	fb0e 2203 	mla	r2, lr, r3, r2
 801cbc8:	9b04      	ldr	r3, [sp, #16]
 801cbca:	b2b6      	uxth	r6, r6
 801cbcc:	fb01 5107 	mla	r1, r1, r7, r5
 801cbd0:	fb00 2003 	mla	r0, r0, r3, r2
 801cbd4:	9b05      	ldr	r3, [sp, #20]
 801cbd6:	f106 0901 	add.w	r9, r6, #1
 801cbda:	b289      	uxth	r1, r1
 801cbdc:	fb0a 0a03 	mla	sl, sl, r3, r0
 801cbe0:	9b01      	ldr	r3, [sp, #4]
 801cbe2:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 801cbe6:	1c4d      	adds	r5, r1, #1
 801cbe8:	fb13 fc0c 	smulbb	ip, r3, ip
 801cbec:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801cbf0:	f406 4978 	and.w	r9, r6, #63488	; 0xf800
 801cbf4:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 801cbf8:	fb0a c707 	mla	r7, sl, r7, ip
 801cbfc:	0949      	lsrs	r1, r1, #5
 801cbfe:	b2bf      	uxth	r7, r7
 801cc00:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801cc04:	1c7e      	adds	r6, r7, #1
 801cc06:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801cc0a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801cc0e:	ea46 0609 	orr.w	r6, r6, r9
 801cc12:	430e      	orrs	r6, r1
 801cc14:	f8ab 6000 	strh.w	r6, [fp]
 801cc18:	b009      	add	sp, #36	; 0x24
 801cc1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc1e:	bf00      	nop
 801cc20:	0802a0bb 	.word	0x0802a0bb
 801cc24:	0802a5ea 	.word	0x0802a5ea
 801cc28:	0802a088 	.word	0x0802a088

0801cc2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc30:	ed2d 8b08 	vpush	{d8-d11}
 801cc34:	b095      	sub	sp, #84	; 0x54
 801cc36:	eeb0 aa40 	vmov.f32	s20, s0
 801cc3a:	eef0 9a60 	vmov.f32	s19, s1
 801cc3e:	9212      	str	r2, [sp, #72]	; 0x48
 801cc40:	eeb0 9a41 	vmov.f32	s18, s2
 801cc44:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801cc46:	eeb0 8a62 	vmov.f32	s16, s5
 801cc4a:	9309      	str	r3, [sp, #36]	; 0x24
 801cc4c:	eef0 8a43 	vmov.f32	s17, s6
 801cc50:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801cc54:	eef0 ba44 	vmov.f32	s23, s8
 801cc58:	9013      	str	r0, [sp, #76]	; 0x4c
 801cc5a:	eeb0 ba64 	vmov.f32	s22, s9
 801cc5e:	930f      	str	r3, [sp, #60]	; 0x3c
 801cc60:	eef0 aa45 	vmov.f32	s21, s10
 801cc64:	6850      	ldr	r0, [r2, #4]
 801cc66:	910e      	str	r1, [sp, #56]	; 0x38
 801cc68:	6812      	ldr	r2, [r2, #0]
 801cc6a:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801cc6e:	fb00 1303 	mla	r3, r0, r3, r1
 801cc72:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801cc76:	930a      	str	r3, [sp, #40]	; 0x28
 801cc78:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801cc7a:	681b      	ldr	r3, [r3, #0]
 801cc7c:	930d      	str	r3, [sp, #52]	; 0x34
 801cc7e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801cc80:	685c      	ldr	r4, [r3, #4]
 801cc82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cc84:	3404      	adds	r4, #4
 801cc86:	43db      	mvns	r3, r3
 801cc88:	b2db      	uxtb	r3, r3
 801cc8a:	930b      	str	r3, [sp, #44]	; 0x2c
 801cc8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cc8e:	2b00      	cmp	r3, #0
 801cc90:	dc03      	bgt.n	801cc9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801cc92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cc94:	2b00      	cmp	r3, #0
 801cc96:	f340 8255 	ble.w	801d144 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 801cc9a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801cc9c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cca0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801cca4:	1e48      	subs	r0, r1, #1
 801cca6:	1e55      	subs	r5, r2, #1
 801cca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ccaa:	2b00      	cmp	r3, #0
 801ccac:	f340 80f9 	ble.w	801cea2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801ccb0:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 801ccb2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ccb4:	1436      	asrs	r6, r6, #16
 801ccb6:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ccba:	d406      	bmi.n	801ccca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ccbc:	4286      	cmp	r6, r0
 801ccbe:	da04      	bge.n	801ccca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ccc0:	2b00      	cmp	r3, #0
 801ccc2:	db02      	blt.n	801ccca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ccc4:	42ab      	cmp	r3, r5
 801ccc6:	f2c0 80ed 	blt.w	801cea4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801ccca:	3601      	adds	r6, #1
 801cccc:	f100 80da 	bmi.w	801ce84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801ccd0:	42b1      	cmp	r1, r6
 801ccd2:	f2c0 80d7 	blt.w	801ce84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801ccd6:	3301      	adds	r3, #1
 801ccd8:	f100 80d4 	bmi.w	801ce84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801ccdc:	429a      	cmp	r2, r3
 801ccde:	f2c0 80d1 	blt.w	801ce84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801cce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cce4:	9311      	str	r3, [sp, #68]	; 0x44
 801cce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cce8:	930c      	str	r3, [sp, #48]	; 0x30
 801ccea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ccec:	2b00      	cmp	r3, #0
 801ccee:	f340 80fa 	ble.w	801cee6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801ccf2:	982e      	ldr	r0, [sp, #184]	; 0xb8
 801ccf4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ccf6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801ccf8:	68c6      	ldr	r6, [r0, #12]
 801ccfa:	141d      	asrs	r5, r3, #16
 801ccfc:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801ccfe:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801cd02:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801cd04:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801cd06:	1400      	asrs	r0, r0, #16
 801cd08:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801cd0c:	6892      	ldr	r2, [r2, #8]
 801cd0e:	f100 813e 	bmi.w	801cf8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801cd12:	1e57      	subs	r7, r2, #1
 801cd14:	42b8      	cmp	r0, r7
 801cd16:	f280 813a 	bge.w	801cf8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801cd1a:	2d00      	cmp	r5, #0
 801cd1c:	f2c0 8137 	blt.w	801cf8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801cd20:	1e77      	subs	r7, r6, #1
 801cd22:	42bd      	cmp	r5, r7
 801cd24:	f280 8133 	bge.w	801cf8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801cd28:	b212      	sxth	r2, r2
 801cd2a:	fb05 0002 	mla	r0, r5, r2, r0
 801cd2e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801cd30:	f815 a000 	ldrb.w	sl, [r5, r0]
 801cd34:	182e      	adds	r6, r5, r0
 801cd36:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801cd3a:	eb04 050a 	add.w	r5, r4, sl
 801cd3e:	2b00      	cmp	r3, #0
 801cd40:	f000 8117 	beq.w	801cf72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801cd44:	f896 c001 	ldrb.w	ip, [r6, #1]
 801cd48:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801cd4c:	44a4      	add	ip, r4
 801cd4e:	2900      	cmp	r1, #0
 801cd50:	f000 8117 	beq.w	801cf82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801cd54:	18b0      	adds	r0, r6, r2
 801cd56:	5cb2      	ldrb	r2, [r6, r2]
 801cd58:	7840      	ldrb	r0, [r0, #1]
 801cd5a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cd5e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cd62:	4422      	add	r2, r4
 801cd64:	4420      	add	r0, r4
 801cd66:	b29b      	uxth	r3, r3
 801cd68:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801cd6c:	b289      	uxth	r1, r1
 801cd6e:	f895 b002 	ldrb.w	fp, [r5, #2]
 801cd72:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801cd74:	fb03 f901 	mul.w	r9, r3, r1
 801cd78:	011b      	lsls	r3, r3, #4
 801cd7a:	f8b6 e000 	ldrh.w	lr, [r6]
 801cd7e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801cd82:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801cd86:	eba3 0309 	sub.w	r3, r3, r9
 801cd8a:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801cd8e:	b289      	uxth	r1, r1
 801cd90:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801cd94:	b29b      	uxth	r3, r3
 801cd96:	eba8 0801 	sub.w	r8, r8, r1
 801cd9a:	435f      	muls	r7, r3
 801cd9c:	fa1f f888 	uxth.w	r8, r8
 801cda0:	9310      	str	r3, [sp, #64]	; 0x40
 801cda2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cda4:	fb08 770b 	mla	r7, r8, fp, r7
 801cda8:	f892 b002 	ldrb.w	fp, [r2, #2]
 801cdac:	fb01 770b 	mla	r7, r1, fp, r7
 801cdb0:	f890 b002 	ldrb.w	fp, [r0, #2]
 801cdb4:	fb09 770b 	mla	r7, r9, fp, r7
 801cdb8:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801cdbc:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801cdc0:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801cdc4:	fb1b fb03 	smulbb	fp, fp, r3
 801cdc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cdca:	fb07 b706 	mla	r7, r7, r6, fp
 801cdce:	f895 b001 	ldrb.w	fp, [r5, #1]
 801cdd2:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801cdd6:	f89c c000 	ldrb.w	ip, [ip]
 801cdda:	b2bf      	uxth	r7, r7
 801cddc:	435d      	muls	r5, r3
 801cdde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cde0:	fb08 550b 	mla	r5, r8, fp, r5
 801cde4:	f892 b001 	ldrb.w	fp, [r2, #1]
 801cde8:	fb01 550b 	mla	r5, r1, fp, r5
 801cdec:	f890 b001 	ldrb.w	fp, [r0, #1]
 801cdf0:	fb09 550b 	mla	r5, r9, fp, r5
 801cdf4:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801cdf8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801cdfc:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801ce00:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801ce04:	fa5f fe8e 	uxtb.w	lr, lr
 801ce08:	fb1b fb03 	smulbb	fp, fp, r3
 801ce0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ce0e:	fb03 f30c 	mul.w	r3, r3, ip
 801ce12:	f892 c000 	ldrb.w	ip, [r2]
 801ce16:	fb05 b506 	mla	r5, r5, r6, fp
 801ce1a:	fb08 330a 	mla	r3, r8, sl, r3
 801ce1e:	b2ad      	uxth	r5, r5
 801ce20:	fb01 330c 	mla	r3, r1, ip, r3
 801ce24:	f890 c000 	ldrb.w	ip, [r0]
 801ce28:	f105 0b01 	add.w	fp, r5, #1
 801ce2c:	fb09 3c0c 	mla	ip, r9, ip, r3
 801ce30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ce32:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801ce36:	fb1e fe03 	smulbb	lr, lr, r3
 801ce3a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801ce3e:	1c7b      	adds	r3, r7, #1
 801ce40:	096d      	lsrs	r5, r5, #5
 801ce42:	fb0c e606 	mla	r6, ip, r6, lr
 801ce46:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801ce4a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ce4e:	b2b6      	uxth	r6, r6
 801ce50:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 801ce54:	1c77      	adds	r7, r6, #1
 801ce56:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801ce5a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801ce5e:	431f      	orrs	r7, r3
 801ce60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ce62:	433d      	orrs	r5, r7
 801ce64:	801d      	strh	r5, [r3, #0]
 801ce66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ce68:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ce6a:	3302      	adds	r3, #2
 801ce6c:	930c      	str	r3, [sp, #48]	; 0x30
 801ce6e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ce70:	4413      	add	r3, r2
 801ce72:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ce74:	9327      	str	r3, [sp, #156]	; 0x9c
 801ce76:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ce78:	4413      	add	r3, r2
 801ce7a:	9328      	str	r3, [sp, #160]	; 0xa0
 801ce7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ce7e:	3b01      	subs	r3, #1
 801ce80:	9311      	str	r3, [sp, #68]	; 0x44
 801ce82:	e732      	b.n	801ccea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801ce84:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ce86:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 801ce88:	4433      	add	r3, r6
 801ce8a:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 801ce8c:	9327      	str	r3, [sp, #156]	; 0x9c
 801ce8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ce90:	4433      	add	r3, r6
 801ce92:	9328      	str	r3, [sp, #160]	; 0xa0
 801ce94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce96:	3b01      	subs	r3, #1
 801ce98:	9309      	str	r3, [sp, #36]	; 0x24
 801ce9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ce9c:	3302      	adds	r3, #2
 801ce9e:	930a      	str	r3, [sp, #40]	; 0x28
 801cea0:	e702      	b.n	801cca8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801cea2:	d027      	beq.n	801cef4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801cea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cea6:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801cea8:	3b01      	subs	r3, #1
 801ceaa:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 801ceac:	fb00 5003 	mla	r0, r0, r3, r5
 801ceb0:	1400      	asrs	r0, r0, #16
 801ceb2:	f53f af16 	bmi.w	801cce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801ceb6:	3901      	subs	r1, #1
 801ceb8:	4288      	cmp	r0, r1
 801ceba:	f6bf af12 	bge.w	801cce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801cebe:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801cec0:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801cec2:	fb01 0303 	mla	r3, r1, r3, r0
 801cec6:	141b      	asrs	r3, r3, #16
 801cec8:	f53f af0b 	bmi.w	801cce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801cecc:	3a01      	subs	r2, #1
 801cece:	4293      	cmp	r3, r2
 801ced0:	f6bf af07 	bge.w	801cce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801ced4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ced6:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 801ceda:	9311      	str	r3, [sp, #68]	; 0x44
 801cedc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cede:	930c      	str	r3, [sp, #48]	; 0x30
 801cee0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cee2:	2b00      	cmp	r3, #0
 801cee4:	dc70      	bgt.n	801cfc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 801cee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cee8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ceea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ceee:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801cef2:	930a      	str	r3, [sp, #40]	; 0x28
 801cef4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cef6:	2b00      	cmp	r3, #0
 801cef8:	f340 8124 	ble.w	801d144 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 801cefc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cf00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cf02:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801cf06:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801cf0a:	eef0 6a48 	vmov.f32	s13, s16
 801cf0e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801cf12:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801cf16:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cf1a:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801cf1e:	eef0 6a68 	vmov.f32	s13, s17
 801cf22:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cf26:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801cf2a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801cf2e:	ee69 7a27 	vmul.f32	s15, s18, s15
 801cf32:	ee37 8a48 	vsub.f32	s16, s14, s16
 801cf36:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801cf3a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801cf3e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801cf42:	ee18 2a10 	vmov	r2, s16
 801cf46:	eeb0 8a47 	vmov.f32	s16, s14
 801cf4a:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf4e:	ee18 2a90 	vmov	r2, s17
 801cf52:	9329      	str	r3, [sp, #164]	; 0xa4
 801cf54:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cf56:	eef0 8a67 	vmov.f32	s17, s15
 801cf5a:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf5e:	932a      	str	r3, [sp, #168]	; 0xa8
 801cf60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cf62:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cf64:	3b01      	subs	r3, #1
 801cf66:	930e      	str	r3, [sp, #56]	; 0x38
 801cf68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cf6a:	bf08      	it	eq
 801cf6c:	4613      	moveq	r3, r2
 801cf6e:	9309      	str	r3, [sp, #36]	; 0x24
 801cf70:	e68c      	b.n	801cc8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801cf72:	b149      	cbz	r1, 801cf88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801cf74:	5cb2      	ldrb	r2, [r6, r2]
 801cf76:	4628      	mov	r0, r5
 801cf78:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cf7c:	4422      	add	r2, r4
 801cf7e:	46ac      	mov	ip, r5
 801cf80:	e6f1      	b.n	801cd66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801cf82:	4628      	mov	r0, r5
 801cf84:	462a      	mov	r2, r5
 801cf86:	e6ee      	b.n	801cd66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801cf88:	4628      	mov	r0, r5
 801cf8a:	462a      	mov	r2, r5
 801cf8c:	e7f7      	b.n	801cf7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 801cf8e:	1c47      	adds	r7, r0, #1
 801cf90:	f53f af69 	bmi.w	801ce66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801cf94:	42ba      	cmp	r2, r7
 801cf96:	f6ff af66 	blt.w	801ce66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801cf9a:	1c6f      	adds	r7, r5, #1
 801cf9c:	f53f af63 	bmi.w	801ce66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801cfa0:	42be      	cmp	r6, r7
 801cfa2:	f6ff af60 	blt.w	801ce66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801cfa6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801cfa8:	b236      	sxth	r6, r6
 801cfaa:	b212      	sxth	r2, r2
 801cfac:	9002      	str	r0, [sp, #8]
 801cfae:	9601      	str	r6, [sp, #4]
 801cfb0:	9200      	str	r2, [sp, #0]
 801cfb2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801cfb4:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801cfb8:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801cfbc:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801cfc0:	4623      	mov	r3, r4
 801cfc2:	f7ff fd47 	bl	801ca54 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801cfc6:	e74e      	b.n	801ce66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801cfc8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801cfca:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801cfcc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801cfd0:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 801cfd2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801cfd4:	1400      	asrs	r0, r0, #16
 801cfd6:	142d      	asrs	r5, r5, #16
 801cfd8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801cfda:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801cfde:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801cfe2:	fb02 5000 	mla	r0, r2, r0, r5
 801cfe6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801cfe8:	f815 9000 	ldrb.w	r9, [r5, r0]
 801cfec:	182e      	adds	r6, r5, r0
 801cfee:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801cff2:	eb04 0509 	add.w	r5, r4, r9
 801cff6:	2b00      	cmp	r3, #0
 801cff8:	f000 8096 	beq.w	801d128 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fc>
 801cffc:	7877      	ldrb	r7, [r6, #1]
 801cffe:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d002:	4427      	add	r7, r4
 801d004:	2900      	cmp	r1, #0
 801d006:	f000 8097 	beq.w	801d138 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 801d00a:	18b0      	adds	r0, r6, r2
 801d00c:	5cb2      	ldrb	r2, [r6, r2]
 801d00e:	7840      	ldrb	r0, [r0, #1]
 801d010:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d014:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d018:	4422      	add	r2, r4
 801d01a:	4420      	add	r0, r4
 801d01c:	b29b      	uxth	r3, r3
 801d01e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801d020:	b289      	uxth	r1, r1
 801d022:	f895 b002 	ldrb.w	fp, [r5, #2]
 801d026:	f8b6 c000 	ldrh.w	ip, [r6]
 801d02a:	fb03 f801 	mul.w	r8, r3, r1
 801d02e:	011b      	lsls	r3, r3, #4
 801d030:	78be      	ldrb	r6, [r7, #2]
 801d032:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801d036:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801d03a:	eba3 0308 	sub.w	r3, r3, r8
 801d03e:	f814 9009 	ldrb.w	r9, [r4, r9]
 801d042:	b289      	uxth	r1, r1
 801d044:	b29b      	uxth	r3, r3
 801d046:	ebae 0e01 	sub.w	lr, lr, r1
 801d04a:	435e      	muls	r6, r3
 801d04c:	fa1f fe8e 	uxth.w	lr, lr
 801d050:	9310      	str	r3, [sp, #64]	; 0x40
 801d052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d054:	fb0e 660b 	mla	r6, lr, fp, r6
 801d058:	f892 b002 	ldrb.w	fp, [r2, #2]
 801d05c:	fb01 660b 	mla	r6, r1, fp, r6
 801d060:	f890 b002 	ldrb.w	fp, [r0, #2]
 801d064:	fb08 660b 	mla	r6, r8, fp, r6
 801d068:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801d06c:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801d070:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801d074:	fb1b fb03 	smulbb	fp, fp, r3
 801d078:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d07a:	fb06 b60a 	mla	r6, r6, sl, fp
 801d07e:	f895 b001 	ldrb.w	fp, [r5, #1]
 801d082:	787d      	ldrb	r5, [r7, #1]
 801d084:	783f      	ldrb	r7, [r7, #0]
 801d086:	b2b6      	uxth	r6, r6
 801d088:	435d      	muls	r5, r3
 801d08a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d08c:	fb0e 550b 	mla	r5, lr, fp, r5
 801d090:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d094:	fb01 550b 	mla	r5, r1, fp, r5
 801d098:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d09c:	fb08 550b 	mla	r5, r8, fp, r5
 801d0a0:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801d0a4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d0a8:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801d0ac:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801d0b0:	fa5f fc8c 	uxtb.w	ip, ip
 801d0b4:	fb1b fb03 	smulbb	fp, fp, r3
 801d0b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d0ba:	437b      	muls	r3, r7
 801d0bc:	7817      	ldrb	r7, [r2, #0]
 801d0be:	fb05 b50a 	mla	r5, r5, sl, fp
 801d0c2:	fb0e 3309 	mla	r3, lr, r9, r3
 801d0c6:	b2ad      	uxth	r5, r5
 801d0c8:	fb01 3307 	mla	r3, r1, r7, r3
 801d0cc:	7807      	ldrb	r7, [r0, #0]
 801d0ce:	f105 0b01 	add.w	fp, r5, #1
 801d0d2:	fb08 3707 	mla	r7, r8, r7, r3
 801d0d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d0d8:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801d0dc:	fb1c fc03 	smulbb	ip, ip, r3
 801d0e0:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801d0e4:	1c73      	adds	r3, r6, #1
 801d0e6:	096d      	lsrs	r5, r5, #5
 801d0e8:	fb07 c70a 	mla	r7, r7, sl, ip
 801d0ec:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801d0f0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d0f4:	b2bf      	uxth	r7, r7
 801d0f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d0f8:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801d0fc:	1c7a      	adds	r2, r7, #1
 801d0fe:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801d102:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d106:	4316      	orrs	r6, r2
 801d108:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d10a:	432e      	orrs	r6, r5
 801d10c:	f823 6b02 	strh.w	r6, [r3], #2
 801d110:	930c      	str	r3, [sp, #48]	; 0x30
 801d112:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d114:	4413      	add	r3, r2
 801d116:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801d118:	9327      	str	r3, [sp, #156]	; 0x9c
 801d11a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d11c:	4413      	add	r3, r2
 801d11e:	9328      	str	r3, [sp, #160]	; 0xa0
 801d120:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d122:	3b01      	subs	r3, #1
 801d124:	9311      	str	r3, [sp, #68]	; 0x44
 801d126:	e6db      	b.n	801cee0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 801d128:	b149      	cbz	r1, 801d13e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 801d12a:	5cb2      	ldrb	r2, [r6, r2]
 801d12c:	4628      	mov	r0, r5
 801d12e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d132:	4422      	add	r2, r4
 801d134:	462f      	mov	r7, r5
 801d136:	e771      	b.n	801d01c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 801d138:	4628      	mov	r0, r5
 801d13a:	462a      	mov	r2, r5
 801d13c:	e76e      	b.n	801d01c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 801d13e:	4628      	mov	r0, r5
 801d140:	462a      	mov	r2, r5
 801d142:	e7f7      	b.n	801d134 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 801d144:	b015      	add	sp, #84	; 0x54
 801d146:	ecbd 8b08 	vpop	{d8-d11}
 801d14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801d150 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801d150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d154:	880e      	ldrh	r6, [r1, #0]
 801d156:	b085      	sub	sp, #20
 801d158:	4691      	mov	r9, r2
 801d15a:	0230      	lsls	r0, r6, #8
 801d15c:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801d160:	9101      	str	r1, [sp, #4]
 801d162:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 801d166:	0170      	lsls	r0, r6, #5
 801d168:	00f6      	lsls	r6, r6, #3
 801d16a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801d16e:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 801d172:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 801d176:	b2f6      	uxtb	r6, r6
 801d178:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801d17c:	ea4b 0000 	orr.w	r0, fp, r0
 801d180:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 801d184:	4306      	orrs	r6, r0
 801d186:	fb05 7a0c 	mla	sl, r5, ip, r7
 801d18a:	2d00      	cmp	r5, #0
 801d18c:	9603      	str	r6, [sp, #12]
 801d18e:	eb09 0e0a 	add.w	lr, r9, sl
 801d192:	db42      	blt.n	801d21a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 801d194:	45a8      	cmp	r8, r5
 801d196:	dd40      	ble.n	801d21a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 801d198:	2f00      	cmp	r7, #0
 801d19a:	db3c      	blt.n	801d216 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 801d19c:	45bc      	cmp	ip, r7
 801d19e:	dd3a      	ble.n	801d216 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 801d1a0:	f819 600a 	ldrb.w	r6, [r9, sl]
 801d1a4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d1a8:	441e      	add	r6, r3
 801d1aa:	1c78      	adds	r0, r7, #1
 801d1ac:	d438      	bmi.n	801d220 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 801d1ae:	4584      	cmp	ip, r0
 801d1b0:	dd36      	ble.n	801d220 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 801d1b2:	b3aa      	cbz	r2, 801d220 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 801d1b4:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801d1b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d1bc:	4418      	add	r0, r3
 801d1be:	3501      	adds	r5, #1
 801d1c0:	d432      	bmi.n	801d228 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 801d1c2:	45a8      	cmp	r8, r5
 801d1c4:	dd30      	ble.n	801d228 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 801d1c6:	b37c      	cbz	r4, 801d228 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 801d1c8:	2f00      	cmp	r7, #0
 801d1ca:	db2b      	blt.n	801d224 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 801d1cc:	45bc      	cmp	ip, r7
 801d1ce:	dd29      	ble.n	801d224 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 801d1d0:	f81e 500c 	ldrb.w	r5, [lr, ip]
 801d1d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d1d8:	441d      	add	r5, r3
 801d1da:	3701      	adds	r7, #1
 801d1dc:	d427      	bmi.n	801d22e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 801d1de:	45bc      	cmp	ip, r7
 801d1e0:	dd25      	ble.n	801d22e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 801d1e2:	b322      	cbz	r2, 801d22e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 801d1e4:	44f4      	add	ip, lr
 801d1e6:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801d1ea:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d1ee:	443b      	add	r3, r7
 801d1f0:	781f      	ldrb	r7, [r3, #0]
 801d1f2:	2a0f      	cmp	r2, #15
 801d1f4:	f896 9000 	ldrb.w	r9, [r6]
 801d1f8:	f890 a000 	ldrb.w	sl, [r0]
 801d1fc:	4639      	mov	r1, r7
 801d1fe:	f895 8000 	ldrb.w	r8, [r5]
 801d202:	d801      	bhi.n	801d208 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb8>
 801d204:	2c0f      	cmp	r4, #15
 801d206:	d914      	bls.n	801d232 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe2>
 801d208:	4b2c      	ldr	r3, [pc, #176]	; (801d2bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 801d20a:	f240 11f9 	movw	r1, #505	; 0x1f9
 801d20e:	4a2c      	ldr	r2, [pc, #176]	; (801d2c0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 801d210:	482c      	ldr	r0, [pc, #176]	; (801d2c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x174>)
 801d212:	f007 fbf1 	bl	80249f8 <__assert_func>
 801d216:	ae03      	add	r6, sp, #12
 801d218:	e7c7      	b.n	801d1aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 801d21a:	a803      	add	r0, sp, #12
 801d21c:	4606      	mov	r6, r0
 801d21e:	e7ce      	b.n	801d1be <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801d220:	a803      	add	r0, sp, #12
 801d222:	e7cc      	b.n	801d1be <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801d224:	ad03      	add	r5, sp, #12
 801d226:	e7d8      	b.n	801d1da <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8a>
 801d228:	ab03      	add	r3, sp, #12
 801d22a:	461d      	mov	r5, r3
 801d22c:	e7e0      	b.n	801d1f0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 801d22e:	ab03      	add	r3, sp, #12
 801d230:	e7de      	b.n	801d1f0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 801d232:	b292      	uxth	r2, r2
 801d234:	f890 c002 	ldrb.w	ip, [r0, #2]
 801d238:	b2a4      	uxth	r4, r4
 801d23a:	f896 b002 	ldrb.w	fp, [r6, #2]
 801d23e:	7840      	ldrb	r0, [r0, #1]
 801d240:	fb02 fe04 	mul.w	lr, r2, r4
 801d244:	0112      	lsls	r2, r2, #4
 801d246:	7876      	ldrb	r6, [r6, #1]
 801d248:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801d24c:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801d250:	eba2 020e 	sub.w	r2, r2, lr
 801d254:	b2a4      	uxth	r4, r4
 801d256:	b292      	uxth	r2, r2
 801d258:	1b3f      	subs	r7, r7, r4
 801d25a:	fb02 fc0c 	mul.w	ip, r2, ip
 801d25e:	b2bf      	uxth	r7, r7
 801d260:	fb07 cc0b 	mla	ip, r7, fp, ip
 801d264:	f895 b002 	ldrb.w	fp, [r5, #2]
 801d268:	fb04 cc0b 	mla	ip, r4, fp, ip
 801d26c:	f893 b002 	ldrb.w	fp, [r3, #2]
 801d270:	785b      	ldrb	r3, [r3, #1]
 801d272:	fb0e cc0b 	mla	ip, lr, fp, ip
 801d276:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801d27a:	fb02 fc0a 	mul.w	ip, r2, sl
 801d27e:	4342      	muls	r2, r0
 801d280:	7868      	ldrb	r0, [r5, #1]
 801d282:	fb07 cc09 	mla	ip, r7, r9, ip
 801d286:	fb07 2206 	mla	r2, r7, r6, r2
 801d28a:	fb04 cc08 	mla	ip, r4, r8, ip
 801d28e:	fb04 2400 	mla	r4, r4, r0, r2
 801d292:	fb0e cc01 	mla	ip, lr, r1, ip
 801d296:	fb0e 4e03 	mla	lr, lr, r3, r4
 801d29a:	9b01      	ldr	r3, [sp, #4]
 801d29c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d2a0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801d2a4:	ea4c 0c0b 	orr.w	ip, ip, fp
 801d2a8:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801d2ac:	ea4c 0c0e 	orr.w	ip, ip, lr
 801d2b0:	f8a3 c000 	strh.w	ip, [r3]
 801d2b4:	b005      	add	sp, #20
 801d2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2ba:	bf00      	nop
 801d2bc:	0802a0bb 	.word	0x0802a0bb
 801d2c0:	0802a5ea 	.word	0x0802a5ea
 801d2c4:	0802a088 	.word	0x0802a088

0801d2c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2cc:	ed2d 8b08 	vpush	{d8-d11}
 801d2d0:	b08f      	sub	sp, #60	; 0x3c
 801d2d2:	eeb0 aa40 	vmov.f32	s20, s0
 801d2d6:	eef0 9a60 	vmov.f32	s19, s1
 801d2da:	920c      	str	r2, [sp, #48]	; 0x30
 801d2dc:	eeb0 9a41 	vmov.f32	s18, s2
 801d2e0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801d2e2:	eeb0 8a62 	vmov.f32	s16, s5
 801d2e6:	900d      	str	r0, [sp, #52]	; 0x34
 801d2e8:	eef0 8a43 	vmov.f32	s17, s6
 801d2ec:	6850      	ldr	r0, [r2, #4]
 801d2ee:	eef0 ba44 	vmov.f32	s23, s8
 801d2f2:	910a      	str	r1, [sp, #40]	; 0x28
 801d2f4:	eeb0 ba64 	vmov.f32	s22, s9
 801d2f8:	9306      	str	r3, [sp, #24]
 801d2fa:	eef0 aa45 	vmov.f32	s21, s10
 801d2fe:	6812      	ldr	r2, [r2, #0]
 801d300:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801d304:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 801d308:	fb00 1303 	mla	r3, r0, r3, r1
 801d30c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d310:	9307      	str	r3, [sp, #28]
 801d312:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d314:	681b      	ldr	r3, [r3, #0]
 801d316:	9308      	str	r3, [sp, #32]
 801d318:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d31a:	685c      	ldr	r4, [r3, #4]
 801d31c:	3404      	adds	r4, #4
 801d31e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d320:	2b00      	cmp	r3, #0
 801d322:	dc03      	bgt.n	801d32c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d324:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d326:	2b00      	cmp	r3, #0
 801d328:	f340 81d5 	ble.w	801d6d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 801d32c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d32e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d332:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d336:	1e48      	subs	r0, r1, #1
 801d338:	1e56      	subs	r6, r2, #1
 801d33a:	9b06      	ldr	r3, [sp, #24]
 801d33c:	2b00      	cmp	r3, #0
 801d33e:	f340 80b6 	ble.w	801d4ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801d342:	ea5f 472b 	movs.w	r7, fp, asr #16
 801d346:	ea4f 4325 	mov.w	r3, r5, asr #16
 801d34a:	d406      	bmi.n	801d35a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d34c:	4287      	cmp	r7, r0
 801d34e:	da04      	bge.n	801d35a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d350:	2b00      	cmp	r3, #0
 801d352:	db02      	blt.n	801d35a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d354:	42b3      	cmp	r3, r6
 801d356:	f2c0 80ab 	blt.w	801d4b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d35a:	3701      	adds	r7, #1
 801d35c:	f100 809c 	bmi.w	801d498 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801d360:	42b9      	cmp	r1, r7
 801d362:	f2c0 8099 	blt.w	801d498 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801d366:	3301      	adds	r3, #1
 801d368:	f100 8096 	bmi.w	801d498 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801d36c:	429a      	cmp	r2, r3
 801d36e:	f2c0 8093 	blt.w	801d498 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801d372:	9b06      	ldr	r3, [sp, #24]
 801d374:	930b      	str	r3, [sp, #44]	; 0x2c
 801d376:	9b07      	ldr	r3, [sp, #28]
 801d378:	9309      	str	r3, [sp, #36]	; 0x24
 801d37a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d37c:	2b00      	cmp	r3, #0
 801d37e:	f340 80b4 	ble.w	801d4ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 801d382:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801d384:	142e      	asrs	r6, r5, #16
 801d386:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801d388:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801d38c:	68c7      	ldr	r7, [r0, #12]
 801d38e:	ea5f 402b 	movs.w	r0, fp, asr #16
 801d392:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d396:	6892      	ldr	r2, [r2, #8]
 801d398:	f100 80fb 	bmi.w	801d592 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801d39c:	f102 3cff 	add.w	ip, r2, #4294967295
 801d3a0:	4560      	cmp	r0, ip
 801d3a2:	f280 80f6 	bge.w	801d592 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801d3a6:	2e00      	cmp	r6, #0
 801d3a8:	f2c0 80f3 	blt.w	801d592 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801d3ac:	f107 3cff 	add.w	ip, r7, #4294967295
 801d3b0:	4566      	cmp	r6, ip
 801d3b2:	f280 80ee 	bge.w	801d592 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801d3b6:	b212      	sxth	r2, r2
 801d3b8:	fb06 0002 	mla	r0, r6, r2, r0
 801d3bc:	9e08      	ldr	r6, [sp, #32]
 801d3be:	1837      	adds	r7, r6, r0
 801d3c0:	5c30      	ldrb	r0, [r6, r0]
 801d3c2:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801d3c6:	eb04 0c08 	add.w	ip, r4, r8
 801d3ca:	2b00      	cmp	r3, #0
 801d3cc:	f000 80d3 	beq.w	801d576 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 801d3d0:	787e      	ldrb	r6, [r7, #1]
 801d3d2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d3d6:	4426      	add	r6, r4
 801d3d8:	2900      	cmp	r1, #0
 801d3da:	f000 80d4 	beq.w	801d586 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801d3de:	18b8      	adds	r0, r7, r2
 801d3e0:	5cba      	ldrb	r2, [r7, r2]
 801d3e2:	7840      	ldrb	r0, [r0, #1]
 801d3e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d3e8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d3ec:	4422      	add	r2, r4
 801d3ee:	4420      	add	r0, r4
 801d3f0:	b29b      	uxth	r3, r3
 801d3f2:	78b7      	ldrb	r7, [r6, #2]
 801d3f4:	b289      	uxth	r1, r1
 801d3f6:	f89c a002 	ldrb.w	sl, [ip, #2]
 801d3fa:	f89c c001 	ldrb.w	ip, [ip, #1]
 801d3fe:	fb03 f901 	mul.w	r9, r3, r1
 801d402:	011b      	lsls	r3, r3, #4
 801d404:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d408:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801d40c:	eba3 0309 	sub.w	r3, r3, r9
 801d410:	b289      	uxth	r1, r1
 801d412:	b29b      	uxth	r3, r3
 801d414:	ebae 0e01 	sub.w	lr, lr, r1
 801d418:	435f      	muls	r7, r3
 801d41a:	fa1f fe8e 	uxth.w	lr, lr
 801d41e:	fb0e 770a 	mla	r7, lr, sl, r7
 801d422:	f892 a002 	ldrb.w	sl, [r2, #2]
 801d426:	fb01 770a 	mla	r7, r1, sl, r7
 801d42a:	f890 a002 	ldrb.w	sl, [r0, #2]
 801d42e:	fb09 7a0a 	mla	sl, r9, sl, r7
 801d432:	f814 7008 	ldrb.w	r7, [r4, r8]
 801d436:	f896 8000 	ldrb.w	r8, [r6]
 801d43a:	7876      	ldrb	r6, [r6, #1]
 801d43c:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801d440:	fb03 f808 	mul.w	r8, r3, r8
 801d444:	4373      	muls	r3, r6
 801d446:	fb0e 8807 	mla	r8, lr, r7, r8
 801d44a:	7817      	ldrb	r7, [r2, #0]
 801d44c:	fb0e 330c 	mla	r3, lr, ip, r3
 801d450:	fb01 8807 	mla	r8, r1, r7, r8
 801d454:	7807      	ldrb	r7, [r0, #0]
 801d456:	fb09 8707 	mla	r7, r9, r7, r8
 801d45a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d45e:	ea47 070a 	orr.w	r7, r7, sl
 801d462:	f892 a001 	ldrb.w	sl, [r2, #1]
 801d466:	fb01 310a 	mla	r1, r1, sl, r3
 801d46a:	f890 a001 	ldrb.w	sl, [r0, #1]
 801d46e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d470:	fb09 1a0a 	mla	sl, r9, sl, r1
 801d474:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d478:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d47c:	ea47 070a 	orr.w	r7, r7, sl
 801d480:	801f      	strh	r7, [r3, #0]
 801d482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d484:	3302      	adds	r3, #2
 801d486:	9309      	str	r3, [sp, #36]	; 0x24
 801d488:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d48a:	449b      	add	fp, r3
 801d48c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d48e:	441d      	add	r5, r3
 801d490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d492:	3b01      	subs	r3, #1
 801d494:	930b      	str	r3, [sp, #44]	; 0x2c
 801d496:	e770      	b.n	801d37a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801d498:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d49a:	449b      	add	fp, r3
 801d49c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d49e:	441d      	add	r5, r3
 801d4a0:	9b06      	ldr	r3, [sp, #24]
 801d4a2:	3b01      	subs	r3, #1
 801d4a4:	9306      	str	r3, [sp, #24]
 801d4a6:	9b07      	ldr	r3, [sp, #28]
 801d4a8:	3302      	adds	r3, #2
 801d4aa:	9307      	str	r3, [sp, #28]
 801d4ac:	e745      	b.n	801d33a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d4ae:	d023      	beq.n	801d4f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801d4b0:	9b06      	ldr	r3, [sp, #24]
 801d4b2:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801d4b4:	3b01      	subs	r3, #1
 801d4b6:	fb00 b003 	mla	r0, r0, r3, fp
 801d4ba:	1400      	asrs	r0, r0, #16
 801d4bc:	f53f af59 	bmi.w	801d372 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801d4c0:	3901      	subs	r1, #1
 801d4c2:	4288      	cmp	r0, r1
 801d4c4:	f6bf af55 	bge.w	801d372 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801d4c8:	9924      	ldr	r1, [sp, #144]	; 0x90
 801d4ca:	fb01 5303 	mla	r3, r1, r3, r5
 801d4ce:	141b      	asrs	r3, r3, #16
 801d4d0:	f53f af4f 	bmi.w	801d372 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801d4d4:	3a01      	subs	r2, #1
 801d4d6:	4293      	cmp	r3, r2
 801d4d8:	f6bf af4b 	bge.w	801d372 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801d4dc:	9b06      	ldr	r3, [sp, #24]
 801d4de:	9309      	str	r3, [sp, #36]	; 0x24
 801d4e0:	9b07      	ldr	r3, [sp, #28]
 801d4e2:	930b      	str	r3, [sp, #44]	; 0x2c
 801d4e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d4e6:	2b00      	cmp	r3, #0
 801d4e8:	dc70      	bgt.n	801d5cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 801d4ea:	9b06      	ldr	r3, [sp, #24]
 801d4ec:	9a07      	ldr	r2, [sp, #28]
 801d4ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d4f2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d4f6:	9307      	str	r3, [sp, #28]
 801d4f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d4fa:	2b00      	cmp	r3, #0
 801d4fc:	f340 80eb 	ble.w	801d6d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 801d500:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d504:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d506:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801d50a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801d50e:	eef0 6a48 	vmov.f32	s13, s16
 801d512:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801d516:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801d51a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d51e:	ee16 ba90 	vmov	fp, s13
 801d522:	eef0 6a68 	vmov.f32	s13, s17
 801d526:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d52a:	ee16 5a90 	vmov	r5, s13
 801d52e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801d532:	ee69 7a27 	vmul.f32	s15, s18, s15
 801d536:	ee37 8a48 	vsub.f32	s16, s14, s16
 801d53a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801d53e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801d542:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801d546:	ee18 2a10 	vmov	r2, s16
 801d54a:	eeb0 8a47 	vmov.f32	s16, s14
 801d54e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d552:	ee18 2a90 	vmov	r2, s17
 801d556:	9323      	str	r3, [sp, #140]	; 0x8c
 801d558:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d55a:	eef0 8a67 	vmov.f32	s17, s15
 801d55e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d562:	9324      	str	r3, [sp, #144]	; 0x90
 801d564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d566:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d568:	3b01      	subs	r3, #1
 801d56a:	930a      	str	r3, [sp, #40]	; 0x28
 801d56c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d56e:	bf08      	it	eq
 801d570:	4613      	moveq	r3, r2
 801d572:	9306      	str	r3, [sp, #24]
 801d574:	e6d3      	b.n	801d31e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801d576:	b149      	cbz	r1, 801d58c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 801d578:	5cba      	ldrb	r2, [r7, r2]
 801d57a:	4660      	mov	r0, ip
 801d57c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d580:	4422      	add	r2, r4
 801d582:	4666      	mov	r6, ip
 801d584:	e734      	b.n	801d3f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801d586:	4660      	mov	r0, ip
 801d588:	4662      	mov	r2, ip
 801d58a:	e731      	b.n	801d3f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801d58c:	4660      	mov	r0, ip
 801d58e:	4662      	mov	r2, ip
 801d590:	e7f7      	b.n	801d582 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801d592:	f110 0c01 	adds.w	ip, r0, #1
 801d596:	f53f af74 	bmi.w	801d482 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d59a:	4562      	cmp	r2, ip
 801d59c:	f6ff af71 	blt.w	801d482 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d5a0:	f116 0c01 	adds.w	ip, r6, #1
 801d5a4:	f53f af6d 	bmi.w	801d482 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d5a8:	4567      	cmp	r7, ip
 801d5aa:	f6ff af6a 	blt.w	801d482 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d5ae:	b23f      	sxth	r7, r7
 801d5b0:	b212      	sxth	r2, r2
 801d5b2:	9701      	str	r7, [sp, #4]
 801d5b4:	9200      	str	r2, [sp, #0]
 801d5b6:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801d5ba:	e9cd 0602 	strd	r0, r6, [sp, #8]
 801d5be:	4623      	mov	r3, r4
 801d5c0:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d5c2:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801d5c6:	f7ff fdc3 	bl	801d150 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801d5ca:	e75a      	b.n	801d482 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d5cc:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801d5ce:	ea4f 462b 	mov.w	r6, fp, asr #16
 801d5d2:	1428      	asrs	r0, r5, #16
 801d5d4:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801d5d8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801d5dc:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d5e0:	fb02 6000 	mla	r0, r2, r0, r6
 801d5e4:	9e08      	ldr	r6, [sp, #32]
 801d5e6:	f816 8000 	ldrb.w	r8, [r6, r0]
 801d5ea:	1837      	adds	r7, r6, r0
 801d5ec:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d5f0:	eb04 0c08 	add.w	ip, r4, r8
 801d5f4:	2b00      	cmp	r3, #0
 801d5f6:	d060      	beq.n	801d6ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801d5f8:	787e      	ldrb	r6, [r7, #1]
 801d5fa:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d5fe:	4426      	add	r6, r4
 801d600:	2900      	cmp	r1, #0
 801d602:	d062      	beq.n	801d6ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 801d604:	18b8      	adds	r0, r7, r2
 801d606:	5cba      	ldrb	r2, [r7, r2]
 801d608:	7840      	ldrb	r0, [r0, #1]
 801d60a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d60e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d612:	4422      	add	r2, r4
 801d614:	4420      	add	r0, r4
 801d616:	b29b      	uxth	r3, r3
 801d618:	78b7      	ldrb	r7, [r6, #2]
 801d61a:	b289      	uxth	r1, r1
 801d61c:	f89c a002 	ldrb.w	sl, [ip, #2]
 801d620:	f89c c001 	ldrb.w	ip, [ip, #1]
 801d624:	fb03 f901 	mul.w	r9, r3, r1
 801d628:	011b      	lsls	r3, r3, #4
 801d62a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d62e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801d632:	eba3 0309 	sub.w	r3, r3, r9
 801d636:	b289      	uxth	r1, r1
 801d638:	b29b      	uxth	r3, r3
 801d63a:	ebae 0e01 	sub.w	lr, lr, r1
 801d63e:	435f      	muls	r7, r3
 801d640:	fa1f fe8e 	uxth.w	lr, lr
 801d644:	fb0e 770a 	mla	r7, lr, sl, r7
 801d648:	f892 a002 	ldrb.w	sl, [r2, #2]
 801d64c:	fb01 770a 	mla	r7, r1, sl, r7
 801d650:	f890 a002 	ldrb.w	sl, [r0, #2]
 801d654:	fb09 7a0a 	mla	sl, r9, sl, r7
 801d658:	f814 7008 	ldrb.w	r7, [r4, r8]
 801d65c:	f896 8000 	ldrb.w	r8, [r6]
 801d660:	7876      	ldrb	r6, [r6, #1]
 801d662:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801d666:	fb03 f808 	mul.w	r8, r3, r8
 801d66a:	4373      	muls	r3, r6
 801d66c:	7856      	ldrb	r6, [r2, #1]
 801d66e:	fb0e 8807 	mla	r8, lr, r7, r8
 801d672:	7817      	ldrb	r7, [r2, #0]
 801d674:	fb0e 330c 	mla	r3, lr, ip, r3
 801d678:	fb01 8807 	mla	r8, r1, r7, r8
 801d67c:	7807      	ldrb	r7, [r0, #0]
 801d67e:	fb01 3306 	mla	r3, r1, r6, r3
 801d682:	fb09 8707 	mla	r7, r9, r7, r8
 801d686:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d68a:	ea47 070a 	orr.w	r7, r7, sl
 801d68e:	f890 a001 	ldrb.w	sl, [r0, #1]
 801d692:	fb09 3a0a 	mla	sl, r9, sl, r3
 801d696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d698:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d69c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d6a0:	ea47 070a 	orr.w	r7, r7, sl
 801d6a4:	f823 7b02 	strh.w	r7, [r3], #2
 801d6a8:	930b      	str	r3, [sp, #44]	; 0x2c
 801d6aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d6ac:	449b      	add	fp, r3
 801d6ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d6b0:	441d      	add	r5, r3
 801d6b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d6b4:	3b01      	subs	r3, #1
 801d6b6:	9309      	str	r3, [sp, #36]	; 0x24
 801d6b8:	e714      	b.n	801d4e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 801d6ba:	b149      	cbz	r1, 801d6d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 801d6bc:	5cba      	ldrb	r2, [r7, r2]
 801d6be:	4660      	mov	r0, ip
 801d6c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d6c4:	4422      	add	r2, r4
 801d6c6:	4666      	mov	r6, ip
 801d6c8:	e7a5      	b.n	801d616 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 801d6ca:	4660      	mov	r0, ip
 801d6cc:	4662      	mov	r2, ip
 801d6ce:	e7a2      	b.n	801d616 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 801d6d0:	4660      	mov	r0, ip
 801d6d2:	4662      	mov	r2, ip
 801d6d4:	e7f7      	b.n	801d6c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 801d6d6:	b00f      	add	sp, #60	; 0x3c
 801d6d8:	ecbd 8b08 	vpop	{d8-d11}
 801d6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d6e0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801d6e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6e4:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
 801d6e8:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801d6ec:	2c00      	cmp	r4, #0
 801d6ee:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801d6f2:	fb04 560c 	mla	r6, r4, ip, r5
 801d6f6:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 801d6fa:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 801d6fe:	eb02 0e06 	add.w	lr, r2, r6
 801d702:	db3d      	blt.n	801d780 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 801d704:	45a0      	cmp	r8, r4
 801d706:	dd3b      	ble.n	801d780 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 801d708:	2d00      	cmp	r5, #0
 801d70a:	db37      	blt.n	801d77c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 801d70c:	45ac      	cmp	ip, r5
 801d70e:	dd35      	ble.n	801d77c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 801d710:	5d92      	ldrb	r2, [r2, r6]
 801d712:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801d716:	1c6e      	adds	r6, r5, #1
 801d718:	d435      	bmi.n	801d786 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 801d71a:	45b4      	cmp	ip, r6
 801d71c:	dd33      	ble.n	801d786 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 801d71e:	b3a0      	cbz	r0, 801d78a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xaa>
 801d720:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801d724:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 801d728:	3401      	adds	r4, #1
 801d72a:	d432      	bmi.n	801d792 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 801d72c:	45a0      	cmp	r8, r4
 801d72e:	dd30      	ble.n	801d792 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 801d730:	b397      	cbz	r7, 801d798 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb8>
 801d732:	2d00      	cmp	r5, #0
 801d734:	db2b      	blt.n	801d78e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 801d736:	45ac      	cmp	ip, r5
 801d738:	dd29      	ble.n	801d78e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 801d73a:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801d73e:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 801d742:	3501      	adds	r5, #1
 801d744:	d42b      	bmi.n	801d79e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 801d746:	45ac      	cmp	ip, r5
 801d748:	dd29      	ble.n	801d79e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 801d74a:	b350      	cbz	r0, 801d7a2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 801d74c:	44f4      	add	ip, lr
 801d74e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801d752:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801d756:	280f      	cmp	r0, #15
 801d758:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801d75c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801d760:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801d764:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801d768:	d801      	bhi.n	801d76e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x8e>
 801d76a:	2f0f      	cmp	r7, #15
 801d76c:	d91b      	bls.n	801d7a6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc6>
 801d76e:	4b8d      	ldr	r3, [pc, #564]	; (801d9a4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 801d770:	f240 11f9 	movw	r1, #505	; 0x1f9
 801d774:	4a8c      	ldr	r2, [pc, #560]	; (801d9a8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 801d776:	488d      	ldr	r0, [pc, #564]	; (801d9ac <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 801d778:	f007 f93e 	bl	80249f8 <__assert_func>
 801d77c:	2200      	movs	r2, #0
 801d77e:	e7ca      	b.n	801d716 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x36>
 801d780:	2600      	movs	r6, #0
 801d782:	4632      	mov	r2, r6
 801d784:	e7d0      	b.n	801d728 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 801d786:	2600      	movs	r6, #0
 801d788:	e7ce      	b.n	801d728 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 801d78a:	4606      	mov	r6, r0
 801d78c:	e7cc      	b.n	801d728 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 801d78e:	2400      	movs	r4, #0
 801d790:	e7d7      	b.n	801d742 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x62>
 801d792:	2300      	movs	r3, #0
 801d794:	461c      	mov	r4, r3
 801d796:	e7de      	b.n	801d756 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 801d798:	463b      	mov	r3, r7
 801d79a:	463c      	mov	r4, r7
 801d79c:	e7db      	b.n	801d756 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 801d79e:	2300      	movs	r3, #0
 801d7a0:	e7d9      	b.n	801d756 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 801d7a2:	4603      	mov	r3, r0
 801d7a4:	e7d7      	b.n	801d756 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 801d7a6:	b280      	uxth	r0, r0
 801d7a8:	b2bf      	uxth	r7, r7
 801d7aa:	fb07 fe00 	mul.w	lr, r7, r0
 801d7ae:	0100      	lsls	r0, r0, #4
 801d7b0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801d7b4:	eba0 0c0e 	sub.w	ip, r0, lr
 801d7b8:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 801d7bc:	b2bf      	uxth	r7, r7
 801d7be:	fa1f fc8c 	uxth.w	ip, ip
 801d7c2:	1bed      	subs	r5, r5, r7
 801d7c4:	fb0a f00c 	mul.w	r0, sl, ip
 801d7c8:	b2ad      	uxth	r5, r5
 801d7ca:	fb0b 0005 	mla	r0, fp, r5, r0
 801d7ce:	fb07 0009 	mla	r0, r7, r9, r0
 801d7d2:	fb0e 0008 	mla	r0, lr, r8, r0
 801d7d6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d7da:	9001      	str	r0, [sp, #4]
 801d7dc:	2800      	cmp	r0, #0
 801d7de:	f000 80de 	beq.w	801d99e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2be>
 801d7e2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801d7e6:	d018      	beq.n	801d81a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x13a>
 801d7e8:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801d7ec:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801d7f0:	fb0b f000 	mul.w	r0, fp, r0
 801d7f4:	fb0b fb02 	mul.w	fp, fp, r2
 801d7f8:	0a02      	lsrs	r2, r0, #8
 801d7fa:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801d7fe:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801d802:	4402      	add	r2, r0
 801d804:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801d808:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801d80c:	0a12      	lsrs	r2, r2, #8
 801d80e:	0a00      	lsrs	r0, r0, #8
 801d810:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801d814:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801d818:	4302      	orrs	r2, r0
 801d81a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d81e:	d01a      	beq.n	801d856 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x176>
 801d820:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801d824:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d828:	fb0a f000 	mul.w	r0, sl, r0
 801d82c:	fb0a fa06 	mul.w	sl, sl, r6
 801d830:	0a06      	lsrs	r6, r0, #8
 801d832:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801d836:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801d83a:	4406      	add	r6, r0
 801d83c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801d840:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801d844:	0a36      	lsrs	r6, r6, #8
 801d846:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d84a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801d84e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d852:	ea46 060a 	orr.w	r6, r6, sl
 801d856:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d85a:	d01b      	beq.n	801d894 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1b4>
 801d85c:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801d860:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801d864:	fb09 fa0a 	mul.w	sl, r9, sl
 801d868:	fb09 f004 	mul.w	r0, r9, r4
 801d86c:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801d870:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d874:	f500 7980 	add.w	r9, r0, #256	; 0x100
 801d878:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801d87c:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801d880:	4454      	add	r4, sl
 801d882:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d886:	0a24      	lsrs	r4, r4, #8
 801d888:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801d88c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801d890:	ea44 0409 	orr.w	r4, r4, r9
 801d894:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801d898:	d01b      	beq.n	801d8d2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1f2>
 801d89a:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801d89e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d8a2:	fb08 f909 	mul.w	r9, r8, r9
 801d8a6:	fb08 f003 	mul.w	r0, r8, r3
 801d8aa:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801d8ae:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801d8b2:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801d8b6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d8ba:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 801d8be:	444b      	add	r3, r9
 801d8c0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801d8c4:	0a1b      	lsrs	r3, r3, #8
 801d8c6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801d8ca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d8ce:	ea43 0308 	orr.w	r3, r3, r8
 801d8d2:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801d8d6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d8da:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 801d8de:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801d8e2:	fb0c f808 	mul.w	r8, ip, r8
 801d8e6:	8808      	ldrh	r0, [r1, #0]
 801d8e8:	fb0c f606 	mul.w	r6, ip, r6
 801d8ec:	fb05 8909 	mla	r9, r5, r9, r8
 801d8f0:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 801d8f4:	fb05 6502 	mla	r5, r5, r2, r6
 801d8f8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801d8fc:	fb07 9908 	mla	r9, r7, r8, r9
 801d900:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 801d904:	fb07 5704 	mla	r7, r7, r4, r5
 801d908:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 801d90c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d910:	b2b6      	uxth	r6, r6
 801d912:	fb0e 9808 	mla	r8, lr, r8, r9
 801d916:	9a01      	ldr	r2, [sp, #4]
 801d918:	fb0e 7e03 	mla	lr, lr, r3, r7
 801d91c:	1205      	asrs	r5, r0, #8
 801d91e:	4372      	muls	r2, r6
 801d920:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801d924:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d928:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801d92c:	1c53      	adds	r3, r2, #1
 801d92e:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 801d932:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801d936:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d93a:	ea48 0e0e 	orr.w	lr, r8, lr
 801d93e:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801d942:	ea4f 421e 	mov.w	r2, lr, lsr #16
 801d946:	f3ce 2407 	ubfx	r4, lr, #8, #8
 801d94a:	b2db      	uxtb	r3, r3
 801d94c:	fb12 f206 	smulbb	r2, r2, r6
 801d950:	fa5f fe8e 	uxtb.w	lr, lr
 801d954:	fb14 f406 	smulbb	r4, r4, r6
 801d958:	fb05 2503 	mla	r5, r5, r3, r2
 801d95c:	10c2      	asrs	r2, r0, #3
 801d95e:	fb1e fe06 	smulbb	lr, lr, r6
 801d962:	00c0      	lsls	r0, r0, #3
 801d964:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801d968:	b2ad      	uxth	r5, r5
 801d96a:	b2c0      	uxtb	r0, r0
 801d96c:	fb02 4203 	mla	r2, r2, r3, r4
 801d970:	fb00 e303 	mla	r3, r0, r3, lr
 801d974:	b294      	uxth	r4, r2
 801d976:	b298      	uxth	r0, r3
 801d978:	1c6b      	adds	r3, r5, #1
 801d97a:	1c62      	adds	r2, r4, #1
 801d97c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801d980:	1c43      	adds	r3, r0, #1
 801d982:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801d986:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801d98a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801d98e:	0952      	lsrs	r2, r2, #5
 801d990:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801d994:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d998:	432b      	orrs	r3, r5
 801d99a:	4313      	orrs	r3, r2
 801d99c:	800b      	strh	r3, [r1, #0]
 801d99e:	b003      	add	sp, #12
 801d9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9a4:	0802a0bb 	.word	0x0802a0bb
 801d9a8:	0802a5ea 	.word	0x0802a5ea
 801d9ac:	0802a088 	.word	0x0802a088

0801d9b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9b4:	ed2d 8b08 	vpush	{d8-d11}
 801d9b8:	b09f      	sub	sp, #124	; 0x7c
 801d9ba:	eeb0 aa40 	vmov.f32	s20, s0
 801d9be:	eef0 9a60 	vmov.f32	s19, s1
 801d9c2:	921b      	str	r2, [sp, #108]	; 0x6c
 801d9c4:	eeb0 9a41 	vmov.f32	s18, s2
 801d9c8:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801d9ca:	eeb0 8a62 	vmov.f32	s16, s5
 801d9ce:	9309      	str	r3, [sp, #36]	; 0x24
 801d9d0:	eef0 8a43 	vmov.f32	s17, s6
 801d9d4:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 801d9d8:	eef0 ba44 	vmov.f32	s23, s8
 801d9dc:	901d      	str	r0, [sp, #116]	; 0x74
 801d9de:	eeb0 ba64 	vmov.f32	s22, s9
 801d9e2:	931c      	str	r3, [sp, #112]	; 0x70
 801d9e4:	eef0 aa45 	vmov.f32	s21, s10
 801d9e8:	6850      	ldr	r0, [r2, #4]
 801d9ea:	9119      	str	r1, [sp, #100]	; 0x64
 801d9ec:	6812      	ldr	r2, [r2, #0]
 801d9ee:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 801d9f0:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 801d9f4:	fb00 1303 	mla	r3, r0, r3, r1
 801d9f8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d9fc:	930c      	str	r3, [sp, #48]	; 0x30
 801d9fe:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801da00:	681b      	ldr	r3, [r3, #0]
 801da02:	9312      	str	r3, [sp, #72]	; 0x48
 801da04:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801da06:	685e      	ldr	r6, [r3, #4]
 801da08:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801da0c:	3604      	adds	r6, #4
 801da0e:	930d      	str	r3, [sp, #52]	; 0x34
 801da10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801da12:	2b00      	cmp	r3, #0
 801da14:	dc03      	bgt.n	801da1e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801da16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801da18:	2b00      	cmp	r3, #0
 801da1a:	f340 8387 	ble.w	801e12c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 801da1e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801da20:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801da24:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801da28:	1e48      	subs	r0, r1, #1
 801da2a:	1e57      	subs	r7, r2, #1
 801da2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da2e:	2b00      	cmp	r3, #0
 801da30:	f340 8194 	ble.w	801dd5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 801da34:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801da36:	142b      	asrs	r3, r5, #16
 801da38:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801da3c:	d406      	bmi.n	801da4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801da3e:	4584      	cmp	ip, r0
 801da40:	da04      	bge.n	801da4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801da42:	2b00      	cmp	r3, #0
 801da44:	db02      	blt.n	801da4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801da46:	42bb      	cmp	r3, r7
 801da48:	f2c0 8189 	blt.w	801dd5e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801da4c:	f11c 0c01 	adds.w	ip, ip, #1
 801da50:	f100 8177 	bmi.w	801dd42 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801da54:	4561      	cmp	r1, ip
 801da56:	f2c0 8174 	blt.w	801dd42 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801da5a:	3301      	adds	r3, #1
 801da5c:	f100 8171 	bmi.w	801dd42 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801da60:	429a      	cmp	r2, r3
 801da62:	f2c0 816e 	blt.w	801dd42 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801da66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da68:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801da6a:	931a      	str	r3, [sp, #104]	; 0x68
 801da6c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801da6e:	2b00      	cmp	r3, #0
 801da70:	f340 8193 	ble.w	801dd9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801da74:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801da76:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801da7a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801da7e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801da82:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801da84:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801da88:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801da8a:	141b      	asrs	r3, r3, #16
 801da8c:	f100 81d6 	bmi.w	801de3c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 801da90:	f100 38ff 	add.w	r8, r0, #4294967295
 801da94:	4543      	cmp	r3, r8
 801da96:	f280 81d1 	bge.w	801de3c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 801da9a:	f1bc 0f00 	cmp.w	ip, #0
 801da9e:	f2c0 81cd 	blt.w	801de3c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 801daa2:	f10e 38ff 	add.w	r8, lr, #4294967295
 801daa6:	45c4      	cmp	ip, r8
 801daa8:	f280 81c8 	bge.w	801de3c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 801daac:	b200      	sxth	r0, r0
 801daae:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801dab0:	fb0c 3300 	mla	r3, ip, r0, r3
 801dab4:	eb04 0803 	add.w	r8, r4, r3
 801dab8:	5ce3      	ldrb	r3, [r4, r3]
 801daba:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801dabe:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801dac2:	2a00      	cmp	r2, #0
 801dac4:	f000 81af 	beq.w	801de26 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801dac8:	f898 c001 	ldrb.w	ip, [r8, #1]
 801dacc:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801dad0:	940e      	str	r4, [sp, #56]	; 0x38
 801dad2:	0e24      	lsrs	r4, r4, #24
 801dad4:	9415      	str	r4, [sp, #84]	; 0x54
 801dad6:	b179      	cbz	r1, 801daf8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801dad8:	eb08 0c00 	add.w	ip, r8, r0
 801dadc:	f818 0000 	ldrb.w	r0, [r8, r0]
 801dae0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801dae4:	900a      	str	r0, [sp, #40]	; 0x28
 801dae6:	0e00      	lsrs	r0, r0, #24
 801dae8:	9013      	str	r0, [sp, #76]	; 0x4c
 801daea:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801daee:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801daf2:	900f      	str	r0, [sp, #60]	; 0x3c
 801daf4:	0e00      	lsrs	r0, r0, #24
 801daf6:	9016      	str	r0, [sp, #88]	; 0x58
 801daf8:	b292      	uxth	r2, r2
 801dafa:	9815      	ldr	r0, [sp, #84]	; 0x54
 801dafc:	b289      	uxth	r1, r1
 801dafe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801db00:	fb02 f901 	mul.w	r9, r2, r1
 801db04:	0112      	lsls	r2, r2, #4
 801db06:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801db0a:	eba2 0809 	sub.w	r8, r2, r9
 801db0e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801db12:	b289      	uxth	r1, r1
 801db14:	fa1f f888 	uxth.w	r8, r8
 801db18:	1a52      	subs	r2, r2, r1
 801db1a:	fb08 f000 	mul.w	r0, r8, r0
 801db1e:	b292      	uxth	r2, r2
 801db20:	fb02 000e 	mla	r0, r2, lr, r0
 801db24:	fb01 0004 	mla	r0, r1, r4, r0
 801db28:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801db2a:	fb09 0004 	mla	r0, r9, r4, r0
 801db2e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801db32:	2800      	cmp	r0, #0
 801db34:	f000 80fa 	beq.w	801dd2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801db38:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801db3c:	d01b      	beq.n	801db76 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801db3e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801db42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801db46:	fb0e fa0a 	mul.w	sl, lr, sl
 801db4a:	fb0e fe03 	mul.w	lr, lr, r3
 801db4e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801db52:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801db56:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801db5a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801db5e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801db62:	4453      	add	r3, sl
 801db64:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801db68:	0a1b      	lsrs	r3, r3, #8
 801db6a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801db6e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801db72:	ea43 030c 	orr.w	r3, r3, ip
 801db76:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801db78:	2cff      	cmp	r4, #255	; 0xff
 801db7a:	d021      	beq.n	801dbc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801db7c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801db7e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801db82:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801db84:	fb04 fb0b 	mul.w	fp, r4, fp
 801db88:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801db8a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801db8e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801db90:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801db94:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801db98:	fb04 fa0a 	mul.w	sl, r4, sl
 801db9c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dba0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801dba4:	44de      	add	lr, fp
 801dba6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dbaa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dbae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dbb2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dbb6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dbba:	ea4e 040a 	orr.w	r4, lr, sl
 801dbbe:	940e      	str	r4, [sp, #56]	; 0x38
 801dbc0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dbc2:	2cff      	cmp	r4, #255	; 0xff
 801dbc4:	d021      	beq.n	801dc0a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801dbc6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801dbc8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801dbcc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dbce:	fb04 fb0b 	mul.w	fp, r4, fp
 801dbd2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801dbd4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801dbd8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dbda:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dbde:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801dbe2:	fb04 fa0a 	mul.w	sl, r4, sl
 801dbe6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dbea:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801dbee:	44de      	add	lr, fp
 801dbf0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dbf4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dbf8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dbfc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dc00:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dc04:	ea4e 040a 	orr.w	r4, lr, sl
 801dc08:	940a      	str	r4, [sp, #40]	; 0x28
 801dc0a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801dc0c:	2cff      	cmp	r4, #255	; 0xff
 801dc0e:	d021      	beq.n	801dc54 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801dc10:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801dc12:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801dc16:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801dc18:	fb04 fb0b 	mul.w	fp, r4, fp
 801dc1c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801dc1e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801dc22:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801dc24:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dc28:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801dc2c:	fb04 fa0a 	mul.w	sl, r4, sl
 801dc30:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dc34:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801dc38:	44de      	add	lr, fp
 801dc3a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dc3e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dc42:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dc46:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dc4a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dc4e:	ea4e 040a 	orr.w	r4, lr, sl
 801dc52:	940f      	str	r4, [sp, #60]	; 0x3c
 801dc54:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801dc56:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801dc5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dc5e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801dc62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801dc64:	fb08 fc0c 	mul.w	ip, r8, ip
 801dc68:	fb02 cc0e 	mla	ip, r2, lr, ip
 801dc6c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801dc70:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801dc72:	fb01 cc0e 	mla	ip, r1, lr, ip
 801dc76:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801dc7a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801dc7c:	fb09 cc0e 	mla	ip, r9, lr, ip
 801dc80:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801dc84:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801dc86:	fb08 f80e 	mul.w	r8, r8, lr
 801dc8a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dc8e:	fb02 8303 	mla	r3, r2, r3, r8
 801dc92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801dc94:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dc98:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801dc9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801dc9e:	fb01 330a 	mla	r3, r1, sl, r3
 801dca2:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801dca6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dca8:	fb09 3901 	mla	r9, r9, r1, r3
 801dcac:	883b      	ldrh	r3, [r7, #0]
 801dcae:	4342      	muls	r2, r0
 801dcb0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801dcb4:	1c50      	adds	r0, r2, #1
 801dcb6:	1219      	asrs	r1, r3, #8
 801dcb8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801dcbc:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801dcc0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801dcc4:	ea4c 0c09 	orr.w	ip, ip, r9
 801dcc8:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801dccc:	ea4f 421c 	mov.w	r2, ip, lsr #16
 801dcd0:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 801dcd4:	b2c0      	uxtb	r0, r0
 801dcd6:	fb12 f204 	smulbb	r2, r2, r4
 801dcda:	fa5f fc8c 	uxtb.w	ip, ip
 801dcde:	fb1e fe04 	smulbb	lr, lr, r4
 801dce2:	fb01 2100 	mla	r1, r1, r0, r2
 801dce6:	10da      	asrs	r2, r3, #3
 801dce8:	fb1c fc04 	smulbb	ip, ip, r4
 801dcec:	00db      	lsls	r3, r3, #3
 801dcee:	b289      	uxth	r1, r1
 801dcf0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801dcf4:	b2db      	uxtb	r3, r3
 801dcf6:	fb02 e200 	mla	r2, r2, r0, lr
 801dcfa:	fb03 c300 	mla	r3, r3, r0, ip
 801dcfe:	b292      	uxth	r2, r2
 801dd00:	fa1f fc83 	uxth.w	ip, r3
 801dd04:	1c4b      	adds	r3, r1, #1
 801dd06:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801dd0a:	f10c 0301 	add.w	r3, ip, #1
 801dd0e:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801dd12:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801dd16:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801dd1a:	430b      	orrs	r3, r1
 801dd1c:	1c51      	adds	r1, r2, #1
 801dd1e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801dd22:	0952      	lsrs	r2, r2, #5
 801dd24:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801dd28:	4313      	orrs	r3, r2
 801dd2a:	803b      	strh	r3, [r7, #0]
 801dd2c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801dd2e:	3702      	adds	r7, #2
 801dd30:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801dd32:	441a      	add	r2, r3
 801dd34:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801dd36:	441d      	add	r5, r3
 801dd38:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801dd3a:	9231      	str	r2, [sp, #196]	; 0xc4
 801dd3c:	3b01      	subs	r3, #1
 801dd3e:	931a      	str	r3, [sp, #104]	; 0x68
 801dd40:	e694      	b.n	801da6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 801dd42:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801dd44:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801dd46:	441c      	add	r4, r3
 801dd48:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801dd4a:	441d      	add	r5, r3
 801dd4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dd4e:	9431      	str	r4, [sp, #196]	; 0xc4
 801dd50:	3b01      	subs	r3, #1
 801dd52:	9309      	str	r3, [sp, #36]	; 0x24
 801dd54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dd56:	3302      	adds	r3, #2
 801dd58:	930c      	str	r3, [sp, #48]	; 0x30
 801dd5a:	e667      	b.n	801da2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801dd5c:	d024      	beq.n	801dda8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 801dd5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dd60:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801dd62:	3b01      	subs	r3, #1
 801dd64:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801dd66:	fb00 4003 	mla	r0, r0, r3, r4
 801dd6a:	1400      	asrs	r0, r0, #16
 801dd6c:	f53f ae7b 	bmi.w	801da66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801dd70:	3901      	subs	r1, #1
 801dd72:	4288      	cmp	r0, r1
 801dd74:	f6bf ae77 	bge.w	801da66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801dd78:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801dd7a:	fb01 5303 	mla	r3, r1, r3, r5
 801dd7e:	141b      	asrs	r3, r3, #16
 801dd80:	f53f ae71 	bmi.w	801da66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801dd84:	3a01      	subs	r2, #1
 801dd86:	4293      	cmp	r3, r2
 801dd88:	f6bf ae6d 	bge.w	801da66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801dd8c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801dd90:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801dd94:	f1bb 0f00 	cmp.w	fp, #0
 801dd98:	dc70      	bgt.n	801de7c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>
 801dd9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dd9c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801dda0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dda2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801dda6:	930c      	str	r3, [sp, #48]	; 0x30
 801dda8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ddaa:	2b00      	cmp	r3, #0
 801ddac:	f340 81be 	ble.w	801e12c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 801ddb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ddb4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ddb6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ddba:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ddbe:	eef0 6a48 	vmov.f32	s13, s16
 801ddc2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ddc6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801ddca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ddce:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 801ddd2:	eef0 6a68 	vmov.f32	s13, s17
 801ddd6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ddda:	ee16 5a90 	vmov	r5, s13
 801ddde:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801dde2:	ee69 7a27 	vmul.f32	s15, s18, s15
 801dde6:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ddea:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ddee:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ddf2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ddf6:	ee18 2a10 	vmov	r2, s16
 801ddfa:	eeb0 8a47 	vmov.f32	s16, s14
 801ddfe:	fb92 f3f3 	sdiv	r3, r2, r3
 801de02:	ee18 2a90 	vmov	r2, s17
 801de06:	9333      	str	r3, [sp, #204]	; 0xcc
 801de08:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801de0a:	eef0 8a67 	vmov.f32	s17, s15
 801de0e:	fb92 f3f3 	sdiv	r3, r2, r3
 801de12:	9334      	str	r3, [sp, #208]	; 0xd0
 801de14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801de16:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801de18:	3b01      	subs	r3, #1
 801de1a:	9319      	str	r3, [sp, #100]	; 0x64
 801de1c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801de1e:	bf08      	it	eq
 801de20:	4613      	moveq	r3, r2
 801de22:	9309      	str	r3, [sp, #36]	; 0x24
 801de24:	e5f4      	b.n	801da10 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801de26:	2900      	cmp	r1, #0
 801de28:	f43f ae66 	beq.w	801daf8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801de2c:	f818 0000 	ldrb.w	r0, [r8, r0]
 801de30:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801de34:	900a      	str	r0, [sp, #40]	; 0x28
 801de36:	0e00      	lsrs	r0, r0, #24
 801de38:	9013      	str	r0, [sp, #76]	; 0x4c
 801de3a:	e65d      	b.n	801daf8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801de3c:	f113 0801 	adds.w	r8, r3, #1
 801de40:	f53f af74 	bmi.w	801dd2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801de44:	4540      	cmp	r0, r8
 801de46:	f6ff af71 	blt.w	801dd2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801de4a:	f11c 0801 	adds.w	r8, ip, #1
 801de4e:	f53f af6d 	bmi.w	801dd2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801de52:	45c6      	cmp	lr, r8
 801de54:	f6ff af6a 	blt.w	801dd2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801de58:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801de5a:	b200      	sxth	r0, r0
 801de5c:	9302      	str	r3, [sp, #8]
 801de5e:	fa0f f38e 	sxth.w	r3, lr
 801de62:	9000      	str	r0, [sp, #0]
 801de64:	9301      	str	r3, [sp, #4]
 801de66:	4633      	mov	r3, r6
 801de68:	981d      	ldr	r0, [sp, #116]	; 0x74
 801de6a:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801de6e:	e9cd c203 	strd	ip, r2, [sp, #12]
 801de72:	4639      	mov	r1, r7
 801de74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801de76:	f7ff fc33 	bl	801d6e0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 801de7a:	e757      	b.n	801dd2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801de7c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801de7e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801de82:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801de84:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801de88:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801de8a:	1427      	asrs	r7, r4, #16
 801de8c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801de8e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801de92:	142b      	asrs	r3, r5, #16
 801de94:	fb01 7303 	mla	r3, r1, r3, r7
 801de98:	18e7      	adds	r7, r4, r3
 801de9a:	5ce3      	ldrb	r3, [r4, r3]
 801de9c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801dea0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801dea4:	2a00      	cmp	r2, #0
 801dea6:	f000 8137 	beq.w	801e118 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x768>
 801deaa:	f897 e001 	ldrb.w	lr, [r7, #1]
 801deae:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801deb2:	9410      	str	r4, [sp, #64]	; 0x40
 801deb4:	0e24      	lsrs	r4, r4, #24
 801deb6:	9417      	str	r4, [sp, #92]	; 0x5c
 801deb8:	b170      	cbz	r0, 801ded8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 801deba:	eb07 0e01 	add.w	lr, r7, r1
 801debe:	5c79      	ldrb	r1, [r7, r1]
 801dec0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801dec4:	910b      	str	r1, [sp, #44]	; 0x2c
 801dec6:	0e09      	lsrs	r1, r1, #24
 801dec8:	9114      	str	r1, [sp, #80]	; 0x50
 801deca:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801dece:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ded2:	9111      	str	r1, [sp, #68]	; 0x44
 801ded4:	0e09      	lsrs	r1, r1, #24
 801ded6:	9118      	str	r1, [sp, #96]	; 0x60
 801ded8:	b292      	uxth	r2, r2
 801deda:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801dedc:	b280      	uxth	r0, r0
 801dede:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801dee0:	fb02 f800 	mul.w	r8, r2, r0
 801dee4:	0112      	lsls	r2, r2, #4
 801dee6:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801deea:	eba2 0e08 	sub.w	lr, r2, r8
 801deee:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801def2:	b280      	uxth	r0, r0
 801def4:	fa1f fe8e 	uxth.w	lr, lr
 801def8:	1a12      	subs	r2, r2, r0
 801defa:	fb0e f101 	mul.w	r1, lr, r1
 801defe:	b292      	uxth	r2, r2
 801df00:	fb02 110c 	mla	r1, r2, ip, r1
 801df04:	fb00 1104 	mla	r1, r0, r4, r1
 801df08:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801df0a:	fb08 1104 	mla	r1, r8, r4, r1
 801df0e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801df12:	2900      	cmp	r1, #0
 801df14:	f000 80f5 	beq.w	801e102 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 801df18:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801df1c:	d019      	beq.n	801df52 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a2>
 801df1e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801df22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801df26:	fb0c fa0a 	mul.w	sl, ip, sl
 801df2a:	fb0c fc03 	mul.w	ip, ip, r3
 801df2e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801df32:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801df36:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801df3a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801df3e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801df42:	4453      	add	r3, sl
 801df44:	0a3f      	lsrs	r7, r7, #8
 801df46:	0a1b      	lsrs	r3, r3, #8
 801df48:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801df4c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801df50:	433b      	orrs	r3, r7
 801df52:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801df54:	2cff      	cmp	r4, #255	; 0xff
 801df56:	d020      	beq.n	801df9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ea>
 801df58:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801df5a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801df5e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801df60:	4367      	muls	r7, r4
 801df62:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801df64:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801df68:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801df6c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801df6e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801df72:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801df76:	fb04 fa0a 	mul.w	sl, r4, sl
 801df7a:	44bc      	add	ip, r7
 801df7c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801df80:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801df84:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801df88:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801df8c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801df90:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801df94:	ea4c 040a 	orr.w	r4, ip, sl
 801df98:	9410      	str	r4, [sp, #64]	; 0x40
 801df9a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801df9c:	2cff      	cmp	r4, #255	; 0xff
 801df9e:	d020      	beq.n	801dfe2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x632>
 801dfa0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dfa2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801dfa6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801dfa8:	4367      	muls	r7, r4
 801dfaa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dfac:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801dfb0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801dfb4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801dfb6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801dfba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dfbe:	fb04 fa0a 	mul.w	sl, r4, sl
 801dfc2:	44bc      	add	ip, r7
 801dfc4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801dfc8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dfcc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801dfd0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dfd4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dfd8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dfdc:	ea4c 040a 	orr.w	r4, ip, sl
 801dfe0:	940b      	str	r4, [sp, #44]	; 0x2c
 801dfe2:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801dfe4:	2cff      	cmp	r4, #255	; 0xff
 801dfe6:	d020      	beq.n	801e02a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x67a>
 801dfe8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801dfea:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801dfee:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801dff0:	4367      	muls	r7, r4
 801dff2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801dff4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801dff8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801dffc:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801dffe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e002:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e006:	fb04 fa0a 	mul.w	sl, r4, sl
 801e00a:	44bc      	add	ip, r7
 801e00c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e010:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e014:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e018:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e01c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e020:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e024:	ea4c 040a 	orr.w	r4, ip, sl
 801e028:	9411      	str	r4, [sp, #68]	; 0x44
 801e02a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e02c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801e030:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e034:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e038:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e03a:	fb0e f707 	mul.w	r7, lr, r7
 801e03e:	fb02 770c 	mla	r7, r2, ip, r7
 801e042:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e046:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e048:	fb00 770c 	mla	r7, r0, ip, r7
 801e04c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e050:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e052:	fb08 770c 	mla	r7, r8, ip, r7
 801e056:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801e05a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e05c:	fb0e fe0c 	mul.w	lr, lr, ip
 801e060:	0a3f      	lsrs	r7, r7, #8
 801e062:	fb02 e303 	mla	r3, r2, r3, lr
 801e066:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e068:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e06c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801e070:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e072:	fb00 330a 	mla	r3, r0, sl, r3
 801e076:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801e07a:	f8b9 0000 	ldrh.w	r0, [r9]
 801e07e:	fb08 3c0c 	mla	ip, r8, ip, r3
 801e082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e084:	1202      	asrs	r2, r0, #8
 801e086:	434b      	muls	r3, r1
 801e088:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e08c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801e090:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e094:	1c59      	adds	r1, r3, #1
 801e096:	ea47 070c 	orr.w	r7, r7, ip
 801e09a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e09e:	0c3b      	lsrs	r3, r7, #16
 801e0a0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801e0a4:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 801e0a8:	b2ff      	uxtb	r7, r7
 801e0aa:	fb13 f304 	smulbb	r3, r3, r4
 801e0ae:	b2c9      	uxtb	r1, r1
 801e0b0:	fb1c fc04 	smulbb	ip, ip, r4
 801e0b4:	fb02 3201 	mla	r2, r2, r1, r3
 801e0b8:	10c3      	asrs	r3, r0, #3
 801e0ba:	fb17 f704 	smulbb	r7, r7, r4
 801e0be:	00c0      	lsls	r0, r0, #3
 801e0c0:	b292      	uxth	r2, r2
 801e0c2:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801e0c6:	b2c0      	uxtb	r0, r0
 801e0c8:	fb03 c301 	mla	r3, r3, r1, ip
 801e0cc:	f102 0c01 	add.w	ip, r2, #1
 801e0d0:	fb00 7001 	mla	r0, r0, r1, r7
 801e0d4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e0d8:	b280      	uxth	r0, r0
 801e0da:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 801e0de:	b29b      	uxth	r3, r3
 801e0e0:	1c42      	adds	r2, r0, #1
 801e0e2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801e0e6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e0ea:	ea42 020c 	orr.w	r2, r2, ip
 801e0ee:	f103 0c01 	add.w	ip, r3, #1
 801e0f2:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801e0f6:	095b      	lsrs	r3, r3, #5
 801e0f8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e0fc:	431a      	orrs	r2, r3
 801e0fe:	f8a9 2000 	strh.w	r2, [r9]
 801e102:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801e104:	f109 0902 	add.w	r9, r9, #2
 801e108:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801e10a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e10e:	441a      	add	r2, r3
 801e110:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801e112:	9231      	str	r2, [sp, #196]	; 0xc4
 801e114:	441d      	add	r5, r3
 801e116:	e63d      	b.n	801dd94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801e118:	2800      	cmp	r0, #0
 801e11a:	f43f aedd 	beq.w	801ded8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 801e11e:	5c79      	ldrb	r1, [r7, r1]
 801e120:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e124:	910b      	str	r1, [sp, #44]	; 0x2c
 801e126:	0e09      	lsrs	r1, r1, #24
 801e128:	9114      	str	r1, [sp, #80]	; 0x50
 801e12a:	e6d5      	b.n	801ded8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 801e12c:	b01f      	add	sp, #124	; 0x7c
 801e12e:	ecbd 8b08 	vpop	{d8-d11}
 801e132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801e138 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 801e138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e13c:	880e      	ldrh	r6, [r1, #0]
 801e13e:	b085      	sub	sp, #20
 801e140:	4691      	mov	r9, r2
 801e142:	ea4f 2826 	mov.w	r8, r6, asr #8
 801e146:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801e14a:	f9bd e03c 	ldrsh.w	lr, [sp, #60]	; 0x3c
 801e14e:	f008 02f8 	and.w	r2, r8, #248	; 0xf8
 801e152:	ea4f 08e6 	mov.w	r8, r6, asr #3
 801e156:	00f6      	lsls	r6, r6, #3
 801e158:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801e15c:	9200      	str	r2, [sp, #0]
 801e15e:	f008 02fc 	and.w	r2, r8, #252	; 0xfc
 801e162:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801e166:	9201      	str	r2, [sp, #4]
 801e168:	b2f2      	uxtb	r2, r6
 801e16a:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801e16e:	9202      	str	r2, [sp, #8]
 801e170:	fb04 560c 	mla	r6, r4, ip, r5
 801e174:	2c00      	cmp	r4, #0
 801e176:	eb09 0806 	add.w	r8, r9, r6
 801e17a:	db3f      	blt.n	801e1fc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 801e17c:	45a6      	cmp	lr, r4
 801e17e:	dd3d      	ble.n	801e1fc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 801e180:	2d00      	cmp	r5, #0
 801e182:	db39      	blt.n	801e1f8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 801e184:	45ac      	cmp	ip, r5
 801e186:	dd37      	ble.n	801e1f8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 801e188:	f819 2006 	ldrb.w	r2, [r9, r6]
 801e18c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801e190:	1c6e      	adds	r6, r5, #1
 801e192:	d436      	bmi.n	801e202 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 801e194:	45b4      	cmp	ip, r6
 801e196:	dd34      	ble.n	801e202 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 801e198:	b3a8      	cbz	r0, 801e206 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xce>
 801e19a:	f898 6001 	ldrb.w	r6, [r8, #1]
 801e19e:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 801e1a2:	3401      	adds	r4, #1
 801e1a4:	d433      	bmi.n	801e20e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 801e1a6:	45a6      	cmp	lr, r4
 801e1a8:	dd31      	ble.n	801e20e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 801e1aa:	b39f      	cbz	r7, 801e214 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xdc>
 801e1ac:	2d00      	cmp	r5, #0
 801e1ae:	eb08 0e0c 	add.w	lr, r8, ip
 801e1b2:	db2a      	blt.n	801e20a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 801e1b4:	45ac      	cmp	ip, r5
 801e1b6:	dd28      	ble.n	801e20a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 801e1b8:	f818 400c 	ldrb.w	r4, [r8, ip]
 801e1bc:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 801e1c0:	3501      	adds	r5, #1
 801e1c2:	d42a      	bmi.n	801e21a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 801e1c4:	45ac      	cmp	ip, r5
 801e1c6:	dd28      	ble.n	801e21a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 801e1c8:	b348      	cbz	r0, 801e21e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe6>
 801e1ca:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801e1ce:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801e1d2:	280f      	cmp	r0, #15
 801e1d4:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801e1d8:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801e1dc:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801e1e0:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801e1e4:	d801      	bhi.n	801e1ea <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb2>
 801e1e6:	2f0f      	cmp	r7, #15
 801e1e8:	d91b      	bls.n	801e222 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xea>
 801e1ea:	4b7e      	ldr	r3, [pc, #504]	; (801e3e4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 801e1ec:	f240 11f9 	movw	r1, #505	; 0x1f9
 801e1f0:	4a7d      	ldr	r2, [pc, #500]	; (801e3e8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 801e1f2:	487e      	ldr	r0, [pc, #504]	; (801e3ec <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 801e1f4:	f006 fc00 	bl	80249f8 <__assert_func>
 801e1f8:	2200      	movs	r2, #0
 801e1fa:	e7c9      	b.n	801e190 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 801e1fc:	2600      	movs	r6, #0
 801e1fe:	4632      	mov	r2, r6
 801e200:	e7cf      	b.n	801e1a2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 801e202:	2600      	movs	r6, #0
 801e204:	e7cd      	b.n	801e1a2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 801e206:	4606      	mov	r6, r0
 801e208:	e7cb      	b.n	801e1a2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 801e20a:	2400      	movs	r4, #0
 801e20c:	e7d8      	b.n	801e1c0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x88>
 801e20e:	2300      	movs	r3, #0
 801e210:	461c      	mov	r4, r3
 801e212:	e7de      	b.n	801e1d2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 801e214:	463b      	mov	r3, r7
 801e216:	463c      	mov	r4, r7
 801e218:	e7db      	b.n	801e1d2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 801e21a:	2300      	movs	r3, #0
 801e21c:	e7d9      	b.n	801e1d2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 801e21e:	4603      	mov	r3, r0
 801e220:	e7d7      	b.n	801e1d2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 801e222:	b280      	uxth	r0, r0
 801e224:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801e228:	b2bf      	uxth	r7, r7
 801e22a:	fb00 fe07 	mul.w	lr, r0, r7
 801e22e:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801e232:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801e236:	eba0 0c0e 	sub.w	ip, r0, lr
 801e23a:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 801e23e:	b2bf      	uxth	r7, r7
 801e240:	fa1f fc8c 	uxth.w	ip, ip
 801e244:	eba5 0507 	sub.w	r5, r5, r7
 801e248:	fb0c f00a 	mul.w	r0, ip, sl
 801e24c:	b2ad      	uxth	r5, r5
 801e24e:	fb05 000b 	mla	r0, r5, fp, r0
 801e252:	fb07 0009 	mla	r0, r7, r9, r0
 801e256:	fb0e 0008 	mla	r0, lr, r8, r0
 801e25a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e25e:	9003      	str	r0, [sp, #12]
 801e260:	d018      	beq.n	801e294 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x15c>
 801e262:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801e266:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e26a:	fb0b f000 	mul.w	r0, fp, r0
 801e26e:	fb0b fb02 	mul.w	fp, fp, r2
 801e272:	0a02      	lsrs	r2, r0, #8
 801e274:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801e278:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801e27c:	4402      	add	r2, r0
 801e27e:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801e282:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801e286:	0a12      	lsrs	r2, r2, #8
 801e288:	0a00      	lsrs	r0, r0, #8
 801e28a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801e28e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e292:	4302      	orrs	r2, r0
 801e294:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e298:	d019      	beq.n	801e2ce <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x196>
 801e29a:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801e29e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e2a2:	fb0a fb0b 	mul.w	fp, sl, fp
 801e2a6:	fb0a fa06 	mul.w	sl, sl, r6
 801e2aa:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801e2ae:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e2b2:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801e2b6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e2ba:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801e2be:	445e      	add	r6, fp
 801e2c0:	0a00      	lsrs	r0, r0, #8
 801e2c2:	0a36      	lsrs	r6, r6, #8
 801e2c4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e2c8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e2cc:	4306      	orrs	r6, r0
 801e2ce:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e2d2:	d019      	beq.n	801e308 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1d0>
 801e2d4:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801e2d8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801e2dc:	fb09 fa0a 	mul.w	sl, r9, sl
 801e2e0:	fb09 f904 	mul.w	r9, r9, r4
 801e2e4:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801e2e8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e2ec:	f509 7080 	add.w	r0, r9, #256	; 0x100
 801e2f0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801e2f4:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 801e2f8:	4454      	add	r4, sl
 801e2fa:	0a00      	lsrs	r0, r0, #8
 801e2fc:	0a24      	lsrs	r4, r4, #8
 801e2fe:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e302:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801e306:	4304      	orrs	r4, r0
 801e308:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e30c:	d019      	beq.n	801e342 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x20a>
 801e30e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801e312:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e316:	fb08 f909 	mul.w	r9, r8, r9
 801e31a:	fb08 f803 	mul.w	r8, r8, r3
 801e31e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801e322:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801e326:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801e32a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e32e:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801e332:	444b      	add	r3, r9
 801e334:	0a00      	lsrs	r0, r0, #8
 801e336:	0a1b      	lsrs	r3, r3, #8
 801e338:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e33c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e340:	4303      	orrs	r3, r0
 801e342:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801e346:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801e34a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e34e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e352:	fb0c f808 	mul.w	r8, ip, r8
 801e356:	fb0c f606 	mul.w	r6, ip, r6
 801e35a:	fb05 8800 	mla	r8, r5, r0, r8
 801e35e:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 801e362:	fb05 6202 	mla	r2, r5, r2, r6
 801e366:	9d00      	ldr	r5, [sp, #0]
 801e368:	fb07 8800 	mla	r8, r7, r0, r8
 801e36c:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 801e370:	fb0e 8000 	mla	r0, lr, r0, r8
 801e374:	0a00      	lsrs	r0, r0, #8
 801e376:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 801e37a:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 801e37e:	fb07 2700 	mla	r7, r7, r0, r2
 801e382:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 801e386:	9b03      	ldr	r3, [sp, #12]
 801e388:	fb0e 7000 	mla	r0, lr, r0, r7
 801e38c:	9a02      	ldr	r2, [sp, #8]
 801e38e:	43dc      	mvns	r4, r3
 801e390:	9b01      	ldr	r3, [sp, #4]
 801e392:	0a00      	lsrs	r0, r0, #8
 801e394:	b2e4      	uxtb	r4, r4
 801e396:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e39a:	4363      	muls	r3, r4
 801e39c:	4365      	muls	r5, r4
 801e39e:	ea48 0000 	orr.w	r0, r8, r0
 801e3a2:	4362      	muls	r2, r4
 801e3a4:	1c5e      	adds	r6, r3, #1
 801e3a6:	4614      	mov	r4, r2
 801e3a8:	1c6a      	adds	r2, r5, #1
 801e3aa:	eb06 2613 	add.w	r6, r6, r3, lsr #8
 801e3ae:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801e3b2:	0a03      	lsrs	r3, r0, #8
 801e3b4:	0c02      	lsrs	r2, r0, #16
 801e3b6:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 801e3ba:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 801e3be:	00db      	lsls	r3, r3, #3
 801e3c0:	0212      	lsls	r2, r2, #8
 801e3c2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e3c6:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801e3ca:	4313      	orrs	r3, r2
 801e3cc:	1c62      	adds	r2, r4, #1
 801e3ce:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801e3d2:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801e3d6:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801e3da:	4318      	orrs	r0, r3
 801e3dc:	8008      	strh	r0, [r1, #0]
 801e3de:	b005      	add	sp, #20
 801e3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3e4:	0802a0bb 	.word	0x0802a0bb
 801e3e8:	0802a5ea 	.word	0x0802a5ea
 801e3ec:	0802a088 	.word	0x0802a088

0801e3f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3f4:	ed2d 8b08 	vpush	{d8-d11}
 801e3f8:	b09b      	sub	sp, #108	; 0x6c
 801e3fa:	eeb0 aa40 	vmov.f32	s20, s0
 801e3fe:	eef0 9a60 	vmov.f32	s19, s1
 801e402:	9218      	str	r2, [sp, #96]	; 0x60
 801e404:	eeb0 9a41 	vmov.f32	s18, s2
 801e408:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801e40a:	eeb0 8a62 	vmov.f32	s16, s5
 801e40e:	9019      	str	r0, [sp, #100]	; 0x64
 801e410:	eef0 8a43 	vmov.f32	s17, s6
 801e414:	6850      	ldr	r0, [r2, #4]
 801e416:	eef0 ba44 	vmov.f32	s23, s8
 801e41a:	9116      	str	r1, [sp, #88]	; 0x58
 801e41c:	eeb0 ba64 	vmov.f32	s22, s9
 801e420:	9307      	str	r3, [sp, #28]
 801e422:	eef0 aa45 	vmov.f32	s21, s10
 801e426:	6812      	ldr	r2, [r2, #0]
 801e428:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 801e42a:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801e42e:	fb00 1303 	mla	r3, r0, r3, r1
 801e432:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e436:	930a      	str	r3, [sp, #40]	; 0x28
 801e438:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801e43a:	681b      	ldr	r3, [r3, #0]
 801e43c:	930f      	str	r3, [sp, #60]	; 0x3c
 801e43e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801e440:	685e      	ldr	r6, [r3, #4]
 801e442:	3604      	adds	r6, #4
 801e444:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e446:	2b00      	cmp	r3, #0
 801e448:	dc03      	bgt.n	801e452 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e44a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e44c:	2b00      	cmp	r3, #0
 801e44e:	f340 8373 	ble.w	801eb38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 801e452:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801e454:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e458:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e45c:	1e48      	subs	r0, r1, #1
 801e45e:	1e57      	subs	r7, r2, #1
 801e460:	9b07      	ldr	r3, [sp, #28]
 801e462:	2b00      	cmp	r3, #0
 801e464:	f340 818f 	ble.w	801e786 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 801e468:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 801e46a:	142b      	asrs	r3, r5, #16
 801e46c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801e470:	d406      	bmi.n	801e480 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e472:	4584      	cmp	ip, r0
 801e474:	da04      	bge.n	801e480 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e476:	2b00      	cmp	r3, #0
 801e478:	db02      	blt.n	801e480 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e47a:	42bb      	cmp	r3, r7
 801e47c:	f2c0 8184 	blt.w	801e788 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801e480:	f11c 0c01 	adds.w	ip, ip, #1
 801e484:	f100 8172 	bmi.w	801e76c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801e488:	4561      	cmp	r1, ip
 801e48a:	f2c0 816f 	blt.w	801e76c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801e48e:	3301      	adds	r3, #1
 801e490:	f100 816c 	bmi.w	801e76c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801e494:	429a      	cmp	r2, r3
 801e496:	f2c0 8169 	blt.w	801e76c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801e49a:	9b07      	ldr	r3, [sp, #28]
 801e49c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801e49e:	9317      	str	r3, [sp, #92]	; 0x5c
 801e4a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e4a2:	2b00      	cmp	r3, #0
 801e4a4:	f340 818e 	ble.w	801e7c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 801e4a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801e4aa:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801e4ae:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e4b2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e4b6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801e4b8:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801e4bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801e4be:	141b      	asrs	r3, r3, #16
 801e4c0:	f100 81d1 	bmi.w	801e866 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801e4c4:	f101 38ff 	add.w	r8, r1, #4294967295
 801e4c8:	4543      	cmp	r3, r8
 801e4ca:	f280 81cc 	bge.w	801e866 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801e4ce:	f1bc 0f00 	cmp.w	ip, #0
 801e4d2:	f2c0 81c8 	blt.w	801e866 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801e4d6:	f10e 38ff 	add.w	r8, lr, #4294967295
 801e4da:	45c4      	cmp	ip, r8
 801e4dc:	f280 81c3 	bge.w	801e866 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801e4e0:	b209      	sxth	r1, r1
 801e4e2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e4e4:	fb0c 3301 	mla	r3, ip, r1, r3
 801e4e8:	eb04 0803 	add.w	r8, r4, r3
 801e4ec:	5ce3      	ldrb	r3, [r4, r3]
 801e4ee:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e4f2:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801e4f6:	2a00      	cmp	r2, #0
 801e4f8:	f000 81aa 	beq.w	801e850 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 801e4fc:	f898 c001 	ldrb.w	ip, [r8, #1]
 801e500:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801e504:	940b      	str	r4, [sp, #44]	; 0x2c
 801e506:	0e24      	lsrs	r4, r4, #24
 801e508:	9412      	str	r4, [sp, #72]	; 0x48
 801e50a:	b178      	cbz	r0, 801e52c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801e50c:	eb08 0c01 	add.w	ip, r8, r1
 801e510:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e514:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e518:	9108      	str	r1, [sp, #32]
 801e51a:	0e09      	lsrs	r1, r1, #24
 801e51c:	9110      	str	r1, [sp, #64]	; 0x40
 801e51e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801e522:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e526:	910c      	str	r1, [sp, #48]	; 0x30
 801e528:	0e09      	lsrs	r1, r1, #24
 801e52a:	9113      	str	r1, [sp, #76]	; 0x4c
 801e52c:	b292      	uxth	r2, r2
 801e52e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e530:	b280      	uxth	r0, r0
 801e532:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e534:	fb02 f900 	mul.w	r9, r2, r0
 801e538:	0112      	lsls	r2, r2, #4
 801e53a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e53e:	eba2 0809 	sub.w	r8, r2, r9
 801e542:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801e546:	b280      	uxth	r0, r0
 801e548:	fa1f f888 	uxth.w	r8, r8
 801e54c:	1a12      	subs	r2, r2, r0
 801e54e:	fb08 f101 	mul.w	r1, r8, r1
 801e552:	b292      	uxth	r2, r2
 801e554:	fb02 110e 	mla	r1, r2, lr, r1
 801e558:	fb00 1104 	mla	r1, r0, r4, r1
 801e55c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e55e:	fb09 1104 	mla	r1, r9, r4, r1
 801e562:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e566:	2900      	cmp	r1, #0
 801e568:	f000 80f5 	beq.w	801e756 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801e56c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801e570:	d01b      	beq.n	801e5aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801e572:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801e576:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e57a:	fb0e fa0a 	mul.w	sl, lr, sl
 801e57e:	fb0e fe03 	mul.w	lr, lr, r3
 801e582:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e586:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e58a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801e58e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e592:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801e596:	4453      	add	r3, sl
 801e598:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e59c:	0a1b      	lsrs	r3, r3, #8
 801e59e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e5a2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e5a6:	ea43 030c 	orr.w	r3, r3, ip
 801e5aa:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e5ac:	2cff      	cmp	r4, #255	; 0xff
 801e5ae:	d021      	beq.n	801e5f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e5b0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e5b2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e5b6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e5b8:	fb04 fb0b 	mul.w	fp, r4, fp
 801e5bc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e5be:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e5c2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e5c4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e5c8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e5cc:	fb04 fa0a 	mul.w	sl, r4, sl
 801e5d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e5d4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e5d8:	44de      	add	lr, fp
 801e5da:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e5de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e5e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e5e6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e5ea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e5ee:	ea4e 040a 	orr.w	r4, lr, sl
 801e5f2:	940b      	str	r4, [sp, #44]	; 0x2c
 801e5f4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e5f6:	2cff      	cmp	r4, #255	; 0xff
 801e5f8:	d021      	beq.n	801e63e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 801e5fa:	9c08      	ldr	r4, [sp, #32]
 801e5fc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e600:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e602:	fb04 fb0b 	mul.w	fp, r4, fp
 801e606:	9c08      	ldr	r4, [sp, #32]
 801e608:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e60c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e60e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e612:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e616:	fb04 fa0a 	mul.w	sl, r4, sl
 801e61a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e61e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e622:	44de      	add	lr, fp
 801e624:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e628:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e62c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e630:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e634:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e638:	ea4e 040a 	orr.w	r4, lr, sl
 801e63c:	9408      	str	r4, [sp, #32]
 801e63e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e640:	2cff      	cmp	r4, #255	; 0xff
 801e642:	d021      	beq.n	801e688 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 801e644:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e646:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e64a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e64c:	fb04 fb0b 	mul.w	fp, r4, fp
 801e650:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e652:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e656:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e658:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e65c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e660:	fb04 fa0a 	mul.w	sl, r4, sl
 801e664:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e668:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e66c:	44de      	add	lr, fp
 801e66e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e672:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e676:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e67a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e67e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e682:	ea4e 040a 	orr.w	r4, lr, sl
 801e686:	940c      	str	r4, [sp, #48]	; 0x30
 801e688:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e68a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801e68e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e692:	43c9      	mvns	r1, r1
 801e694:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e698:	9c08      	ldr	r4, [sp, #32]
 801e69a:	fb08 fc0c 	mul.w	ip, r8, ip
 801e69e:	fb02 cc0e 	mla	ip, r2, lr, ip
 801e6a2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801e6a6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e6a8:	fb00 cc0e 	mla	ip, r0, lr, ip
 801e6ac:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801e6b0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e6b2:	fb09 cc0e 	mla	ip, r9, lr, ip
 801e6b6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801e6ba:	fb08 f80e 	mul.w	r8, r8, lr
 801e6be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e6c2:	fa5f fe81 	uxtb.w	lr, r1
 801e6c6:	fb02 8303 	mla	r3, r2, r3, r8
 801e6ca:	9a08      	ldr	r2, [sp, #32]
 801e6cc:	f8b7 8000 	ldrh.w	r8, [r7]
 801e6d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e6d4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801e6d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e6da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801e6de:	fb00 330a 	mla	r3, r0, sl, r3
 801e6e2:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801e6e6:	ea4f 2228 	mov.w	r2, r8, asr #8
 801e6ea:	fb09 3900 	mla	r9, r9, r0, r3
 801e6ee:	ea4f 00e8 	mov.w	r0, r8, asr #3
 801e6f2:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801e6f6:	b2c9      	uxtb	r1, r1
 801e6f8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e6fc:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801e700:	fb02 f20e 	mul.w	r2, r2, lr
 801e704:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801e708:	fb00 f00e 	mul.w	r0, r0, lr
 801e70c:	1c53      	adds	r3, r2, #1
 801e70e:	fb01 f10e 	mul.w	r1, r1, lr
 801e712:	ea4c 0c09 	orr.w	ip, ip, r9
 801e716:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801e71a:	ea4f 431c 	mov.w	r3, ip, lsr #16
 801e71e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e722:	4a60      	ldr	r2, [pc, #384]	; (801e8a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>)
 801e724:	b2db      	uxtb	r3, r3
 801e726:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 801e72a:	1c43      	adds	r3, r0, #1
 801e72c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801e730:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801e734:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801e738:	00db      	lsls	r3, r3, #3
 801e73a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e73e:	4313      	orrs	r3, r2
 801e740:	1c4a      	adds	r2, r1, #1
 801e742:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e746:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801e74a:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 801e74e:	ea4c 0c03 	orr.w	ip, ip, r3
 801e752:	f8a7 c000 	strh.w	ip, [r7]
 801e756:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801e758:	3702      	adds	r7, #2
 801e75a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801e75c:	441a      	add	r2, r3
 801e75e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e760:	441d      	add	r5, r3
 801e762:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e764:	922d      	str	r2, [sp, #180]	; 0xb4
 801e766:	3b01      	subs	r3, #1
 801e768:	9317      	str	r3, [sp, #92]	; 0x5c
 801e76a:	e699      	b.n	801e4a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801e76c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801e76e:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 801e770:	441c      	add	r4, r3
 801e772:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e774:	441d      	add	r5, r3
 801e776:	9b07      	ldr	r3, [sp, #28]
 801e778:	942d      	str	r4, [sp, #180]	; 0xb4
 801e77a:	3b01      	subs	r3, #1
 801e77c:	9307      	str	r3, [sp, #28]
 801e77e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e780:	3302      	adds	r3, #2
 801e782:	930a      	str	r3, [sp, #40]	; 0x28
 801e784:	e66c      	b.n	801e460 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e786:	d024      	beq.n	801e7d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 801e788:	9b07      	ldr	r3, [sp, #28]
 801e78a:	982f      	ldr	r0, [sp, #188]	; 0xbc
 801e78c:	3b01      	subs	r3, #1
 801e78e:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 801e790:	fb00 4003 	mla	r0, r0, r3, r4
 801e794:	1400      	asrs	r0, r0, #16
 801e796:	f53f ae80 	bmi.w	801e49a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801e79a:	3901      	subs	r1, #1
 801e79c:	4288      	cmp	r0, r1
 801e79e:	f6bf ae7c 	bge.w	801e49a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801e7a2:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801e7a4:	fb01 5303 	mla	r3, r1, r3, r5
 801e7a8:	141b      	asrs	r3, r3, #16
 801e7aa:	f53f ae76 	bmi.w	801e49a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801e7ae:	3a01      	subs	r2, #1
 801e7b0:	4293      	cmp	r3, r2
 801e7b2:	f6bf ae72 	bge.w	801e49a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801e7b6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801e7ba:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801e7be:	f1bb 0f00 	cmp.w	fp, #0
 801e7c2:	dc71      	bgt.n	801e8a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 801e7c4:	9b07      	ldr	r3, [sp, #28]
 801e7c6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e7ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e7cc:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801e7d0:	930a      	str	r3, [sp, #40]	; 0x28
 801e7d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e7d4:	2b00      	cmp	r3, #0
 801e7d6:	f340 81af 	ble.w	801eb38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 801e7da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e7de:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e7e0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801e7e4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801e7e8:	eef0 6a48 	vmov.f32	s13, s16
 801e7ec:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801e7f0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801e7f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e7f8:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801e7fc:	eef0 6a68 	vmov.f32	s13, s17
 801e800:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e804:	ee16 5a90 	vmov	r5, s13
 801e808:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801e80c:	ee69 7a27 	vmul.f32	s15, s18, s15
 801e810:	ee37 8a48 	vsub.f32	s16, s14, s16
 801e814:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801e818:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801e81c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801e820:	ee18 2a10 	vmov	r2, s16
 801e824:	eeb0 8a47 	vmov.f32	s16, s14
 801e828:	fb92 f3f3 	sdiv	r3, r2, r3
 801e82c:	ee18 2a90 	vmov	r2, s17
 801e830:	932f      	str	r3, [sp, #188]	; 0xbc
 801e832:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e834:	eef0 8a67 	vmov.f32	s17, s15
 801e838:	fb92 f3f3 	sdiv	r3, r2, r3
 801e83c:	9330      	str	r3, [sp, #192]	; 0xc0
 801e83e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e840:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e842:	3b01      	subs	r3, #1
 801e844:	9316      	str	r3, [sp, #88]	; 0x58
 801e846:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e848:	bf08      	it	eq
 801e84a:	4613      	moveq	r3, r2
 801e84c:	9307      	str	r3, [sp, #28]
 801e84e:	e5f9      	b.n	801e444 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801e850:	2800      	cmp	r0, #0
 801e852:	f43f ae6b 	beq.w	801e52c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801e856:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e85a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e85e:	9108      	str	r1, [sp, #32]
 801e860:	0e09      	lsrs	r1, r1, #24
 801e862:	9110      	str	r1, [sp, #64]	; 0x40
 801e864:	e662      	b.n	801e52c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801e866:	f113 0801 	adds.w	r8, r3, #1
 801e86a:	f53f af74 	bmi.w	801e756 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801e86e:	4541      	cmp	r1, r8
 801e870:	f6ff af71 	blt.w	801e756 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801e874:	f11c 0801 	adds.w	r8, ip, #1
 801e878:	f53f af6d 	bmi.w	801e756 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801e87c:	45c6      	cmp	lr, r8
 801e87e:	f6ff af6a 	blt.w	801e756 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801e882:	b209      	sxth	r1, r1
 801e884:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801e888:	fa0f f38e 	sxth.w	r3, lr
 801e88c:	9100      	str	r1, [sp, #0]
 801e88e:	4639      	mov	r1, r7
 801e890:	9301      	str	r3, [sp, #4]
 801e892:	4633      	mov	r3, r6
 801e894:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801e898:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e89a:	9819      	ldr	r0, [sp, #100]	; 0x64
 801e89c:	f7ff fc4c 	bl	801e138 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 801e8a0:	e759      	b.n	801e756 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801e8a2:	bf00      	nop
 801e8a4:	fffff800 	.word	0xfffff800
 801e8a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801e8aa:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e8ae:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 801e8b0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e8b4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801e8b6:	1427      	asrs	r7, r4, #16
 801e8b8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e8ba:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e8be:	142b      	asrs	r3, r5, #16
 801e8c0:	fb01 7303 	mla	r3, r1, r3, r7
 801e8c4:	18e7      	adds	r7, r4, r3
 801e8c6:	5ce3      	ldrb	r3, [r4, r3]
 801e8c8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e8cc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e8d0:	2a00      	cmp	r2, #0
 801e8d2:	f000 8127 	beq.w	801eb24 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 801e8d6:	f897 e001 	ldrb.w	lr, [r7, #1]
 801e8da:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801e8de:	940d      	str	r4, [sp, #52]	; 0x34
 801e8e0:	0e24      	lsrs	r4, r4, #24
 801e8e2:	9414      	str	r4, [sp, #80]	; 0x50
 801e8e4:	b170      	cbz	r0, 801e904 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 801e8e6:	eb07 0e01 	add.w	lr, r7, r1
 801e8ea:	5c79      	ldrb	r1, [r7, r1]
 801e8ec:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e8f0:	9109      	str	r1, [sp, #36]	; 0x24
 801e8f2:	0e09      	lsrs	r1, r1, #24
 801e8f4:	9111      	str	r1, [sp, #68]	; 0x44
 801e8f6:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801e8fa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e8fe:	910e      	str	r1, [sp, #56]	; 0x38
 801e900:	0e09      	lsrs	r1, r1, #24
 801e902:	9115      	str	r1, [sp, #84]	; 0x54
 801e904:	b292      	uxth	r2, r2
 801e906:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e908:	b280      	uxth	r0, r0
 801e90a:	fb02 f800 	mul.w	r8, r2, r0
 801e90e:	0112      	lsls	r2, r2, #4
 801e910:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801e914:	eba2 0e08 	sub.w	lr, r2, r8
 801e918:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801e91c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e91e:	b280      	uxth	r0, r0
 801e920:	fa1f fe8e 	uxth.w	lr, lr
 801e924:	1a09      	subs	r1, r1, r0
 801e926:	fb0e f202 	mul.w	r2, lr, r2
 801e92a:	b289      	uxth	r1, r1
 801e92c:	fb01 220c 	mla	r2, r1, ip, r2
 801e930:	fb00 2204 	mla	r2, r0, r4, r2
 801e934:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e936:	fb08 2204 	mla	r2, r8, r4, r2
 801e93a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801e93e:	2a00      	cmp	r2, #0
 801e940:	f000 80e5 	beq.w	801eb0e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 801e944:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e948:	d019      	beq.n	801e97e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58e>
 801e94a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801e94e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e952:	fb0c fa0a 	mul.w	sl, ip, sl
 801e956:	fb0c fc03 	mul.w	ip, ip, r3
 801e95a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e95e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e962:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801e966:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e96a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e96e:	4453      	add	r3, sl
 801e970:	0a3f      	lsrs	r7, r7, #8
 801e972:	0a1b      	lsrs	r3, r3, #8
 801e974:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e978:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e97c:	433b      	orrs	r3, r7
 801e97e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e980:	2cff      	cmp	r4, #255	; 0xff
 801e982:	d020      	beq.n	801e9c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d6>
 801e984:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e986:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e98a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e98c:	4367      	muls	r7, r4
 801e98e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e990:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e994:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e998:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e99a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e99e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e9a2:	fb04 fa0a 	mul.w	sl, r4, sl
 801e9a6:	44bc      	add	ip, r7
 801e9a8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e9ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e9b0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e9b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e9b8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e9bc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e9c0:	ea4c 040a 	orr.w	r4, ip, sl
 801e9c4:	940d      	str	r4, [sp, #52]	; 0x34
 801e9c6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e9c8:	2cff      	cmp	r4, #255	; 0xff
 801e9ca:	d020      	beq.n	801ea0e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61e>
 801e9cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e9ce:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e9d2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e9d4:	4367      	muls	r7, r4
 801e9d6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e9d8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e9dc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e9e0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e9e2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e9e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e9ea:	fb04 fa0a 	mul.w	sl, r4, sl
 801e9ee:	44bc      	add	ip, r7
 801e9f0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e9f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e9f8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e9fc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ea00:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ea04:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ea08:	ea4c 040a 	orr.w	r4, ip, sl
 801ea0c:	9409      	str	r4, [sp, #36]	; 0x24
 801ea0e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ea10:	2cff      	cmp	r4, #255	; 0xff
 801ea12:	d020      	beq.n	801ea56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x666>
 801ea14:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ea16:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ea1a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ea1c:	4367      	muls	r7, r4
 801ea1e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ea20:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ea24:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ea28:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ea2a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ea2e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ea32:	fb04 fa0a 	mul.w	sl, r4, sl
 801ea36:	44bc      	add	ip, r7
 801ea38:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ea3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ea40:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ea44:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ea48:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ea4c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ea50:	ea4c 040a 	orr.w	r4, ip, sl
 801ea54:	940e      	str	r4, [sp, #56]	; 0x38
 801ea56:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ea58:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801ea5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ea60:	43d2      	mvns	r2, r2
 801ea62:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ea66:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ea68:	b2d2      	uxtb	r2, r2
 801ea6a:	fb0e f707 	mul.w	r7, lr, r7
 801ea6e:	fb01 770c 	mla	r7, r1, ip, r7
 801ea72:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ea76:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ea78:	fb00 770c 	mla	r7, r0, ip, r7
 801ea7c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ea80:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ea82:	fb08 770c 	mla	r7, r8, ip, r7
 801ea86:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801ea8a:	fb0e fe0c 	mul.w	lr, lr, ip
 801ea8e:	0a3f      	lsrs	r7, r7, #8
 801ea90:	fb01 e303 	mla	r3, r1, r3, lr
 801ea94:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ea96:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ea9a:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801ea9e:	990e      	ldr	r1, [sp, #56]	; 0x38
 801eaa0:	fb00 330a 	mla	r3, r0, sl, r3
 801eaa4:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801eaa8:	fb08 3c0c 	mla	ip, r8, ip, r3
 801eaac:	f8b9 3000 	ldrh.w	r3, [r9]
 801eab0:	1218      	asrs	r0, r3, #8
 801eab2:	10d9      	asrs	r1, r3, #3
 801eab4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eab8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801eabc:	00db      	lsls	r3, r3, #3
 801eabe:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801eac2:	4350      	muls	r0, r2
 801eac4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801eac8:	b2db      	uxtb	r3, r3
 801eaca:	4351      	muls	r1, r2
 801eacc:	ea47 070c 	orr.w	r7, r7, ip
 801ead0:	4353      	muls	r3, r2
 801ead2:	1c42      	adds	r2, r0, #1
 801ead4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801ead8:	0c3a      	lsrs	r2, r7, #16
 801eada:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801eade:	4a19      	ldr	r2, [pc, #100]	; (801eb44 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>)
 801eae0:	b2c0      	uxtb	r0, r0
 801eae2:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 801eae6:	1c4a      	adds	r2, r1, #1
 801eae8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801eaec:	0a3a      	lsrs	r2, r7, #8
 801eaee:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801eaf2:	00c9      	lsls	r1, r1, #3
 801eaf4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801eaf8:	4301      	orrs	r1, r0
 801eafa:	1c58      	adds	r0, r3, #1
 801eafc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801eb00:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801eb04:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 801eb08:	4308      	orrs	r0, r1
 801eb0a:	f8a9 0000 	strh.w	r0, [r9]
 801eb0e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801eb10:	f109 0902 	add.w	r9, r9, #2
 801eb14:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801eb16:	f10b 3bff 	add.w	fp, fp, #4294967295
 801eb1a:	441a      	add	r2, r3
 801eb1c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801eb1e:	922d      	str	r2, [sp, #180]	; 0xb4
 801eb20:	441d      	add	r5, r3
 801eb22:	e64c      	b.n	801e7be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801eb24:	2800      	cmp	r0, #0
 801eb26:	f43f aeed 	beq.w	801e904 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 801eb2a:	5c79      	ldrb	r1, [r7, r1]
 801eb2c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801eb30:	9109      	str	r1, [sp, #36]	; 0x24
 801eb32:	0e09      	lsrs	r1, r1, #24
 801eb34:	9111      	str	r1, [sp, #68]	; 0x44
 801eb36:	e6e5      	b.n	801e904 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 801eb38:	b01b      	add	sp, #108	; 0x6c
 801eb3a:	ecbd 8b08 	vpop	{d8-d11}
 801eb3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb42:	bf00      	nop
 801eb44:	fffff800 	.word	0xfffff800

0801eb48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 801eb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb4c:	b085      	sub	sp, #20
 801eb4e:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 801eb52:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801eb56:	9103      	str	r1, [sp, #12]
 801eb58:	2d00      	cmp	r5, #0
 801eb5a:	fb05 7106 	mla	r1, r5, r6, r7
 801eb5e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801eb62:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801eb66:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 801eb6a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801eb6e:	eb03 0901 	add.w	r9, r3, r1
 801eb72:	9401      	str	r4, [sp, #4]
 801eb74:	f2c0 80c0 	blt.w	801ecf8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 801eb78:	45a8      	cmp	r8, r5
 801eb7a:	f340 80bd 	ble.w	801ecf8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 801eb7e:	2f00      	cmp	r7, #0
 801eb80:	f2c0 80b6 	blt.w	801ecf0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 801eb84:	42be      	cmp	r6, r7
 801eb86:	f340 80b3 	ble.w	801ecf0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 801eb8a:	f813 c001 	ldrb.w	ip, [r3, r1]
 801eb8e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 801eb92:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801eb96:	d019      	beq.n	801ebcc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 801eb98:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 801eb9c:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801eba0:	435a      	muls	r2, r3
 801eba2:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 801eba6:	f64f 011f 	movw	r1, #63519	; 0xf81f
 801ebaa:	fb0c f403 	mul.w	r4, ip, r3
 801ebae:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 801ebb2:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801ebb6:	441a      	add	r2, r3
 801ebb8:	f104 0320 	add.w	r3, r4, #32
 801ebbc:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801ebc0:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 801ebc4:	0a1b      	lsrs	r3, r3, #8
 801ebc6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ebca:	4319      	orrs	r1, r3
 801ebcc:	b289      	uxth	r1, r1
 801ebce:	1c7b      	adds	r3, r7, #1
 801ebd0:	f100 8097 	bmi.w	801ed02 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 801ebd4:	429e      	cmp	r6, r3
 801ebd6:	f340 8094 	ble.w	801ed02 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 801ebda:	2800      	cmp	r0, #0
 801ebdc:	f000 8094 	beq.w	801ed08 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 801ebe0:	f899 4001 	ldrb.w	r4, [r9, #1]
 801ebe4:	9b01      	ldr	r3, [sp, #4]
 801ebe6:	2cff      	cmp	r4, #255	; 0xff
 801ebe8:	885b      	ldrh	r3, [r3, #2]
 801ebea:	d01b      	beq.n	801ec24 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 801ebec:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 801ebf0:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801ebf4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ebf8:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801ebfc:	fb0a f202 	mul.w	r2, sl, r2
 801ec00:	fb04 fa03 	mul.w	sl, r4, r3
 801ec04:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 801ec08:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801ec0c:	441a      	add	r2, r3
 801ec0e:	f10a 0320 	add.w	r3, sl, #32
 801ec12:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801ec16:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 801ec1a:	0a1b      	lsrs	r3, r3, #8
 801ec1c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ec20:	ea4b 0303 	orr.w	r3, fp, r3
 801ec24:	b29b      	uxth	r3, r3
 801ec26:	3501      	adds	r5, #1
 801ec28:	d474      	bmi.n	801ed14 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 801ec2a:	45a8      	cmp	r8, r5
 801ec2c:	dd72      	ble.n	801ed14 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 801ec2e:	f1be 0f00 	cmp.w	lr, #0
 801ec32:	f000 8120 	beq.w	801ee76 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 801ec36:	2f00      	cmp	r7, #0
 801ec38:	db69      	blt.n	801ed0e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 801ec3a:	42be      	cmp	r6, r7
 801ec3c:	dd67      	ble.n	801ed0e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 801ec3e:	f819 5006 	ldrb.w	r5, [r9, r6]
 801ec42:	9a01      	ldr	r2, [sp, #4]
 801ec44:	2dff      	cmp	r5, #255	; 0xff
 801ec46:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 801ec4a:	d01c      	beq.n	801ec86 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 801ec4c:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 801ec50:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801ec54:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801ec58:	fb08 f802 	mul.w	r8, r8, r2
 801ec5c:	fb05 fa0b 	mul.w	sl, r5, fp
 801ec60:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801ec64:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 801ec68:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801ec6c:	4490      	add	r8, r2
 801ec6e:	f10a 0220 	add.w	r2, sl, #32
 801ec72:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 801ec76:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 801ec7a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ec7e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ec82:	ea4b 0b0a 	orr.w	fp, fp, sl
 801ec86:	fa1f fb8b 	uxth.w	fp, fp
 801ec8a:	3701      	adds	r7, #1
 801ec8c:	d447      	bmi.n	801ed1e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 801ec8e:	42be      	cmp	r6, r7
 801ec90:	dd45      	ble.n	801ed1e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 801ec92:	2800      	cmp	r0, #0
 801ec94:	d046      	beq.n	801ed24 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 801ec96:	3601      	adds	r6, #1
 801ec98:	9a01      	ldr	r2, [sp, #4]
 801ec9a:	f819 7006 	ldrb.w	r7, [r9, r6]
 801ec9e:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 801eca2:	2fff      	cmp	r7, #255	; 0xff
 801eca4:	d01a      	beq.n	801ecdc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 801eca6:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 801ecaa:	ea4f 08e7 	mov.w	r8, r7, asr #3
 801ecae:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ecb2:	fb08 f806 	mul.w	r8, r8, r6
 801ecb6:	fb07 f902 	mul.w	r9, r7, r2
 801ecba:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801ecbe:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 801ecc2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801ecc6:	44b0      	add	r8, r6
 801ecc8:	f109 0620 	add.w	r6, r9, #32
 801eccc:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 801ecd0:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801ecd4:	0a36      	lsrs	r6, r6, #8
 801ecd6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ecda:	4332      	orrs	r2, r6
 801ecdc:	b292      	uxth	r2, r2
 801ecde:	280f      	cmp	r0, #15
 801ece0:	d922      	bls.n	801ed28 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 801ece2:	4b69      	ldr	r3, [pc, #420]	; (801ee88 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 801ece4:	f240 11f9 	movw	r1, #505	; 0x1f9
 801ece8:	4a68      	ldr	r2, [pc, #416]	; (801ee8c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 801ecea:	4869      	ldr	r0, [pc, #420]	; (801ee90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 801ecec:	f005 fe84 	bl	80249f8 <__assert_func>
 801ecf0:	f04f 0c00 	mov.w	ip, #0
 801ecf4:	4661      	mov	r1, ip
 801ecf6:	e76a      	b.n	801ebce <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 801ecf8:	2400      	movs	r4, #0
 801ecfa:	46a4      	mov	ip, r4
 801ecfc:	4623      	mov	r3, r4
 801ecfe:	4621      	mov	r1, r4
 801ed00:	e791      	b.n	801ec26 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 801ed02:	2400      	movs	r4, #0
 801ed04:	4623      	mov	r3, r4
 801ed06:	e78e      	b.n	801ec26 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 801ed08:	4604      	mov	r4, r0
 801ed0a:	4603      	mov	r3, r0
 801ed0c:	e78b      	b.n	801ec26 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 801ed0e:	2500      	movs	r5, #0
 801ed10:	46ab      	mov	fp, r5
 801ed12:	e7ba      	b.n	801ec8a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 801ed14:	2700      	movs	r7, #0
 801ed16:	463d      	mov	r5, r7
 801ed18:	463a      	mov	r2, r7
 801ed1a:	46bb      	mov	fp, r7
 801ed1c:	e7df      	b.n	801ecde <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 801ed1e:	2700      	movs	r7, #0
 801ed20:	463a      	mov	r2, r7
 801ed22:	e7dc      	b.n	801ecde <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 801ed24:	4607      	mov	r7, r0
 801ed26:	4602      	mov	r2, r0
 801ed28:	f1be 0f0f 	cmp.w	lr, #15
 801ed2c:	d8d9      	bhi.n	801ece2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 801ed2e:	b286      	uxth	r6, r0
 801ed30:	fa1f f98e 	uxth.w	r9, lr
 801ed34:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801ed38:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801ed3c:	fb06 f809 	mul.w	r8, r6, r9
 801ed40:	0136      	lsls	r6, r6, #4
 801ed42:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ed46:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801ed4a:	9601      	str	r6, [sp, #4]
 801ed4c:	ea4a 0101 	orr.w	r1, sl, r1
 801ed50:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 801ed54:	fa1f f689 	uxth.w	r6, r9
 801ed58:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ed5c:	fb10 f90e 	smulbb	r9, r0, lr
 801ed60:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ed64:	9602      	str	r6, [sp, #8]
 801ed66:	460e      	mov	r6, r1
 801ed68:	ea4f 09e9 	mov.w	r9, r9, asr #3
 801ed6c:	f1ce 0110 	rsb	r1, lr, #16
 801ed70:	ea4a 0303 	orr.w	r3, sl, r3
 801ed74:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801ed78:	1a09      	subs	r1, r1, r0
 801ed7a:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 801ed7e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ed82:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ed86:	4343      	muls	r3, r0
 801ed88:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 801ed8c:	9801      	ldr	r0, [sp, #4]
 801ed8e:	ea4a 0202 	orr.w	r2, sl, r2
 801ed92:	fb01 3106 	mla	r1, r1, r6, r3
 801ed96:	9e02      	ldr	r6, [sp, #8]
 801ed98:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801ed9c:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 801eda0:	fb09 1302 	mla	r3, r9, r2, r1
 801eda4:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801eda8:	1b80      	subs	r0, r0, r6
 801edaa:	9e01      	ldr	r6, [sp, #4]
 801edac:	9a03      	ldr	r2, [sp, #12]
 801edae:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801edb2:	eba6 0608 	sub.w	r6, r6, r8
 801edb6:	b280      	uxth	r0, r0
 801edb8:	8811      	ldrh	r1, [r2, #0]
 801edba:	ea4a 0b0b 	orr.w	fp, sl, fp
 801edbe:	b2b6      	uxth	r6, r6
 801edc0:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801edc4:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801edc8:	4374      	muls	r4, r6
 801edca:	b292      	uxth	r2, r2
 801edcc:	fb0e 3e0b 	mla	lr, lr, fp, r3
 801edd0:	fb0c 4400 	mla	r4, ip, r0, r4
 801edd4:	9802      	ldr	r0, [sp, #8]
 801edd6:	ea4f 535e 	mov.w	r3, lr, lsr #21
 801edda:	fb00 4505 	mla	r5, r0, r5, r4
 801edde:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801ede2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ede6:	1208      	asrs	r0, r1, #8
 801ede8:	fb08 5707 	mla	r7, r8, r7, r5
 801edec:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801edf0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801edf4:	10cd      	asrs	r5, r1, #3
 801edf6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801edfa:	ea43 0e0e 	orr.w	lr, r3, lr
 801edfe:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801ee02:	4357      	muls	r7, r2
 801ee04:	fa1f f38e 	uxth.w	r3, lr
 801ee08:	f107 0801 	add.w	r8, r7, #1
 801ee0c:	121c      	asrs	r4, r3, #8
 801ee0e:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801ee12:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801ee16:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 801ee1a:	b2ff      	uxtb	r7, r7
 801ee1c:	fb10 f007 	smulbb	r0, r0, r7
 801ee20:	fb15 f507 	smulbb	r5, r5, r7
 801ee24:	fb04 0402 	mla	r4, r4, r2, r0
 801ee28:	10d8      	asrs	r0, r3, #3
 801ee2a:	00db      	lsls	r3, r3, #3
 801ee2c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801ee30:	b2a4      	uxth	r4, r4
 801ee32:	fb00 5002 	mla	r0, r0, r2, r5
 801ee36:	b2dd      	uxtb	r5, r3
 801ee38:	00cb      	lsls	r3, r1, #3
 801ee3a:	b280      	uxth	r0, r0
 801ee3c:	b2db      	uxtb	r3, r3
 801ee3e:	fb13 f307 	smulbb	r3, r3, r7
 801ee42:	fb05 3202 	mla	r2, r5, r2, r3
 801ee46:	1c63      	adds	r3, r4, #1
 801ee48:	b292      	uxth	r2, r2
 801ee4a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801ee4e:	1c53      	adds	r3, r2, #1
 801ee50:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801ee54:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ee58:	1c42      	adds	r2, r0, #1
 801ee5a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801ee5e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ee62:	9a03      	ldr	r2, [sp, #12]
 801ee64:	0940      	lsrs	r0, r0, #5
 801ee66:	4323      	orrs	r3, r4
 801ee68:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ee6c:	4303      	orrs	r3, r0
 801ee6e:	8013      	strh	r3, [r2, #0]
 801ee70:	b005      	add	sp, #20
 801ee72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee76:	280f      	cmp	r0, #15
 801ee78:	f63f af33 	bhi.w	801ece2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 801ee7c:	4677      	mov	r7, lr
 801ee7e:	4675      	mov	r5, lr
 801ee80:	4672      	mov	r2, lr
 801ee82:	46f3      	mov	fp, lr
 801ee84:	e753      	b.n	801ed2e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 801ee86:	bf00      	nop
 801ee88:	0802a0bb 	.word	0x0802a0bb
 801ee8c:	0802a5ea 	.word	0x0802a5ea
 801ee90:	0802a088 	.word	0x0802a088

0801ee94 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ee94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee98:	ed2d 8b08 	vpush	{d8-d11}
 801ee9c:	b097      	sub	sp, #92	; 0x5c
 801ee9e:	eeb0 aa40 	vmov.f32	s20, s0
 801eea2:	eef0 9a60 	vmov.f32	s19, s1
 801eea6:	9214      	str	r2, [sp, #80]	; 0x50
 801eea8:	eeb0 9a41 	vmov.f32	s18, s2
 801eeac:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801eeae:	eeb0 8a62 	vmov.f32	s16, s5
 801eeb2:	9308      	str	r3, [sp, #32]
 801eeb4:	eef0 8a43 	vmov.f32	s17, s6
 801eeb8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801eebc:	eef0 ba44 	vmov.f32	s23, s8
 801eec0:	9015      	str	r0, [sp, #84]	; 0x54
 801eec2:	eeb0 ba64 	vmov.f32	s22, s9
 801eec6:	9312      	str	r3, [sp, #72]	; 0x48
 801eec8:	eef0 aa45 	vmov.f32	s21, s10
 801eecc:	6850      	ldr	r0, [r2, #4]
 801eece:	9111      	str	r1, [sp, #68]	; 0x44
 801eed0:	6812      	ldr	r2, [r2, #0]
 801eed2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801eed6:	fb00 1303 	mla	r3, r0, r3, r1
 801eeda:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801eede:	9309      	str	r3, [sp, #36]	; 0x24
 801eee0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801eee2:	681b      	ldr	r3, [r3, #0]
 801eee4:	930b      	str	r3, [sp, #44]	; 0x2c
 801eee6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801eee8:	685b      	ldr	r3, [r3, #4]
 801eeea:	930c      	str	r3, [sp, #48]	; 0x30
 801eeec:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801eef0:	930a      	str	r3, [sp, #40]	; 0x28
 801eef2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801eef4:	2b00      	cmp	r3, #0
 801eef6:	dc03      	bgt.n	801ef00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801eef8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801eefa:	2b00      	cmp	r3, #0
 801eefc:	f340 83cd 	ble.w	801f69a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 801ef00:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ef02:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ef06:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ef0a:	1e48      	subs	r0, r1, #1
 801ef0c:	1e55      	subs	r5, r2, #1
 801ef0e:	9b08      	ldr	r3, [sp, #32]
 801ef10:	2b00      	cmp	r3, #0
 801ef12:	f340 81a5 	ble.w	801f260 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801ef16:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 801ef18:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ef1a:	1436      	asrs	r6, r6, #16
 801ef1c:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ef20:	d406      	bmi.n	801ef30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ef22:	4286      	cmp	r6, r0
 801ef24:	da04      	bge.n	801ef30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ef26:	2b00      	cmp	r3, #0
 801ef28:	db02      	blt.n	801ef30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ef2a:	42ab      	cmp	r3, r5
 801ef2c:	f2c0 8199 	blt.w	801f262 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801ef30:	3601      	adds	r6, #1
 801ef32:	f100 8186 	bmi.w	801f242 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801ef36:	42b1      	cmp	r1, r6
 801ef38:	f2c0 8183 	blt.w	801f242 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801ef3c:	3301      	adds	r3, #1
 801ef3e:	f100 8180 	bmi.w	801f242 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801ef42:	429a      	cmp	r2, r3
 801ef44:	f2c0 817d 	blt.w	801f242 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801ef48:	9b08      	ldr	r3, [sp, #32]
 801ef4a:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801ef4e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ef50:	9313      	str	r3, [sp, #76]	; 0x4c
 801ef52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ef54:	2b00      	cmp	r3, #0
 801ef56:	f340 81a6 	ble.w	801f2a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801ef5a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ef5c:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 801ef5e:	1418      	asrs	r0, r3, #16
 801ef60:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ef62:	142d      	asrs	r5, r5, #16
 801ef64:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801ef68:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ef6a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801ef6e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ef70:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801ef74:	f100 81fa 	bmi.w	801f36c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801ef78:	f102 3eff 	add.w	lr, r2, #4294967295
 801ef7c:	4575      	cmp	r5, lr
 801ef7e:	f280 81f5 	bge.w	801f36c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801ef82:	2800      	cmp	r0, #0
 801ef84:	f2c0 81f2 	blt.w	801f36c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801ef88:	f103 3eff 	add.w	lr, r3, #4294967295
 801ef8c:	4570      	cmp	r0, lr
 801ef8e:	f280 81ed 	bge.w	801f36c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801ef92:	b212      	sxth	r2, r2
 801ef94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ef96:	fa1f fe81 	uxth.w	lr, r1
 801ef9a:	fb00 5002 	mla	r0, r0, r2, r5
 801ef9e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801efa2:	eb03 0a00 	add.w	sl, r3, r0
 801efa6:	f813 9000 	ldrb.w	r9, [r3, r0]
 801efaa:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801efae:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801efb2:	b29b      	uxth	r3, r3
 801efb4:	f1bc 0f00 	cmp.w	ip, #0
 801efb8:	f000 81bb 	beq.w	801f332 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801efbc:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801efc0:	eb0a 0b02 	add.w	fp, sl, r2
 801efc4:	fa1f fa8c 	uxth.w	sl, ip
 801efc8:	940d      	str	r4, [sp, #52]	; 0x34
 801efca:	fb0a fe0e 	mul.w	lr, sl, lr
 801efce:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801efd2:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801efd6:	eba5 050e 	sub.w	r5, r5, lr
 801efda:	940e      	str	r4, [sp, #56]	; 0x38
 801efdc:	fa1f fa8a 	uxth.w	sl, sl
 801efe0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801efe2:	b2ad      	uxth	r5, r5
 801efe4:	eba3 030a 	sub.w	r3, r3, sl
 801efe8:	fb08 f505 	mul.w	r5, r8, r5
 801efec:	b29b      	uxth	r3, r3
 801efee:	fb09 5303 	mla	r3, r9, r3, r5
 801eff2:	fb0a 3304 	mla	r3, sl, r4, r3
 801eff6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801eff8:	fb0e 3304 	mla	r3, lr, r4, r3
 801effc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f000:	2b00      	cmp	r3, #0
 801f002:	f000 8111 	beq.w	801f228 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801f006:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f008:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f00c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801f010:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801f014:	f000 8192 	beq.w	801f33c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 801f018:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801f01c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801f020:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f024:	fb0a fe0e 	mul.w	lr, sl, lr
 801f028:	fb09 f000 	mul.w	r0, r9, r0
 801f02c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801f030:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801f034:	f100 0b20 	add.w	fp, r0, #32
 801f038:	44ce      	add	lr, r9
 801f03a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801f03e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801f042:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f046:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f04a:	ea4e 0909 	orr.w	r9, lr, r9
 801f04e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f052:	8868      	ldrh	r0, [r5, #2]
 801f054:	d019      	beq.n	801f08a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801f056:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801f05a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801f05e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f062:	fb0a fe0e 	mul.w	lr, sl, lr
 801f066:	fb08 f800 	mul.w	r8, r8, r0
 801f06a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801f06e:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801f072:	f108 0b20 	add.w	fp, r8, #32
 801f076:	4486      	add	lr, r0
 801f078:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801f07c:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801f080:	0a00      	lsrs	r0, r0, #8
 801f082:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f086:	ea4e 0000 	orr.w	r0, lr, r0
 801f08a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801f08e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f092:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801f096:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f09a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801f09e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f0a2:	ea4e 0909 	orr.w	r9, lr, r9
 801f0a6:	ea4a 0000 	orr.w	r0, sl, r0
 801f0aa:	f1bc 0f00 	cmp.w	ip, #0
 801f0ae:	f000 8147 	beq.w	801f340 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 801f0b2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801f0b6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f0b8:	3a01      	subs	r2, #1
 801f0ba:	2cff      	cmp	r4, #255	; 0xff
 801f0bc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801f0c0:	f102 0202 	add.w	r2, r2, #2
 801f0c4:	eb05 0e02 	add.w	lr, r5, r2
 801f0c8:	5aaa      	ldrh	r2, [r5, r2]
 801f0ca:	d018      	beq.n	801f0fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801f0cc:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 801f0d0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f0d4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f0d8:	fb04 fa02 	mul.w	sl, r4, r2
 801f0dc:	fb08 f805 	mul.w	r8, r8, r5
 801f0e0:	f10a 0520 	add.w	r5, sl, #32
 801f0e4:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801f0e8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f0ec:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801f0f0:	4442      	add	r2, r8
 801f0f2:	0a2d      	lsrs	r5, r5, #8
 801f0f4:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801f0f8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f0fc:	432a      	orrs	r2, r5
 801f0fe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f100:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801f104:	2cff      	cmp	r4, #255	; 0xff
 801f106:	d01a      	beq.n	801f13e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 801f108:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 801f10c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f110:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f114:	fb04 fa05 	mul.w	sl, r4, r5
 801f118:	fb08 f80e 	mul.w	r8, r8, lr
 801f11c:	f10a 0e20 	add.w	lr, sl, #32
 801f120:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801f124:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f128:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801f12c:	4445      	add	r5, r8
 801f12e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f132:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801f136:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801f13a:	ea45 050e 	orr.w	r5, r5, lr
 801f13e:	fb1c fe01 	smulbb	lr, ip, r1
 801f142:	f1cc 0810 	rsb	r8, ip, #16
 801f146:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801f14a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f14e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801f152:	eba8 0801 	sub.w	r8, r8, r1
 801f156:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801f15a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f15e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801f162:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801f166:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801f16a:	ea4a 0202 	orr.w	r2, sl, r2
 801f16e:	4341      	muls	r1, r0
 801f170:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801f174:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f178:	fb09 1108 	mla	r1, r9, r8, r1
 801f17c:	ea4b 0505 	orr.w	r5, fp, r5
 801f180:	fb0c 1102 	mla	r1, ip, r2, r1
 801f184:	fb0e 1e05 	mla	lr, lr, r5, r1
 801f188:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801f18c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801f190:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f194:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f198:	ea42 0e0e 	orr.w	lr, r2, lr
 801f19c:	fa1f f28e 	uxth.w	r2, lr
 801f1a0:	2bff      	cmp	r3, #255	; 0xff
 801f1a2:	d103      	bne.n	801f1ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 801f1a4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f1a6:	29ff      	cmp	r1, #255	; 0xff
 801f1a8:	f000 80de 	beq.w	801f368 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 801f1ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f1ae:	1215      	asrs	r5, r2, #8
 801f1b0:	8838      	ldrh	r0, [r7, #0]
 801f1b2:	434b      	muls	r3, r1
 801f1b4:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f1b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f1ba:	f103 0c01 	add.w	ip, r3, #1
 801f1be:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 801f1c2:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801f1c6:	fa5f fc83 	uxtb.w	ip, r3
 801f1ca:	1203      	asrs	r3, r0, #8
 801f1cc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801f1d0:	fb13 f30c 	smulbb	r3, r3, ip
 801f1d4:	fb05 3501 	mla	r5, r5, r1, r3
 801f1d8:	10c3      	asrs	r3, r0, #3
 801f1da:	10d1      	asrs	r1, r2, #3
 801f1dc:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801f1e0:	00d2      	lsls	r2, r2, #3
 801f1e2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f1e6:	b2ad      	uxth	r5, r5
 801f1e8:	fb13 f30c 	smulbb	r3, r3, ip
 801f1ec:	b2d2      	uxtb	r2, r2
 801f1ee:	fb01 3104 	mla	r1, r1, r4, r3
 801f1f2:	00c3      	lsls	r3, r0, #3
 801f1f4:	b2db      	uxtb	r3, r3
 801f1f6:	b289      	uxth	r1, r1
 801f1f8:	fb13 f30c 	smulbb	r3, r3, ip
 801f1fc:	fb02 3304 	mla	r3, r2, r4, r3
 801f200:	b29a      	uxth	r2, r3
 801f202:	1c6b      	adds	r3, r5, #1
 801f204:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f208:	1c53      	adds	r3, r2, #1
 801f20a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f20e:	1c4a      	adds	r2, r1, #1
 801f210:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801f214:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801f218:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f21c:	0949      	lsrs	r1, r1, #5
 801f21e:	432b      	orrs	r3, r5
 801f220:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f224:	430b      	orrs	r3, r1
 801f226:	803b      	strh	r3, [r7, #0]
 801f228:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f22a:	3702      	adds	r7, #2
 801f22c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f22e:	4413      	add	r3, r2
 801f230:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f232:	9329      	str	r3, [sp, #164]	; 0xa4
 801f234:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f236:	441a      	add	r2, r3
 801f238:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f23a:	3b01      	subs	r3, #1
 801f23c:	922a      	str	r2, [sp, #168]	; 0xa8
 801f23e:	9313      	str	r3, [sp, #76]	; 0x4c
 801f240:	e687      	b.n	801ef52 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801f242:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f244:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 801f246:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 801f248:	4433      	add	r3, r6
 801f24a:	9329      	str	r3, [sp, #164]	; 0xa4
 801f24c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f24e:	441c      	add	r4, r3
 801f250:	9b08      	ldr	r3, [sp, #32]
 801f252:	3b01      	subs	r3, #1
 801f254:	942a      	str	r4, [sp, #168]	; 0xa8
 801f256:	9308      	str	r3, [sp, #32]
 801f258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f25a:	3302      	adds	r3, #2
 801f25c:	9309      	str	r3, [sp, #36]	; 0x24
 801f25e:	e656      	b.n	801ef0e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f260:	d028      	beq.n	801f2b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 801f262:	9b08      	ldr	r3, [sp, #32]
 801f264:	982b      	ldr	r0, [sp, #172]	; 0xac
 801f266:	3b01      	subs	r3, #1
 801f268:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 801f26a:	fb00 5003 	mla	r0, r0, r3, r5
 801f26e:	1400      	asrs	r0, r0, #16
 801f270:	f53f ae6a 	bmi.w	801ef48 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801f274:	3901      	subs	r1, #1
 801f276:	4288      	cmp	r0, r1
 801f278:	f6bf ae66 	bge.w	801ef48 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801f27c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801f27e:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801f280:	fb01 0303 	mla	r3, r1, r3, r0
 801f284:	141b      	asrs	r3, r3, #16
 801f286:	f53f ae5f 	bmi.w	801ef48 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801f28a:	3a01      	subs	r2, #1
 801f28c:	4293      	cmp	r3, r2
 801f28e:	f6bf ae5b 	bge.w	801ef48 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801f292:	9b08      	ldr	r3, [sp, #32]
 801f294:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801f298:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801f29c:	9313      	str	r3, [sp, #76]	; 0x4c
 801f29e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f2a0:	2b00      	cmp	r3, #0
 801f2a2:	f300 8082 	bgt.w	801f3aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 801f2a6:	9b08      	ldr	r3, [sp, #32]
 801f2a8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f2ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f2ae:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801f2b2:	9309      	str	r3, [sp, #36]	; 0x24
 801f2b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f2b6:	2b00      	cmp	r3, #0
 801f2b8:	f340 81ef 	ble.w	801f69a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 801f2bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f2c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f2c2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f2c6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f2ca:	eef0 6a48 	vmov.f32	s13, s16
 801f2ce:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f2d2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f2d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f2da:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801f2de:	eef0 6a68 	vmov.f32	s13, s17
 801f2e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f2e6:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 801f2ea:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f2ee:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f2f2:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f2f6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f2fa:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f2fe:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f302:	ee18 2a10 	vmov	r2, s16
 801f306:	eeb0 8a47 	vmov.f32	s16, s14
 801f30a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f30e:	ee18 2a90 	vmov	r2, s17
 801f312:	932b      	str	r3, [sp, #172]	; 0xac
 801f314:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f316:	eef0 8a67 	vmov.f32	s17, s15
 801f31a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f31e:	932c      	str	r3, [sp, #176]	; 0xb0
 801f320:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f322:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f324:	3b01      	subs	r3, #1
 801f326:	9311      	str	r3, [sp, #68]	; 0x44
 801f328:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f32a:	bf08      	it	eq
 801f32c:	4613      	moveq	r3, r2
 801f32e:	9308      	str	r3, [sp, #32]
 801f330:	e5df      	b.n	801eef2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801f332:	fb08 f505 	mul.w	r5, r8, r5
 801f336:	fb09 5303 	mla	r3, r9, r3, r5
 801f33a:	e65f      	b.n	801effc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 801f33c:	4681      	mov	r9, r0
 801f33e:	e686      	b.n	801f04e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801f340:	f1c1 0210 	rsb	r2, r1, #16
 801f344:	4341      	muls	r1, r0
 801f346:	fb09 1902 	mla	r9, r9, r2, r1
 801f34a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801f34e:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801f352:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f356:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f35a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f35e:	ea42 0909 	orr.w	r9, r2, r9
 801f362:	fa1f f289 	uxth.w	r2, r9
 801f366:	e71b      	b.n	801f1a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801f368:	803a      	strh	r2, [r7, #0]
 801f36a:	e75d      	b.n	801f228 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801f36c:	f115 0e01 	adds.w	lr, r5, #1
 801f370:	f53f af5a 	bmi.w	801f228 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801f374:	4572      	cmp	r2, lr
 801f376:	f6ff af57 	blt.w	801f228 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801f37a:	f110 0e01 	adds.w	lr, r0, #1
 801f37e:	f53f af53 	bmi.w	801f228 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801f382:	4573      	cmp	r3, lr
 801f384:	f6ff af50 	blt.w	801f228 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801f388:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f38a:	b21b      	sxth	r3, r3
 801f38c:	b212      	sxth	r2, r2
 801f38e:	9502      	str	r5, [sp, #8]
 801f390:	9301      	str	r3, [sp, #4]
 801f392:	9200      	str	r2, [sp, #0]
 801f394:	e9cd 0103 	strd	r0, r1, [sp, #12]
 801f398:	e9cd c405 	strd	ip, r4, [sp, #20]
 801f39c:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 801f3a0:	4639      	mov	r1, r7
 801f3a2:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f3a4:	f7ff fbd0 	bl	801eb48 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 801f3a8:	e73e      	b.n	801f228 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801f3aa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f3ac:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f3b0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f3b2:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801f3b6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f3b8:	fa1f fc82 	uxth.w	ip, r2
 801f3bc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f3c0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f3c2:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801f3c6:	141f      	asrs	r7, r3, #16
 801f3c8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f3ca:	141b      	asrs	r3, r3, #16
 801f3cc:	fb01 3707 	mla	r7, r1, r7, r3
 801f3d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f3d2:	eb03 0a07 	add.w	sl, r3, r7
 801f3d6:	f813 9007 	ldrb.w	r9, [r3, r7]
 801f3da:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801f3de:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801f3e2:	b29b      	uxth	r3, r3
 801f3e4:	2d00      	cmp	r5, #0
 801f3e6:	f000 813d 	beq.w	801f664 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 801f3ea:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801f3ee:	eb0a 0b01 	add.w	fp, sl, r1
 801f3f2:	fa1f fa85 	uxth.w	sl, r5
 801f3f6:	940f      	str	r4, [sp, #60]	; 0x3c
 801f3f8:	fb0a fc0c 	mul.w	ip, sl, ip
 801f3fc:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801f400:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801f404:	eba0 000c 	sub.w	r0, r0, ip
 801f408:	9410      	str	r4, [sp, #64]	; 0x40
 801f40a:	fa1f fa8a 	uxth.w	sl, sl
 801f40e:	b280      	uxth	r0, r0
 801f410:	eba3 030a 	sub.w	r3, r3, sl
 801f414:	fb08 f000 	mul.w	r0, r8, r0
 801f418:	b29b      	uxth	r3, r3
 801f41a:	fb09 0303 	mla	r3, r9, r3, r0
 801f41e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f420:	fb0a 3300 	mla	r3, sl, r0, r3
 801f424:	fb0c 3304 	mla	r3, ip, r4, r3
 801f428:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f42c:	2b00      	cmp	r3, #0
 801f42e:	f000 810b 	beq.w	801f648 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 801f432:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f434:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f438:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f43a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801f43e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801f442:	f000 8114 	beq.w	801f66e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 801f446:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801f44a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801f44e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f452:	fb0a fc0c 	mul.w	ip, sl, ip
 801f456:	fb09 f707 	mul.w	r7, r9, r7
 801f45a:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801f45e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801f462:	f107 0b20 	add.w	fp, r7, #32
 801f466:	44cc      	add	ip, r9
 801f468:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801f46c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801f470:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f474:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f478:	ea4c 0909 	orr.w	r9, ip, r9
 801f47c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f480:	8847      	ldrh	r7, [r0, #2]
 801f482:	d019      	beq.n	801f4b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x624>
 801f484:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801f488:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801f48c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f490:	fb0a fc0c 	mul.w	ip, sl, ip
 801f494:	fb08 f807 	mul.w	r8, r8, r7
 801f498:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801f49c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801f4a0:	f108 0b20 	add.w	fp, r8, #32
 801f4a4:	44bc      	add	ip, r7
 801f4a6:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801f4aa:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801f4ae:	0a3f      	lsrs	r7, r7, #8
 801f4b0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f4b4:	ea4c 0707 	orr.w	r7, ip, r7
 801f4b8:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801f4bc:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f4c0:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801f4c4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801f4c8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f4cc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f4d0:	ea4c 0909 	orr.w	r9, ip, r9
 801f4d4:	ea4a 0707 	orr.w	r7, sl, r7
 801f4d8:	2d00      	cmp	r5, #0
 801f4da:	f000 80ca 	beq.w	801f672 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 801f4de:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801f4e2:	3901      	subs	r1, #1
 801f4e4:	0049      	lsls	r1, r1, #1
 801f4e6:	3102      	adds	r1, #2
 801f4e8:	eb00 0c01 	add.w	ip, r0, r1
 801f4ec:	5a41      	ldrh	r1, [r0, r1]
 801f4ee:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f4f0:	28ff      	cmp	r0, #255	; 0xff
 801f4f2:	d019      	beq.n	801f528 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 801f4f4:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801f4f8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f4fa:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f4fe:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f502:	fb04 fa01 	mul.w	sl, r4, r1
 801f506:	fb08 f800 	mul.w	r8, r8, r0
 801f50a:	f10a 0020 	add.w	r0, sl, #32
 801f50e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801f512:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f516:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801f51a:	4441      	add	r1, r8
 801f51c:	0a00      	lsrs	r0, r0, #8
 801f51e:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801f522:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f526:	4301      	orrs	r1, r0
 801f528:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f52a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801f52e:	2cff      	cmp	r4, #255	; 0xff
 801f530:	d01a      	beq.n	801f568 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 801f532:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 801f536:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f53a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f53e:	fb04 fa00 	mul.w	sl, r4, r0
 801f542:	fb08 f80c 	mul.w	r8, r8, ip
 801f546:	f10a 0c20 	add.w	ip, sl, #32
 801f54a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801f54e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f552:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801f556:	4440      	add	r0, r8
 801f558:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f55c:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801f560:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801f564:	ea40 000c 	orr.w	r0, r0, ip
 801f568:	fb15 fc02 	smulbb	ip, r5, r2
 801f56c:	f1c5 0810 	rsb	r8, r5, #16
 801f570:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801f574:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f578:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801f57c:	eba8 0802 	sub.w	r8, r8, r2
 801f580:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801f584:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f588:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801f58c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f590:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801f594:	ea4a 0101 	orr.w	r1, sl, r1
 801f598:	437a      	muls	r2, r7
 801f59a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 801f59e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f5a2:	fb09 2208 	mla	r2, r9, r8, r2
 801f5a6:	ea4b 0000 	orr.w	r0, fp, r0
 801f5aa:	fb05 2201 	mla	r2, r5, r1, r2
 801f5ae:	fb0c 2200 	mla	r2, ip, r0, r2
 801f5b2:	0d57      	lsrs	r7, r2, #21
 801f5b4:	0952      	lsrs	r2, r2, #5
 801f5b6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f5ba:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f5be:	433a      	orrs	r2, r7
 801f5c0:	2bff      	cmp	r3, #255	; 0xff
 801f5c2:	b292      	uxth	r2, r2
 801f5c4:	d102      	bne.n	801f5cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 801f5c6:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f5c8:	29ff      	cmp	r1, #255	; 0xff
 801f5ca:	d063      	beq.n	801f694 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x800>
 801f5cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f5ce:	1215      	asrs	r5, r2, #8
 801f5d0:	f8be 1000 	ldrh.w	r1, [lr]
 801f5d4:	4343      	muls	r3, r0
 801f5d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f5d8:	10cf      	asrs	r7, r1, #3
 801f5da:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f5de:	1c58      	adds	r0, r3, #1
 801f5e0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f5e4:	eb00 2323 	add.w	r3, r0, r3, asr #8
 801f5e8:	1208      	asrs	r0, r1, #8
 801f5ea:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801f5ee:	00c9      	lsls	r1, r1, #3
 801f5f0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f5f4:	b2db      	uxtb	r3, r3
 801f5f6:	b2c9      	uxtb	r1, r1
 801f5f8:	fb10 f003 	smulbb	r0, r0, r3
 801f5fc:	fb11 f103 	smulbb	r1, r1, r3
 801f600:	fb05 0504 	mla	r5, r5, r4, r0
 801f604:	10d0      	asrs	r0, r2, #3
 801f606:	fb17 f703 	smulbb	r7, r7, r3
 801f60a:	00d2      	lsls	r2, r2, #3
 801f60c:	b2ad      	uxth	r5, r5
 801f60e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801f612:	b2d2      	uxtb	r2, r2
 801f614:	fb00 7004 	mla	r0, r0, r4, r7
 801f618:	1c6b      	adds	r3, r5, #1
 801f61a:	fb02 1204 	mla	r2, r2, r4, r1
 801f61e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f622:	b292      	uxth	r2, r2
 801f624:	b280      	uxth	r0, r0
 801f626:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801f62a:	1c57      	adds	r7, r2, #1
 801f62c:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801f630:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f634:	433d      	orrs	r5, r7
 801f636:	1c47      	adds	r7, r0, #1
 801f638:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801f63c:	097f      	lsrs	r7, r7, #5
 801f63e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f642:	433d      	orrs	r5, r7
 801f644:	f8ae 5000 	strh.w	r5, [lr]
 801f648:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f64a:	f10e 0e02 	add.w	lr, lr, #2
 801f64e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f650:	4413      	add	r3, r2
 801f652:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f654:	9329      	str	r3, [sp, #164]	; 0xa4
 801f656:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f658:	441a      	add	r2, r3
 801f65a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f65c:	3b01      	subs	r3, #1
 801f65e:	922a      	str	r2, [sp, #168]	; 0xa8
 801f660:	9313      	str	r3, [sp, #76]	; 0x4c
 801f662:	e61c      	b.n	801f29e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801f664:	fb08 f000 	mul.w	r0, r8, r0
 801f668:	fb09 0303 	mla	r3, r9, r3, r0
 801f66c:	e6dc      	b.n	801f428 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 801f66e:	46b9      	mov	r9, r7
 801f670:	e704      	b.n	801f47c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e8>
 801f672:	f1c2 0110 	rsb	r1, r2, #16
 801f676:	437a      	muls	r2, r7
 801f678:	fb09 2901 	mla	r9, r9, r1, r2
 801f67c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801f680:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801f684:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801f688:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f68c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f690:	4302      	orrs	r2, r0
 801f692:	e795      	b.n	801f5c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 801f694:	f8ae 2000 	strh.w	r2, [lr]
 801f698:	e7d6      	b.n	801f648 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 801f69a:	b017      	add	sp, #92	; 0x5c
 801f69c:	ecbd 8b08 	vpop	{d8-d11}
 801f6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f6a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801f6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6a8:	b085      	sub	sp, #20
 801f6aa:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 801f6ae:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801f6b2:	9103      	str	r1, [sp, #12]
 801f6b4:	2d00      	cmp	r5, #0
 801f6b6:	fb05 7106 	mla	r1, r5, r6, r7
 801f6ba:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801f6be:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801f6c2:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 801f6c6:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801f6ca:	eb02 0901 	add.w	r9, r2, r1
 801f6ce:	9401      	str	r4, [sp, #4]
 801f6d0:	f2c0 80c0 	blt.w	801f854 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 801f6d4:	45a8      	cmp	r8, r5
 801f6d6:	f340 80bd 	ble.w	801f854 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 801f6da:	2f00      	cmp	r7, #0
 801f6dc:	f2c0 80b6 	blt.w	801f84c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 801f6e0:	42be      	cmp	r6, r7
 801f6e2:	f340 80b3 	ble.w	801f84c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 801f6e6:	f812 c001 	ldrb.w	ip, [r2, r1]
 801f6ea:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 801f6ee:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801f6f2:	d019      	beq.n	801f728 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 801f6f4:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 801f6f8:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801f6fc:	435a      	muls	r2, r3
 801f6fe:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 801f702:	f64f 011f 	movw	r1, #63519	; 0xf81f
 801f706:	fb0c f403 	mul.w	r4, ip, r3
 801f70a:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 801f70e:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801f712:	441a      	add	r2, r3
 801f714:	f104 0320 	add.w	r3, r4, #32
 801f718:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801f71c:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 801f720:	0a1b      	lsrs	r3, r3, #8
 801f722:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f726:	4319      	orrs	r1, r3
 801f728:	b289      	uxth	r1, r1
 801f72a:	1c7b      	adds	r3, r7, #1
 801f72c:	f100 8097 	bmi.w	801f85e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 801f730:	429e      	cmp	r6, r3
 801f732:	f340 8094 	ble.w	801f85e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 801f736:	2800      	cmp	r0, #0
 801f738:	f000 8094 	beq.w	801f864 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 801f73c:	f899 4001 	ldrb.w	r4, [r9, #1]
 801f740:	9b01      	ldr	r3, [sp, #4]
 801f742:	2cff      	cmp	r4, #255	; 0xff
 801f744:	885b      	ldrh	r3, [r3, #2]
 801f746:	d01b      	beq.n	801f780 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 801f748:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 801f74c:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801f750:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f754:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801f758:	fb0a f202 	mul.w	r2, sl, r2
 801f75c:	fb04 fa03 	mul.w	sl, r4, r3
 801f760:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 801f764:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801f768:	441a      	add	r2, r3
 801f76a:	f10a 0320 	add.w	r3, sl, #32
 801f76e:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801f772:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 801f776:	0a1b      	lsrs	r3, r3, #8
 801f778:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f77c:	ea4b 0303 	orr.w	r3, fp, r3
 801f780:	b29b      	uxth	r3, r3
 801f782:	3501      	adds	r5, #1
 801f784:	d474      	bmi.n	801f870 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 801f786:	45a8      	cmp	r8, r5
 801f788:	dd72      	ble.n	801f870 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 801f78a:	f1be 0f00 	cmp.w	lr, #0
 801f78e:	f000 8110 	beq.w	801f9b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x30e>
 801f792:	2f00      	cmp	r7, #0
 801f794:	db69      	blt.n	801f86a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 801f796:	42be      	cmp	r6, r7
 801f798:	dd67      	ble.n	801f86a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 801f79a:	f819 5006 	ldrb.w	r5, [r9, r6]
 801f79e:	9a01      	ldr	r2, [sp, #4]
 801f7a0:	2dff      	cmp	r5, #255	; 0xff
 801f7a2:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 801f7a6:	d01c      	beq.n	801f7e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 801f7a8:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 801f7ac:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801f7b0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801f7b4:	fb08 f802 	mul.w	r8, r8, r2
 801f7b8:	fb05 fa0b 	mul.w	sl, r5, fp
 801f7bc:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801f7c0:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 801f7c4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f7c8:	4490      	add	r8, r2
 801f7ca:	f10a 0220 	add.w	r2, sl, #32
 801f7ce:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 801f7d2:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 801f7d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f7da:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f7de:	ea4b 0b0a 	orr.w	fp, fp, sl
 801f7e2:	fa1f fb8b 	uxth.w	fp, fp
 801f7e6:	3701      	adds	r7, #1
 801f7e8:	d447      	bmi.n	801f87a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 801f7ea:	42be      	cmp	r6, r7
 801f7ec:	dd45      	ble.n	801f87a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 801f7ee:	2800      	cmp	r0, #0
 801f7f0:	d046      	beq.n	801f880 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 801f7f2:	3601      	adds	r6, #1
 801f7f4:	9a01      	ldr	r2, [sp, #4]
 801f7f6:	f819 7006 	ldrb.w	r7, [r9, r6]
 801f7fa:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 801f7fe:	2fff      	cmp	r7, #255	; 0xff
 801f800:	d01a      	beq.n	801f838 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 801f802:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 801f806:	ea4f 08e7 	mov.w	r8, r7, asr #3
 801f80a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f80e:	fb08 f806 	mul.w	r8, r8, r6
 801f812:	fb07 f902 	mul.w	r9, r7, r2
 801f816:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801f81a:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 801f81e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f822:	44b0      	add	r8, r6
 801f824:	f109 0620 	add.w	r6, r9, #32
 801f828:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 801f82c:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801f830:	0a36      	lsrs	r6, r6, #8
 801f832:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801f836:	4332      	orrs	r2, r6
 801f838:	b292      	uxth	r2, r2
 801f83a:	280f      	cmp	r0, #15
 801f83c:	d922      	bls.n	801f884 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 801f83e:	4b61      	ldr	r3, [pc, #388]	; (801f9c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 801f840:	f240 11f9 	movw	r1, #505	; 0x1f9
 801f844:	4a60      	ldr	r2, [pc, #384]	; (801f9c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 801f846:	4861      	ldr	r0, [pc, #388]	; (801f9cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 801f848:	f005 f8d6 	bl	80249f8 <__assert_func>
 801f84c:	f04f 0c00 	mov.w	ip, #0
 801f850:	4661      	mov	r1, ip
 801f852:	e76a      	b.n	801f72a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 801f854:	2400      	movs	r4, #0
 801f856:	46a4      	mov	ip, r4
 801f858:	4623      	mov	r3, r4
 801f85a:	4621      	mov	r1, r4
 801f85c:	e791      	b.n	801f782 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 801f85e:	2400      	movs	r4, #0
 801f860:	4623      	mov	r3, r4
 801f862:	e78e      	b.n	801f782 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 801f864:	4604      	mov	r4, r0
 801f866:	4603      	mov	r3, r0
 801f868:	e78b      	b.n	801f782 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 801f86a:	2500      	movs	r5, #0
 801f86c:	46ab      	mov	fp, r5
 801f86e:	e7ba      	b.n	801f7e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 801f870:	2700      	movs	r7, #0
 801f872:	463d      	mov	r5, r7
 801f874:	463a      	mov	r2, r7
 801f876:	46bb      	mov	fp, r7
 801f878:	e7df      	b.n	801f83a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 801f87a:	2700      	movs	r7, #0
 801f87c:	463a      	mov	r2, r7
 801f87e:	e7dc      	b.n	801f83a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 801f880:	4607      	mov	r7, r0
 801f882:	4602      	mov	r2, r0
 801f884:	f1be 0f0f 	cmp.w	lr, #15
 801f888:	d8d9      	bhi.n	801f83e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 801f88a:	b286      	uxth	r6, r0
 801f88c:	fa1f f98e 	uxth.w	r9, lr
 801f890:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801f894:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f898:	fb06 f809 	mul.w	r8, r6, r9
 801f89c:	0136      	lsls	r6, r6, #4
 801f89e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f8a2:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801f8a6:	9601      	str	r6, [sp, #4]
 801f8a8:	ea4a 0101 	orr.w	r1, sl, r1
 801f8ac:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 801f8b0:	fa1f f689 	uxth.w	r6, r9
 801f8b4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f8b8:	fb10 f90e 	smulbb	r9, r0, lr
 801f8bc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f8c0:	9602      	str	r6, [sp, #8]
 801f8c2:	460e      	mov	r6, r1
 801f8c4:	ea4f 09e9 	mov.w	r9, r9, asr #3
 801f8c8:	f1ce 0110 	rsb	r1, lr, #16
 801f8cc:	ea4a 0303 	orr.w	r3, sl, r3
 801f8d0:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801f8d4:	1a09      	subs	r1, r1, r0
 801f8d6:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 801f8da:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f8de:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f8e2:	4343      	muls	r3, r0
 801f8e4:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 801f8e8:	ea4a 0202 	orr.w	r2, sl, r2
 801f8ec:	9802      	ldr	r0, [sp, #8]
 801f8ee:	fb01 3106 	mla	r1, r1, r6, r3
 801f8f2:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 801f8f6:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801f8fa:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801f8fe:	fb09 1302 	mla	r3, r9, r2, r1
 801f902:	9a03      	ldr	r2, [sp, #12]
 801f904:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f908:	8811      	ldrh	r1, [r2, #0]
 801f90a:	9a01      	ldr	r2, [sp, #4]
 801f90c:	ea4a 0b0b 	orr.w	fp, sl, fp
 801f910:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801f914:	fb0e 3e0b 	mla	lr, lr, fp, r3
 801f918:	1a12      	subs	r2, r2, r0
 801f91a:	9801      	ldr	r0, [sp, #4]
 801f91c:	ea4f 535e 	mov.w	r3, lr, lsr #21
 801f920:	eba0 0608 	sub.w	r6, r0, r8
 801f924:	b292      	uxth	r2, r2
 801f926:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801f92a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f92e:	b2b6      	uxth	r6, r6
 801f930:	10c8      	asrs	r0, r1, #3
 801f932:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f936:	4374      	muls	r4, r6
 801f938:	ea43 0e0e 	orr.w	lr, r3, lr
 801f93c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801f940:	fb0c 4402 	mla	r4, ip, r2, r4
 801f944:	9a02      	ldr	r2, [sp, #8]
 801f946:	fa1f f38e 	uxth.w	r3, lr
 801f94a:	fb02 4505 	mla	r5, r2, r5, r4
 801f94e:	120a      	asrs	r2, r1, #8
 801f950:	00c9      	lsls	r1, r1, #3
 801f952:	fb08 5707 	mla	r7, r8, r7, r5
 801f956:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801f95a:	b2c9      	uxtb	r1, r1
 801f95c:	ea6f 2727 	mvn.w	r7, r7, asr #8
 801f960:	b2ff      	uxtb	r7, r7
 801f962:	437a      	muls	r2, r7
 801f964:	4378      	muls	r0, r7
 801f966:	434f      	muls	r7, r1
 801f968:	1c51      	adds	r1, r2, #1
 801f96a:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801f96e:	121a      	asrs	r2, r3, #8
 801f970:	f022 0207 	bic.w	r2, r2, #7
 801f974:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801f978:	1c41      	adds	r1, r0, #1
 801f97a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801f97e:	10d9      	asrs	r1, r3, #3
 801f980:	0212      	lsls	r2, r2, #8
 801f982:	f021 0103 	bic.w	r1, r1, #3
 801f986:	00db      	lsls	r3, r3, #3
 801f988:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801f98c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801f990:	00c9      	lsls	r1, r1, #3
 801f992:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f996:	430a      	orrs	r2, r1
 801f998:	1c79      	adds	r1, r7, #1
 801f99a:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801f99e:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801f9a2:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801f9a6:	4313      	orrs	r3, r2
 801f9a8:	9a03      	ldr	r2, [sp, #12]
 801f9aa:	8013      	strh	r3, [r2, #0]
 801f9ac:	b005      	add	sp, #20
 801f9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9b2:	280f      	cmp	r0, #15
 801f9b4:	f63f af43 	bhi.w	801f83e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 801f9b8:	4677      	mov	r7, lr
 801f9ba:	4675      	mov	r5, lr
 801f9bc:	4672      	mov	r2, lr
 801f9be:	46f3      	mov	fp, lr
 801f9c0:	e763      	b.n	801f88a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 801f9c2:	bf00      	nop
 801f9c4:	0802a0bb 	.word	0x0802a0bb
 801f9c8:	0802a5ea 	.word	0x0802a5ea
 801f9cc:	0802a088 	.word	0x0802a088

0801f9d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9d4:	ed2d 8b08 	vpush	{d8-d11}
 801f9d8:	b093      	sub	sp, #76	; 0x4c
 801f9da:	eeb0 aa40 	vmov.f32	s20, s0
 801f9de:	eef0 9a60 	vmov.f32	s19, s1
 801f9e2:	9210      	str	r2, [sp, #64]	; 0x40
 801f9e4:	eeb0 9a41 	vmov.f32	s18, s2
 801f9e8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f9ea:	eeb0 8a62 	vmov.f32	s16, s5
 801f9ee:	9011      	str	r0, [sp, #68]	; 0x44
 801f9f0:	eef0 8a43 	vmov.f32	s17, s6
 801f9f4:	6850      	ldr	r0, [r2, #4]
 801f9f6:	eef0 ba44 	vmov.f32	s23, s8
 801f9fa:	910e      	str	r1, [sp, #56]	; 0x38
 801f9fc:	eeb0 ba64 	vmov.f32	s22, s9
 801fa00:	9306      	str	r3, [sp, #24]
 801fa02:	eef0 aa45 	vmov.f32	s21, s10
 801fa06:	6812      	ldr	r2, [r2, #0]
 801fa08:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801fa0c:	fb00 1303 	mla	r3, r0, r3, r1
 801fa10:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801fa14:	9307      	str	r3, [sp, #28]
 801fa16:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fa18:	681b      	ldr	r3, [r3, #0]
 801fa1a:	9308      	str	r3, [sp, #32]
 801fa1c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fa1e:	685b      	ldr	r3, [r3, #4]
 801fa20:	9309      	str	r3, [sp, #36]	; 0x24
 801fa22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fa24:	2b00      	cmp	r3, #0
 801fa26:	dc03      	bgt.n	801fa30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fa28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fa2a:	2b00      	cmp	r3, #0
 801fa2c:	f340 83b6 	ble.w	802019c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 801fa30:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fa32:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fa36:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fa3a:	1e48      	subs	r0, r1, #1
 801fa3c:	1e55      	subs	r5, r2, #1
 801fa3e:	9b06      	ldr	r3, [sp, #24]
 801fa40:	2b00      	cmp	r3, #0
 801fa42:	f340 8165 	ble.w	801fd10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 801fa46:	9e25      	ldr	r6, [sp, #148]	; 0x94
 801fa48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fa4a:	1436      	asrs	r6, r6, #16
 801fa4c:	ea4f 4323 	mov.w	r3, r3, asr #16
 801fa50:	d406      	bmi.n	801fa60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fa52:	4286      	cmp	r6, r0
 801fa54:	da04      	bge.n	801fa60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fa56:	2b00      	cmp	r3, #0
 801fa58:	db02      	blt.n	801fa60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fa5a:	42ab      	cmp	r3, r5
 801fa5c:	f2c0 8159 	blt.w	801fd12 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801fa60:	3601      	adds	r6, #1
 801fa62:	f100 8146 	bmi.w	801fcf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801fa66:	42b1      	cmp	r1, r6
 801fa68:	f2c0 8143 	blt.w	801fcf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801fa6c:	3301      	adds	r3, #1
 801fa6e:	f100 8140 	bmi.w	801fcf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801fa72:	429a      	cmp	r2, r3
 801fa74:	f2c0 813d 	blt.w	801fcf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801fa78:	9b06      	ldr	r3, [sp, #24]
 801fa7a:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801fa7e:	9f07      	ldr	r7, [sp, #28]
 801fa80:	930f      	str	r3, [sp, #60]	; 0x3c
 801fa82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fa84:	2b00      	cmp	r3, #0
 801fa86:	f340 8166 	ble.w	801fd56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 801fa8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fa8c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801fa8e:	1418      	asrs	r0, r3, #16
 801fa90:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fa92:	142d      	asrs	r5, r5, #16
 801fa94:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801fa98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fa9a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801fa9e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801faa0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801faa4:	f100 81f0 	bmi.w	801fe88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 801faa8:	f102 3eff 	add.w	lr, r2, #4294967295
 801faac:	4575      	cmp	r5, lr
 801faae:	f280 81eb 	bge.w	801fe88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 801fab2:	2800      	cmp	r0, #0
 801fab4:	f2c0 81e8 	blt.w	801fe88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 801fab8:	f103 3eff 	add.w	lr, r3, #4294967295
 801fabc:	4570      	cmp	r0, lr
 801fabe:	f280 81e3 	bge.w	801fe88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 801fac2:	b212      	sxth	r2, r2
 801fac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fac6:	fa1f fe81 	uxth.w	lr, r1
 801faca:	fb00 5002 	mla	r0, r0, r2, r5
 801face:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801fad2:	eb03 0a00 	add.w	sl, r3, r0
 801fad6:	f813 9000 	ldrb.w	r9, [r3, r0]
 801fada:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801fade:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801fae2:	b29b      	uxth	r3, r3
 801fae4:	f1bc 0f00 	cmp.w	ip, #0
 801fae8:	f000 817b 	beq.w	801fde2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801faec:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801faf0:	eb0a 0b02 	add.w	fp, sl, r2
 801faf4:	fa1f fa8c 	uxth.w	sl, ip
 801faf8:	940a      	str	r4, [sp, #40]	; 0x28
 801fafa:	fb0a fe0e 	mul.w	lr, sl, lr
 801fafe:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801fb02:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801fb06:	eba5 050e 	sub.w	r5, r5, lr
 801fb0a:	940b      	str	r4, [sp, #44]	; 0x2c
 801fb0c:	fa1f fa8a 	uxth.w	sl, sl
 801fb10:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fb12:	b2ad      	uxth	r5, r5
 801fb14:	eba3 030a 	sub.w	r3, r3, sl
 801fb18:	fb08 f505 	mul.w	r5, r8, r5
 801fb1c:	b29b      	uxth	r3, r3
 801fb1e:	fb09 5303 	mla	r3, r9, r3, r5
 801fb22:	fb0a 3304 	mla	r3, sl, r4, r3
 801fb26:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fb28:	fb0e 3304 	mla	r3, lr, r4, r3
 801fb2c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fb30:	2b00      	cmp	r3, #0
 801fb32:	f000 80d1 	beq.w	801fcd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 801fb36:	9c08      	ldr	r4, [sp, #32]
 801fb38:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801fb3c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801fb40:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801fb44:	f000 8152 	beq.w	801fdec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 801fb48:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801fb4c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801fb50:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fb54:	fb0a fe0e 	mul.w	lr, sl, lr
 801fb58:	fb09 f000 	mul.w	r0, r9, r0
 801fb5c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801fb60:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801fb64:	f100 0b20 	add.w	fp, r0, #32
 801fb68:	44ce      	add	lr, r9
 801fb6a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801fb6e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801fb72:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fb76:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801fb7a:	ea4e 0909 	orr.w	r9, lr, r9
 801fb7e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801fb82:	8868      	ldrh	r0, [r5, #2]
 801fb84:	d019      	beq.n	801fbba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801fb86:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801fb8a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801fb8e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fb92:	fb0a fe0e 	mul.w	lr, sl, lr
 801fb96:	fb08 f800 	mul.w	r8, r8, r0
 801fb9a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801fb9e:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801fba2:	f108 0b20 	add.w	fp, r8, #32
 801fba6:	4486      	add	lr, r0
 801fba8:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801fbac:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801fbb0:	0a00      	lsrs	r0, r0, #8
 801fbb2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fbb6:	ea4e 0000 	orr.w	r0, lr, r0
 801fbba:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801fbbe:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801fbc2:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801fbc6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801fbca:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801fbce:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801fbd2:	ea4e 0909 	orr.w	r9, lr, r9
 801fbd6:	ea4a 0000 	orr.w	r0, sl, r0
 801fbda:	f1bc 0f00 	cmp.w	ip, #0
 801fbde:	f000 8107 	beq.w	801fdf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 801fbe2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801fbe6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fbe8:	3a01      	subs	r2, #1
 801fbea:	2cff      	cmp	r4, #255	; 0xff
 801fbec:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801fbf0:	f102 0202 	add.w	r2, r2, #2
 801fbf4:	eb05 0e02 	add.w	lr, r5, r2
 801fbf8:	5aaa      	ldrh	r2, [r5, r2]
 801fbfa:	d018      	beq.n	801fc2e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801fbfc:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 801fc00:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fc04:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801fc08:	fb04 fa02 	mul.w	sl, r4, r2
 801fc0c:	fb08 f805 	mul.w	r8, r8, r5
 801fc10:	f10a 0520 	add.w	r5, sl, #32
 801fc14:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801fc18:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801fc1c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801fc20:	4442      	add	r2, r8
 801fc22:	0a2d      	lsrs	r5, r5, #8
 801fc24:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801fc28:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fc2c:	432a      	orrs	r2, r5
 801fc2e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fc30:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801fc34:	2cff      	cmp	r4, #255	; 0xff
 801fc36:	d01a      	beq.n	801fc6e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801fc38:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 801fc3c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fc40:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801fc44:	fb04 fa05 	mul.w	sl, r4, r5
 801fc48:	fb08 f80e 	mul.w	r8, r8, lr
 801fc4c:	f10a 0e20 	add.w	lr, sl, #32
 801fc50:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801fc54:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801fc58:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801fc5c:	4445      	add	r5, r8
 801fc5e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fc62:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801fc66:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801fc6a:	ea45 050e 	orr.w	r5, r5, lr
 801fc6e:	fb1c fe01 	smulbb	lr, ip, r1
 801fc72:	f1cc 0810 	rsb	r8, ip, #16
 801fc76:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801fc7a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801fc7e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801fc82:	eba8 0801 	sub.w	r8, r8, r1
 801fc86:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801fc8a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801fc8e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801fc92:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801fc96:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801fc9a:	ea4a 0202 	orr.w	r2, sl, r2
 801fc9e:	4341      	muls	r1, r0
 801fca0:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801fca4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801fca8:	fb09 1108 	mla	r1, r9, r8, r1
 801fcac:	ea4b 0505 	orr.w	r5, fp, r5
 801fcb0:	fb0c 1102 	mla	r1, ip, r2, r1
 801fcb4:	fb0e 1e05 	mla	lr, lr, r5, r1
 801fcb8:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801fcbc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801fcc0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fcc4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801fcc8:	ea42 0e0e 	orr.w	lr, r2, lr
 801fccc:	fa1f f28e 	uxth.w	r2, lr
 801fcd0:	2bff      	cmp	r3, #255	; 0xff
 801fcd2:	f040 80a1 	bne.w	801fe18 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801fcd6:	803a      	strh	r2, [r7, #0]
 801fcd8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fcda:	3702      	adds	r7, #2
 801fcdc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801fcde:	4413      	add	r3, r2
 801fce0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fce2:	9325      	str	r3, [sp, #148]	; 0x94
 801fce4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fce6:	441a      	add	r2, r3
 801fce8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fcea:	3b01      	subs	r3, #1
 801fcec:	9226      	str	r2, [sp, #152]	; 0x98
 801fcee:	930f      	str	r3, [sp, #60]	; 0x3c
 801fcf0:	e6c7      	b.n	801fa82 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801fcf2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fcf4:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 801fcf6:	9c26      	ldr	r4, [sp, #152]	; 0x98
 801fcf8:	4433      	add	r3, r6
 801fcfa:	9325      	str	r3, [sp, #148]	; 0x94
 801fcfc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fcfe:	441c      	add	r4, r3
 801fd00:	9b06      	ldr	r3, [sp, #24]
 801fd02:	3b01      	subs	r3, #1
 801fd04:	9426      	str	r4, [sp, #152]	; 0x98
 801fd06:	9306      	str	r3, [sp, #24]
 801fd08:	9b07      	ldr	r3, [sp, #28]
 801fd0a:	3302      	adds	r3, #2
 801fd0c:	9307      	str	r3, [sp, #28]
 801fd0e:	e696      	b.n	801fa3e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fd10:	d028      	beq.n	801fd64 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801fd12:	9b06      	ldr	r3, [sp, #24]
 801fd14:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801fd16:	3b01      	subs	r3, #1
 801fd18:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801fd1a:	fb00 5003 	mla	r0, r0, r3, r5
 801fd1e:	1400      	asrs	r0, r0, #16
 801fd20:	f53f aeaa 	bmi.w	801fa78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801fd24:	3901      	subs	r1, #1
 801fd26:	4288      	cmp	r0, r1
 801fd28:	f6bf aea6 	bge.w	801fa78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801fd2c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801fd2e:	9826      	ldr	r0, [sp, #152]	; 0x98
 801fd30:	fb01 0303 	mla	r3, r1, r3, r0
 801fd34:	141b      	asrs	r3, r3, #16
 801fd36:	f53f ae9f 	bmi.w	801fa78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801fd3a:	3a01      	subs	r2, #1
 801fd3c:	4293      	cmp	r3, r2
 801fd3e:	f6bf ae9b 	bge.w	801fa78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801fd42:	9b06      	ldr	r3, [sp, #24]
 801fd44:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801fd48:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801fd4c:	930f      	str	r3, [sp, #60]	; 0x3c
 801fd4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fd50:	2b00      	cmp	r3, #0
 801fd52:	f300 80b6 	bgt.w	801fec2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 801fd56:	9b06      	ldr	r3, [sp, #24]
 801fd58:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fd5c:	9b07      	ldr	r3, [sp, #28]
 801fd5e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801fd62:	9307      	str	r3, [sp, #28]
 801fd64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fd66:	2b00      	cmp	r3, #0
 801fd68:	f340 8218 	ble.w	802019c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 801fd6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fd70:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fd72:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801fd76:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801fd7a:	eef0 6a48 	vmov.f32	s13, s16
 801fd7e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801fd82:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801fd86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fd8a:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 801fd8e:	eef0 6a68 	vmov.f32	s13, s17
 801fd92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fd96:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 801fd9a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801fd9e:	ee69 7a27 	vmul.f32	s15, s18, s15
 801fda2:	ee37 8a48 	vsub.f32	s16, s14, s16
 801fda6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fdaa:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fdae:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801fdb2:	ee18 2a10 	vmov	r2, s16
 801fdb6:	eeb0 8a47 	vmov.f32	s16, s14
 801fdba:	fb92 f3f3 	sdiv	r3, r2, r3
 801fdbe:	ee18 2a90 	vmov	r2, s17
 801fdc2:	9327      	str	r3, [sp, #156]	; 0x9c
 801fdc4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fdc6:	eef0 8a67 	vmov.f32	s17, s15
 801fdca:	fb92 f3f3 	sdiv	r3, r2, r3
 801fdce:	9328      	str	r3, [sp, #160]	; 0xa0
 801fdd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fdd2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fdd4:	3b01      	subs	r3, #1
 801fdd6:	930e      	str	r3, [sp, #56]	; 0x38
 801fdd8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fdda:	bf08      	it	eq
 801fddc:	4613      	moveq	r3, r2
 801fdde:	9306      	str	r3, [sp, #24]
 801fde0:	e61f      	b.n	801fa22 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801fde2:	fb08 f505 	mul.w	r5, r8, r5
 801fde6:	fb09 5303 	mla	r3, r9, r3, r5
 801fdea:	e69f      	b.n	801fb2c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801fdec:	4681      	mov	r9, r0
 801fdee:	e6c6      	b.n	801fb7e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801fdf0:	f1c1 0210 	rsb	r2, r1, #16
 801fdf4:	4341      	muls	r1, r0
 801fdf6:	fb09 1902 	mla	r9, r9, r2, r1
 801fdfa:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801fdfe:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801fe02:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801fe06:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fe0a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801fe0e:	ea42 0909 	orr.w	r9, r2, r9
 801fe12:	fa1f f289 	uxth.w	r2, r9
 801fe16:	e75b      	b.n	801fcd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801fe18:	f8b7 c000 	ldrh.w	ip, [r7]
 801fe1c:	43db      	mvns	r3, r3
 801fe1e:	ea4f 202c 	mov.w	r0, ip, asr #8
 801fe22:	fa5f fe83 	uxtb.w	lr, r3
 801fe26:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801fe2a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801fe2e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 801fe32:	fb00 f00e 	mul.w	r0, r0, lr
 801fe36:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801fe3a:	b2db      	uxtb	r3, r3
 801fe3c:	1c41      	adds	r1, r0, #1
 801fe3e:	fb05 f50e 	mul.w	r5, r5, lr
 801fe42:	fb03 f30e 	mul.w	r3, r3, lr
 801fe46:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801fe4a:	1211      	asrs	r1, r2, #8
 801fe4c:	f021 0107 	bic.w	r1, r1, #7
 801fe50:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801fe54:	48d4      	ldr	r0, [pc, #848]	; (80201a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 801fe56:	b2c9      	uxtb	r1, r1
 801fe58:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 801fe5c:	1c69      	adds	r1, r5, #1
 801fe5e:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801fe62:	10d1      	asrs	r1, r2, #3
 801fe64:	00d2      	lsls	r2, r2, #3
 801fe66:	f021 0103 	bic.w	r1, r1, #3
 801fe6a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801fe6e:	00c9      	lsls	r1, r1, #3
 801fe70:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801fe74:	4301      	orrs	r1, r0
 801fe76:	1c58      	adds	r0, r3, #1
 801fe78:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801fe7c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801fe80:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801fe84:	430a      	orrs	r2, r1
 801fe86:	e726      	b.n	801fcd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 801fe88:	f115 0e01 	adds.w	lr, r5, #1
 801fe8c:	f53f af24 	bmi.w	801fcd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 801fe90:	4572      	cmp	r2, lr
 801fe92:	f6ff af21 	blt.w	801fcd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 801fe96:	f110 0e01 	adds.w	lr, r0, #1
 801fe9a:	f53f af1d 	bmi.w	801fcd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 801fe9e:	4573      	cmp	r3, lr
 801fea0:	f6ff af1a 	blt.w	801fcd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 801fea4:	b21b      	sxth	r3, r3
 801fea6:	b212      	sxth	r2, r2
 801fea8:	9301      	str	r3, [sp, #4]
 801feaa:	9200      	str	r2, [sp, #0]
 801feac:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 801feb0:	e9cd 5002 	strd	r5, r0, [sp, #8]
 801feb4:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 801feb8:	4639      	mov	r1, r7
 801feba:	9811      	ldr	r0, [sp, #68]	; 0x44
 801febc:	f7ff fbf2 	bl	801f6a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801fec0:	e70a      	b.n	801fcd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 801fec2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fec4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801fec8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801feca:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801fece:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fed0:	fa1f fc82 	uxth.w	ip, r2
 801fed4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fed8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801feda:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801fede:	141f      	asrs	r7, r3, #16
 801fee0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fee2:	141b      	asrs	r3, r3, #16
 801fee4:	fb01 3707 	mla	r7, r1, r7, r3
 801fee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801feea:	eb03 0a07 	add.w	sl, r3, r7
 801feee:	f813 9007 	ldrb.w	r9, [r3, r7]
 801fef2:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801fef6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801fefa:	b29b      	uxth	r3, r3
 801fefc:	2d00      	cmp	r5, #0
 801fefe:	f000 80fe 	beq.w	80200fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 801ff02:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801ff06:	eb0a 0b01 	add.w	fp, sl, r1
 801ff0a:	fa1f fa85 	uxth.w	sl, r5
 801ff0e:	940c      	str	r4, [sp, #48]	; 0x30
 801ff10:	fb0a fc0c 	mul.w	ip, sl, ip
 801ff14:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801ff18:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801ff1c:	eba0 000c 	sub.w	r0, r0, ip
 801ff20:	940d      	str	r4, [sp, #52]	; 0x34
 801ff22:	fa1f fa8a 	uxth.w	sl, sl
 801ff26:	b280      	uxth	r0, r0
 801ff28:	eba3 030a 	sub.w	r3, r3, sl
 801ff2c:	fb08 f000 	mul.w	r0, r8, r0
 801ff30:	b29b      	uxth	r3, r3
 801ff32:	fb09 0303 	mla	r3, r9, r3, r0
 801ff36:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ff38:	fb0a 3300 	mla	r3, sl, r0, r3
 801ff3c:	fb0c 3304 	mla	r3, ip, r4, r3
 801ff40:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ff44:	2b00      	cmp	r3, #0
 801ff46:	f000 80cc 	beq.w	80200e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801ff4a:	9808      	ldr	r0, [sp, #32]
 801ff4c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ff50:	9c08      	ldr	r4, [sp, #32]
 801ff52:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801ff56:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801ff5a:	f000 80d5 	beq.w	8020108 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 801ff5e:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801ff62:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801ff66:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801ff6a:	fb0a fc0c 	mul.w	ip, sl, ip
 801ff6e:	fb09 f707 	mul.w	r7, r9, r7
 801ff72:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801ff76:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801ff7a:	f107 0b20 	add.w	fp, r7, #32
 801ff7e:	44cc      	add	ip, r9
 801ff80:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801ff84:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801ff88:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ff8c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ff90:	ea4c 0909 	orr.w	r9, ip, r9
 801ff94:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801ff98:	8847      	ldrh	r7, [r0, #2]
 801ff9a:	d019      	beq.n	801ffd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 801ff9c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801ffa0:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801ffa4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801ffa8:	fb0a fc0c 	mul.w	ip, sl, ip
 801ffac:	fb08 f807 	mul.w	r8, r8, r7
 801ffb0:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801ffb4:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801ffb8:	f108 0b20 	add.w	fp, r8, #32
 801ffbc:	44bc      	add	ip, r7
 801ffbe:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801ffc2:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801ffc6:	0a3f      	lsrs	r7, r7, #8
 801ffc8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801ffcc:	ea4c 0707 	orr.w	r7, ip, r7
 801ffd0:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801ffd4:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801ffd8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801ffdc:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801ffe0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801ffe4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ffe8:	ea4c 0909 	orr.w	r9, ip, r9
 801ffec:	ea4a 0707 	orr.w	r7, sl, r7
 801fff0:	2d00      	cmp	r5, #0
 801fff2:	f000 808b 	beq.w	802010c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801fff6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801fffa:	3901      	subs	r1, #1
 801fffc:	0049      	lsls	r1, r1, #1
 801fffe:	3102      	adds	r1, #2
 8020000:	eb00 0c01 	add.w	ip, r0, r1
 8020004:	5a41      	ldrh	r1, [r0, r1]
 8020006:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020008:	28ff      	cmp	r0, #255	; 0xff
 802000a:	d019      	beq.n	8020040 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 802000c:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8020010:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020012:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020016:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802001a:	fb04 fa01 	mul.w	sl, r4, r1
 802001e:	fb08 f800 	mul.w	r8, r8, r0
 8020022:	f10a 0020 	add.w	r0, sl, #32
 8020026:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802002a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802002e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8020032:	4441      	add	r1, r8
 8020034:	0a00      	lsrs	r0, r0, #8
 8020036:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802003a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802003e:	4301      	orrs	r1, r0
 8020040:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020042:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8020046:	2cff      	cmp	r4, #255	; 0xff
 8020048:	d01a      	beq.n	8020080 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 802004a:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 802004e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020052:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8020056:	fb04 fa00 	mul.w	sl, r4, r0
 802005a:	fb08 f80c 	mul.w	r8, r8, ip
 802005e:	f10a 0c20 	add.w	ip, sl, #32
 8020062:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8020066:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802006a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802006e:	4440      	add	r0, r8
 8020070:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020074:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8020078:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802007c:	ea40 000c 	orr.w	r0, r0, ip
 8020080:	fb15 fc02 	smulbb	ip, r5, r2
 8020084:	f1c5 0810 	rsb	r8, r5, #16
 8020088:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802008c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020090:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8020094:	eba8 0802 	sub.w	r8, r8, r2
 8020098:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802009c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80200a0:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80200a4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80200a8:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80200ac:	ea4a 0101 	orr.w	r1, sl, r1
 80200b0:	437a      	muls	r2, r7
 80200b2:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80200b6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80200ba:	fb09 2208 	mla	r2, r9, r8, r2
 80200be:	ea4b 0000 	orr.w	r0, fp, r0
 80200c2:	fb05 2201 	mla	r2, r5, r1, r2
 80200c6:	fb0c 2200 	mla	r2, ip, r0, r2
 80200ca:	0d57      	lsrs	r7, r2, #21
 80200cc:	0952      	lsrs	r2, r2, #5
 80200ce:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80200d2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80200d6:	433a      	orrs	r2, r7
 80200d8:	2bff      	cmp	r3, #255	; 0xff
 80200da:	b292      	uxth	r2, r2
 80200dc:	d127      	bne.n	802012e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 80200de:	f8ae 2000 	strh.w	r2, [lr]
 80200e2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80200e4:	f10e 0e02 	add.w	lr, lr, #2
 80200e8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80200ea:	4413      	add	r3, r2
 80200ec:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80200ee:	9325      	str	r3, [sp, #148]	; 0x94
 80200f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80200f2:	441a      	add	r2, r3
 80200f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80200f6:	3b01      	subs	r3, #1
 80200f8:	9226      	str	r2, [sp, #152]	; 0x98
 80200fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80200fc:	e627      	b.n	801fd4e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80200fe:	fb08 f000 	mul.w	r0, r8, r0
 8020102:	fb09 0303 	mla	r3, r9, r3, r0
 8020106:	e71b      	b.n	801ff40 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8020108:	46b9      	mov	r9, r7
 802010a:	e743      	b.n	801ff94 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 802010c:	f1c2 0110 	rsb	r1, r2, #16
 8020110:	437a      	muls	r2, r7
 8020112:	fb09 2901 	mla	r9, r9, r1, r2
 8020116:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802011a:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802011e:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8020122:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020126:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802012a:	4302      	orrs	r2, r0
 802012c:	e7d4      	b.n	80200d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 802012e:	f8be 7000 	ldrh.w	r7, [lr]
 8020132:	43db      	mvns	r3, r3
 8020134:	4c1c      	ldr	r4, [pc, #112]	; (80201a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 8020136:	1238      	asrs	r0, r7, #8
 8020138:	fa5f fc83 	uxtb.w	ip, r3
 802013c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020140:	10fd      	asrs	r5, r7, #3
 8020142:	00fb      	lsls	r3, r7, #3
 8020144:	fb00 f00c 	mul.w	r0, r0, ip
 8020148:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802014c:	b2db      	uxtb	r3, r3
 802014e:	fb05 f10c 	mul.w	r1, r5, ip
 8020152:	1c45      	adds	r5, r0, #1
 8020154:	fb03 f30c 	mul.w	r3, r3, ip
 8020158:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802015c:	1215      	asrs	r5, r2, #8
 802015e:	f025 0507 	bic.w	r5, r5, #7
 8020162:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8020166:	1c4d      	adds	r5, r1, #1
 8020168:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802016c:	10d1      	asrs	r1, r2, #3
 802016e:	b2c0      	uxtb	r0, r0
 8020170:	f021 0103 	bic.w	r1, r1, #3
 8020174:	00d2      	lsls	r2, r2, #3
 8020176:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 802017a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802017e:	00c9      	lsls	r1, r1, #3
 8020180:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020184:	4308      	orrs	r0, r1
 8020186:	1c59      	adds	r1, r3, #1
 8020188:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802018c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020190:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8020194:	4318      	orrs	r0, r3
 8020196:	f8ae 0000 	strh.w	r0, [lr]
 802019a:	e7a2      	b.n	80200e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 802019c:	b013      	add	sp, #76	; 0x4c
 802019e:	ecbd 8b08 	vpop	{d8-d11}
 80201a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201a6:	bf00      	nop
 80201a8:	fffff800 	.word	0xfffff800

080201ac <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 80201ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80201b0:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 80201b4:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 80201b8:	fb0c 4e03 	mla	lr, ip, r3, r4
 80201bc:	f1bc 0f00 	cmp.w	ip, #0
 80201c0:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 80201c4:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 80201c8:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 80201cc:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80201d0:	8808      	ldrh	r0, [r1, #0]
 80201d2:	db2f      	blt.n	8020234 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 80201d4:	45e2      	cmp	sl, ip
 80201d6:	dd2d      	ble.n	8020234 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 80201d8:	2c00      	cmp	r4, #0
 80201da:	db29      	blt.n	8020230 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 80201dc:	42a3      	cmp	r3, r4
 80201de:	dd27      	ble.n	8020230 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 80201e0:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 80201e4:	1c62      	adds	r2, r4, #1
 80201e6:	d428      	bmi.n	802023a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 80201e8:	4293      	cmp	r3, r2
 80201ea:	dd26      	ble.n	802023a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 80201ec:	b32f      	cbz	r7, 802023a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 80201ee:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 80201f2:	f11c 0c01 	adds.w	ip, ip, #1
 80201f6:	d424      	bmi.n	8020242 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 80201f8:	45e2      	cmp	sl, ip
 80201fa:	dd22      	ble.n	8020242 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 80201fc:	2e00      	cmp	r6, #0
 80201fe:	f000 809d 	beq.w	802033c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x190>
 8020202:	2c00      	cmp	r4, #0
 8020204:	db1b      	blt.n	802023e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8020206:	42a3      	cmp	r3, r4
 8020208:	dd19      	ble.n	802023e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 802020a:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 802020e:	3401      	adds	r4, #1
 8020210:	d41a      	bmi.n	8020248 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8020212:	42a3      	cmp	r3, r4
 8020214:	dd18      	ble.n	8020248 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8020216:	b1cf      	cbz	r7, 802024c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 8020218:	3301      	adds	r3, #1
 802021a:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 802021e:	2f0f      	cmp	r7, #15
 8020220:	d915      	bls.n	802024e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 8020222:	4b49      	ldr	r3, [pc, #292]	; (8020348 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 8020224:	f240 11db 	movw	r1, #475	; 0x1db
 8020228:	4a48      	ldr	r2, [pc, #288]	; (802034c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 802022a:	4849      	ldr	r0, [pc, #292]	; (8020350 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 802022c:	f004 fbe4 	bl	80249f8 <__assert_func>
 8020230:	4681      	mov	r9, r0
 8020232:	e7d7      	b.n	80201e4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 8020234:	4686      	mov	lr, r0
 8020236:	4681      	mov	r9, r0
 8020238:	e7db      	b.n	80201f2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 802023a:	4686      	mov	lr, r0
 802023c:	e7d9      	b.n	80201f2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 802023e:	4684      	mov	ip, r0
 8020240:	e7e5      	b.n	802020e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 8020242:	4603      	mov	r3, r0
 8020244:	4684      	mov	ip, r0
 8020246:	e7ea      	b.n	802021e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8020248:	4603      	mov	r3, r0
 802024a:	e7e8      	b.n	802021e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 802024c:	4603      	mov	r3, r0
 802024e:	2e0f      	cmp	r6, #15
 8020250:	d8e7      	bhi.n	8020222 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8020252:	fb17 f806 	smulbb	r8, r7, r6
 8020256:	ea4f 4409 	mov.w	r4, r9, lsl #16
 802025a:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 802025e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8020262:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8020266:	ea4f 08e8 	mov.w	r8, r8, asr #3
 802026a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802026e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8020272:	ea44 0909 	orr.w	r9, r4, r9
 8020276:	f1c6 0410 	rsb	r4, r6, #16
 802027a:	041a      	lsls	r2, r3, #16
 802027c:	ea4a 0e0e 	orr.w	lr, sl, lr
 8020280:	1be4      	subs	r4, r4, r7
 8020282:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 8020286:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802028a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802028e:	fb07 fe0e 	mul.w	lr, r7, lr
 8020292:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8020296:	4313      	orrs	r3, r2
 8020298:	ea4f 420c 	mov.w	r2, ip, lsl #16
 802029c:	fb04 e409 	mla	r4, r4, r9, lr
 80202a0:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 80202a4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80202a8:	b2af      	uxth	r7, r5
 80202aa:	fb08 4303 	mla	r3, r8, r3, r4
 80202ae:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 80202b2:	43ed      	mvns	r5, r5
 80202b4:	4322      	orrs	r2, r4
 80202b6:	b2ed      	uxtb	r5, r5
 80202b8:	fb06 3202 	mla	r2, r6, r2, r3
 80202bc:	10c6      	asrs	r6, r0, #3
 80202be:	0d53      	lsrs	r3, r2, #21
 80202c0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80202c4:	0952      	lsrs	r2, r2, #5
 80202c6:	fb16 f605 	smulbb	r6, r6, r5
 80202ca:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80202ce:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80202d2:	431a      	orrs	r2, r3
 80202d4:	b293      	uxth	r3, r2
 80202d6:	1202      	asrs	r2, r0, #8
 80202d8:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80202dc:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80202e0:	00dc      	lsls	r4, r3, #3
 80202e2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80202e6:	fb12 f205 	smulbb	r2, r2, r5
 80202ea:	b2e4      	uxtb	r4, r4
 80202ec:	fb0c 2c07 	mla	ip, ip, r7, r2
 80202f0:	10da      	asrs	r2, r3, #3
 80202f2:	00c3      	lsls	r3, r0, #3
 80202f4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80202f8:	fa1f fc8c 	uxth.w	ip, ip
 80202fc:	b2db      	uxtb	r3, r3
 80202fe:	fb02 6207 	mla	r2, r2, r7, r6
 8020302:	fb13 f305 	smulbb	r3, r3, r5
 8020306:	b296      	uxth	r6, r2
 8020308:	fb04 3307 	mla	r3, r4, r7, r3
 802030c:	b29a      	uxth	r2, r3
 802030e:	f10c 0301 	add.w	r3, ip, #1
 8020312:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8020316:	1c53      	adds	r3, r2, #1
 8020318:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802031c:	1c72      	adds	r2, r6, #1
 802031e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020322:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8020326:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802032a:	0952      	lsrs	r2, r2, #5
 802032c:	ea43 030c 	orr.w	r3, r3, ip
 8020330:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020334:	4313      	orrs	r3, r2
 8020336:	800b      	strh	r3, [r1, #0]
 8020338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802033c:	2f0f      	cmp	r7, #15
 802033e:	f63f af70 	bhi.w	8020222 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8020342:	4603      	mov	r3, r0
 8020344:	4684      	mov	ip, r0
 8020346:	e784      	b.n	8020252 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 8020348:	0802a0bb 	.word	0x0802a0bb
 802034c:	0802a693 	.word	0x0802a693
 8020350:	0802a088 	.word	0x0802a088

08020354 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020358:	ed2d 8b08 	vpush	{d8-d11}
 802035c:	b093      	sub	sp, #76	; 0x4c
 802035e:	461d      	mov	r5, r3
 8020360:	eeb0 aa40 	vmov.f32	s20, s0
 8020364:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020366:	eef0 9a60 	vmov.f32	s19, s1
 802036a:	9210      	str	r2, [sp, #64]	; 0x40
 802036c:	eeb0 9a41 	vmov.f32	s18, s2
 8020370:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 8020374:	eeb0 8a62 	vmov.f32	s16, s5
 8020378:	910a      	str	r1, [sp, #40]	; 0x28
 802037a:	eef0 8a43 	vmov.f32	s17, s6
 802037e:	920b      	str	r2, [sp, #44]	; 0x2c
 8020380:	eef0 ba44 	vmov.f32	s23, s8
 8020384:	6859      	ldr	r1, [r3, #4]
 8020386:	eeb0 ba64 	vmov.f32	s22, s9
 802038a:	681b      	ldr	r3, [r3, #0]
 802038c:	eef0 aa45 	vmov.f32	s21, s10
 8020390:	9011      	str	r0, [sp, #68]	; 0x44
 8020392:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 8020396:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 802039a:	fb01 2707 	mla	r7, r1, r7, r2
 802039e:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80203a2:	9307      	str	r3, [sp, #28]
 80203a4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80203a6:	681b      	ldr	r3, [r3, #0]
 80203a8:	9309      	str	r3, [sp, #36]	; 0x24
 80203aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80203ac:	43db      	mvns	r3, r3
 80203ae:	b2db      	uxtb	r3, r3
 80203b0:	9308      	str	r3, [sp, #32]
 80203b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80203b4:	2b00      	cmp	r3, #0
 80203b6:	dc03      	bgt.n	80203c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80203b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80203ba:	2b00      	cmp	r3, #0
 80203bc:	f340 8205 	ble.w	80207ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80203c0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80203c2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80203c6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80203ca:	1e48      	subs	r0, r1, #1
 80203cc:	f102 3cff 	add.w	ip, r2, #4294967295
 80203d0:	2d00      	cmp	r5, #0
 80203d2:	f340 80da 	ble.w	802058a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80203d6:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80203da:	ea4f 4326 	mov.w	r3, r6, asr #16
 80203de:	d406      	bmi.n	80203ee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80203e0:	4586      	cmp	lr, r0
 80203e2:	da04      	bge.n	80203ee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80203e4:	2b00      	cmp	r3, #0
 80203e6:	db02      	blt.n	80203ee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80203e8:	4563      	cmp	r3, ip
 80203ea:	f2c0 80cf 	blt.w	802058c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80203ee:	f11e 0e01 	adds.w	lr, lr, #1
 80203f2:	f100 80c1 	bmi.w	8020578 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80203f6:	4571      	cmp	r1, lr
 80203f8:	f2c0 80be 	blt.w	8020578 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80203fc:	3301      	adds	r3, #1
 80203fe:	f100 80bb 	bmi.w	8020578 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8020402:	429a      	cmp	r2, r3
 8020404:	f2c0 80b8 	blt.w	8020578 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8020408:	46a9      	mov	r9, r5
 802040a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 802040e:	f1b9 0f00 	cmp.w	r9, #0
 8020412:	f340 80d8 	ble.w	80205c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8020416:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020418:	1421      	asrs	r1, r4, #16
 802041a:	ea4f 4026 	mov.w	r0, r6, asr #16
 802041e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020422:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8020426:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802042a:	f100 8112 	bmi.w	8020652 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802042e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8020432:	4551      	cmp	r1, sl
 8020434:	f280 810d 	bge.w	8020652 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8020438:	2800      	cmp	r0, #0
 802043a:	f2c0 810a 	blt.w	8020652 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802043e:	f103 3aff 	add.w	sl, r3, #4294967295
 8020442:	4550      	cmp	r0, sl
 8020444:	f280 8105 	bge.w	8020652 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8020448:	fa0f f38e 	sxth.w	r3, lr
 802044c:	fb00 1103 	mla	r1, r0, r3, r1
 8020450:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020452:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8020456:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 802045a:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 802045e:	f1bc 0f00 	cmp.w	ip, #0
 8020462:	d007      	beq.n	8020474 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8020464:	005b      	lsls	r3, r3, #1
 8020466:	eb0a 0003 	add.w	r0, sl, r3
 802046a:	f83a 3003 	ldrh.w	r3, [sl, r3]
 802046e:	930c      	str	r3, [sp, #48]	; 0x30
 8020470:	8843      	ldrh	r3, [r0, #2]
 8020472:	930d      	str	r3, [sp, #52]	; 0x34
 8020474:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8020478:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802047c:	fb12 f30c 	smulbb	r3, r2, ip
 8020480:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8020484:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020488:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802048c:	10db      	asrs	r3, r3, #3
 802048e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020492:	ea40 000e 	orr.w	r0, r0, lr
 8020496:	f1cc 0e10 	rsb	lr, ip, #16
 802049a:	ea4a 0101 	orr.w	r1, sl, r1
 802049e:	9f08      	ldr	r7, [sp, #32]
 80204a0:	ebae 0e02 	sub.w	lr, lr, r2
 80204a4:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80204a8:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80204ac:	4351      	muls	r1, r2
 80204ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80204b0:	fb0e 1e00 	mla	lr, lr, r0, r1
 80204b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80204b6:	0410      	lsls	r0, r2, #16
 80204b8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80204bc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80204c0:	4310      	orrs	r0, r2
 80204c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80204c4:	0412      	lsls	r2, r2, #16
 80204c6:	fb03 e000 	mla	r0, r3, r0, lr
 80204ca:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80204ce:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80204d2:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80204d6:	ea42 020e 	orr.w	r2, r2, lr
 80204da:	fb03 0302 	mla	r3, r3, r2, r0
 80204de:	f8b8 0000 	ldrh.w	r0, [r8]
 80204e2:	0d5a      	lsrs	r2, r3, #21
 80204e4:	095b      	lsrs	r3, r3, #5
 80204e6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80204ea:	1201      	asrs	r1, r0, #8
 80204ec:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80204f0:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 80204f4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80204f8:	00c0      	lsls	r0, r0, #3
 80204fa:	4313      	orrs	r3, r2
 80204fc:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8020500:	fb11 f107 	smulbb	r1, r1, r7
 8020504:	b2c0      	uxtb	r0, r0
 8020506:	b29b      	uxth	r3, r3
 8020508:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802050c:	fb10 f007 	smulbb	r0, r0, r7
 8020510:	fb1e fe07 	smulbb	lr, lr, r7
 8020514:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8020518:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802051c:	fb0c 1c02 	mla	ip, ip, r2, r1
 8020520:	10d9      	asrs	r1, r3, #3
 8020522:	00db      	lsls	r3, r3, #3
 8020524:	fa1f fc8c 	uxth.w	ip, ip
 8020528:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802052c:	b2db      	uxtb	r3, r3
 802052e:	fb01 e102 	mla	r1, r1, r2, lr
 8020532:	fb03 0302 	mla	r3, r3, r2, r0
 8020536:	b289      	uxth	r1, r1
 8020538:	b29a      	uxth	r2, r3
 802053a:	f10c 0301 	add.w	r3, ip, #1
 802053e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8020542:	1c53      	adds	r3, r2, #1
 8020544:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020548:	1c4a      	adds	r2, r1, #1
 802054a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802054e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020552:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020556:	0949      	lsrs	r1, r1, #5
 8020558:	ea43 030c 	orr.w	r3, r3, ip
 802055c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020560:	430b      	orrs	r3, r1
 8020562:	f8a8 3000 	strh.w	r3, [r8]
 8020566:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020568:	f108 0802 	add.w	r8, r8, #2
 802056c:	f109 39ff 	add.w	r9, r9, #4294967295
 8020570:	441c      	add	r4, r3
 8020572:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020574:	441e      	add	r6, r3
 8020576:	e74a      	b.n	802040e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8020578:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802057a:	3d01      	subs	r5, #1
 802057c:	441c      	add	r4, r3
 802057e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020580:	441e      	add	r6, r3
 8020582:	9b07      	ldr	r3, [sp, #28]
 8020584:	3302      	adds	r3, #2
 8020586:	9307      	str	r3, [sp, #28]
 8020588:	e722      	b.n	80203d0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802058a:	d022      	beq.n	80205d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802058c:	1e6b      	subs	r3, r5, #1
 802058e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8020590:	fb00 4003 	mla	r0, r0, r3, r4
 8020594:	1400      	asrs	r0, r0, #16
 8020596:	f53f af37 	bmi.w	8020408 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802059a:	3901      	subs	r1, #1
 802059c:	4288      	cmp	r0, r1
 802059e:	f6bf af33 	bge.w	8020408 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80205a2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80205a4:	fb01 6303 	mla	r3, r1, r3, r6
 80205a8:	141b      	asrs	r3, r3, #16
 80205aa:	f53f af2d 	bmi.w	8020408 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80205ae:	3a01      	subs	r2, #1
 80205b0:	4293      	cmp	r3, r2
 80205b2:	f6bf af29 	bge.w	8020408 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80205b6:	46a8      	mov	r8, r5
 80205b8:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80205bc:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 80205c0:	f1b8 0f00 	cmp.w	r8, #0
 80205c4:	dc60      	bgt.n	8020688 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 80205c6:	9b07      	ldr	r3, [sp, #28]
 80205c8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80205cc:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80205d0:	9307      	str	r3, [sp, #28]
 80205d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80205d4:	2b00      	cmp	r3, #0
 80205d6:	f340 80f8 	ble.w	80207ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80205da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80205de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80205e0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80205e4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80205e8:	eef0 6a48 	vmov.f32	s13, s16
 80205ec:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80205f0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80205f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80205f8:	ee16 4a90 	vmov	r4, s13
 80205fc:	eef0 6a68 	vmov.f32	s13, s17
 8020600:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020604:	ee16 6a90 	vmov	r6, s13
 8020608:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802060c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020610:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020614:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020618:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802061c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020620:	ee18 2a10 	vmov	r2, s16
 8020624:	eeb0 8a47 	vmov.f32	s16, s14
 8020628:	fb92 f3f3 	sdiv	r3, r2, r3
 802062c:	ee18 2a90 	vmov	r2, s17
 8020630:	9327      	str	r3, [sp, #156]	; 0x9c
 8020632:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020634:	eef0 8a67 	vmov.f32	s17, s15
 8020638:	fb92 f3f3 	sdiv	r3, r2, r3
 802063c:	9328      	str	r3, [sp, #160]	; 0xa0
 802063e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020640:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020642:	3b01      	subs	r3, #1
 8020644:	930a      	str	r3, [sp, #40]	; 0x28
 8020646:	bf08      	it	eq
 8020648:	4615      	moveq	r5, r2
 802064a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802064c:	bf18      	it	ne
 802064e:	461d      	movne	r5, r3
 8020650:	e6af      	b.n	80203b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8020652:	f111 0a01 	adds.w	sl, r1, #1
 8020656:	d486      	bmi.n	8020566 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8020658:	45d6      	cmp	lr, sl
 802065a:	db84      	blt.n	8020566 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802065c:	f110 0a01 	adds.w	sl, r0, #1
 8020660:	d481      	bmi.n	8020566 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8020662:	4553      	cmp	r3, sl
 8020664:	f6ff af7f 	blt.w	8020566 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8020668:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802066a:	b21b      	sxth	r3, r3
 802066c:	9101      	str	r1, [sp, #4]
 802066e:	4641      	mov	r1, r8
 8020670:	9300      	str	r3, [sp, #0]
 8020672:	fa0f f38e 	sxth.w	r3, lr
 8020676:	e9cd 0202 	strd	r0, r2, [sp, #8]
 802067a:	e9cd c704 	strd	ip, r7, [sp, #16]
 802067e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020680:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020682:	f7ff fd93 	bl	80201ac <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8020686:	e76e      	b.n	8020566 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8020688:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802068a:	1430      	asrs	r0, r6, #16
 802068c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802068e:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8020692:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020696:	1423      	asrs	r3, r4, #16
 8020698:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802069c:	fb01 3000 	mla	r0, r1, r0, r3
 80206a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80206a2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80206a6:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 80206aa:	8858      	ldrh	r0, [r3, #2]
 80206ac:	f1be 0f00 	cmp.w	lr, #0
 80206b0:	d00b      	beq.n	80206ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 80206b2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80206b6:	3901      	subs	r1, #1
 80206b8:	0049      	lsls	r1, r1, #1
 80206ba:	3102      	adds	r1, #2
 80206bc:	eb03 0b01 	add.w	fp, r3, r1
 80206c0:	5a5b      	ldrh	r3, [r3, r1]
 80206c2:	930e      	str	r3, [sp, #56]	; 0x38
 80206c4:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80206c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80206ca:	ea4f 410c 	mov.w	r1, ip, lsl #16
 80206ce:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80206d2:	fb12 f30e 	smulbb	r3, r2, lr
 80206d6:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80206da:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 80206de:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80206e2:	10db      	asrs	r3, r3, #3
 80206e4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80206e8:	ea41 010c 	orr.w	r1, r1, ip
 80206ec:	f1ce 0c10 	rsb	ip, lr, #16
 80206f0:	ea4b 0000 	orr.w	r0, fp, r0
 80206f4:	9f08      	ldr	r7, [sp, #32]
 80206f6:	ebac 0c02 	sub.w	ip, ip, r2
 80206fa:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80206fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8020702:	4350      	muls	r0, r2
 8020704:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8020708:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802070a:	fb0c 0c01 	mla	ip, ip, r1, r0
 802070e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020710:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8020714:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8020718:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802071a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802071e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020722:	0412      	lsls	r2, r2, #16
 8020724:	ea4b 0101 	orr.w	r1, fp, r1
 8020728:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802072c:	fb03 c101 	mla	r1, r3, r1, ip
 8020730:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8020734:	4302      	orrs	r2, r0
 8020736:	fb03 1202 	mla	r2, r3, r2, r1
 802073a:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 802073e:	0952      	lsrs	r2, r2, #5
 8020740:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8020744:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8020748:	f8b9 2000 	ldrh.w	r2, [r9]
 802074c:	ea4b 0303 	orr.w	r3, fp, r3
 8020750:	1211      	asrs	r1, r2, #8
 8020752:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8020756:	b29b      	uxth	r3, r3
 8020758:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802075c:	00d2      	lsls	r2, r2, #3
 802075e:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8020762:	fb11 f107 	smulbb	r1, r1, r7
 8020766:	1218      	asrs	r0, r3, #8
 8020768:	fb1c fc07 	smulbb	ip, ip, r7
 802076c:	b2d2      	uxtb	r2, r2
 802076e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020772:	fb12 f207 	smulbb	r2, r2, r7
 8020776:	fb00 100a 	mla	r0, r0, sl, r1
 802077a:	10d9      	asrs	r1, r3, #3
 802077c:	00db      	lsls	r3, r3, #3
 802077e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020782:	b280      	uxth	r0, r0
 8020784:	b2db      	uxtb	r3, r3
 8020786:	fb01 c10a 	mla	r1, r1, sl, ip
 802078a:	fb03 230a 	mla	r3, r3, sl, r2
 802078e:	1c42      	adds	r2, r0, #1
 8020790:	b289      	uxth	r1, r1
 8020792:	b29b      	uxth	r3, r3
 8020794:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020798:	f101 0c01 	add.w	ip, r1, #1
 802079c:	1c5a      	adds	r2, r3, #1
 802079e:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80207a2:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80207a6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80207aa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80207ac:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80207b0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80207b4:	441c      	add	r4, r3
 80207b6:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80207ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80207bc:	4310      	orrs	r0, r2
 80207be:	441e      	add	r6, r3
 80207c0:	ea40 000c 	orr.w	r0, r0, ip
 80207c4:	f829 0b02 	strh.w	r0, [r9], #2
 80207c8:	e6fa      	b.n	80205c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80207ca:	b013      	add	sp, #76	; 0x4c
 80207cc:	ecbd 8b08 	vpop	{d8-d11}
 80207d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080207d4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 80207d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80207d8:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 80207dc:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 80207e0:	fb06 5c03 	mla	ip, r6, r3, r5
 80207e4:	2e00      	cmp	r6, #0
 80207e6:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80207ea:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80207ee:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 80207f2:	8808      	ldrh	r0, [r1, #0]
 80207f4:	db2e      	blt.n	8020854 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 80207f6:	45b0      	cmp	r8, r6
 80207f8:	dd2c      	ble.n	8020854 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 80207fa:	2d00      	cmp	r5, #0
 80207fc:	db28      	blt.n	8020850 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 80207fe:	42ab      	cmp	r3, r5
 8020800:	dd26      	ble.n	8020850 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8020802:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 8020806:	1c6a      	adds	r2, r5, #1
 8020808:	d427      	bmi.n	802085a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 802080a:	4293      	cmp	r3, r2
 802080c:	dd25      	ble.n	802085a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 802080e:	b324      	cbz	r4, 802085a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8020810:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8020814:	3601      	adds	r6, #1
 8020816:	d424      	bmi.n	8020862 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8020818:	45b0      	cmp	r8, r6
 802081a:	dd22      	ble.n	8020862 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 802081c:	b31f      	cbz	r7, 8020866 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 802081e:	2d00      	cmp	r5, #0
 8020820:	db1d      	blt.n	802085e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8020822:	42ab      	cmp	r3, r5
 8020824:	dd1b      	ble.n	802085e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8020826:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 802082a:	3501      	adds	r5, #1
 802082c:	d405      	bmi.n	802083a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 802082e:	42ab      	cmp	r3, r5
 8020830:	dd03      	ble.n	802083a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8020832:	b124      	cbz	r4, 802083e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 8020834:	3301      	adds	r3, #1
 8020836:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 802083a:	2c0f      	cmp	r4, #15
 802083c:	d801      	bhi.n	8020842 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802083e:	2f0f      	cmp	r7, #15
 8020840:	d914      	bls.n	802086c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 8020842:	4b27      	ldr	r3, [pc, #156]	; (80208e0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 8020844:	f240 11db 	movw	r1, #475	; 0x1db
 8020848:	4a26      	ldr	r2, [pc, #152]	; (80208e4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 802084a:	4827      	ldr	r0, [pc, #156]	; (80208e8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 802084c:	f004 f8d4 	bl	80249f8 <__assert_func>
 8020850:	4684      	mov	ip, r0
 8020852:	e7d8      	b.n	8020806 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 8020854:	4602      	mov	r2, r0
 8020856:	4684      	mov	ip, r0
 8020858:	e7dc      	b.n	8020814 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 802085a:	4602      	mov	r2, r0
 802085c:	e7da      	b.n	8020814 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 802085e:	4606      	mov	r6, r0
 8020860:	e7e3      	b.n	802082a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 8020862:	4606      	mov	r6, r0
 8020864:	e7e9      	b.n	802083a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8020866:	2c0f      	cmp	r4, #15
 8020868:	d8eb      	bhi.n	8020842 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802086a:	4606      	mov	r6, r0
 802086c:	fb14 f307 	smulbb	r3, r4, r7
 8020870:	ea4f 450c 	mov.w	r5, ip, lsl #16
 8020874:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8020878:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802087c:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8020880:	10db      	asrs	r3, r3, #3
 8020882:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8020886:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802088a:	ea45 0c0c 	orr.w	ip, r5, ip
 802088e:	f1c7 0510 	rsb	r5, r7, #16
 8020892:	ea4e 0202 	orr.w	r2, lr, r2
 8020896:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 802089a:	1b2d      	subs	r5, r5, r4
 802089c:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 80208a0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80208a4:	4354      	muls	r4, r2
 80208a6:	fb05 450c 	mla	r5, r5, ip, r4
 80208aa:	0404      	lsls	r4, r0, #16
 80208ac:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80208b0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80208b4:	4320      	orrs	r0, r4
 80208b6:	fb03 5400 	mla	r4, r3, r0, r5
 80208ba:	0430      	lsls	r0, r6, #16
 80208bc:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 80208c0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80208c4:	4330      	orrs	r0, r6
 80208c6:	fb07 4000 	mla	r0, r7, r0, r4
 80208ca:	0d43      	lsrs	r3, r0, #21
 80208cc:	0940      	lsrs	r0, r0, #5
 80208ce:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80208d2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80208d6:	4318      	orrs	r0, r3
 80208d8:	8008      	strh	r0, [r1, #0]
 80208da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80208de:	bf00      	nop
 80208e0:	0802a0bb 	.word	0x0802a0bb
 80208e4:	0802a693 	.word	0x0802a693
 80208e8:	0802a088 	.word	0x0802a088

080208ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80208ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208f0:	ed2d 8b08 	vpush	{d8-d11}
 80208f4:	b08f      	sub	sp, #60	; 0x3c
 80208f6:	461d      	mov	r5, r3
 80208f8:	eeb0 aa40 	vmov.f32	s20, s0
 80208fc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80208fe:	eef0 9a60 	vmov.f32	s19, s1
 8020902:	9107      	str	r1, [sp, #28]
 8020904:	eeb0 9a41 	vmov.f32	s18, s2
 8020908:	6859      	ldr	r1, [r3, #4]
 802090a:	eeb0 8a62 	vmov.f32	s16, s5
 802090e:	920c      	str	r2, [sp, #48]	; 0x30
 8020910:	eef0 8a43 	vmov.f32	s17, s6
 8020914:	681b      	ldr	r3, [r3, #0]
 8020916:	eef0 ba44 	vmov.f32	s23, s8
 802091a:	eeb0 ba64 	vmov.f32	s22, s9
 802091e:	900d      	str	r0, [sp, #52]	; 0x34
 8020920:	eef0 aa45 	vmov.f32	s21, s10
 8020924:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 8020928:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 802092c:	fb01 2707 	mla	r7, r1, r7, r2
 8020930:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8020934:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020936:	f8d3 8000 	ldr.w	r8, [r3]
 802093a:	9b07      	ldr	r3, [sp, #28]
 802093c:	2b00      	cmp	r3, #0
 802093e:	dc03      	bgt.n	8020948 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020942:	2b00      	cmp	r3, #0
 8020944:	f340 8182 	ble.w	8020c4c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8020948:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802094a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802094e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020952:	1e48      	subs	r0, r1, #1
 8020954:	f102 3cff 	add.w	ip, r2, #4294967295
 8020958:	2d00      	cmp	r5, #0
 802095a:	f340 809b 	ble.w	8020a94 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 802095e:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8020962:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020966:	d406      	bmi.n	8020976 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020968:	4586      	cmp	lr, r0
 802096a:	da04      	bge.n	8020976 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802096c:	2b00      	cmp	r3, #0
 802096e:	db02      	blt.n	8020976 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020970:	4563      	cmp	r3, ip
 8020972:	f2c0 8090 	blt.w	8020a96 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8020976:	f11e 0e01 	adds.w	lr, lr, #1
 802097a:	f100 8084 	bmi.w	8020a86 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802097e:	4571      	cmp	r1, lr
 8020980:	f2c0 8081 	blt.w	8020a86 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020984:	3301      	adds	r3, #1
 8020986:	d47e      	bmi.n	8020a86 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020988:	429a      	cmp	r2, r3
 802098a:	db7c      	blt.n	8020a86 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802098c:	46aa      	mov	sl, r5
 802098e:	46b9      	mov	r9, r7
 8020990:	f1ba 0f00 	cmp.w	sl, #0
 8020994:	f340 8099 	ble.w	8020aca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8020998:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802099a:	1421      	asrs	r1, r4, #16
 802099c:	ea4f 4026 	mov.w	r0, r6, asr #16
 80209a0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80209a4:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80209a8:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80209ac:	f100 80d1 	bmi.w	8020b52 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 80209b0:	f10e 3bff 	add.w	fp, lr, #4294967295
 80209b4:	4559      	cmp	r1, fp
 80209b6:	f280 80cc 	bge.w	8020b52 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 80209ba:	2800      	cmp	r0, #0
 80209bc:	f2c0 80c9 	blt.w	8020b52 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 80209c0:	f103 3bff 	add.w	fp, r3, #4294967295
 80209c4:	4558      	cmp	r0, fp
 80209c6:	f280 80c4 	bge.w	8020b52 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 80209ca:	fa0f fe8e 	sxth.w	lr, lr
 80209ce:	fb00 110e 	mla	r1, r0, lr, r1
 80209d2:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80209d6:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 80209da:	8841      	ldrh	r1, [r0, #2]
 80209dc:	f1bc 0f00 	cmp.w	ip, #0
 80209e0:	d00b      	beq.n	80209fa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 80209e2:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 80209e6:	3b01      	subs	r3, #1
 80209e8:	005b      	lsls	r3, r3, #1
 80209ea:	3302      	adds	r3, #2
 80209ec:	eb00 0e03 	add.w	lr, r0, r3
 80209f0:	5ac3      	ldrh	r3, [r0, r3]
 80209f2:	9308      	str	r3, [sp, #32]
 80209f4:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80209f8:	9309      	str	r3, [sp, #36]	; 0x24
 80209fa:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80209fe:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8020a02:	fb12 f30c 	smulbb	r3, r2, ip
 8020a06:	f1cc 0e10 	rsb	lr, ip, #16
 8020a0a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020a0e:	10db      	asrs	r3, r3, #3
 8020a10:	ebae 0e02 	sub.w	lr, lr, r2
 8020a14:	ea40 000b 	orr.w	r0, r0, fp
 8020a18:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8020a1c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020a20:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8020a24:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020a28:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8020a2c:	ea4b 0101 	orr.w	r1, fp, r1
 8020a30:	4351      	muls	r1, r2
 8020a32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020a34:	fb0e 1e00 	mla	lr, lr, r0, r1
 8020a38:	0410      	lsls	r0, r2, #16
 8020a3a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020a3e:	9908      	ldr	r1, [sp, #32]
 8020a40:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020a44:	4310      	orrs	r0, r2
 8020a46:	9a08      	ldr	r2, [sp, #32]
 8020a48:	0412      	lsls	r2, r2, #16
 8020a4a:	fb03 e000 	mla	r0, r3, r0, lr
 8020a4e:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8020a52:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8020a56:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8020a5a:	ea42 020e 	orr.w	r2, r2, lr
 8020a5e:	fb03 0302 	mla	r3, r3, r2, r0
 8020a62:	0d5a      	lsrs	r2, r3, #21
 8020a64:	095b      	lsrs	r3, r3, #5
 8020a66:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020a6a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020a6e:	4313      	orrs	r3, r2
 8020a70:	f8a9 3000 	strh.w	r3, [r9]
 8020a74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020a76:	f109 0902 	add.w	r9, r9, #2
 8020a7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020a7e:	441c      	add	r4, r3
 8020a80:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020a82:	441e      	add	r6, r3
 8020a84:	e784      	b.n	8020990 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8020a86:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020a88:	3d01      	subs	r5, #1
 8020a8a:	3702      	adds	r7, #2
 8020a8c:	441c      	add	r4, r3
 8020a8e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020a90:	441e      	add	r6, r3
 8020a92:	e761      	b.n	8020958 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020a94:	d01d      	beq.n	8020ad2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8020a96:	1e6b      	subs	r3, r5, #1
 8020a98:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8020a9a:	fb00 4003 	mla	r0, r0, r3, r4
 8020a9e:	1400      	asrs	r0, r0, #16
 8020aa0:	f53f af74 	bmi.w	802098c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020aa4:	3901      	subs	r1, #1
 8020aa6:	4288      	cmp	r0, r1
 8020aa8:	f6bf af70 	bge.w	802098c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020aac:	9924      	ldr	r1, [sp, #144]	; 0x90
 8020aae:	fb01 6303 	mla	r3, r1, r3, r6
 8020ab2:	141b      	asrs	r3, r3, #16
 8020ab4:	f53f af6a 	bmi.w	802098c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020ab8:	3a01      	subs	r2, #1
 8020aba:	4293      	cmp	r3, r2
 8020abc:	f6bf af66 	bge.w	802098c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020ac0:	46a9      	mov	r9, r5
 8020ac2:	46ba      	mov	sl, r7
 8020ac4:	f1b9 0f00 	cmp.w	r9, #0
 8020ac8:	dc5b      	bgt.n	8020b82 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8020aca:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8020ace:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8020ad2:	9b07      	ldr	r3, [sp, #28]
 8020ad4:	2b00      	cmp	r3, #0
 8020ad6:	f340 80b9 	ble.w	8020c4c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8020ada:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020ade:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020ae0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020ae4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020ae8:	eef0 6a48 	vmov.f32	s13, s16
 8020aec:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020af0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020af4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020af8:	ee16 4a90 	vmov	r4, s13
 8020afc:	eef0 6a68 	vmov.f32	s13, s17
 8020b00:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020b04:	ee16 6a90 	vmov	r6, s13
 8020b08:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020b0c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020b10:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020b14:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020b18:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020b1c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020b20:	ee18 2a10 	vmov	r2, s16
 8020b24:	eeb0 8a47 	vmov.f32	s16, s14
 8020b28:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b2c:	ee18 2a90 	vmov	r2, s17
 8020b30:	9323      	str	r3, [sp, #140]	; 0x8c
 8020b32:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020b34:	eef0 8a67 	vmov.f32	s17, s15
 8020b38:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b3c:	9324      	str	r3, [sp, #144]	; 0x90
 8020b3e:	9b07      	ldr	r3, [sp, #28]
 8020b40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020b42:	3b01      	subs	r3, #1
 8020b44:	9307      	str	r3, [sp, #28]
 8020b46:	bf08      	it	eq
 8020b48:	4615      	moveq	r5, r2
 8020b4a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020b4c:	bf18      	it	ne
 8020b4e:	461d      	movne	r5, r3
 8020b50:	e6f3      	b.n	802093a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8020b52:	f111 0b01 	adds.w	fp, r1, #1
 8020b56:	d48d      	bmi.n	8020a74 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8020b58:	45de      	cmp	lr, fp
 8020b5a:	db8b      	blt.n	8020a74 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8020b5c:	f110 0b01 	adds.w	fp, r0, #1
 8020b60:	d488      	bmi.n	8020a74 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8020b62:	455b      	cmp	r3, fp
 8020b64:	db86      	blt.n	8020a74 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8020b66:	b21b      	sxth	r3, r3
 8020b68:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8020b6c:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8020b70:	9300      	str	r3, [sp, #0]
 8020b72:	4642      	mov	r2, r8
 8020b74:	fa0f f38e 	sxth.w	r3, lr
 8020b78:	4649      	mov	r1, r9
 8020b7a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020b7c:	f7ff fe2a 	bl	80207d4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8020b80:	e778      	b.n	8020a74 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8020b82:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020b84:	1420      	asrs	r0, r4, #16
 8020b86:	1431      	asrs	r1, r6, #16
 8020b88:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8020b8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8020b90:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020b94:	fb03 0101 	mla	r1, r3, r1, r0
 8020b98:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8020b9c:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8020ba0:	8841      	ldrh	r1, [r0, #2]
 8020ba2:	f1be 0f00 	cmp.w	lr, #0
 8020ba6:	d00b      	beq.n	8020bc0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8020ba8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8020bac:	3b01      	subs	r3, #1
 8020bae:	005b      	lsls	r3, r3, #1
 8020bb0:	3302      	adds	r3, #2
 8020bb2:	eb00 0b03 	add.w	fp, r0, r3
 8020bb6:	5ac3      	ldrh	r3, [r0, r3]
 8020bb8:	930a      	str	r3, [sp, #40]	; 0x28
 8020bba:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8020bbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8020bc0:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8020bc4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8020bc8:	fb12 f30e 	smulbb	r3, r2, lr
 8020bcc:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8020bd0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020bd4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020bd8:	10db      	asrs	r3, r3, #3
 8020bda:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020bde:	ea40 000c 	orr.w	r0, r0, ip
 8020be2:	f1ce 0c10 	rsb	ip, lr, #16
 8020be6:	ea4b 0101 	orr.w	r1, fp, r1
 8020bea:	f109 39ff 	add.w	r9, r9, #4294967295
 8020bee:	ebac 0c02 	sub.w	ip, ip, r2
 8020bf2:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8020bf6:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8020bfa:	4351      	muls	r1, r2
 8020bfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020bfe:	fb0c 1c00 	mla	ip, ip, r0, r1
 8020c02:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020c04:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8020c08:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8020c0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020c0e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020c12:	0412      	lsls	r2, r2, #16
 8020c14:	ea4b 0000 	orr.w	r0, fp, r0
 8020c18:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8020c1c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8020c20:	fb03 c000 	mla	r0, r3, r0, ip
 8020c24:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8020c28:	ea42 0b0b 	orr.w	fp, r2, fp
 8020c2c:	fb03 000b 	mla	r0, r3, fp, r0
 8020c30:	0d43      	lsrs	r3, r0, #21
 8020c32:	0940      	lsrs	r0, r0, #5
 8020c34:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020c38:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020c3c:	4318      	orrs	r0, r3
 8020c3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020c40:	441c      	add	r4, r3
 8020c42:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020c44:	f82a 0b02 	strh.w	r0, [sl], #2
 8020c48:	441e      	add	r6, r3
 8020c4a:	e73b      	b.n	8020ac4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8020c4c:	b00f      	add	sp, #60	; 0x3c
 8020c4e:	ecbd 8b08 	vpop	{d8-d11}
 8020c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020c58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8020c58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c5c:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8020c60:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8020c64:	fb04 5603 	mla	r6, r4, r3, r5
 8020c68:	2c00      	cmp	r4, #0
 8020c6a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8020c6e:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8020c72:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8020c76:	db36      	blt.n	8020ce6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 8020c78:	45a6      	cmp	lr, r4
 8020c7a:	dd34      	ble.n	8020ce6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 8020c7c:	2d00      	cmp	r5, #0
 8020c7e:	db30      	blt.n	8020ce2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 8020c80:	42ab      	cmp	r3, r5
 8020c82:	dd2e      	ble.n	8020ce2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 8020c84:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8020c88:	1c6e      	adds	r6, r5, #1
 8020c8a:	d42f      	bmi.n	8020cec <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 8020c8c:	42b3      	cmp	r3, r6
 8020c8e:	dd2d      	ble.n	8020cec <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 8020c90:	b370      	cbz	r0, 8020cf0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 8020c92:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8020c96:	3401      	adds	r4, #1
 8020c98:	d42e      	bmi.n	8020cf8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 8020c9a:	45a6      	cmp	lr, r4
 8020c9c:	dd2c      	ble.n	8020cf8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 8020c9e:	b377      	cbz	r7, 8020cfe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa6>
 8020ca0:	2d00      	cmp	r5, #0
 8020ca2:	db27      	blt.n	8020cf4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8020ca4:	42ab      	cmp	r3, r5
 8020ca6:	dd25      	ble.n	8020cf4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8020ca8:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8020cac:	3501      	adds	r5, #1
 8020cae:	d429      	bmi.n	8020d04 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8020cb0:	42ab      	cmp	r3, r5
 8020cb2:	dd27      	ble.n	8020d04 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8020cb4:	b340      	cbz	r0, 8020d08 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 8020cb6:	3301      	adds	r3, #1
 8020cb8:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8020cbc:	280f      	cmp	r0, #15
 8020cbe:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8020cc2:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020cc6:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8020cca:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8020cce:	d801      	bhi.n	8020cd4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x7c>
 8020cd0:	2f0f      	cmp	r7, #15
 8020cd2:	d91b      	bls.n	8020d0c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8020cd4:	4b8d      	ldr	r3, [pc, #564]	; (8020f0c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 8020cd6:	f240 11f9 	movw	r1, #505	; 0x1f9
 8020cda:	4a8d      	ldr	r2, [pc, #564]	; (8020f10 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 8020cdc:	488d      	ldr	r0, [pc, #564]	; (8020f14 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 8020cde:	f003 fe8b 	bl	80249f8 <__assert_func>
 8020ce2:	2200      	movs	r2, #0
 8020ce4:	e7d0      	b.n	8020c88 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x30>
 8020ce6:	2600      	movs	r6, #0
 8020ce8:	4632      	mov	r2, r6
 8020cea:	e7d4      	b.n	8020c96 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8020cec:	2600      	movs	r6, #0
 8020cee:	e7d2      	b.n	8020c96 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8020cf0:	4606      	mov	r6, r0
 8020cf2:	e7d0      	b.n	8020c96 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8020cf4:	2400      	movs	r4, #0
 8020cf6:	e7d9      	b.n	8020cac <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x54>
 8020cf8:	2300      	movs	r3, #0
 8020cfa:	461c      	mov	r4, r3
 8020cfc:	e7de      	b.n	8020cbc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8020cfe:	463b      	mov	r3, r7
 8020d00:	463c      	mov	r4, r7
 8020d02:	e7db      	b.n	8020cbc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8020d04:	2300      	movs	r3, #0
 8020d06:	e7d9      	b.n	8020cbc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8020d08:	4603      	mov	r3, r0
 8020d0a:	e7d7      	b.n	8020cbc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8020d0c:	b280      	uxth	r0, r0
 8020d0e:	b2bf      	uxth	r7, r7
 8020d10:	fb07 fe00 	mul.w	lr, r7, r0
 8020d14:	0100      	lsls	r0, r0, #4
 8020d16:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8020d1a:	eba0 0c0e 	sub.w	ip, r0, lr
 8020d1e:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8020d22:	b2bf      	uxth	r7, r7
 8020d24:	fa1f fc8c 	uxth.w	ip, ip
 8020d28:	1bed      	subs	r5, r5, r7
 8020d2a:	fb0a f00c 	mul.w	r0, sl, ip
 8020d2e:	b2ad      	uxth	r5, r5
 8020d30:	fb0b 0005 	mla	r0, fp, r5, r0
 8020d34:	fb07 0009 	mla	r0, r7, r9, r0
 8020d38:	fb0e 0008 	mla	r0, lr, r8, r0
 8020d3c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020d40:	9001      	str	r0, [sp, #4]
 8020d42:	2800      	cmp	r0, #0
 8020d44:	f000 80de 	beq.w	8020f04 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2ac>
 8020d48:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020d4c:	d018      	beq.n	8020d80 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x128>
 8020d4e:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8020d52:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020d56:	fb0b f000 	mul.w	r0, fp, r0
 8020d5a:	fb0b fb02 	mul.w	fp, fp, r2
 8020d5e:	0a02      	lsrs	r2, r0, #8
 8020d60:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8020d64:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020d68:	4402      	add	r2, r0
 8020d6a:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8020d6e:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8020d72:	0a12      	lsrs	r2, r2, #8
 8020d74:	0a00      	lsrs	r0, r0, #8
 8020d76:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020d7a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020d7e:	4302      	orrs	r2, r0
 8020d80:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020d84:	d01a      	beq.n	8020dbc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x164>
 8020d86:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8020d8a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020d8e:	fb0a f000 	mul.w	r0, sl, r0
 8020d92:	fb0a fa06 	mul.w	sl, sl, r6
 8020d96:	0a06      	lsrs	r6, r0, #8
 8020d98:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8020d9c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020da0:	4406      	add	r6, r0
 8020da2:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8020da6:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8020daa:	0a36      	lsrs	r6, r6, #8
 8020dac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020db0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020db4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020db8:	ea46 060a 	orr.w	r6, r6, sl
 8020dbc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020dc0:	d01b      	beq.n	8020dfa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1a2>
 8020dc2:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8020dc6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020dca:	fb09 fa0a 	mul.w	sl, r9, sl
 8020dce:	fb09 f004 	mul.w	r0, r9, r4
 8020dd2:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8020dd6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020dda:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8020dde:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020de2:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8020de6:	4454      	add	r4, sl
 8020de8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020dec:	0a24      	lsrs	r4, r4, #8
 8020dee:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020df2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020df6:	ea44 0409 	orr.w	r4, r4, r9
 8020dfa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020dfe:	d01b      	beq.n	8020e38 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1e0>
 8020e00:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8020e04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020e08:	fb08 f909 	mul.w	r9, r8, r9
 8020e0c:	fb08 f003 	mul.w	r0, r8, r3
 8020e10:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8020e14:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8020e18:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8020e1c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020e20:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8020e24:	444b      	add	r3, r9
 8020e26:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020e2a:	0a1b      	lsrs	r3, r3, #8
 8020e2c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020e30:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020e34:	ea43 0308 	orr.w	r3, r3, r8
 8020e38:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8020e3c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020e40:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8020e44:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020e48:	fb0c f808 	mul.w	r8, ip, r8
 8020e4c:	8808      	ldrh	r0, [r1, #0]
 8020e4e:	fb0c f606 	mul.w	r6, ip, r6
 8020e52:	fb05 8909 	mla	r9, r5, r9, r8
 8020e56:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8020e5a:	fb05 6502 	mla	r5, r5, r2, r6
 8020e5e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020e62:	fb07 9908 	mla	r9, r7, r8, r9
 8020e66:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8020e6a:	fb07 5704 	mla	r7, r7, r4, r5
 8020e6e:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8020e72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020e76:	b2b6      	uxth	r6, r6
 8020e78:	fb0e 9808 	mla	r8, lr, r8, r9
 8020e7c:	9a01      	ldr	r2, [sp, #4]
 8020e7e:	fb0e 7e03 	mla	lr, lr, r3, r7
 8020e82:	1205      	asrs	r5, r0, #8
 8020e84:	4372      	muls	r2, r6
 8020e86:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020e8a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020e8e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8020e92:	1c53      	adds	r3, r2, #1
 8020e94:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8020e98:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020e9c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020ea0:	ea48 0e0e 	orr.w	lr, r8, lr
 8020ea4:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8020ea8:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8020eac:	f3ce 2407 	ubfx	r4, lr, #8, #8
 8020eb0:	b2db      	uxtb	r3, r3
 8020eb2:	fb12 f206 	smulbb	r2, r2, r6
 8020eb6:	fa5f fe8e 	uxtb.w	lr, lr
 8020eba:	fb14 f406 	smulbb	r4, r4, r6
 8020ebe:	fb05 2503 	mla	r5, r5, r3, r2
 8020ec2:	10c2      	asrs	r2, r0, #3
 8020ec4:	fb1e fe06 	smulbb	lr, lr, r6
 8020ec8:	00c0      	lsls	r0, r0, #3
 8020eca:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020ece:	b2ad      	uxth	r5, r5
 8020ed0:	b2c0      	uxtb	r0, r0
 8020ed2:	fb02 4203 	mla	r2, r2, r3, r4
 8020ed6:	fb00 e303 	mla	r3, r0, r3, lr
 8020eda:	b294      	uxth	r4, r2
 8020edc:	b298      	uxth	r0, r3
 8020ede:	1c6b      	adds	r3, r5, #1
 8020ee0:	1c62      	adds	r2, r4, #1
 8020ee2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020ee6:	1c43      	adds	r3, r0, #1
 8020ee8:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8020eec:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020ef0:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8020ef4:	0952      	lsrs	r2, r2, #5
 8020ef6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020efa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020efe:	432b      	orrs	r3, r5
 8020f00:	4313      	orrs	r3, r2
 8020f02:	800b      	strh	r3, [r1, #0]
 8020f04:	b003      	add	sp, #12
 8020f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f0a:	bf00      	nop
 8020f0c:	0802a0bb 	.word	0x0802a0bb
 8020f10:	0802a5ea 	.word	0x0802a5ea
 8020f14:	0802a088 	.word	0x0802a088

08020f18 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f1c:	ed2d 8b08 	vpush	{d8-d11}
 8020f20:	b09d      	sub	sp, #116	; 0x74
 8020f22:	eeb0 aa40 	vmov.f32	s20, s0
 8020f26:	eef0 9a60 	vmov.f32	s19, s1
 8020f2a:	9219      	str	r2, [sp, #100]	; 0x64
 8020f2c:	eeb0 9a41 	vmov.f32	s18, s2
 8020f30:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8020f32:	eeb0 8a62 	vmov.f32	s16, s5
 8020f36:	9307      	str	r3, [sp, #28]
 8020f38:	eef0 8a43 	vmov.f32	s17, s6
 8020f3c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8020f40:	eef0 ba44 	vmov.f32	s23, s8
 8020f44:	901b      	str	r0, [sp, #108]	; 0x6c
 8020f46:	eeb0 ba64 	vmov.f32	s22, s9
 8020f4a:	931a      	str	r3, [sp, #104]	; 0x68
 8020f4c:	eef0 aa45 	vmov.f32	s21, s10
 8020f50:	6850      	ldr	r0, [r2, #4]
 8020f52:	9117      	str	r1, [sp, #92]	; 0x5c
 8020f54:	6812      	ldr	r2, [r2, #0]
 8020f56:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8020f5a:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 8020f5e:	fb00 1303 	mla	r3, r0, r3, r1
 8020f62:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020f66:	930a      	str	r3, [sp, #40]	; 0x28
 8020f68:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020f6a:	681b      	ldr	r3, [r3, #0]
 8020f6c:	9310      	str	r3, [sp, #64]	; 0x40
 8020f6e:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8020f72:	930b      	str	r3, [sp, #44]	; 0x2c
 8020f74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020f76:	2b00      	cmp	r3, #0
 8020f78:	dc03      	bgt.n	8020f82 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020f7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020f7c:	2b00      	cmp	r3, #0
 8020f7e:	f340 8375 	ble.w	802166c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8020f82:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020f84:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020f88:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020f8c:	1e48      	subs	r0, r1, #1
 8020f8e:	1e57      	subs	r7, r2, #1
 8020f90:	9b07      	ldr	r3, [sp, #28]
 8020f92:	2b00      	cmp	r3, #0
 8020f94:	f340 818e 	ble.w	80212b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8020f98:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020f9c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020fa0:	d406      	bmi.n	8020fb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020fa2:	4584      	cmp	ip, r0
 8020fa4:	da04      	bge.n	8020fb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020fa6:	2b00      	cmp	r3, #0
 8020fa8:	db02      	blt.n	8020fb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020faa:	42bb      	cmp	r3, r7
 8020fac:	f2c0 8183 	blt.w	80212b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8020fb0:	f11c 0c01 	adds.w	ip, ip, #1
 8020fb4:	f100 8173 	bmi.w	802129e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8020fb8:	4561      	cmp	r1, ip
 8020fba:	f2c0 8170 	blt.w	802129e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8020fbe:	3301      	adds	r3, #1
 8020fc0:	f100 816d 	bmi.w	802129e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8020fc4:	429a      	cmp	r2, r3
 8020fc6:	f2c0 816a 	blt.w	802129e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8020fca:	9b07      	ldr	r3, [sp, #28]
 8020fcc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8020fce:	9318      	str	r3, [sp, #96]	; 0x60
 8020fd0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020fd2:	2b00      	cmp	r3, #0
 8020fd4:	f340 818c 	ble.w	80212f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8020fd8:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8020fda:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8020fde:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020fe0:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8020fe4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8020fe8:	1422      	asrs	r2, r4, #16
 8020fea:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8020fee:	689b      	ldr	r3, [r3, #8]
 8020ff0:	f100 81cd 	bmi.w	802138e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8020ff4:	f103 38ff 	add.w	r8, r3, #4294967295
 8020ff8:	4542      	cmp	r2, r8
 8020ffa:	f280 81c8 	bge.w	802138e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8020ffe:	f1bc 0f00 	cmp.w	ip, #0
 8021002:	f2c0 81c4 	blt.w	802138e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8021006:	f10e 38ff 	add.w	r8, lr, #4294967295
 802100a:	45c4      	cmp	ip, r8
 802100c:	f280 81bf 	bge.w	802138e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8021010:	b21b      	sxth	r3, r3
 8021012:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021014:	fb0c 2203 	mla	r2, ip, r3, r2
 8021018:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802101c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8021020:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8021024:	2800      	cmp	r0, #0
 8021026:	f000 81a9 	beq.w	802137c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 802102a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802102e:	950c      	str	r5, [sp, #48]	; 0x30
 8021030:	0e2d      	lsrs	r5, r5, #24
 8021032:	9513      	str	r5, [sp, #76]	; 0x4c
 8021034:	b181      	cbz	r1, 8021058 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8021036:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802103a:	3b01      	subs	r3, #1
 802103c:	009b      	lsls	r3, r3, #2
 802103e:	3304      	adds	r3, #4
 8021040:	eb08 0c03 	add.w	ip, r8, r3
 8021044:	f858 3003 	ldr.w	r3, [r8, r3]
 8021048:	9308      	str	r3, [sp, #32]
 802104a:	0e1b      	lsrs	r3, r3, #24
 802104c:	9311      	str	r3, [sp, #68]	; 0x44
 802104e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8021052:	930d      	str	r3, [sp, #52]	; 0x34
 8021054:	0e1b      	lsrs	r3, r3, #24
 8021056:	9314      	str	r3, [sp, #80]	; 0x50
 8021058:	b280      	uxth	r0, r0
 802105a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802105c:	b289      	uxth	r1, r1
 802105e:	fb00 f901 	mul.w	r9, r0, r1
 8021062:	0100      	lsls	r0, r0, #4
 8021064:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021068:	eba0 0809 	sub.w	r8, r0, r9
 802106c:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8021070:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021072:	b289      	uxth	r1, r1
 8021074:	fa1f f888 	uxth.w	r8, r8
 8021078:	1a5b      	subs	r3, r3, r1
 802107a:	fb08 f000 	mul.w	r0, r8, r0
 802107e:	b29b      	uxth	r3, r3
 8021080:	fb03 000e 	mla	r0, r3, lr, r0
 8021084:	fb01 0005 	mla	r0, r1, r5, r0
 8021088:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802108a:	fb09 0005 	mla	r0, r9, r5, r0
 802108e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021092:	2800      	cmp	r0, #0
 8021094:	f000 80fa 	beq.w	802128c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8021098:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802109c:	d01b      	beq.n	80210d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802109e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80210a2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80210a6:	fb0e fa0a 	mul.w	sl, lr, sl
 80210aa:	fb0e fe02 	mul.w	lr, lr, r2
 80210ae:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80210b2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80210b6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80210ba:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80210be:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80210c2:	4452      	add	r2, sl
 80210c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80210c8:	0a12      	lsrs	r2, r2, #8
 80210ca:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80210ce:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80210d2:	ea42 020c 	orr.w	r2, r2, ip
 80210d6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80210d8:	2dff      	cmp	r5, #255	; 0xff
 80210da:	d021      	beq.n	8021120 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80210dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80210de:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80210e2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80210e4:	fb05 fb0b 	mul.w	fp, r5, fp
 80210e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80210ea:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80210ee:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80210f0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80210f4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80210f8:	fb05 fa0a 	mul.w	sl, r5, sl
 80210fc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021100:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021104:	44de      	add	lr, fp
 8021106:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802110a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802110e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021112:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021116:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802111a:	ea4e 050a 	orr.w	r5, lr, sl
 802111e:	950c      	str	r5, [sp, #48]	; 0x30
 8021120:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021122:	2dff      	cmp	r5, #255	; 0xff
 8021124:	d021      	beq.n	802116a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8021126:	9d08      	ldr	r5, [sp, #32]
 8021128:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802112c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802112e:	fb05 fb0b 	mul.w	fp, r5, fp
 8021132:	9d08      	ldr	r5, [sp, #32]
 8021134:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021138:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802113a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802113e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021142:	fb05 fa0a 	mul.w	sl, r5, sl
 8021146:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802114a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802114e:	44de      	add	lr, fp
 8021150:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021154:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021158:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802115c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021160:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021164:	ea4e 050a 	orr.w	r5, lr, sl
 8021168:	9508      	str	r5, [sp, #32]
 802116a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802116c:	2dff      	cmp	r5, #255	; 0xff
 802116e:	d021      	beq.n	80211b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8021170:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021172:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8021176:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021178:	fb05 fb0b 	mul.w	fp, r5, fp
 802117c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802117e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021182:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021184:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021188:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802118c:	fb05 fa0a 	mul.w	sl, r5, sl
 8021190:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021194:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021198:	44de      	add	lr, fp
 802119a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802119e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80211a2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80211a6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80211aa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80211ae:	ea4e 050a 	orr.w	r5, lr, sl
 80211b2:	950d      	str	r5, [sp, #52]	; 0x34
 80211b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80211b6:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80211ba:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80211be:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80211c2:	9d08      	ldr	r5, [sp, #32]
 80211c4:	fb08 fc0c 	mul.w	ip, r8, ip
 80211c8:	fb03 cc0e 	mla	ip, r3, lr, ip
 80211cc:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80211d0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80211d2:	fb01 cc0e 	mla	ip, r1, lr, ip
 80211d6:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80211da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80211dc:	fb09 cc0e 	mla	ip, r9, lr, ip
 80211e0:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80211e4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80211e6:	fb08 f80e 	mul.w	r8, r8, lr
 80211ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80211ee:	fb03 8202 	mla	r2, r3, r2, r8
 80211f2:	9b08      	ldr	r3, [sp, #32]
 80211f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80211f8:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 80211fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80211fe:	fb01 220a 	mla	r2, r1, sl, r2
 8021202:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8021206:	883b      	ldrh	r3, [r7, #0]
 8021208:	fb09 2901 	mla	r9, r9, r1, r2
 802120c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802120e:	1219      	asrs	r1, r3, #8
 8021210:	4342      	muls	r2, r0
 8021212:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021216:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802121a:	1c50      	adds	r0, r2, #1
 802121c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021220:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8021224:	ea4c 0c09 	orr.w	ip, ip, r9
 8021228:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802122c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8021230:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8021234:	fa5f fc8c 	uxtb.w	ip, ip
 8021238:	fb12 f205 	smulbb	r2, r2, r5
 802123c:	b2c0      	uxtb	r0, r0
 802123e:	fb1c fc05 	smulbb	ip, ip, r5
 8021242:	fb01 2100 	mla	r1, r1, r0, r2
 8021246:	10da      	asrs	r2, r3, #3
 8021248:	fb1e fe05 	smulbb	lr, lr, r5
 802124c:	00db      	lsls	r3, r3, #3
 802124e:	b289      	uxth	r1, r1
 8021250:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021254:	b2db      	uxtb	r3, r3
 8021256:	fb02 e200 	mla	r2, r2, r0, lr
 802125a:	fb03 c300 	mla	r3, r3, r0, ip
 802125e:	b292      	uxth	r2, r2
 8021260:	fa1f fc83 	uxth.w	ip, r3
 8021264:	1c4b      	adds	r3, r1, #1
 8021266:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802126a:	f10c 0301 	add.w	r3, ip, #1
 802126e:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8021272:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8021276:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802127a:	430b      	orrs	r3, r1
 802127c:	1c51      	adds	r1, r2, #1
 802127e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021282:	0952      	lsrs	r2, r2, #5
 8021284:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021288:	4313      	orrs	r3, r2
 802128a:	803b      	strh	r3, [r7, #0]
 802128c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802128e:	3702      	adds	r7, #2
 8021290:	441c      	add	r4, r3
 8021292:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021294:	441e      	add	r6, r3
 8021296:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021298:	3b01      	subs	r3, #1
 802129a:	9318      	str	r3, [sp, #96]	; 0x60
 802129c:	e698      	b.n	8020fd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802129e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80212a0:	441c      	add	r4, r3
 80212a2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80212a4:	441e      	add	r6, r3
 80212a6:	9b07      	ldr	r3, [sp, #28]
 80212a8:	3b01      	subs	r3, #1
 80212aa:	9307      	str	r3, [sp, #28]
 80212ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80212ae:	3302      	adds	r3, #2
 80212b0:	930a      	str	r3, [sp, #40]	; 0x28
 80212b2:	e66d      	b.n	8020f90 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80212b4:	d023      	beq.n	80212fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80212b6:	9b07      	ldr	r3, [sp, #28]
 80212b8:	9831      	ldr	r0, [sp, #196]	; 0xc4
 80212ba:	3b01      	subs	r3, #1
 80212bc:	fb00 4003 	mla	r0, r0, r3, r4
 80212c0:	1400      	asrs	r0, r0, #16
 80212c2:	f53f ae82 	bmi.w	8020fca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80212c6:	3901      	subs	r1, #1
 80212c8:	4288      	cmp	r0, r1
 80212ca:	f6bf ae7e 	bge.w	8020fca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80212ce:	9932      	ldr	r1, [sp, #200]	; 0xc8
 80212d0:	fb01 6303 	mla	r3, r1, r3, r6
 80212d4:	141b      	asrs	r3, r3, #16
 80212d6:	f53f ae78 	bmi.w	8020fca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80212da:	3a01      	subs	r2, #1
 80212dc:	4293      	cmp	r3, r2
 80212de:	f6bf ae74 	bge.w	8020fca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80212e2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80212e6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80212ea:	f1bb 0f00 	cmp.w	fp, #0
 80212ee:	dc6c      	bgt.n	80213ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 80212f0:	9b07      	ldr	r3, [sp, #28]
 80212f2:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80212f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80212f8:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80212fc:	930a      	str	r3, [sp, #40]	; 0x28
 80212fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021300:	2b00      	cmp	r3, #0
 8021302:	f340 81b3 	ble.w	802166c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8021306:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802130a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802130c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021310:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021314:	eef0 6a48 	vmov.f32	s13, s16
 8021318:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802131c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021320:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021324:	ee16 4a90 	vmov	r4, s13
 8021328:	eef0 6a68 	vmov.f32	s13, s17
 802132c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021330:	ee16 6a90 	vmov	r6, s13
 8021334:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021338:	ee69 7a27 	vmul.f32	s15, s18, s15
 802133c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021340:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021344:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021348:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802134c:	ee18 2a10 	vmov	r2, s16
 8021350:	eeb0 8a47 	vmov.f32	s16, s14
 8021354:	fb92 f3f3 	sdiv	r3, r2, r3
 8021358:	ee18 2a90 	vmov	r2, s17
 802135c:	9331      	str	r3, [sp, #196]	; 0xc4
 802135e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021360:	eef0 8a67 	vmov.f32	s17, s15
 8021364:	fb92 f3f3 	sdiv	r3, r2, r3
 8021368:	9332      	str	r3, [sp, #200]	; 0xc8
 802136a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802136c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802136e:	3b01      	subs	r3, #1
 8021370:	9317      	str	r3, [sp, #92]	; 0x5c
 8021372:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021374:	bf08      	it	eq
 8021376:	4613      	moveq	r3, r2
 8021378:	9307      	str	r3, [sp, #28]
 802137a:	e5fb      	b.n	8020f74 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802137c:	2900      	cmp	r1, #0
 802137e:	f43f ae6b 	beq.w	8021058 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8021382:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8021386:	9308      	str	r3, [sp, #32]
 8021388:	0e1b      	lsrs	r3, r3, #24
 802138a:	9311      	str	r3, [sp, #68]	; 0x44
 802138c:	e664      	b.n	8021058 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802138e:	f112 0801 	adds.w	r8, r2, #1
 8021392:	f53f af7b 	bmi.w	802128c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8021396:	4543      	cmp	r3, r8
 8021398:	f6ff af78 	blt.w	802128c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 802139c:	f11c 0801 	adds.w	r8, ip, #1
 80213a0:	f53f af74 	bmi.w	802128c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80213a4:	45c6      	cmp	lr, r8
 80213a6:	f6ff af71 	blt.w	802128c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80213aa:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80213ac:	b21b      	sxth	r3, r3
 80213ae:	9201      	str	r2, [sp, #4]
 80213b0:	fa0f f28e 	sxth.w	r2, lr
 80213b4:	e9cd 1504 	strd	r1, r5, [sp, #16]
 80213b8:	e9cd c002 	strd	ip, r0, [sp, #8]
 80213bc:	9200      	str	r2, [sp, #0]
 80213be:	4639      	mov	r1, r7
 80213c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80213c2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80213c4:	f7ff fc48 	bl	8020c58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 80213c8:	e760      	b.n	802128c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80213ca:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80213cc:	1427      	asrs	r7, r4, #16
 80213ce:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80213d0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80213d4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80213d8:	1433      	asrs	r3, r6, #16
 80213da:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80213de:	fb01 7303 	mla	r3, r1, r3, r7
 80213e2:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 80213e6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80213ea:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80213ee:	2a00      	cmp	r2, #0
 80213f0:	f000 8133 	beq.w	802165a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x742>
 80213f4:	687d      	ldr	r5, [r7, #4]
 80213f6:	950e      	str	r5, [sp, #56]	; 0x38
 80213f8:	0e2d      	lsrs	r5, r5, #24
 80213fa:	9515      	str	r5, [sp, #84]	; 0x54
 80213fc:	b178      	cbz	r0, 802141e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 80213fe:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8021402:	3901      	subs	r1, #1
 8021404:	0089      	lsls	r1, r1, #2
 8021406:	3104      	adds	r1, #4
 8021408:	eb07 0e01 	add.w	lr, r7, r1
 802140c:	5879      	ldr	r1, [r7, r1]
 802140e:	9109      	str	r1, [sp, #36]	; 0x24
 8021410:	0e09      	lsrs	r1, r1, #24
 8021412:	9112      	str	r1, [sp, #72]	; 0x48
 8021414:	f8de 1004 	ldr.w	r1, [lr, #4]
 8021418:	910f      	str	r1, [sp, #60]	; 0x3c
 802141a:	0e09      	lsrs	r1, r1, #24
 802141c:	9116      	str	r1, [sp, #88]	; 0x58
 802141e:	b292      	uxth	r2, r2
 8021420:	9915      	ldr	r1, [sp, #84]	; 0x54
 8021422:	b280      	uxth	r0, r0
 8021424:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021426:	fb02 f800 	mul.w	r8, r2, r0
 802142a:	0112      	lsls	r2, r2, #4
 802142c:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8021430:	eba2 0e08 	sub.w	lr, r2, r8
 8021434:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8021438:	b280      	uxth	r0, r0
 802143a:	fa1f fe8e 	uxth.w	lr, lr
 802143e:	1a12      	subs	r2, r2, r0
 8021440:	fb0e f101 	mul.w	r1, lr, r1
 8021444:	b292      	uxth	r2, r2
 8021446:	fb02 110c 	mla	r1, r2, ip, r1
 802144a:	fb00 1105 	mla	r1, r0, r5, r1
 802144e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8021450:	fb08 1105 	mla	r1, r8, r5, r1
 8021454:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021458:	2900      	cmp	r1, #0
 802145a:	f000 80f5 	beq.w	8021648 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 802145e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021462:	d019      	beq.n	8021498 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 8021464:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021468:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802146c:	fb0c fa0a 	mul.w	sl, ip, sl
 8021470:	fb0c fc03 	mul.w	ip, ip, r3
 8021474:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021478:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802147c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8021480:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021484:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021488:	4453      	add	r3, sl
 802148a:	0a3f      	lsrs	r7, r7, #8
 802148c:	0a1b      	lsrs	r3, r3, #8
 802148e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021492:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021496:	433b      	orrs	r3, r7
 8021498:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802149a:	2dff      	cmp	r5, #255	; 0xff
 802149c:	d020      	beq.n	80214e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 802149e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80214a0:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80214a4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80214a6:	436f      	muls	r7, r5
 80214a8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80214aa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80214ae:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80214b2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80214b4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80214b8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80214bc:	fb05 fa0a 	mul.w	sl, r5, sl
 80214c0:	44bc      	add	ip, r7
 80214c2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80214c6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80214ca:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80214ce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80214d2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80214d6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80214da:	ea4c 050a 	orr.w	r5, ip, sl
 80214de:	950e      	str	r5, [sp, #56]	; 0x38
 80214e0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80214e2:	2dff      	cmp	r5, #255	; 0xff
 80214e4:	d020      	beq.n	8021528 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 80214e6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80214e8:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80214ec:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80214ee:	436f      	muls	r7, r5
 80214f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80214f2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80214f6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80214fa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80214fc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021500:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021504:	fb05 fa0a 	mul.w	sl, r5, sl
 8021508:	44bc      	add	ip, r7
 802150a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802150e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021512:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021516:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802151a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802151e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021522:	ea4c 050a 	orr.w	r5, ip, sl
 8021526:	9509      	str	r5, [sp, #36]	; 0x24
 8021528:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802152a:	2dff      	cmp	r5, #255	; 0xff
 802152c:	d020      	beq.n	8021570 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 802152e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021530:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8021534:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8021536:	436f      	muls	r7, r5
 8021538:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802153a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802153e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021542:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8021544:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021548:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802154c:	fb05 fa0a 	mul.w	sl, r5, sl
 8021550:	44bc      	add	ip, r7
 8021552:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021556:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802155a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802155e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021562:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021566:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802156a:	ea4c 050a 	orr.w	r5, ip, sl
 802156e:	950f      	str	r5, [sp, #60]	; 0x3c
 8021570:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021572:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021576:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802157a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802157e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8021580:	fb0e f707 	mul.w	r7, lr, r7
 8021584:	fb02 770c 	mla	r7, r2, ip, r7
 8021588:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802158c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802158e:	fb00 770c 	mla	r7, r0, ip, r7
 8021592:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8021596:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021598:	fb08 770c 	mla	r7, r8, ip, r7
 802159c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80215a0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80215a2:	fb0e fe0c 	mul.w	lr, lr, ip
 80215a6:	0a3f      	lsrs	r7, r7, #8
 80215a8:	fb02 e303 	mla	r3, r2, r3, lr
 80215ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80215ae:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80215b2:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80215b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80215b8:	fb00 330a 	mla	r3, r0, sl, r3
 80215bc:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80215c0:	f8b9 0000 	ldrh.w	r0, [r9]
 80215c4:	fb08 3c0c 	mla	ip, r8, ip, r3
 80215c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80215ca:	1202      	asrs	r2, r0, #8
 80215cc:	4359      	muls	r1, r3
 80215ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80215d2:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80215d6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80215da:	1c4b      	adds	r3, r1, #1
 80215dc:	ea47 070c 	orr.w	r7, r7, ip
 80215e0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80215e4:	0c3b      	lsrs	r3, r7, #16
 80215e6:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80215ea:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80215ee:	b2ff      	uxtb	r7, r7
 80215f0:	fb13 f305 	smulbb	r3, r3, r5
 80215f4:	b2c9      	uxtb	r1, r1
 80215f6:	fb17 f705 	smulbb	r7, r7, r5
 80215fa:	fb02 3201 	mla	r2, r2, r1, r3
 80215fe:	10c3      	asrs	r3, r0, #3
 8021600:	fb1c fc05 	smulbb	ip, ip, r5
 8021604:	00c0      	lsls	r0, r0, #3
 8021606:	b292      	uxth	r2, r2
 8021608:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802160c:	b2c0      	uxtb	r0, r0
 802160e:	fb03 c301 	mla	r3, r3, r1, ip
 8021612:	fb00 7001 	mla	r0, r0, r1, r7
 8021616:	1c51      	adds	r1, r2, #1
 8021618:	b29b      	uxth	r3, r3
 802161a:	b280      	uxth	r0, r0
 802161c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021620:	f100 0c01 	add.w	ip, r0, #1
 8021624:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8021628:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 802162c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021630:	ea4c 0202 	orr.w	r2, ip, r2
 8021634:	f103 0c01 	add.w	ip, r3, #1
 8021638:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802163c:	095b      	lsrs	r3, r3, #5
 802163e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021642:	431a      	orrs	r2, r3
 8021644:	f8a9 2000 	strh.w	r2, [r9]
 8021648:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802164a:	f109 0902 	add.w	r9, r9, #2
 802164e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021652:	441c      	add	r4, r3
 8021654:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021656:	441e      	add	r6, r3
 8021658:	e647      	b.n	80212ea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 802165a:	2800      	cmp	r0, #0
 802165c:	f43f aedf 	beq.w	802141e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8021660:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8021664:	9109      	str	r1, [sp, #36]	; 0x24
 8021666:	0e09      	lsrs	r1, r1, #24
 8021668:	9112      	str	r1, [sp, #72]	; 0x48
 802166a:	e6d8      	b.n	802141e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 802166c:	b01d      	add	sp, #116	; 0x74
 802166e:	ecbd 8b08 	vpop	{d8-d11}
 8021672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021678 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8021678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802167c:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8021680:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8021684:	fb04 5603 	mla	r6, r4, r3, r5
 8021688:	2c00      	cmp	r4, #0
 802168a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 802168e:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8021692:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8021696:	db37      	blt.n	8021708 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 8021698:	45a6      	cmp	lr, r4
 802169a:	dd35      	ble.n	8021708 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 802169c:	2d00      	cmp	r5, #0
 802169e:	db31      	blt.n	8021704 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80216a0:	42ab      	cmp	r3, r5
 80216a2:	dd2f      	ble.n	8021704 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80216a4:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80216a8:	1c6e      	adds	r6, r5, #1
 80216aa:	d430      	bmi.n	802170e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 80216ac:	42b3      	cmp	r3, r6
 80216ae:	dd2e      	ble.n	802170e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 80216b0:	b378      	cbz	r0, 8021712 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9a>
 80216b2:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80216b6:	3401      	adds	r4, #1
 80216b8:	d42f      	bmi.n	802171a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 80216ba:	45a6      	cmp	lr, r4
 80216bc:	dd2d      	ble.n	802171a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 80216be:	b37f      	cbz	r7, 8021720 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa8>
 80216c0:	2d00      	cmp	r5, #0
 80216c2:	eb0c 0e83 	add.w	lr, ip, r3, lsl #2
 80216c6:	db26      	blt.n	8021716 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 80216c8:	42ab      	cmp	r3, r5
 80216ca:	dd24      	ble.n	8021716 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 80216cc:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80216d0:	3501      	adds	r5, #1
 80216d2:	d428      	bmi.n	8021726 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 80216d4:	42ab      	cmp	r3, r5
 80216d6:	dd26      	ble.n	8021726 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 80216d8:	b338      	cbz	r0, 802172a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb2>
 80216da:	f8de 3004 	ldr.w	r3, [lr, #4]
 80216de:	280f      	cmp	r0, #15
 80216e0:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80216e4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80216e8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80216ec:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80216f0:	d801      	bhi.n	80216f6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x7e>
 80216f2:	2f0f      	cmp	r7, #15
 80216f4:	d91b      	bls.n	802172e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb6>
 80216f6:	4b87      	ldr	r3, [pc, #540]	; (8021914 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 80216f8:	f240 11f9 	movw	r1, #505	; 0x1f9
 80216fc:	4a86      	ldr	r2, [pc, #536]	; (8021918 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 80216fe:	4887      	ldr	r0, [pc, #540]	; (802191c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 8021700:	f003 f97a 	bl	80249f8 <__assert_func>
 8021704:	2200      	movs	r2, #0
 8021706:	e7cf      	b.n	80216a8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x30>
 8021708:	2600      	movs	r6, #0
 802170a:	4632      	mov	r2, r6
 802170c:	e7d3      	b.n	80216b6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 802170e:	2600      	movs	r6, #0
 8021710:	e7d1      	b.n	80216b6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8021712:	4606      	mov	r6, r0
 8021714:	e7cf      	b.n	80216b6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8021716:	2400      	movs	r4, #0
 8021718:	e7da      	b.n	80216d0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x58>
 802171a:	2300      	movs	r3, #0
 802171c:	461c      	mov	r4, r3
 802171e:	e7de      	b.n	80216de <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8021720:	463b      	mov	r3, r7
 8021722:	463c      	mov	r4, r7
 8021724:	e7db      	b.n	80216de <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8021726:	2300      	movs	r3, #0
 8021728:	e7d9      	b.n	80216de <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 802172a:	4603      	mov	r3, r0
 802172c:	e7d7      	b.n	80216de <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 802172e:	b280      	uxth	r0, r0
 8021730:	b2bf      	uxth	r7, r7
 8021732:	fb07 fe00 	mul.w	lr, r7, r0
 8021736:	0100      	lsls	r0, r0, #4
 8021738:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802173c:	eba0 0c0e 	sub.w	ip, r0, lr
 8021740:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8021744:	b2bf      	uxth	r7, r7
 8021746:	fa1f fc8c 	uxth.w	ip, ip
 802174a:	1bed      	subs	r5, r5, r7
 802174c:	fb0c f00a 	mul.w	r0, ip, sl
 8021750:	b2ad      	uxth	r5, r5
 8021752:	fb0b 0005 	mla	r0, fp, r5, r0
 8021756:	fb07 0009 	mla	r0, r7, r9, r0
 802175a:	fb0e 0008 	mla	r0, lr, r8, r0
 802175e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021762:	9001      	str	r0, [sp, #4]
 8021764:	2800      	cmp	r0, #0
 8021766:	f000 80d1 	beq.w	802190c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x294>
 802176a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802176e:	d018      	beq.n	80217a2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x12a>
 8021770:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8021774:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021778:	fb0b f000 	mul.w	r0, fp, r0
 802177c:	fb0b fb02 	mul.w	fp, fp, r2
 8021780:	0a02      	lsrs	r2, r0, #8
 8021782:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8021786:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802178a:	4402      	add	r2, r0
 802178c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8021790:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8021794:	0a12      	lsrs	r2, r2, #8
 8021796:	0a00      	lsrs	r0, r0, #8
 8021798:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802179c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80217a0:	4302      	orrs	r2, r0
 80217a2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80217a6:	d01a      	beq.n	80217de <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x166>
 80217a8:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80217ac:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80217b0:	fb0a f000 	mul.w	r0, sl, r0
 80217b4:	fb0a fa06 	mul.w	sl, sl, r6
 80217b8:	0a06      	lsrs	r6, r0, #8
 80217ba:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80217be:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80217c2:	4406      	add	r6, r0
 80217c4:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80217c8:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80217cc:	0a36      	lsrs	r6, r6, #8
 80217ce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80217d2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80217d6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80217da:	ea46 060a 	orr.w	r6, r6, sl
 80217de:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80217e2:	d01b      	beq.n	802181c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1a4>
 80217e4:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80217e8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80217ec:	fb09 fa0a 	mul.w	sl, r9, sl
 80217f0:	fb09 f004 	mul.w	r0, r9, r4
 80217f4:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80217f8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80217fc:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8021800:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021804:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8021808:	4454      	add	r4, sl
 802180a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802180e:	0a24      	lsrs	r4, r4, #8
 8021810:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021814:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021818:	ea44 0409 	orr.w	r4, r4, r9
 802181c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021820:	d01b      	beq.n	802185a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1e2>
 8021822:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8021826:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802182a:	fb08 f909 	mul.w	r9, r8, r9
 802182e:	fb08 f003 	mul.w	r0, r8, r3
 8021832:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8021836:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802183a:	f500 7880 	add.w	r8, r0, #256	; 0x100
 802183e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021842:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8021846:	444b      	add	r3, r9
 8021848:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802184c:	0a1b      	lsrs	r3, r3, #8
 802184e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021852:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021856:	ea43 0308 	orr.w	r3, r3, r8
 802185a:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802185e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021862:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8021866:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802186a:	fb0c f808 	mul.w	r8, ip, r8
 802186e:	8808      	ldrh	r0, [r1, #0]
 8021870:	fb0c f606 	mul.w	r6, ip, r6
 8021874:	fb05 8909 	mla	r9, r5, r9, r8
 8021878:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 802187c:	fb05 6502 	mla	r5, r5, r2, r6
 8021880:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021884:	fb07 9908 	mla	r9, r7, r8, r9
 8021888:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 802188c:	fb07 5704 	mla	r7, r7, r4, r5
 8021890:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021894:	fb0e 9808 	mla	r8, lr, r8, r9
 8021898:	10c4      	asrs	r4, r0, #3
 802189a:	fb0e 7e03 	mla	lr, lr, r3, r7
 802189e:	9b01      	ldr	r3, [sp, #4]
 80218a0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80218a4:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80218a8:	43da      	mvns	r2, r3
 80218aa:	1203      	asrs	r3, r0, #8
 80218ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80218b0:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80218b4:	b2d2      	uxtb	r2, r2
 80218b6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80218ba:	00c0      	lsls	r0, r0, #3
 80218bc:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80218c0:	4353      	muls	r3, r2
 80218c2:	b2c0      	uxtb	r0, r0
 80218c4:	ea48 0e0e 	orr.w	lr, r8, lr
 80218c8:	4354      	muls	r4, r2
 80218ca:	4350      	muls	r0, r2
 80218cc:	1c5a      	adds	r2, r3, #1
 80218ce:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80218d2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80218d6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80218da:	1c62      	adds	r2, r4, #1
 80218dc:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80218e0:	ea4f 221e 	mov.w	r2, lr, lsr #8
 80218e4:	021b      	lsls	r3, r3, #8
 80218e6:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80218ea:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80218ee:	00d2      	lsls	r2, r2, #3
 80218f0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80218f4:	4313      	orrs	r3, r2
 80218f6:	1c42      	adds	r2, r0, #1
 80218f8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80218fc:	eb0e 2e10 	add.w	lr, lr, r0, lsr #8
 8021900:	f3ce 0ec4 	ubfx	lr, lr, #3, #5
 8021904:	ea4e 0e03 	orr.w	lr, lr, r3
 8021908:	f8a1 e000 	strh.w	lr, [r1]
 802190c:	b003      	add	sp, #12
 802190e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021912:	bf00      	nop
 8021914:	0802a0bb 	.word	0x0802a0bb
 8021918:	0802a5ea 	.word	0x0802a5ea
 802191c:	0802a088 	.word	0x0802a088

08021920 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021924:	ed2d 8b08 	vpush	{d8-d11}
 8021928:	b09b      	sub	sp, #108	; 0x6c
 802192a:	eeb0 aa40 	vmov.f32	s20, s0
 802192e:	eef0 9a60 	vmov.f32	s19, s1
 8021932:	9218      	str	r2, [sp, #96]	; 0x60
 8021934:	eeb0 9a41 	vmov.f32	s18, s2
 8021938:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802193a:	eeb0 8a62 	vmov.f32	s16, s5
 802193e:	9019      	str	r0, [sp, #100]	; 0x64
 8021940:	eef0 8a43 	vmov.f32	s17, s6
 8021944:	6850      	ldr	r0, [r2, #4]
 8021946:	eef0 ba44 	vmov.f32	s23, s8
 802194a:	9116      	str	r1, [sp, #88]	; 0x58
 802194c:	eeb0 ba64 	vmov.f32	s22, s9
 8021950:	9307      	str	r3, [sp, #28]
 8021952:	eef0 aa45 	vmov.f32	s21, s10
 8021956:	6812      	ldr	r2, [r2, #0]
 8021958:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 802195c:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 8021960:	fb00 1303 	mla	r3, r0, r3, r1
 8021964:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021968:	930a      	str	r3, [sp, #40]	; 0x28
 802196a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802196c:	681b      	ldr	r3, [r3, #0]
 802196e:	930f      	str	r3, [sp, #60]	; 0x3c
 8021970:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021972:	2b00      	cmp	r3, #0
 8021974:	dc03      	bgt.n	802197e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8021976:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021978:	2b00      	cmp	r3, #0
 802197a:	f340 8387 	ble.w	802208c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 802197e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021980:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021984:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021988:	1e48      	subs	r0, r1, #1
 802198a:	1e57      	subs	r7, r2, #1
 802198c:	9b07      	ldr	r3, [sp, #28]
 802198e:	2b00      	cmp	r3, #0
 8021990:	f340 8166 	ble.w	8021c60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8021994:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8021998:	ea4f 4326 	mov.w	r3, r6, asr #16
 802199c:	d406      	bmi.n	80219ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802199e:	4584      	cmp	ip, r0
 80219a0:	da04      	bge.n	80219ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80219a2:	2b00      	cmp	r3, #0
 80219a4:	db02      	blt.n	80219ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80219a6:	42bb      	cmp	r3, r7
 80219a8:	f2c0 815b 	blt.w	8021c62 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80219ac:	f11c 0c01 	adds.w	ip, ip, #1
 80219b0:	f100 814b 	bmi.w	8021c4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80219b4:	4561      	cmp	r1, ip
 80219b6:	f2c0 8148 	blt.w	8021c4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80219ba:	3301      	adds	r3, #1
 80219bc:	f100 8145 	bmi.w	8021c4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80219c0:	429a      	cmp	r2, r3
 80219c2:	f2c0 8142 	blt.w	8021c4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80219c6:	9b07      	ldr	r3, [sp, #28]
 80219c8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80219ca:	9317      	str	r3, [sp, #92]	; 0x5c
 80219cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80219ce:	2b00      	cmp	r3, #0
 80219d0:	f340 8165 	ble.w	8021c9e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80219d4:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80219d6:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80219da:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80219dc:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80219e0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80219e4:	1422      	asrs	r2, r4, #16
 80219e6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80219ea:	689b      	ldr	r3, [r3, #8]
 80219ec:	f100 81d5 	bmi.w	8021d9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80219f0:	f103 38ff 	add.w	r8, r3, #4294967295
 80219f4:	4542      	cmp	r2, r8
 80219f6:	f280 81d0 	bge.w	8021d9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80219fa:	f1bc 0f00 	cmp.w	ip, #0
 80219fe:	f2c0 81cc 	blt.w	8021d9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8021a02:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021a06:	45c4      	cmp	ip, r8
 8021a08:	f280 81c7 	bge.w	8021d9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8021a0c:	b21b      	sxth	r3, r3
 8021a0e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021a10:	fb0c 2203 	mla	r2, ip, r3, r2
 8021a14:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8021a18:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8021a1c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8021a20:	2900      	cmp	r1, #0
 8021a22:	f000 8182 	beq.w	8021d2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8021a26:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8021a2a:	950b      	str	r5, [sp, #44]	; 0x2c
 8021a2c:	0e2d      	lsrs	r5, r5, #24
 8021a2e:	9512      	str	r5, [sp, #72]	; 0x48
 8021a30:	b180      	cbz	r0, 8021a54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8021a32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8021a36:	3b01      	subs	r3, #1
 8021a38:	009b      	lsls	r3, r3, #2
 8021a3a:	3304      	adds	r3, #4
 8021a3c:	eb08 0c03 	add.w	ip, r8, r3
 8021a40:	f858 3003 	ldr.w	r3, [r8, r3]
 8021a44:	9308      	str	r3, [sp, #32]
 8021a46:	0e1b      	lsrs	r3, r3, #24
 8021a48:	9310      	str	r3, [sp, #64]	; 0x40
 8021a4a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8021a4e:	930c      	str	r3, [sp, #48]	; 0x30
 8021a50:	0e1b      	lsrs	r3, r3, #24
 8021a52:	9313      	str	r3, [sp, #76]	; 0x4c
 8021a54:	b289      	uxth	r1, r1
 8021a56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021a58:	b280      	uxth	r0, r0
 8021a5a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021a5c:	fb01 f900 	mul.w	r9, r1, r0
 8021a60:	0109      	lsls	r1, r1, #4
 8021a62:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021a66:	eba1 0809 	sub.w	r8, r1, r9
 8021a6a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8021a6e:	b280      	uxth	r0, r0
 8021a70:	fa1f f888 	uxth.w	r8, r8
 8021a74:	1a09      	subs	r1, r1, r0
 8021a76:	fb08 f303 	mul.w	r3, r8, r3
 8021a7a:	b289      	uxth	r1, r1
 8021a7c:	fb01 330e 	mla	r3, r1, lr, r3
 8021a80:	fb00 3305 	mla	r3, r0, r5, r3
 8021a84:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021a86:	fb09 3305 	mla	r3, r9, r5, r3
 8021a8a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021a8e:	2b00      	cmp	r3, #0
 8021a90:	f000 80d2 	beq.w	8021c38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8021a94:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021a98:	d01b      	beq.n	8021ad2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 8021a9a:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8021a9e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021aa2:	fb0e fa0a 	mul.w	sl, lr, sl
 8021aa6:	fb0e fe02 	mul.w	lr, lr, r2
 8021aaa:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8021aae:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021ab2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8021ab6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021aba:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021abe:	4452      	add	r2, sl
 8021ac0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021ac4:	0a12      	lsrs	r2, r2, #8
 8021ac6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021aca:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021ace:	ea42 020c 	orr.w	r2, r2, ip
 8021ad2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021ad4:	2dff      	cmp	r5, #255	; 0xff
 8021ad6:	d021      	beq.n	8021b1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8021ad8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021ada:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8021ade:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021ae0:	fb05 fb0b 	mul.w	fp, r5, fp
 8021ae4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021ae6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021aea:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021aec:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021af0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021af4:	fb05 fa0a 	mul.w	sl, r5, sl
 8021af8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021afc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021b00:	44de      	add	lr, fp
 8021b02:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021b06:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021b0a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021b0e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021b12:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021b16:	ea4e 050a 	orr.w	r5, lr, sl
 8021b1a:	950b      	str	r5, [sp, #44]	; 0x2c
 8021b1c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021b1e:	2dff      	cmp	r5, #255	; 0xff
 8021b20:	d021      	beq.n	8021b66 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8021b22:	9d08      	ldr	r5, [sp, #32]
 8021b24:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8021b28:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021b2a:	fb05 fb0b 	mul.w	fp, r5, fp
 8021b2e:	9d08      	ldr	r5, [sp, #32]
 8021b30:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8021b34:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021b36:	fb05 fa0e 	mul.w	sl, r5, lr
 8021b3a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021b3e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021b42:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021b46:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021b4a:	44de      	add	lr, fp
 8021b4c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021b50:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021b54:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021b58:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021b5c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021b60:	ea4e 050a 	orr.w	r5, lr, sl
 8021b64:	9508      	str	r5, [sp, #32]
 8021b66:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021b68:	2dff      	cmp	r5, #255	; 0xff
 8021b6a:	d021      	beq.n	8021bb0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8021b6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021b6e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8021b72:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021b74:	fb05 fb0b 	mul.w	fp, r5, fp
 8021b78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021b7a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021b7e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021b80:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021b84:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021b88:	fb05 fa0a 	mul.w	sl, r5, sl
 8021b8c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021b90:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021b94:	44de      	add	lr, fp
 8021b96:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021b9a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021b9e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021ba2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021ba6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021baa:	ea4e 050a 	orr.w	r5, lr, sl
 8021bae:	950c      	str	r5, [sp, #48]	; 0x30
 8021bb0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021bb2:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8021bb6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021bba:	2bff      	cmp	r3, #255	; 0xff
 8021bbc:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8021bc0:	9d08      	ldr	r5, [sp, #32]
 8021bc2:	fb08 fc0c 	mul.w	ip, r8, ip
 8021bc6:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021bca:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8021bce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021bd0:	fb00 cc0e 	mla	ip, r0, lr, ip
 8021bd4:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8021bd8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021bda:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021bde:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8021be2:	fb08 f80e 	mul.w	r8, r8, lr
 8021be6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021bea:	fb01 8202 	mla	r2, r1, r2, r8
 8021bee:	9908      	ldr	r1, [sp, #32]
 8021bf0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021bf4:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8021bf8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021bfa:	fb00 220a 	mla	r2, r0, sl, r2
 8021bfe:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8021c02:	fb09 2900 	mla	r9, r9, r0, r2
 8021c06:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021c0a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021c0e:	ea4c 0c09 	orr.w	ip, ip, r9
 8021c12:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8021c16:	f040 8091 	bne.w	8021d3c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 8021c1a:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8021c1e:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8021c22:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021c26:	f022 0207 	bic.w	r2, r2, #7
 8021c2a:	431a      	orrs	r2, r3
 8021c2c:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8021c30:	ea4c 0c02 	orr.w	ip, ip, r2
 8021c34:	f8a7 c000 	strh.w	ip, [r7]
 8021c38:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8021c3a:	3702      	adds	r7, #2
 8021c3c:	441c      	add	r4, r3
 8021c3e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021c40:	441e      	add	r6, r3
 8021c42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021c44:	3b01      	subs	r3, #1
 8021c46:	9317      	str	r3, [sp, #92]	; 0x5c
 8021c48:	e6c0      	b.n	80219cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8021c4a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8021c4c:	441c      	add	r4, r3
 8021c4e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021c50:	441e      	add	r6, r3
 8021c52:	9b07      	ldr	r3, [sp, #28]
 8021c54:	3b01      	subs	r3, #1
 8021c56:	9307      	str	r3, [sp, #28]
 8021c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021c5a:	3302      	adds	r3, #2
 8021c5c:	930a      	str	r3, [sp, #40]	; 0x28
 8021c5e:	e695      	b.n	802198c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021c60:	d024      	beq.n	8021cac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8021c62:	9b07      	ldr	r3, [sp, #28]
 8021c64:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8021c66:	3b01      	subs	r3, #1
 8021c68:	fb00 4003 	mla	r0, r0, r3, r4
 8021c6c:	1400      	asrs	r0, r0, #16
 8021c6e:	f53f aeaa 	bmi.w	80219c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8021c72:	3901      	subs	r1, #1
 8021c74:	4288      	cmp	r0, r1
 8021c76:	f6bf aea6 	bge.w	80219c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8021c7a:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8021c7c:	fb01 6303 	mla	r3, r1, r3, r6
 8021c80:	141b      	asrs	r3, r3, #16
 8021c82:	f53f aea0 	bmi.w	80219c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8021c86:	3a01      	subs	r2, #1
 8021c88:	4293      	cmp	r3, r2
 8021c8a:	f6bf ae9c 	bge.w	80219c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8021c8e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021c92:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8021c96:	f1bb 0f00 	cmp.w	fp, #0
 8021c9a:	f300 809a 	bgt.w	8021dd2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8021c9e:	9b07      	ldr	r3, [sp, #28]
 8021ca0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8021ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021ca6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8021caa:	930a      	str	r3, [sp, #40]	; 0x28
 8021cac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021cae:	2b00      	cmp	r3, #0
 8021cb0:	f340 81ec 	ble.w	802208c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 8021cb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021cb8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021cba:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021cbe:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021cc2:	eef0 6a48 	vmov.f32	s13, s16
 8021cc6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021cca:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021cce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021cd2:	ee16 4a90 	vmov	r4, s13
 8021cd6:	eef0 6a68 	vmov.f32	s13, s17
 8021cda:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021cde:	ee16 6a90 	vmov	r6, s13
 8021ce2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021ce6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021cea:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021cee:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021cf2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021cf6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021cfa:	ee18 2a10 	vmov	r2, s16
 8021cfe:	eeb0 8a47 	vmov.f32	s16, s14
 8021d02:	fb92 f3f3 	sdiv	r3, r2, r3
 8021d06:	ee18 2a90 	vmov	r2, s17
 8021d0a:	932f      	str	r3, [sp, #188]	; 0xbc
 8021d0c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021d0e:	eef0 8a67 	vmov.f32	s17, s15
 8021d12:	fb92 f3f3 	sdiv	r3, r2, r3
 8021d16:	9330      	str	r3, [sp, #192]	; 0xc0
 8021d18:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021d1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8021d1c:	3b01      	subs	r3, #1
 8021d1e:	9316      	str	r3, [sp, #88]	; 0x58
 8021d20:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021d22:	bf08      	it	eq
 8021d24:	4613      	moveq	r3, r2
 8021d26:	9307      	str	r3, [sp, #28]
 8021d28:	e622      	b.n	8021970 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8021d2a:	2800      	cmp	r0, #0
 8021d2c:	f43f ae92 	beq.w	8021a54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8021d30:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8021d34:	9308      	str	r3, [sp, #32]
 8021d36:	0e1b      	lsrs	r3, r3, #24
 8021d38:	9310      	str	r3, [sp, #64]	; 0x40
 8021d3a:	e68b      	b.n	8021a54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8021d3c:	8839      	ldrh	r1, [r7, #0]
 8021d3e:	43db      	mvns	r3, r3
 8021d40:	4dd5      	ldr	r5, [pc, #852]	; (8022098 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 8021d42:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8021d46:	fa5f f883 	uxtb.w	r8, r3
 8021d4a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8021d4e:	10c8      	asrs	r0, r1, #3
 8021d50:	00cb      	lsls	r3, r1, #3
 8021d52:	fb0e fe08 	mul.w	lr, lr, r8
 8021d56:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021d5a:	b2db      	uxtb	r3, r3
 8021d5c:	f10e 0101 	add.w	r1, lr, #1
 8021d60:	fb00 f008 	mul.w	r0, r0, r8
 8021d64:	fb03 f308 	mul.w	r3, r3, r8
 8021d68:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8021d6c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8021d70:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8021d74:	f100 0e01 	add.w	lr, r0, #1
 8021d78:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8021d7c:	b2c9      	uxtb	r1, r1
 8021d7e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021d82:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8021d86:	00d2      	lsls	r2, r2, #3
 8021d88:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021d8c:	430a      	orrs	r2, r1
 8021d8e:	1c59      	adds	r1, r3, #1
 8021d90:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021d94:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021d98:	e748      	b.n	8021c2c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8021d9a:	f112 0801 	adds.w	r8, r2, #1
 8021d9e:	f53f af4b 	bmi.w	8021c38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8021da2:	4543      	cmp	r3, r8
 8021da4:	f6ff af48 	blt.w	8021c38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8021da8:	f11c 0801 	adds.w	r8, ip, #1
 8021dac:	f53f af44 	bmi.w	8021c38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8021db0:	45c6      	cmp	lr, r8
 8021db2:	f6ff af41 	blt.w	8021c38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8021db6:	b21b      	sxth	r3, r3
 8021db8:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8021dbc:	fa0f f28e 	sxth.w	r2, lr
 8021dc0:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8021dc4:	9200      	str	r2, [sp, #0]
 8021dc6:	4639      	mov	r1, r7
 8021dc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021dca:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021dcc:	f7ff fc54 	bl	8021678 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8021dd0:	e732      	b.n	8021c38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8021dd2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021dd4:	1421      	asrs	r1, r4, #16
 8021dd6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021dd8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8021ddc:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8021de0:	1433      	asrs	r3, r6, #16
 8021de2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021de6:	fb07 1303 	mla	r3, r7, r3, r1
 8021dea:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021dec:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8021df0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8021df4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021df8:	2a00      	cmp	r2, #0
 8021dfa:	f000 8108 	beq.w	802200e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8021dfe:	684d      	ldr	r5, [r1, #4]
 8021e00:	950d      	str	r5, [sp, #52]	; 0x34
 8021e02:	0e2d      	lsrs	r5, r5, #24
 8021e04:	9514      	str	r5, [sp, #80]	; 0x50
 8021e06:	b178      	cbz	r0, 8021e28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8021e08:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8021e0c:	3f01      	subs	r7, #1
 8021e0e:	00bf      	lsls	r7, r7, #2
 8021e10:	3704      	adds	r7, #4
 8021e12:	eb01 0e07 	add.w	lr, r1, r7
 8021e16:	59c9      	ldr	r1, [r1, r7]
 8021e18:	9109      	str	r1, [sp, #36]	; 0x24
 8021e1a:	0e09      	lsrs	r1, r1, #24
 8021e1c:	9111      	str	r1, [sp, #68]	; 0x44
 8021e1e:	f8de 1004 	ldr.w	r1, [lr, #4]
 8021e22:	910e      	str	r1, [sp, #56]	; 0x38
 8021e24:	0e09      	lsrs	r1, r1, #24
 8021e26:	9115      	str	r1, [sp, #84]	; 0x54
 8021e28:	b292      	uxth	r2, r2
 8021e2a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021e2c:	b280      	uxth	r0, r0
 8021e2e:	fb02 f900 	mul.w	r9, r2, r0
 8021e32:	0112      	lsls	r2, r2, #4
 8021e34:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021e38:	eba2 0e09 	sub.w	lr, r2, r9
 8021e3c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8021e40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021e42:	b280      	uxth	r0, r0
 8021e44:	fa1f fe8e 	uxth.w	lr, lr
 8021e48:	1a09      	subs	r1, r1, r0
 8021e4a:	fb0e f202 	mul.w	r2, lr, r2
 8021e4e:	b289      	uxth	r1, r1
 8021e50:	fb01 220c 	mla	r2, r1, ip, r2
 8021e54:	fb00 2205 	mla	r2, r0, r5, r2
 8021e58:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8021e5a:	fb09 2205 	mla	r2, r9, r5, r2
 8021e5e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021e62:	2a00      	cmp	r2, #0
 8021e64:	f000 80ca 	beq.w	8021ffc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8021e68:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021e6c:	d019      	beq.n	8021ea2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x582>
 8021e6e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021e72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021e76:	fb0c fa0a 	mul.w	sl, ip, sl
 8021e7a:	fb0c fc03 	mul.w	ip, ip, r3
 8021e7e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021e82:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021e86:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8021e8a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021e8e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021e92:	4453      	add	r3, sl
 8021e94:	0a3f      	lsrs	r7, r7, #8
 8021e96:	0a1b      	lsrs	r3, r3, #8
 8021e98:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021e9c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021ea0:	433b      	orrs	r3, r7
 8021ea2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021ea4:	2dff      	cmp	r5, #255	; 0xff
 8021ea6:	d020      	beq.n	8021eea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 8021ea8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021eaa:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8021eae:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021eb0:	436f      	muls	r7, r5
 8021eb2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021eb4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021eb8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021ebc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021ebe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021ec2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021ec6:	fb05 fa0a 	mul.w	sl, r5, sl
 8021eca:	44bc      	add	ip, r7
 8021ecc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021ed0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021ed4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021ed8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021edc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021ee0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021ee4:	ea4c 050a 	orr.w	r5, ip, sl
 8021ee8:	950d      	str	r5, [sp, #52]	; 0x34
 8021eea:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021eec:	2dff      	cmp	r5, #255	; 0xff
 8021eee:	d020      	beq.n	8021f32 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x612>
 8021ef0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8021ef2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8021ef6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021ef8:	436f      	muls	r7, r5
 8021efa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8021efc:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8021f00:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021f02:	fb05 fa0c 	mul.w	sl, r5, ip
 8021f06:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021f0a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021f0e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021f12:	44bc      	add	ip, r7
 8021f14:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021f18:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021f1c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021f20:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021f24:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021f28:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021f2c:	ea4c 050a 	orr.w	r5, ip, sl
 8021f30:	9509      	str	r5, [sp, #36]	; 0x24
 8021f32:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8021f34:	2dff      	cmp	r5, #255	; 0xff
 8021f36:	d020      	beq.n	8021f7a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 8021f38:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021f3a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8021f3e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8021f40:	436f      	muls	r7, r5
 8021f42:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021f44:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021f48:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021f4c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8021f4e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021f52:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021f56:	fb05 fa0a 	mul.w	sl, r5, sl
 8021f5a:	44bc      	add	ip, r7
 8021f5c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021f60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021f64:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021f68:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021f6c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021f70:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021f74:	ea4c 050a 	orr.w	r5, ip, sl
 8021f78:	950e      	str	r5, [sp, #56]	; 0x38
 8021f7a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021f7c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021f80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021f84:	2aff      	cmp	r2, #255	; 0xff
 8021f86:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8021f8a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8021f8c:	fb0e f707 	mul.w	r7, lr, r7
 8021f90:	fb01 770c 	mla	r7, r1, ip, r7
 8021f94:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8021f98:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021f9a:	fb00 770c 	mla	r7, r0, ip, r7
 8021f9e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8021fa2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021fa4:	fb09 770c 	mla	r7, r9, ip, r7
 8021fa8:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8021fac:	fb0e fe0c 	mul.w	lr, lr, ip
 8021fb0:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8021fb4:	fb01 e303 	mla	r3, r1, r3, lr
 8021fb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021fba:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021fbe:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8021fc2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021fc4:	fb00 330a 	mla	r3, r0, sl, r3
 8021fc8:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8021fcc:	fb09 3c0c 	mla	ip, r9, ip, r3
 8021fd0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021fd4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021fd8:	ea47 070c 	orr.w	r7, r7, ip
 8021fdc:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8021fe0:	d11e      	bne.n	8022020 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x700>
 8021fe2:	097a      	lsrs	r2, r7, #5
 8021fe4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8021fe8:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8021fec:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021ff0:	f023 0307 	bic.w	r3, r3, #7
 8021ff4:	4313      	orrs	r3, r2
 8021ff6:	431f      	orrs	r7, r3
 8021ff8:	f8a8 7000 	strh.w	r7, [r8]
 8021ffc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8021ffe:	f108 0802 	add.w	r8, r8, #2
 8022002:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022006:	441c      	add	r4, r3
 8022008:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802200a:	441e      	add	r6, r3
 802200c:	e643      	b.n	8021c96 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 802200e:	2800      	cmp	r0, #0
 8022010:	f43f af0a 	beq.w	8021e28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8022014:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8022018:	9109      	str	r1, [sp, #36]	; 0x24
 802201a:	0e09      	lsrs	r1, r1, #24
 802201c:	9111      	str	r1, [sp, #68]	; 0x44
 802201e:	e703      	b.n	8021e28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8022020:	f8b8 1000 	ldrh.w	r1, [r8]
 8022024:	43d2      	mvns	r2, r2
 8022026:	ea4f 2c21 	mov.w	ip, r1, asr #8
 802202a:	fa5f fe82 	uxtb.w	lr, r2
 802202e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022032:	10c8      	asrs	r0, r1, #3
 8022034:	00ca      	lsls	r2, r1, #3
 8022036:	fb0c fc0e 	mul.w	ip, ip, lr
 802203a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802203e:	b2d2      	uxtb	r2, r2
 8022040:	f10c 0101 	add.w	r1, ip, #1
 8022044:	fb00 f00e 	mul.w	r0, r0, lr
 8022048:	fb02 f20e 	mul.w	r2, r2, lr
 802204c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8022050:	0c39      	lsrs	r1, r7, #16
 8022052:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8022056:	4910      	ldr	r1, [pc, #64]	; (8022098 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 8022058:	fa5f fc8c 	uxtb.w	ip, ip
 802205c:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8022060:	1c41      	adds	r1, r0, #1
 8022062:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8022066:	1c51      	adds	r1, r2, #1
 8022068:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802206c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022070:	00c0      	lsls	r0, r0, #3
 8022072:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8022076:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802207a:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802207e:	ea4c 0c00 	orr.w	ip, ip, r0
 8022082:	ea47 0c0c 	orr.w	ip, r7, ip
 8022086:	f8a8 c000 	strh.w	ip, [r8]
 802208a:	e7b7      	b.n	8021ffc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 802208c:	b01b      	add	sp, #108	; 0x6c
 802208e:	ecbd 8b08 	vpop	{d8-d11}
 8022092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022096:	bf00      	nop
 8022098:	fffff800 	.word	0xfffff800

0802209c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 802209c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80220a0:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 80220a4:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80220a8:	2c00      	cmp	r4, #0
 80220aa:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80220ae:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80220b2:	fb04 ce03 	mla	lr, r4, r3, ip
 80220b6:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 80220ba:	db60      	blt.n	802217e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 80220bc:	45a1      	cmp	r9, r4
 80220be:	dd5e      	ble.n	802217e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 80220c0:	f1bc 0f00 	cmp.w	ip, #0
 80220c4:	db59      	blt.n	802217a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 80220c6:	45e0      	cmp	r8, ip
 80220c8:	dd57      	ble.n	802217a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 80220ca:	ea4f 005e 	mov.w	r0, lr, lsr #1
 80220ce:	f01e 0f01 	tst.w	lr, #1
 80220d2:	5c16      	ldrb	r6, [r2, r0]
 80220d4:	bf0c      	ite	eq
 80220d6:	f006 060f 	andeq.w	r6, r6, #15
 80220da:	1136      	asrne	r6, r6, #4
 80220dc:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80220e0:	b2f6      	uxtb	r6, r6
 80220e2:	f11c 0001 	adds.w	r0, ip, #1
 80220e6:	d44d      	bmi.n	8022184 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 80220e8:	4580      	cmp	r8, r0
 80220ea:	dd4b      	ble.n	8022184 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 80220ec:	2d00      	cmp	r5, #0
 80220ee:	d04b      	beq.n	8022188 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 80220f0:	f10e 0a01 	add.w	sl, lr, #1
 80220f4:	ea4f 005a 	mov.w	r0, sl, lsr #1
 80220f8:	f01a 0f01 	tst.w	sl, #1
 80220fc:	5c10      	ldrb	r0, [r2, r0]
 80220fe:	bf0c      	ite	eq
 8022100:	f000 000f 	andeq.w	r0, r0, #15
 8022104:	1100      	asrne	r0, r0, #4
 8022106:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802210a:	b2c0      	uxtb	r0, r0
 802210c:	3401      	adds	r4, #1
 802210e:	d43f      	bmi.n	8022190 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8022110:	45a1      	cmp	r9, r4
 8022112:	dd3d      	ble.n	8022190 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8022114:	2f00      	cmp	r7, #0
 8022116:	f000 80a8 	beq.w	802226a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ce>
 802211a:	f1bc 0f00 	cmp.w	ip, #0
 802211e:	db35      	blt.n	802218c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8022120:	45e0      	cmp	r8, ip
 8022122:	dd33      	ble.n	802218c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8022124:	eb03 090e 	add.w	r9, r3, lr
 8022128:	ea4f 0459 	mov.w	r4, r9, lsr #1
 802212c:	f019 0f01 	tst.w	r9, #1
 8022130:	5d14      	ldrb	r4, [r2, r4]
 8022132:	bf0c      	ite	eq
 8022134:	f004 040f 	andeq.w	r4, r4, #15
 8022138:	1124      	asrne	r4, r4, #4
 802213a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802213e:	b2e4      	uxtb	r4, r4
 8022140:	f11c 0c01 	adds.w	ip, ip, #1
 8022144:	d427      	bmi.n	8022196 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8022146:	45e0      	cmp	r8, ip
 8022148:	dd25      	ble.n	8022196 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 802214a:	b335      	cbz	r5, 802219a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 802214c:	3301      	adds	r3, #1
 802214e:	449e      	add	lr, r3
 8022150:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022154:	f01e 0f01 	tst.w	lr, #1
 8022158:	5cd2      	ldrb	r2, [r2, r3]
 802215a:	bf0c      	ite	eq
 802215c:	f002 020f 	andeq.w	r2, r2, #15
 8022160:	1112      	asrne	r2, r2, #4
 8022162:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022166:	b2d3      	uxtb	r3, r2
 8022168:	2d0f      	cmp	r5, #15
 802216a:	d917      	bls.n	802219c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 802216c:	4b42      	ldr	r3, [pc, #264]	; (8022278 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1dc>)
 802216e:	f240 11f9 	movw	r1, #505	; 0x1f9
 8022172:	4a42      	ldr	r2, [pc, #264]	; (802227c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e0>)
 8022174:	4842      	ldr	r0, [pc, #264]	; (8022280 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e4>)
 8022176:	f002 fc3f 	bl	80249f8 <__assert_func>
 802217a:	2600      	movs	r6, #0
 802217c:	e7b1      	b.n	80220e2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 802217e:	2000      	movs	r0, #0
 8022180:	4606      	mov	r6, r0
 8022182:	e7c3      	b.n	802210c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8022184:	2000      	movs	r0, #0
 8022186:	e7c1      	b.n	802210c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8022188:	4628      	mov	r0, r5
 802218a:	e7bf      	b.n	802210c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 802218c:	2400      	movs	r4, #0
 802218e:	e7d7      	b.n	8022140 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 8022190:	2300      	movs	r3, #0
 8022192:	461c      	mov	r4, r3
 8022194:	e7e8      	b.n	8022168 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8022196:	2300      	movs	r3, #0
 8022198:	e7e6      	b.n	8022168 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 802219a:	462b      	mov	r3, r5
 802219c:	2f0f      	cmp	r7, #15
 802219e:	d8e5      	bhi.n	802216c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 80221a0:	b2ad      	uxth	r5, r5
 80221a2:	b2bf      	uxth	r7, r7
 80221a4:	fb05 fc07 	mul.w	ip, r5, r7
 80221a8:	012d      	lsls	r5, r5, #4
 80221aa:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 80221ae:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 80221b2:	eba5 050c 	sub.w	r5, r5, ip
 80221b6:	b2bf      	uxth	r7, r7
 80221b8:	b2ad      	uxth	r5, r5
 80221ba:	1bd2      	subs	r2, r2, r7
 80221bc:	4368      	muls	r0, r5
 80221be:	b292      	uxth	r2, r2
 80221c0:	fb06 0002 	mla	r0, r6, r2, r0
 80221c4:	fb07 0404 	mla	r4, r7, r4, r0
 80221c8:	fb0c 4303 	mla	r3, ip, r3, r4
 80221cc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80221d0:	b1b3      	cbz	r3, 8022200 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 80221d2:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80221d6:	435a      	muls	r2, r3
 80221d8:	1c53      	adds	r3, r2, #1
 80221da:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80221de:	4a29      	ldr	r2, [pc, #164]	; (8022284 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e8>)
 80221e0:	121b      	asrs	r3, r3, #8
 80221e2:	6812      	ldr	r2, [r2, #0]
 80221e4:	2bff      	cmp	r3, #255	; 0xff
 80221e6:	ea4f 2612 	mov.w	r6, r2, lsr #8
 80221ea:	d10b      	bne.n	8022204 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x168>
 80221ec:	0950      	lsrs	r0, r2, #5
 80221ee:	4b26      	ldr	r3, [pc, #152]	; (8022288 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ec>)
 80221f0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80221f4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80221f8:	4033      	ands	r3, r6
 80221fa:	4318      	orrs	r0, r3
 80221fc:	4302      	orrs	r2, r0
 80221fe:	800a      	strh	r2, [r1, #0]
 8022200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022204:	880d      	ldrh	r5, [r1, #0]
 8022206:	b29f      	uxth	r7, r3
 8022208:	f3c2 4007 	ubfx	r0, r2, #16, #8
 802220c:	43db      	mvns	r3, r3
 802220e:	122c      	asrs	r4, r5, #8
 8022210:	fb10 f007 	smulbb	r0, r0, r7
 8022214:	b2db      	uxtb	r3, r3
 8022216:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802221a:	b2f6      	uxtb	r6, r6
 802221c:	b2d2      	uxtb	r2, r2
 802221e:	fb04 0403 	mla	r4, r4, r3, r0
 8022222:	10e8      	asrs	r0, r5, #3
 8022224:	fb12 f207 	smulbb	r2, r2, r7
 8022228:	00ed      	lsls	r5, r5, #3
 802222a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802222e:	b2a4      	uxth	r4, r4
 8022230:	fb16 f607 	smulbb	r6, r6, r7
 8022234:	b2ed      	uxtb	r5, r5
 8022236:	fb00 6603 	mla	r6, r0, r3, r6
 802223a:	fb05 2303 	mla	r3, r5, r3, r2
 802223e:	b2b0      	uxth	r0, r6
 8022240:	b29a      	uxth	r2, r3
 8022242:	1c63      	adds	r3, r4, #1
 8022244:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8022248:	1c53      	adds	r3, r2, #1
 802224a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802224e:	1c42      	adds	r2, r0, #1
 8022250:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8022254:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022258:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802225c:	0940      	lsrs	r0, r0, #5
 802225e:	4323      	orrs	r3, r4
 8022260:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022264:	4303      	orrs	r3, r0
 8022266:	800b      	strh	r3, [r1, #0]
 8022268:	e7ca      	b.n	8022200 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 802226a:	2d0f      	cmp	r5, #15
 802226c:	f63f af7e 	bhi.w	802216c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8022270:	463b      	mov	r3, r7
 8022272:	463c      	mov	r4, r7
 8022274:	e794      	b.n	80221a0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 8022276:	bf00      	nop
 8022278:	0802a0bb 	.word	0x0802a0bb
 802227c:	0802a5ea 	.word	0x0802a5ea
 8022280:	0802a088 	.word	0x0802a088
 8022284:	20021000 	.word	0x20021000
 8022288:	00fff800 	.word	0x00fff800

0802228c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802228c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022290:	ed2d 8b08 	vpush	{d8-d11}
 8022294:	b097      	sub	sp, #92	; 0x5c
 8022296:	eeb0 aa40 	vmov.f32	s20, s0
 802229a:	eef0 9a60 	vmov.f32	s19, s1
 802229e:	9214      	str	r2, [sp, #80]	; 0x50
 80222a0:	eeb0 9a41 	vmov.f32	s18, s2
 80222a4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80222a6:	eeb0 8a62 	vmov.f32	s16, s5
 80222aa:	9309      	str	r3, [sp, #36]	; 0x24
 80222ac:	eef0 8a43 	vmov.f32	s17, s6
 80222b0:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80222b4:	eef0 ba44 	vmov.f32	s23, s8
 80222b8:	9015      	str	r0, [sp, #84]	; 0x54
 80222ba:	eeb0 ba64 	vmov.f32	s22, s9
 80222be:	6850      	ldr	r0, [r2, #4]
 80222c0:	eef0 aa45 	vmov.f32	s21, s10
 80222c4:	910d      	str	r1, [sp, #52]	; 0x34
 80222c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80222c8:	6812      	ldr	r2, [r2, #0]
 80222ca:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80222ce:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 80222d2:	fb00 1303 	mla	r3, r0, r3, r1
 80222d6:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80222da:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80222dc:	689b      	ldr	r3, [r3, #8]
 80222de:	3301      	adds	r3, #1
 80222e0:	f023 0301 	bic.w	r3, r3, #1
 80222e4:	930a      	str	r3, [sp, #40]	; 0x28
 80222e6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80222e8:	681f      	ldr	r7, [r3, #0]
 80222ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80222ec:	2b00      	cmp	r3, #0
 80222ee:	dc03      	bgt.n	80222f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80222f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80222f2:	2b00      	cmp	r3, #0
 80222f4:	f340 8289 	ble.w	802280a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 80222f8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80222fa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80222fe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022302:	1e48      	subs	r0, r1, #1
 8022304:	f102 3cff 	add.w	ip, r2, #4294967295
 8022308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802230a:	2b00      	cmp	r3, #0
 802230c:	f340 80c5 	ble.w	802249a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8022310:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022314:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022318:	d406      	bmi.n	8022328 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802231a:	4586      	cmp	lr, r0
 802231c:	da04      	bge.n	8022328 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802231e:	2b00      	cmp	r3, #0
 8022320:	db02      	blt.n	8022328 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8022322:	4563      	cmp	r3, ip
 8022324:	f2c0 80ba 	blt.w	802249c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8022328:	f11e 0e01 	adds.w	lr, lr, #1
 802232c:	f100 80ab 	bmi.w	8022486 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8022330:	4571      	cmp	r1, lr
 8022332:	f2c0 80a8 	blt.w	8022486 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8022336:	3301      	adds	r3, #1
 8022338:	f100 80a5 	bmi.w	8022486 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802233c:	429a      	cmp	r2, r3
 802233e:	f2c0 80a2 	blt.w	8022486 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8022342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022344:	46c8      	mov	r8, r9
 8022346:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 802234a:	930e      	str	r3, [sp, #56]	; 0x38
 802234c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802234e:	2b00      	cmp	r3, #0
 8022350:	f340 80c4 	ble.w	80224dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8022354:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022356:	1430      	asrs	r0, r6, #16
 8022358:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802235c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022360:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8022364:	1423      	asrs	r3, r4, #16
 8022366:	f100 814f 	bmi.w	8022608 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802236a:	f10c 3bff 	add.w	fp, ip, #4294967295
 802236e:	455b      	cmp	r3, fp
 8022370:	f280 814a 	bge.w	8022608 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8022374:	2800      	cmp	r0, #0
 8022376:	f2c0 8147 	blt.w	8022608 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802237a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802237e:	4558      	cmp	r0, fp
 8022380:	f280 8142 	bge.w	8022608 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8022384:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8022386:	fb00 3305 	mla	r3, r0, r5, r3
 802238a:	0858      	lsrs	r0, r3, #1
 802238c:	07dd      	lsls	r5, r3, #31
 802238e:	f817 c000 	ldrb.w	ip, [r7, r0]
 8022392:	bf54      	ite	pl
 8022394:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022398:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802239c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80223a0:	fa5f fc8c 	uxtb.w	ip, ip
 80223a4:	2a00      	cmp	r2, #0
 80223a6:	f000 80dd 	beq.w	8022564 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80223aa:	1c58      	adds	r0, r3, #1
 80223ac:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80223b0:	07c0      	lsls	r0, r0, #31
 80223b2:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80223b6:	bf54      	ite	pl
 80223b8:	f00e 0e0f 	andpl.w	lr, lr, #15
 80223bc:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80223c0:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80223c4:	fa5f f08e 	uxtb.w	r0, lr
 80223c8:	9010      	str	r0, [sp, #64]	; 0x40
 80223ca:	b1d9      	cbz	r1, 8022404 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 80223cc:	4453      	add	r3, sl
 80223ce:	0858      	lsrs	r0, r3, #1
 80223d0:	07dd      	lsls	r5, r3, #31
 80223d2:	f103 0301 	add.w	r3, r3, #1
 80223d6:	5c38      	ldrb	r0, [r7, r0]
 80223d8:	bf54      	ite	pl
 80223da:	f000 000f 	andpl.w	r0, r0, #15
 80223de:	1100      	asrmi	r0, r0, #4
 80223e0:	07dd      	lsls	r5, r3, #31
 80223e2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80223e6:	b2c0      	uxtb	r0, r0
 80223e8:	900b      	str	r0, [sp, #44]	; 0x2c
 80223ea:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80223ee:	f817 e000 	ldrb.w	lr, [r7, r0]
 80223f2:	bf54      	ite	pl
 80223f4:	f00e 030f 	andpl.w	r3, lr, #15
 80223f8:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80223fc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022400:	b2db      	uxtb	r3, r3
 8022402:	9311      	str	r3, [sp, #68]	; 0x44
 8022404:	b292      	uxth	r2, r2
 8022406:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8022408:	b289      	uxth	r1, r1
 802240a:	fb02 f301 	mul.w	r3, r2, r1
 802240e:	0112      	lsls	r2, r2, #4
 8022410:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8022414:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8022418:	1ad2      	subs	r2, r2, r3
 802241a:	b289      	uxth	r1, r1
 802241c:	b292      	uxth	r2, r2
 802241e:	1a40      	subs	r0, r0, r1
 8022420:	436a      	muls	r2, r5
 8022422:	b280      	uxth	r0, r0
 8022424:	fb0c 2c00 	mla	ip, ip, r0, r2
 8022428:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802242a:	fb01 c102 	mla	r1, r1, r2, ip
 802242e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022430:	fb03 1302 	mla	r3, r3, r2, r1
 8022434:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022438:	b1db      	cbz	r3, 8022472 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802243a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802243c:	4353      	muls	r3, r2
 802243e:	1c5a      	adds	r2, r3, #1
 8022440:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022444:	4ac6      	ldr	r2, [pc, #792]	; (8022760 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8022446:	121b      	asrs	r3, r3, #8
 8022448:	6812      	ldr	r2, [r2, #0]
 802244a:	2bff      	cmp	r3, #255	; 0xff
 802244c:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8022450:	f040 8099 	bne.w	8022586 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8022454:	0953      	lsrs	r3, r2, #5
 8022456:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802245a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802245e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022462:	f02c 0c07 	bic.w	ip, ip, #7
 8022466:	ea43 0c0c 	orr.w	ip, r3, ip
 802246a:	ea4c 0202 	orr.w	r2, ip, r2
 802246e:	f8a8 2000 	strh.w	r2, [r8]
 8022472:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022474:	f108 0802 	add.w	r8, r8, #2
 8022478:	441c      	add	r4, r3
 802247a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802247c:	441e      	add	r6, r3
 802247e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022480:	3b01      	subs	r3, #1
 8022482:	930e      	str	r3, [sp, #56]	; 0x38
 8022484:	e762      	b.n	802234c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8022486:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022488:	f109 0902 	add.w	r9, r9, #2
 802248c:	441c      	add	r4, r3
 802248e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022490:	441e      	add	r6, r3
 8022492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022494:	3b01      	subs	r3, #1
 8022496:	9309      	str	r3, [sp, #36]	; 0x24
 8022498:	e736      	b.n	8022308 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802249a:	d024      	beq.n	80224e6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802249c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802249e:	982b      	ldr	r0, [sp, #172]	; 0xac
 80224a0:	3b01      	subs	r3, #1
 80224a2:	fb00 4003 	mla	r0, r0, r3, r4
 80224a6:	1400      	asrs	r0, r0, #16
 80224a8:	f53f af4b 	bmi.w	8022342 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80224ac:	3901      	subs	r1, #1
 80224ae:	4288      	cmp	r0, r1
 80224b0:	f6bf af47 	bge.w	8022342 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80224b4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80224b6:	fb01 6303 	mla	r3, r1, r3, r6
 80224ba:	141b      	asrs	r3, r3, #16
 80224bc:	f53f af41 	bmi.w	8022342 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80224c0:	3a01      	subs	r2, #1
 80224c2:	4293      	cmp	r3, r2
 80224c4:	f6bf af3d 	bge.w	8022342 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80224c8:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80224cc:	46c8      	mov	r8, r9
 80224ce:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80224d2:	930e      	str	r3, [sp, #56]	; 0x38
 80224d4:	f1bb 0f00 	cmp.w	fp, #0
 80224d8:	f300 80b7 	bgt.w	802264a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 80224dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80224de:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80224e2:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80224e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80224e8:	2b00      	cmp	r3, #0
 80224ea:	f340 818e 	ble.w	802280a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 80224ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80224f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80224f4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80224f8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80224fc:	eef0 6a48 	vmov.f32	s13, s16
 8022500:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022504:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022508:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802250c:	ee16 4a90 	vmov	r4, s13
 8022510:	eef0 6a68 	vmov.f32	s13, s17
 8022514:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022518:	ee16 6a90 	vmov	r6, s13
 802251c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022520:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022524:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022528:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802252c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022530:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022534:	ee18 2a10 	vmov	r2, s16
 8022538:	eeb0 8a47 	vmov.f32	s16, s14
 802253c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022540:	ee18 2a90 	vmov	r2, s17
 8022544:	932b      	str	r3, [sp, #172]	; 0xac
 8022546:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022548:	eef0 8a67 	vmov.f32	s17, s15
 802254c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022550:	932c      	str	r3, [sp, #176]	; 0xb0
 8022552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022554:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022556:	3b01      	subs	r3, #1
 8022558:	930d      	str	r3, [sp, #52]	; 0x34
 802255a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802255c:	bf08      	it	eq
 802255e:	4613      	moveq	r3, r2
 8022560:	9309      	str	r3, [sp, #36]	; 0x24
 8022562:	e6c2      	b.n	80222ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8022564:	2900      	cmp	r1, #0
 8022566:	f43f af4d 	beq.w	8022404 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 802256a:	eb0a 0003 	add.w	r0, sl, r3
 802256e:	0843      	lsrs	r3, r0, #1
 8022570:	07c0      	lsls	r0, r0, #31
 8022572:	5cfb      	ldrb	r3, [r7, r3]
 8022574:	bf54      	ite	pl
 8022576:	f003 030f 	andpl.w	r3, r3, #15
 802257a:	111b      	asrmi	r3, r3, #4
 802257c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022580:	b2db      	uxtb	r3, r3
 8022582:	930b      	str	r3, [sp, #44]	; 0x2c
 8022584:	e73e      	b.n	8022404 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 8022586:	f8b8 e000 	ldrh.w	lr, [r8]
 802258a:	fa1f fb83 	uxth.w	fp, r3
 802258e:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8022592:	43db      	mvns	r3, r3
 8022594:	ea4f 202e 	mov.w	r0, lr, asr #8
 8022598:	fb11 f10b 	smulbb	r1, r1, fp
 802259c:	b2db      	uxtb	r3, r3
 802259e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80225a2:	fa5f fc8c 	uxtb.w	ip, ip
 80225a6:	b2d2      	uxtb	r2, r2
 80225a8:	fb00 1003 	mla	r0, r0, r3, r1
 80225ac:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80225b0:	fb1c fc0b 	smulbb	ip, ip, fp
 80225b4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80225b8:	b280      	uxth	r0, r0
 80225ba:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80225be:	fb12 fb0b 	smulbb	fp, r2, fp
 80225c2:	fa5f fe8e 	uxtb.w	lr, lr
 80225c6:	fb01 cc03 	mla	ip, r1, r3, ip
 80225ca:	fb0e bb03 	mla	fp, lr, r3, fp
 80225ce:	1c43      	adds	r3, r0, #1
 80225d0:	fa1f fc8c 	uxth.w	ip, ip
 80225d4:	fa1f fb8b 	uxth.w	fp, fp
 80225d8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80225dc:	f10c 0101 	add.w	r1, ip, #1
 80225e0:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 80225e4:	f10b 0001 	add.w	r0, fp, #1
 80225e8:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80225ec:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80225f0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80225f4:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80225f8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80225fc:	4318      	orrs	r0, r3
 80225fe:	ea40 000c 	orr.w	r0, r0, ip
 8022602:	f8a8 0000 	strh.w	r0, [r8]
 8022606:	e734      	b.n	8022472 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8022608:	f113 0b01 	adds.w	fp, r3, #1
 802260c:	f53f af31 	bmi.w	8022472 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8022610:	45dc      	cmp	ip, fp
 8022612:	f6ff af2e 	blt.w	8022472 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8022616:	f110 0b01 	adds.w	fp, r0, #1
 802261a:	f53f af2a 	bmi.w	8022472 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802261e:	45de      	cmp	lr, fp
 8022620:	f6ff af27 	blt.w	8022472 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8022624:	9302      	str	r3, [sp, #8]
 8022626:	fa0f f38e 	sxth.w	r3, lr
 802262a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802262c:	9301      	str	r3, [sp, #4]
 802262e:	fa0f f38c 	sxth.w	r3, ip
 8022632:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8022636:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802263a:	9300      	str	r3, [sp, #0]
 802263c:	463a      	mov	r2, r7
 802263e:	4653      	mov	r3, sl
 8022640:	4641      	mov	r1, r8
 8022642:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022644:	f7ff fd2a 	bl	802209c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8022648:	e713      	b.n	8022472 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802264a:	1422      	asrs	r2, r4, #16
 802264c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802264e:	1433      	asrs	r3, r6, #16
 8022650:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8022654:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022658:	fb05 2303 	mla	r3, r5, r3, r2
 802265c:	085a      	lsrs	r2, r3, #1
 802265e:	07dd      	lsls	r5, r3, #31
 8022660:	5cba      	ldrb	r2, [r7, r2]
 8022662:	bf54      	ite	pl
 8022664:	f002 020f 	andpl.w	r2, r2, #15
 8022668:	1112      	asrmi	r2, r2, #4
 802266a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802266e:	b2d2      	uxtb	r2, r2
 8022670:	2900      	cmp	r1, #0
 8022672:	d077      	beq.n	8022764 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8022674:	f103 0e01 	add.w	lr, r3, #1
 8022678:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802267c:	f01e 0f01 	tst.w	lr, #1
 8022680:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022684:	bf0c      	ite	eq
 8022686:	f00c 0c0f 	andeq.w	ip, ip, #15
 802268a:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802268e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022692:	fa5f f58c 	uxtb.w	r5, ip
 8022696:	9512      	str	r5, [sp, #72]	; 0x48
 8022698:	b308      	cbz	r0, 80226de <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802269a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802269c:	442b      	add	r3, r5
 802269e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80226a2:	07dd      	lsls	r5, r3, #31
 80226a4:	f103 0301 	add.w	r3, r3, #1
 80226a8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80226ac:	bf54      	ite	pl
 80226ae:	f00c 0c0f 	andpl.w	ip, ip, #15
 80226b2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80226b6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80226ba:	fa5f f58c 	uxtb.w	r5, ip
 80226be:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80226c2:	950c      	str	r5, [sp, #48]	; 0x30
 80226c4:	07dd      	lsls	r5, r3, #31
 80226c6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80226ca:	bf54      	ite	pl
 80226cc:	f00c 0c0f 	andpl.w	ip, ip, #15
 80226d0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80226d4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80226d8:	fa5f f38c 	uxtb.w	r3, ip
 80226dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80226de:	b289      	uxth	r1, r1
 80226e0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80226e2:	b280      	uxth	r0, r0
 80226e4:	fb01 f300 	mul.w	r3, r1, r0
 80226e8:	0109      	lsls	r1, r1, #4
 80226ea:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80226ee:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80226f2:	1ac9      	subs	r1, r1, r3
 80226f4:	b280      	uxth	r0, r0
 80226f6:	b289      	uxth	r1, r1
 80226f8:	ebac 0c00 	sub.w	ip, ip, r0
 80226fc:	4369      	muls	r1, r5
 80226fe:	fa1f fc8c 	uxth.w	ip, ip
 8022702:	fb02 120c 	mla	r2, r2, ip, r1
 8022706:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022708:	fb00 2001 	mla	r0, r0, r1, r2
 802270c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802270e:	fb03 0302 	mla	r3, r3, r2, r0
 8022712:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022716:	b1d3      	cbz	r3, 802274e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8022718:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802271a:	4353      	muls	r3, r2
 802271c:	1c5a      	adds	r2, r3, #1
 802271e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022722:	4a0f      	ldr	r2, [pc, #60]	; (8022760 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8022724:	121b      	asrs	r3, r3, #8
 8022726:	6812      	ldr	r2, [r2, #0]
 8022728:	2bff      	cmp	r3, #255	; 0xff
 802272a:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802272e:	d12d      	bne.n	802278c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8022730:	0953      	lsrs	r3, r2, #5
 8022732:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8022736:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802273a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802273e:	f02c 0c07 	bic.w	ip, ip, #7
 8022742:	ea43 0c0c 	orr.w	ip, r3, ip
 8022746:	ea4c 0202 	orr.w	r2, ip, r2
 802274a:	f8a8 2000 	strh.w	r2, [r8]
 802274e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022750:	f108 0802 	add.w	r8, r8, #2
 8022754:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022758:	441c      	add	r4, r3
 802275a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802275c:	441e      	add	r6, r3
 802275e:	e6b9      	b.n	80224d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8022760:	20021000 	.word	0x20021000
 8022764:	2800      	cmp	r0, #0
 8022766:	d0ba      	beq.n	80226de <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8022768:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802276a:	442b      	add	r3, r5
 802276c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022770:	07db      	lsls	r3, r3, #31
 8022772:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022776:	bf54      	ite	pl
 8022778:	f00c 0c0f 	andpl.w	ip, ip, #15
 802277c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022780:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022784:	fa5f f38c 	uxtb.w	r3, ip
 8022788:	930c      	str	r3, [sp, #48]	; 0x30
 802278a:	e7a8      	b.n	80226de <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802278c:	f8b8 e000 	ldrh.w	lr, [r8]
 8022790:	fa1f fa83 	uxth.w	sl, r3
 8022794:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8022798:	43db      	mvns	r3, r3
 802279a:	ea4f 202e 	mov.w	r0, lr, asr #8
 802279e:	fb11 f10a 	smulbb	r1, r1, sl
 80227a2:	b2db      	uxtb	r3, r3
 80227a4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80227a8:	b2d2      	uxtb	r2, r2
 80227aa:	fa5f fc8c 	uxtb.w	ip, ip
 80227ae:	fb00 1003 	mla	r0, r0, r3, r1
 80227b2:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80227b6:	fb12 f20a 	smulbb	r2, r2, sl
 80227ba:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80227be:	b280      	uxth	r0, r0
 80227c0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80227c4:	fb1c fc0a 	smulbb	ip, ip, sl
 80227c8:	fa5f fe8e 	uxtb.w	lr, lr
 80227cc:	fb0e 2203 	mla	r2, lr, r3, r2
 80227d0:	fb01 cc03 	mla	ip, r1, r3, ip
 80227d4:	1c43      	adds	r3, r0, #1
 80227d6:	b292      	uxth	r2, r2
 80227d8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80227dc:	1c51      	adds	r1, r2, #1
 80227de:	fa1f fc8c 	uxth.w	ip, ip
 80227e2:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80227e6:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80227ea:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80227ee:	4308      	orrs	r0, r1
 80227f0:	f10c 0101 	add.w	r1, ip, #1
 80227f4:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80227f8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80227fc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022800:	ea40 000c 	orr.w	r0, r0, ip
 8022804:	f8a8 0000 	strh.w	r0, [r8]
 8022808:	e7a1      	b.n	802274e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802280a:	b017      	add	sp, #92	; 0x5c
 802280c:	ecbd 8b08 	vpop	{d8-d11}
 8022810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022814 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8022814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022818:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 802281c:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8022820:	2c00      	cmp	r4, #0
 8022822:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8022826:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802282a:	fb04 ce03 	mla	lr, r4, r3, ip
 802282e:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8022832:	db60      	blt.n	80228f6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8022834:	45a1      	cmp	r9, r4
 8022836:	dd5e      	ble.n	80228f6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8022838:	f1bc 0f00 	cmp.w	ip, #0
 802283c:	db59      	blt.n	80228f2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802283e:	45e0      	cmp	r8, ip
 8022840:	dd57      	ble.n	80228f2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8022842:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8022846:	f01e 0f01 	tst.w	lr, #1
 802284a:	5c16      	ldrb	r6, [r2, r0]
 802284c:	bf0c      	ite	eq
 802284e:	f006 060f 	andeq.w	r6, r6, #15
 8022852:	1136      	asrne	r6, r6, #4
 8022854:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022858:	b2f6      	uxtb	r6, r6
 802285a:	f11c 0001 	adds.w	r0, ip, #1
 802285e:	d44d      	bmi.n	80228fc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8022860:	4580      	cmp	r8, r0
 8022862:	dd4b      	ble.n	80228fc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8022864:	2d00      	cmp	r5, #0
 8022866:	d04b      	beq.n	8022900 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 8022868:	f10e 0a01 	add.w	sl, lr, #1
 802286c:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8022870:	f01a 0f01 	tst.w	sl, #1
 8022874:	5c10      	ldrb	r0, [r2, r0]
 8022876:	bf0c      	ite	eq
 8022878:	f000 000f 	andeq.w	r0, r0, #15
 802287c:	1100      	asrne	r0, r0, #4
 802287e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022882:	b2c0      	uxtb	r0, r0
 8022884:	3401      	adds	r4, #1
 8022886:	d43f      	bmi.n	8022908 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8022888:	45a1      	cmp	r9, r4
 802288a:	dd3d      	ble.n	8022908 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 802288c:	2f00      	cmp	r7, #0
 802288e:	f000 8093 	beq.w	80229b8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8022892:	f1bc 0f00 	cmp.w	ip, #0
 8022896:	db35      	blt.n	8022904 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8022898:	45e0      	cmp	r8, ip
 802289a:	dd33      	ble.n	8022904 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 802289c:	eb03 090e 	add.w	r9, r3, lr
 80228a0:	ea4f 0459 	mov.w	r4, r9, lsr #1
 80228a4:	f019 0f01 	tst.w	r9, #1
 80228a8:	5d14      	ldrb	r4, [r2, r4]
 80228aa:	bf0c      	ite	eq
 80228ac:	f004 040f 	andeq.w	r4, r4, #15
 80228b0:	1124      	asrne	r4, r4, #4
 80228b2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80228b6:	b2e4      	uxtb	r4, r4
 80228b8:	f11c 0c01 	adds.w	ip, ip, #1
 80228bc:	d427      	bmi.n	802290e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 80228be:	45e0      	cmp	r8, ip
 80228c0:	dd25      	ble.n	802290e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 80228c2:	b335      	cbz	r5, 8022912 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 80228c4:	3301      	adds	r3, #1
 80228c6:	449e      	add	lr, r3
 80228c8:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80228cc:	f01e 0f01 	tst.w	lr, #1
 80228d0:	5cd2      	ldrb	r2, [r2, r3]
 80228d2:	bf0c      	ite	eq
 80228d4:	f002 020f 	andeq.w	r2, r2, #15
 80228d8:	1112      	asrne	r2, r2, #4
 80228da:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80228de:	b2d3      	uxtb	r3, r2
 80228e0:	2d0f      	cmp	r5, #15
 80228e2:	d917      	bls.n	8022914 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 80228e4:	4b37      	ldr	r3, [pc, #220]	; (80229c4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>)
 80228e6:	f240 11f9 	movw	r1, #505	; 0x1f9
 80228ea:	4a37      	ldr	r2, [pc, #220]	; (80229c8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b4>)
 80228ec:	4837      	ldr	r0, [pc, #220]	; (80229cc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 80228ee:	f002 f883 	bl	80249f8 <__assert_func>
 80228f2:	2600      	movs	r6, #0
 80228f4:	e7b1      	b.n	802285a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 80228f6:	2000      	movs	r0, #0
 80228f8:	4606      	mov	r6, r0
 80228fa:	e7c3      	b.n	8022884 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 80228fc:	2000      	movs	r0, #0
 80228fe:	e7c1      	b.n	8022884 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8022900:	4628      	mov	r0, r5
 8022902:	e7bf      	b.n	8022884 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8022904:	2400      	movs	r4, #0
 8022906:	e7d7      	b.n	80228b8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 8022908:	2300      	movs	r3, #0
 802290a:	461c      	mov	r4, r3
 802290c:	e7e8      	b.n	80228e0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802290e:	2300      	movs	r3, #0
 8022910:	e7e6      	b.n	80228e0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 8022912:	462b      	mov	r3, r5
 8022914:	2f0f      	cmp	r7, #15
 8022916:	d8e5      	bhi.n	80228e4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8022918:	b2ad      	uxth	r5, r5
 802291a:	b2bf      	uxth	r7, r7
 802291c:	fb05 fc07 	mul.w	ip, r5, r7
 8022920:	012d      	lsls	r5, r5, #4
 8022922:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8022926:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 802292a:	eba5 050c 	sub.w	r5, r5, ip
 802292e:	b2bf      	uxth	r7, r7
 8022930:	b2ad      	uxth	r5, r5
 8022932:	1bd2      	subs	r2, r2, r7
 8022934:	4368      	muls	r0, r5
 8022936:	b292      	uxth	r2, r2
 8022938:	fb06 0002 	mla	r0, r6, r2, r0
 802293c:	fb07 0404 	mla	r4, r7, r4, r0
 8022940:	fb0c 4303 	mla	r3, ip, r3, r4
 8022944:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022948:	b3a3      	cbz	r3, 80229b4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802294a:	4a21      	ldr	r2, [pc, #132]	; (80229d0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 802294c:	880e      	ldrh	r6, [r1, #0]
 802294e:	6815      	ldr	r5, [r2, #0]
 8022950:	b29a      	uxth	r2, r3
 8022952:	1234      	asrs	r4, r6, #8
 8022954:	43db      	mvns	r3, r3
 8022956:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802295a:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802295e:	b2db      	uxtb	r3, r3
 8022960:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8022964:	fb10 f002 	smulbb	r0, r0, r2
 8022968:	b2ed      	uxtb	r5, r5
 802296a:	fb17 f702 	smulbb	r7, r7, r2
 802296e:	fb04 0403 	mla	r4, r4, r3, r0
 8022972:	10f0      	asrs	r0, r6, #3
 8022974:	fb15 f202 	smulbb	r2, r5, r2
 8022978:	00f6      	lsls	r6, r6, #3
 802297a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802297e:	b2a4      	uxth	r4, r4
 8022980:	b2f6      	uxtb	r6, r6
 8022982:	fb00 7003 	mla	r0, r0, r3, r7
 8022986:	fb06 2303 	mla	r3, r6, r3, r2
 802298a:	b280      	uxth	r0, r0
 802298c:	b29a      	uxth	r2, r3
 802298e:	1c63      	adds	r3, r4, #1
 8022990:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8022994:	1c53      	adds	r3, r2, #1
 8022996:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802299a:	1c42      	adds	r2, r0, #1
 802299c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80229a0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80229a4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80229a8:	0940      	lsrs	r0, r0, #5
 80229aa:	4323      	orrs	r3, r4
 80229ac:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80229b0:	4303      	orrs	r3, r0
 80229b2:	800b      	strh	r3, [r1, #0]
 80229b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80229b8:	2d0f      	cmp	r5, #15
 80229ba:	d893      	bhi.n	80228e4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 80229bc:	463b      	mov	r3, r7
 80229be:	463c      	mov	r4, r7
 80229c0:	e7aa      	b.n	8022918 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 80229c2:	bf00      	nop
 80229c4:	0802a0bb 	.word	0x0802a0bb
 80229c8:	0802a5ea 	.word	0x0802a5ea
 80229cc:	0802a088 	.word	0x0802a088
 80229d0:	20021000 	.word	0x20021000

080229d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80229d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229d8:	ed2d 8b08 	vpush	{d8-d11}
 80229dc:	b093      	sub	sp, #76	; 0x4c
 80229de:	461d      	mov	r5, r3
 80229e0:	eeb0 aa40 	vmov.f32	s20, s0
 80229e4:	920c      	str	r2, [sp, #48]	; 0x30
 80229e6:	eef0 9a60 	vmov.f32	s19, s1
 80229ea:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80229ec:	eeb0 9a41 	vmov.f32	s18, s2
 80229f0:	9011      	str	r0, [sp, #68]	; 0x44
 80229f2:	eeb0 8a62 	vmov.f32	s16, s5
 80229f6:	6850      	ldr	r0, [r2, #4]
 80229f8:	eef0 8a43 	vmov.f32	s17, s6
 80229fc:	9107      	str	r1, [sp, #28]
 80229fe:	eef0 ba44 	vmov.f32	s23, s8
 8022a02:	6812      	ldr	r2, [r2, #0]
 8022a04:	eeb0 ba64 	vmov.f32	s22, s9
 8022a08:	eef0 aa45 	vmov.f32	s21, s10
 8022a0c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8022a10:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8022a14:	fb00 1303 	mla	r3, r0, r3, r1
 8022a18:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8022a1c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022a1e:	689b      	ldr	r3, [r3, #8]
 8022a20:	3301      	adds	r3, #1
 8022a22:	f023 0301 	bic.w	r3, r3, #1
 8022a26:	9306      	str	r3, [sp, #24]
 8022a28:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022a2a:	681f      	ldr	r7, [r3, #0]
 8022a2c:	9b07      	ldr	r3, [sp, #28]
 8022a2e:	2b00      	cmp	r3, #0
 8022a30:	dc03      	bgt.n	8022a3a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022a32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022a34:	2b00      	cmp	r3, #0
 8022a36:	f340 8267 	ble.w	8022f08 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8022a3a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022a3c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022a40:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022a44:	1e48      	subs	r0, r1, #1
 8022a46:	f102 3cff 	add.w	ip, r2, #4294967295
 8022a4a:	2d00      	cmp	r5, #0
 8022a4c:	f340 80b7 	ble.w	8022bbe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022a50:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022a54:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022a58:	d406      	bmi.n	8022a68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022a5a:	4586      	cmp	lr, r0
 8022a5c:	da04      	bge.n	8022a68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022a5e:	2b00      	cmp	r3, #0
 8022a60:	db02      	blt.n	8022a68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022a62:	4563      	cmp	r3, ip
 8022a64:	f2c0 80ac 	blt.w	8022bc0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8022a68:	f11e 0e01 	adds.w	lr, lr, #1
 8022a6c:	f100 809f 	bmi.w	8022bae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8022a70:	4571      	cmp	r1, lr
 8022a72:	f2c0 809c 	blt.w	8022bae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8022a76:	3301      	adds	r3, #1
 8022a78:	f100 8099 	bmi.w	8022bae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8022a7c:	429a      	cmp	r2, r3
 8022a7e:	f2c0 8096 	blt.w	8022bae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8022a82:	46c8      	mov	r8, r9
 8022a84:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8022a88:	9509      	str	r5, [sp, #36]	; 0x24
 8022a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022a8c:	2b00      	cmp	r3, #0
 8022a8e:	f340 80b5 	ble.w	8022bfc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8022a92:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8022a96:	1430      	asrs	r0, r6, #16
 8022a98:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022a9c:	9308      	str	r3, [sp, #32]
 8022a9e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022aa0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8022aa4:	1423      	asrs	r3, r4, #16
 8022aa6:	f100 813f 	bmi.w	8022d28 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8022aaa:	f10c 3bff 	add.w	fp, ip, #4294967295
 8022aae:	455b      	cmp	r3, fp
 8022ab0:	f280 813a 	bge.w	8022d28 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8022ab4:	2800      	cmp	r0, #0
 8022ab6:	f2c0 8137 	blt.w	8022d28 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8022aba:	f10e 3bff 	add.w	fp, lr, #4294967295
 8022abe:	4558      	cmp	r0, fp
 8022ac0:	f280 8132 	bge.w	8022d28 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8022ac4:	9a06      	ldr	r2, [sp, #24]
 8022ac6:	fb00 3302 	mla	r3, r0, r2, r3
 8022aca:	0858      	lsrs	r0, r3, #1
 8022acc:	07da      	lsls	r2, r3, #31
 8022ace:	9a08      	ldr	r2, [sp, #32]
 8022ad0:	f817 c000 	ldrb.w	ip, [r7, r0]
 8022ad4:	bf54      	ite	pl
 8022ad6:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022ada:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022ade:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022ae2:	fa5f fc8c 	uxtb.w	ip, ip
 8022ae6:	2a00      	cmp	r2, #0
 8022ae8:	f000 80cc 	beq.w	8022c84 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8022aec:	1c58      	adds	r0, r3, #1
 8022aee:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8022af2:	07c0      	lsls	r0, r0, #31
 8022af4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022af8:	bf54      	ite	pl
 8022afa:	f00e 0e0f 	andpl.w	lr, lr, #15
 8022afe:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8022b02:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8022b06:	fa5f fe8e 	uxtb.w	lr, lr
 8022b0a:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8022b0e:	b1b9      	cbz	r1, 8022b40 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8022b10:	4453      	add	r3, sl
 8022b12:	0858      	lsrs	r0, r3, #1
 8022b14:	07da      	lsls	r2, r3, #31
 8022b16:	5c38      	ldrb	r0, [r7, r0]
 8022b18:	bf54      	ite	pl
 8022b1a:	f000 000f 	andpl.w	r0, r0, #15
 8022b1e:	1100      	asrmi	r0, r0, #4
 8022b20:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022b24:	b2c0      	uxtb	r0, r0
 8022b26:	900a      	str	r0, [sp, #40]	; 0x28
 8022b28:	1c58      	adds	r0, r3, #1
 8022b2a:	0843      	lsrs	r3, r0, #1
 8022b2c:	07c2      	lsls	r2, r0, #31
 8022b2e:	5cfb      	ldrb	r3, [r7, r3]
 8022b30:	bf54      	ite	pl
 8022b32:	f003 030f 	andpl.w	r3, r3, #15
 8022b36:	111b      	asrmi	r3, r3, #4
 8022b38:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022b3c:	b2db      	uxtb	r3, r3
 8022b3e:	930e      	str	r3, [sp, #56]	; 0x38
 8022b40:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022b44:	b289      	uxth	r1, r1
 8022b46:	fb02 f301 	mul.w	r3, r2, r1
 8022b4a:	0112      	lsls	r2, r2, #4
 8022b4c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8022b50:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8022b54:	1ad2      	subs	r2, r2, r3
 8022b56:	b289      	uxth	r1, r1
 8022b58:	b292      	uxth	r2, r2
 8022b5a:	1a40      	subs	r0, r0, r1
 8022b5c:	fa1f fe80 	uxth.w	lr, r0
 8022b60:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022b62:	4342      	muls	r2, r0
 8022b64:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8022b68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022b6a:	fb01 c102 	mla	r1, r1, r2, ip
 8022b6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022b70:	fb03 1302 	mla	r3, r3, r2, r1
 8022b74:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022b78:	2bff      	cmp	r3, #255	; 0xff
 8022b7a:	f040 8094 	bne.w	8022ca6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 8022b7e:	4bbf      	ldr	r3, [pc, #764]	; (8022e7c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 8022b80:	681a      	ldr	r2, [r3, #0]
 8022b82:	4bbf      	ldr	r3, [pc, #764]	; (8022e80 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8022b84:	0951      	lsrs	r1, r2, #5
 8022b86:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8022b8a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022b8e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022b92:	430b      	orrs	r3, r1
 8022b94:	4313      	orrs	r3, r2
 8022b96:	f8a8 3000 	strh.w	r3, [r8]
 8022b9a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022b9c:	f108 0802 	add.w	r8, r8, #2
 8022ba0:	441c      	add	r4, r3
 8022ba2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022ba4:	441e      	add	r6, r3
 8022ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022ba8:	3b01      	subs	r3, #1
 8022baa:	9309      	str	r3, [sp, #36]	; 0x24
 8022bac:	e76d      	b.n	8022a8a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8022bae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022bb0:	3d01      	subs	r5, #1
 8022bb2:	f109 0902 	add.w	r9, r9, #2
 8022bb6:	441c      	add	r4, r3
 8022bb8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022bba:	441e      	add	r6, r3
 8022bbc:	e745      	b.n	8022a4a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022bbe:	d021      	beq.n	8022c04 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8022bc0:	1e6b      	subs	r3, r5, #1
 8022bc2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8022bc4:	fb00 4003 	mla	r0, r0, r3, r4
 8022bc8:	1400      	asrs	r0, r0, #16
 8022bca:	f53f af5a 	bmi.w	8022a82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8022bce:	3901      	subs	r1, #1
 8022bd0:	4288      	cmp	r0, r1
 8022bd2:	f6bf af56 	bge.w	8022a82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8022bd6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8022bd8:	fb01 6303 	mla	r3, r1, r3, r6
 8022bdc:	141b      	asrs	r3, r3, #16
 8022bde:	f53f af50 	bmi.w	8022a82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8022be2:	3a01      	subs	r2, #1
 8022be4:	4293      	cmp	r3, r2
 8022be6:	f6bf af4c 	bge.w	8022a82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8022bea:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8022bee:	46a8      	mov	r8, r5
 8022bf0:	46ce      	mov	lr, r9
 8022bf2:	9308      	str	r3, [sp, #32]
 8022bf4:	f1b8 0f00 	cmp.w	r8, #0
 8022bf8:	f300 80b6 	bgt.w	8022d68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8022bfc:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8022c00:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8022c04:	9b07      	ldr	r3, [sp, #28]
 8022c06:	2b00      	cmp	r3, #0
 8022c08:	f340 817e 	ble.w	8022f08 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8022c0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022c10:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022c12:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022c16:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022c1a:	eef0 6a48 	vmov.f32	s13, s16
 8022c1e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022c22:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022c26:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022c2a:	ee16 4a90 	vmov	r4, s13
 8022c2e:	eef0 6a68 	vmov.f32	s13, s17
 8022c32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022c36:	ee16 6a90 	vmov	r6, s13
 8022c3a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022c3e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022c42:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022c46:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022c4a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022c4e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022c52:	ee18 2a10 	vmov	r2, s16
 8022c56:	eeb0 8a47 	vmov.f32	s16, s14
 8022c5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c5e:	ee18 2a90 	vmov	r2, s17
 8022c62:	9327      	str	r3, [sp, #156]	; 0x9c
 8022c64:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022c66:	eef0 8a67 	vmov.f32	s17, s15
 8022c6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c6e:	9328      	str	r3, [sp, #160]	; 0xa0
 8022c70:	9b07      	ldr	r3, [sp, #28]
 8022c72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022c74:	3b01      	subs	r3, #1
 8022c76:	9307      	str	r3, [sp, #28]
 8022c78:	bf08      	it	eq
 8022c7a:	4615      	moveq	r5, r2
 8022c7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022c7e:	bf18      	it	ne
 8022c80:	461d      	movne	r5, r3
 8022c82:	e6d3      	b.n	8022a2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8022c84:	2900      	cmp	r1, #0
 8022c86:	f43f af5b 	beq.w	8022b40 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8022c8a:	eb0a 0003 	add.w	r0, sl, r3
 8022c8e:	0843      	lsrs	r3, r0, #1
 8022c90:	07c0      	lsls	r0, r0, #31
 8022c92:	5cfb      	ldrb	r3, [r7, r3]
 8022c94:	bf54      	ite	pl
 8022c96:	f003 030f 	andpl.w	r3, r3, #15
 8022c9a:	111b      	asrmi	r3, r3, #4
 8022c9c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022ca0:	b2db      	uxtb	r3, r3
 8022ca2:	930a      	str	r3, [sp, #40]	; 0x28
 8022ca4:	e74c      	b.n	8022b40 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8022ca6:	2b00      	cmp	r3, #0
 8022ca8:	f43f af77 	beq.w	8022b9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8022cac:	4a73      	ldr	r2, [pc, #460]	; (8022e7c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 8022cae:	fa1f fe83 	uxth.w	lr, r3
 8022cb2:	f8b8 c000 	ldrh.w	ip, [r8]
 8022cb6:	43db      	mvns	r3, r3
 8022cb8:	6810      	ldr	r0, [r2, #0]
 8022cba:	ea4f 212c 	mov.w	r1, ip, asr #8
 8022cbe:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8022cc2:	b2db      	uxtb	r3, r3
 8022cc4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022cc8:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8022ccc:	fb12 f20e 	smulbb	r2, r2, lr
 8022cd0:	b2c0      	uxtb	r0, r0
 8022cd2:	fb1b fb0e 	smulbb	fp, fp, lr
 8022cd6:	fb01 2103 	mla	r1, r1, r3, r2
 8022cda:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8022cde:	fb10 fe0e 	smulbb	lr, r0, lr
 8022ce2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022ce6:	b289      	uxth	r1, r1
 8022ce8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022cec:	fa5f fc8c 	uxtb.w	ip, ip
 8022cf0:	fb02 b203 	mla	r2, r2, r3, fp
 8022cf4:	1c48      	adds	r0, r1, #1
 8022cf6:	fb0c e303 	mla	r3, ip, r3, lr
 8022cfa:	b292      	uxth	r2, r2
 8022cfc:	b29b      	uxth	r3, r3
 8022cfe:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8022d02:	f102 0b01 	add.w	fp, r2, #1
 8022d06:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8022d0a:	1c59      	adds	r1, r3, #1
 8022d0c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8022d10:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022d14:	0952      	lsrs	r2, r2, #5
 8022d16:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8022d1a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022d1e:	4301      	orrs	r1, r0
 8022d20:	4311      	orrs	r1, r2
 8022d22:	f8a8 1000 	strh.w	r1, [r8]
 8022d26:	e738      	b.n	8022b9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8022d28:	f113 0b01 	adds.w	fp, r3, #1
 8022d2c:	f53f af35 	bmi.w	8022b9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8022d30:	45dc      	cmp	ip, fp
 8022d32:	f6ff af32 	blt.w	8022b9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8022d36:	f110 0b01 	adds.w	fp, r0, #1
 8022d3a:	f53f af2e 	bmi.w	8022b9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8022d3e:	45de      	cmp	lr, fp
 8022d40:	f6ff af2b 	blt.w	8022b9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8022d44:	9302      	str	r3, [sp, #8]
 8022d46:	fa0f f38e 	sxth.w	r3, lr
 8022d4a:	9a08      	ldr	r2, [sp, #32]
 8022d4c:	9301      	str	r3, [sp, #4]
 8022d4e:	fa0f f38c 	sxth.w	r3, ip
 8022d52:	9105      	str	r1, [sp, #20]
 8022d54:	4641      	mov	r1, r8
 8022d56:	9300      	str	r3, [sp, #0]
 8022d58:	4653      	mov	r3, sl
 8022d5a:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8022d5e:	463a      	mov	r2, r7
 8022d60:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022d62:	f7ff fd57 	bl	8022814 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8022d66:	e718      	b.n	8022b9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8022d68:	1422      	asrs	r2, r4, #16
 8022d6a:	9906      	ldr	r1, [sp, #24]
 8022d6c:	1433      	asrs	r3, r6, #16
 8022d6e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022d72:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022d76:	fb01 2303 	mla	r3, r1, r3, r2
 8022d7a:	085a      	lsrs	r2, r3, #1
 8022d7c:	07d9      	lsls	r1, r3, #31
 8022d7e:	5cba      	ldrb	r2, [r7, r2]
 8022d80:	bf54      	ite	pl
 8022d82:	f002 020f 	andpl.w	r2, r2, #15
 8022d86:	1112      	asrmi	r2, r2, #4
 8022d88:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022d8c:	b2d2      	uxtb	r2, r2
 8022d8e:	2800      	cmp	r0, #0
 8022d90:	d063      	beq.n	8022e5a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8022d92:	f103 0a01 	add.w	sl, r3, #1
 8022d96:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8022d9a:	f01a 0f01 	tst.w	sl, #1
 8022d9e:	5c79      	ldrb	r1, [r7, r1]
 8022da0:	bf0c      	ite	eq
 8022da2:	f001 010f 	andeq.w	r1, r1, #15
 8022da6:	1109      	asrne	r1, r1, #4
 8022da8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022dac:	b2c9      	uxtb	r1, r1
 8022dae:	910f      	str	r1, [sp, #60]	; 0x3c
 8022db0:	f1bc 0f00 	cmp.w	ip, #0
 8022db4:	d01a      	beq.n	8022dec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8022db6:	9908      	ldr	r1, [sp, #32]
 8022db8:	440b      	add	r3, r1
 8022dba:	0859      	lsrs	r1, r3, #1
 8022dbc:	f013 0f01 	tst.w	r3, #1
 8022dc0:	f103 0301 	add.w	r3, r3, #1
 8022dc4:	5c79      	ldrb	r1, [r7, r1]
 8022dc6:	bf0c      	ite	eq
 8022dc8:	f001 010f 	andeq.w	r1, r1, #15
 8022dcc:	1109      	asrne	r1, r1, #4
 8022dce:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022dd2:	b2c9      	uxtb	r1, r1
 8022dd4:	910b      	str	r1, [sp, #44]	; 0x2c
 8022dd6:	0859      	lsrs	r1, r3, #1
 8022dd8:	07db      	lsls	r3, r3, #31
 8022dda:	5c79      	ldrb	r1, [r7, r1]
 8022ddc:	bf54      	ite	pl
 8022dde:	f001 010f 	andpl.w	r1, r1, #15
 8022de2:	1109      	asrmi	r1, r1, #4
 8022de4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022de8:	b2c9      	uxtb	r1, r1
 8022dea:	9110      	str	r1, [sp, #64]	; 0x40
 8022dec:	b280      	uxth	r0, r0
 8022dee:	fa1f fc8c 	uxth.w	ip, ip
 8022df2:	fb00 f30c 	mul.w	r3, r0, ip
 8022df6:	0100      	lsls	r0, r0, #4
 8022df8:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8022dfc:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8022e00:	1ac0      	subs	r0, r0, r3
 8022e02:	fa1f fc8c 	uxth.w	ip, ip
 8022e06:	b280      	uxth	r0, r0
 8022e08:	eba1 010c 	sub.w	r1, r1, ip
 8022e0c:	fa1f fa81 	uxth.w	sl, r1
 8022e10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022e12:	4348      	muls	r0, r1
 8022e14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022e16:	fb02 020a 	mla	r2, r2, sl, r0
 8022e1a:	fb0c 2c01 	mla	ip, ip, r1, r2
 8022e1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022e20:	fb03 c302 	mla	r3, r3, r2, ip
 8022e24:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022e28:	2bff      	cmp	r3, #255	; 0xff
 8022e2a:	d12b      	bne.n	8022e84 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8022e2c:	4b13      	ldr	r3, [pc, #76]	; (8022e7c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 8022e2e:	681a      	ldr	r2, [r3, #0]
 8022e30:	4b13      	ldr	r3, [pc, #76]	; (8022e80 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8022e32:	0951      	lsrs	r1, r2, #5
 8022e34:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8022e38:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022e3c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022e40:	430b      	orrs	r3, r1
 8022e42:	4313      	orrs	r3, r2
 8022e44:	f8ae 3000 	strh.w	r3, [lr]
 8022e48:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022e4a:	f10e 0e02 	add.w	lr, lr, #2
 8022e4e:	f108 38ff 	add.w	r8, r8, #4294967295
 8022e52:	441c      	add	r4, r3
 8022e54:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022e56:	441e      	add	r6, r3
 8022e58:	e6cc      	b.n	8022bf4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8022e5a:	f1bc 0f00 	cmp.w	ip, #0
 8022e5e:	d0c5      	beq.n	8022dec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8022e60:	9908      	ldr	r1, [sp, #32]
 8022e62:	440b      	add	r3, r1
 8022e64:	0859      	lsrs	r1, r3, #1
 8022e66:	07db      	lsls	r3, r3, #31
 8022e68:	5c79      	ldrb	r1, [r7, r1]
 8022e6a:	bf54      	ite	pl
 8022e6c:	f001 010f 	andpl.w	r1, r1, #15
 8022e70:	1109      	asrmi	r1, r1, #4
 8022e72:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022e76:	b2c9      	uxtb	r1, r1
 8022e78:	910b      	str	r1, [sp, #44]	; 0x2c
 8022e7a:	e7b7      	b.n	8022dec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8022e7c:	20021000 	.word	0x20021000
 8022e80:	fffff800 	.word	0xfffff800
 8022e84:	2b00      	cmp	r3, #0
 8022e86:	d0df      	beq.n	8022e48 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 8022e88:	4a22      	ldr	r2, [pc, #136]	; (8022f14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>)
 8022e8a:	fa1f fa83 	uxth.w	sl, r3
 8022e8e:	f8be c000 	ldrh.w	ip, [lr]
 8022e92:	43db      	mvns	r3, r3
 8022e94:	6810      	ldr	r0, [r2, #0]
 8022e96:	ea4f 212c 	mov.w	r1, ip, asr #8
 8022e9a:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8022e9e:	b2db      	uxtb	r3, r3
 8022ea0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022ea4:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8022ea8:	fb12 f20a 	smulbb	r2, r2, sl
 8022eac:	b2c0      	uxtb	r0, r0
 8022eae:	fb1b fb0a 	smulbb	fp, fp, sl
 8022eb2:	fb01 2103 	mla	r1, r1, r3, r2
 8022eb6:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8022eba:	fb10 f00a 	smulbb	r0, r0, sl
 8022ebe:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022ec2:	b289      	uxth	r1, r1
 8022ec4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022ec8:	fa5f fc8c 	uxtb.w	ip, ip
 8022ecc:	fb02 b203 	mla	r2, r2, r3, fp
 8022ed0:	fb0c 0003 	mla	r0, ip, r3, r0
 8022ed4:	1c4b      	adds	r3, r1, #1
 8022ed6:	b292      	uxth	r2, r2
 8022ed8:	b280      	uxth	r0, r0
 8022eda:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8022ede:	f100 0b01 	add.w	fp, r0, #1
 8022ee2:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8022ee6:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8022eea:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8022eee:	ea4b 0101 	orr.w	r1, fp, r1
 8022ef2:	f102 0b01 	add.w	fp, r2, #1
 8022ef6:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8022efa:	0952      	lsrs	r2, r2, #5
 8022efc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022f00:	4311      	orrs	r1, r2
 8022f02:	f8ae 1000 	strh.w	r1, [lr]
 8022f06:	e79f      	b.n	8022e48 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 8022f08:	b013      	add	sp, #76	; 0x4c
 8022f0a:	ecbd 8b08 	vpop	{d8-d11}
 8022f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f12:	bf00      	nop
 8022f14:	20021000 	.word	0x20021000

08022f18 <CRC_Lock>:
 8022f18:	4a20      	ldr	r2, [pc, #128]	; (8022f9c <CRC_Lock+0x84>)
 8022f1a:	b530      	push	{r4, r5, lr}
 8022f1c:	6813      	ldr	r3, [r2, #0]
 8022f1e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8022f22:	f24c 2540 	movw	r5, #49728	; 0xc240
 8022f26:	f023 0301 	bic.w	r3, r3, #1
 8022f2a:	6013      	str	r3, [r2, #0]
 8022f2c:	4b1c      	ldr	r3, [pc, #112]	; (8022fa0 <CRC_Lock+0x88>)
 8022f2e:	681a      	ldr	r2, [r3, #0]
 8022f30:	4022      	ands	r2, r4
 8022f32:	42aa      	cmp	r2, r5
 8022f34:	d005      	beq.n	8022f42 <CRC_Lock+0x2a>
 8022f36:	681b      	ldr	r3, [r3, #0]
 8022f38:	f24c 2270 	movw	r2, #49776	; 0xc270
 8022f3c:	4023      	ands	r3, r4
 8022f3e:	4293      	cmp	r3, r2
 8022f40:	d124      	bne.n	8022f8c <CRC_Lock+0x74>
 8022f42:	4b18      	ldr	r3, [pc, #96]	; (8022fa4 <CRC_Lock+0x8c>)
 8022f44:	681b      	ldr	r3, [r3, #0]
 8022f46:	bb0b      	cbnz	r3, 8022f8c <CRC_Lock+0x74>
 8022f48:	4b17      	ldr	r3, [pc, #92]	; (8022fa8 <CRC_Lock+0x90>)
 8022f4a:	681a      	ldr	r2, [r3, #0]
 8022f4c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8022f50:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8022f54:	d00d      	beq.n	8022f72 <CRC_Lock+0x5a>
 8022f56:	681a      	ldr	r2, [r3, #0]
 8022f58:	f240 4483 	movw	r4, #1155	; 0x483
 8022f5c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8022f60:	42a2      	cmp	r2, r4
 8022f62:	d006      	beq.n	8022f72 <CRC_Lock+0x5a>
 8022f64:	681b      	ldr	r3, [r3, #0]
 8022f66:	f240 4285 	movw	r2, #1157	; 0x485
 8022f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022f6e:	4293      	cmp	r3, r2
 8022f70:	d10c      	bne.n	8022f8c <CRC_Lock+0x74>
 8022f72:	4b0e      	ldr	r3, [pc, #56]	; (8022fac <CRC_Lock+0x94>)
 8022f74:	2201      	movs	r2, #1
 8022f76:	601a      	str	r2, [r3, #0]
 8022f78:	681a      	ldr	r2, [r3, #0]
 8022f7a:	2a00      	cmp	r2, #0
 8022f7c:	d1fc      	bne.n	8022f78 <CRC_Lock+0x60>
 8022f7e:	4b0c      	ldr	r3, [pc, #48]	; (8022fb0 <CRC_Lock+0x98>)
 8022f80:	6018      	str	r0, [r3, #0]
 8022f82:	6818      	ldr	r0, [r3, #0]
 8022f84:	1a43      	subs	r3, r0, r1
 8022f86:	4258      	negs	r0, r3
 8022f88:	4158      	adcs	r0, r3
 8022f8a:	bd30      	pop	{r4, r5, pc}
 8022f8c:	4b09      	ldr	r3, [pc, #36]	; (8022fb4 <CRC_Lock+0x9c>)
 8022f8e:	2201      	movs	r2, #1
 8022f90:	601a      	str	r2, [r3, #0]
 8022f92:	681a      	ldr	r2, [r3, #0]
 8022f94:	2a00      	cmp	r2, #0
 8022f96:	d1fc      	bne.n	8022f92 <CRC_Lock+0x7a>
 8022f98:	4b07      	ldr	r3, [pc, #28]	; (8022fb8 <CRC_Lock+0xa0>)
 8022f9a:	e7f1      	b.n	8022f80 <CRC_Lock+0x68>
 8022f9c:	e0002000 	.word	0xe0002000
 8022fa0:	e000ed00 	.word	0xe000ed00
 8022fa4:	e0042000 	.word	0xe0042000
 8022fa8:	5c001000 	.word	0x5c001000
 8022fac:	58024c08 	.word	0x58024c08
 8022fb0:	58024c00 	.word	0x58024c00
 8022fb4:	40023008 	.word	0x40023008
 8022fb8:	40023000 	.word	0x40023000

08022fbc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8022fbc:	6101      	str	r1, [r0, #16]
 8022fbe:	4770      	bx	lr

08022fc0 <_ZN8touchgfx8Gestures4tickEv>:
 8022fc0:	7b83      	ldrb	r3, [r0, #14]
 8022fc2:	b14b      	cbz	r3, 8022fd8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8022fc4:	8903      	ldrh	r3, [r0, #8]
 8022fc6:	3301      	adds	r3, #1
 8022fc8:	b29b      	uxth	r3, r3
 8022fca:	2b07      	cmp	r3, #7
 8022fcc:	8103      	strh	r3, [r0, #8]
 8022fce:	bf81      	itttt	hi
 8022fd0:	2300      	movhi	r3, #0
 8022fd2:	8143      	strhhi	r3, [r0, #10]
 8022fd4:	8183      	strhhi	r3, [r0, #12]
 8022fd6:	7383      	strbhi	r3, [r0, #14]
 8022fd8:	4770      	bx	lr
	...

08022fdc <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8022fdc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8022fe0:	4698      	mov	r8, r3
 8022fe2:	8883      	ldrh	r3, [r0, #4]
 8022fe4:	4604      	mov	r4, r0
 8022fe6:	4617      	mov	r7, r2
 8022fe8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8022fec:	eba8 0303 	sub.w	r3, r8, r3
 8022ff0:	4a19      	ldr	r2, [pc, #100]	; (8023058 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8022ff2:	460e      	mov	r6, r1
 8022ff4:	b21b      	sxth	r3, r3
 8022ff6:	88c1      	ldrh	r1, [r0, #6]
 8022ff8:	9200      	str	r2, [sp, #0]
 8022ffa:	2000      	movs	r0, #0
 8022ffc:	2b00      	cmp	r3, #0
 8022ffe:	8aa2      	ldrh	r2, [r4, #20]
 8023000:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8023004:	bfb8      	it	lt
 8023006:	425b      	neglt	r3, r3
 8023008:	f88d 0004 	strb.w	r0, [sp, #4]
 802300c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8023010:	b21b      	sxth	r3, r3
 8023012:	f8ad 800a 	strh.w	r8, [sp, #10]
 8023016:	f8ad 500c 	strh.w	r5, [sp, #12]
 802301a:	4293      	cmp	r3, r2
 802301c:	dc07      	bgt.n	802302e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802301e:	1a69      	subs	r1, r5, r1
 8023020:	b209      	sxth	r1, r1
 8023022:	2900      	cmp	r1, #0
 8023024:	bfb8      	it	lt
 8023026:	4249      	neglt	r1, r1
 8023028:	b209      	sxth	r1, r1
 802302a:	428a      	cmp	r2, r1
 802302c:	da10      	bge.n	8023050 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802302e:	6920      	ldr	r0, [r4, #16]
 8023030:	4669      	mov	r1, sp
 8023032:	eba8 0606 	sub.w	r6, r8, r6
 8023036:	1bef      	subs	r7, r5, r7
 8023038:	6803      	ldr	r3, [r0, #0]
 802303a:	685b      	ldr	r3, [r3, #4]
 802303c:	4798      	blx	r3
 802303e:	2300      	movs	r3, #0
 8023040:	2001      	movs	r0, #1
 8023042:	8166      	strh	r6, [r4, #10]
 8023044:	8123      	strh	r3, [r4, #8]
 8023046:	81a7      	strh	r7, [r4, #12]
 8023048:	f8a4 8004 	strh.w	r8, [r4, #4]
 802304c:	80e5      	strh	r5, [r4, #6]
 802304e:	73a0      	strb	r0, [r4, #14]
 8023050:	b004      	add	sp, #16
 8023052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023056:	bf00      	nop
 8023058:	080294e8 	.word	0x080294e8

0802305c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802305c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802305e:	461e      	mov	r6, r3
 8023060:	1e4b      	subs	r3, r1, #1
 8023062:	b085      	sub	sp, #20
 8023064:	4604      	mov	r4, r0
 8023066:	2b01      	cmp	r3, #1
 8023068:	460d      	mov	r5, r1
 802306a:	4617      	mov	r7, r2
 802306c:	d84b      	bhi.n	8023106 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802306e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8023072:	1cd3      	adds	r3, r2, #3
 8023074:	b29b      	uxth	r3, r3
 8023076:	2b06      	cmp	r3, #6
 8023078:	d916      	bls.n	80230a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802307a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802311c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802307e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023082:	f8cd c004 	str.w	ip, [sp, #4]
 8023086:	f04f 0c00 	mov.w	ip, #0
 802308a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802308e:	6900      	ldr	r0, [r0, #16]
 8023090:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023094:	a901      	add	r1, sp, #4
 8023096:	f88d c008 	strb.w	ip, [sp, #8]
 802309a:	f8ad 200a 	strh.w	r2, [sp, #10]
 802309e:	f8ad 300e 	strh.w	r3, [sp, #14]
 80230a2:	6803      	ldr	r3, [r0, #0]
 80230a4:	689b      	ldr	r3, [r3, #8]
 80230a6:	4798      	blx	r3
 80230a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80230ac:	1cd3      	adds	r3, r2, #3
 80230ae:	b29b      	uxth	r3, r3
 80230b0:	2b06      	cmp	r3, #6
 80230b2:	d916      	bls.n	80230e2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80230b4:	f8df c064 	ldr.w	ip, [pc, #100]	; 802311c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80230b8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80230bc:	f8cd c004 	str.w	ip, [sp, #4]
 80230c0:	f04f 0c01 	mov.w	ip, #1
 80230c4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80230c8:	6920      	ldr	r0, [r4, #16]
 80230ca:	f8ad 100c 	strh.w	r1, [sp, #12]
 80230ce:	a901      	add	r1, sp, #4
 80230d0:	f88d c008 	strb.w	ip, [sp, #8]
 80230d4:	f8ad 200a 	strh.w	r2, [sp, #10]
 80230d8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80230dc:	6803      	ldr	r3, [r0, #0]
 80230de:	689b      	ldr	r3, [r3, #8]
 80230e0:	4798      	blx	r3
 80230e2:	4b0d      	ldr	r3, [pc, #52]	; (8023118 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80230e4:	a901      	add	r1, sp, #4
 80230e6:	6920      	ldr	r0, [r4, #16]
 80230e8:	9301      	str	r3, [sp, #4]
 80230ea:	2300      	movs	r3, #0
 80230ec:	f88d 5008 	strb.w	r5, [sp, #8]
 80230f0:	f8ad 700a 	strh.w	r7, [sp, #10]
 80230f4:	f8ad 600c 	strh.w	r6, [sp, #12]
 80230f8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80230fc:	6803      	ldr	r3, [r0, #0]
 80230fe:	681b      	ldr	r3, [r3, #0]
 8023100:	4798      	blx	r3
 8023102:	b005      	add	sp, #20
 8023104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023106:	2900      	cmp	r1, #0
 8023108:	d1eb      	bne.n	80230e2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802310a:	80a2      	strh	r2, [r4, #4]
 802310c:	80c6      	strh	r6, [r0, #6]
 802310e:	60a1      	str	r1, [r4, #8]
 8023110:	81a1      	strh	r1, [r4, #12]
 8023112:	73a1      	strb	r1, [r4, #14]
 8023114:	e7e5      	b.n	80230e2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023116:	bf00      	nop
 8023118:	080294d4 	.word	0x080294d4
 802311c:	080294fc 	.word	0x080294fc

08023120 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>:
 8023120:	10c9      	asrs	r1, r1, #3
 8023122:	2900      	cmp	r1, #0
 8023124:	bfb8      	it	lt
 8023126:	4249      	neglt	r1, r1
 8023128:	2801      	cmp	r0, #1
 802312a:	d108      	bne.n	802313e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 802312c:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8023130:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8023134:	4601      	mov	r1, r0
 8023136:	dd02      	ble.n	802313e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 8023138:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 802313c:	4770      	bx	lr
 802313e:	29ff      	cmp	r1, #255	; 0xff
 8023140:	bfa8      	it	ge
 8023142:	21ff      	movge	r1, #255	; 0xff
 8023144:	4608      	mov	r0, r1
 8023146:	4770      	bx	lr

08023148 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8023148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802314c:	688c      	ldr	r4, [r1, #8]
 802314e:	b087      	sub	sp, #28
 8023150:	4607      	mov	r7, r0
 8023152:	2c00      	cmp	r4, #0
 8023154:	db2b      	blt.n	80231ae <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8023156:	6803      	ldr	r3, [r0, #0]
 8023158:	691a      	ldr	r2, [r3, #16]
 802315a:	42a2      	cmp	r2, r4
 802315c:	dd27      	ble.n	80231ae <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 802315e:	685a      	ldr	r2, [r3, #4]
 8023160:	695e      	ldr	r6, [r3, #20]
 8023162:	68cd      	ldr	r5, [r1, #12]
 8023164:	fb06 2604 	mla	r6, r6, r4, r2
 8023168:	f8d1 901c 	ldr.w	r9, [r1, #28]
 802316c:	698a      	ldr	r2, [r1, #24]
 802316e:	f893 a008 	ldrb.w	sl, [r3, #8]
 8023172:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8023176:	9205      	str	r2, [sp, #20]
 8023178:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 802317c:	9b05      	ldr	r3, [sp, #20]
 802317e:	6839      	ldr	r1, [r7, #0]
 8023180:	eb03 0c02 	add.w	ip, r3, r2
 8023184:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8023188:	68c9      	ldr	r1, [r1, #12]
 802318a:	1898      	adds	r0, r3, r2
 802318c:	4288      	cmp	r0, r1
 802318e:	db02      	blt.n	8023196 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8023190:	1a8b      	subs	r3, r1, r2
 8023192:	2b00      	cmp	r3, #0
 8023194:	dd09      	ble.n	80231aa <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8023196:	6878      	ldr	r0, [r7, #4]
 8023198:	6801      	ldr	r1, [r0, #0]
 802319a:	9400      	str	r4, [sp, #0]
 802319c:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 80231a0:	4653      	mov	r3, sl
 80231a2:	f8d1 b008 	ldr.w	fp, [r1, #8]
 80231a6:	4631      	mov	r1, r6
 80231a8:	47d8      	blx	fp
 80231aa:	3d01      	subs	r5, #1
 80231ac:	d1e4      	bne.n	8023178 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 80231ae:	b007      	add	sp, #28
 80231b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080231b4 <_ZN8touchgfx10Rasterizer6lineToEii>:
 80231b4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80231b8:	b90b      	cbnz	r3, 80231be <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 80231ba:	f001 b9b1 	b.w	8024520 <_ZN8touchgfx7Outline6lineToEii>
 80231be:	4770      	bx	lr

080231c0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 80231c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80231c4:	4604      	mov	r4, r0
 80231c6:	2600      	movs	r6, #0
 80231c8:	4b8f      	ldr	r3, [pc, #572]	; (8023408 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 80231ca:	f100 0518 	add.w	r5, r0, #24
 80231ce:	f104 0730 	add.w	r7, r4, #48	; 0x30
 80231d2:	b086      	sub	sp, #24
 80231d4:	4690      	mov	r8, r2
 80231d6:	e9c0 3100 	strd	r3, r1, [r0]
 80231da:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80231de:	e9c0 6604 	strd	r6, r6, [r0, #16]
 80231e2:	4628      	mov	r0, r5
 80231e4:	f001 fbc0 	bl	8024968 <_ZN8touchgfx15RenderingBufferC1Ev>
 80231e8:	4638      	mov	r0, r7
 80231ea:	f000 fb65 	bl	80238b8 <_ZN8touchgfx7OutlineC1Ev>
 80231ee:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80231f2:	f001 fb61 	bl	80248b8 <_ZN8touchgfx8ScanlineC1Ev>
 80231f6:	2301      	movs	r3, #1
 80231f8:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 80231fc:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 8023200:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 8023204:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8023208:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 802320c:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8023210:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 8023214:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 8023218:	f7ef f842 	bl	80122a0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 802321c:	b928      	cbnz	r0, 802322a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x6a>
 802321e:	4b7b      	ldr	r3, [pc, #492]	; (802340c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8023220:	212a      	movs	r1, #42	; 0x2a
 8023222:	4a7b      	ldr	r2, [pc, #492]	; (8023410 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8023224:	487b      	ldr	r0, [pc, #492]	; (8023414 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8023226:	f001 fbe7 	bl	80249f8 <__assert_func>
 802322a:	f9b8 2000 	ldrsh.w	r2, [r8]
 802322e:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8023232:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8023236:	4410      	add	r0, r2
 8023238:	9602      	str	r6, [sp, #8]
 802323a:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 802323e:	b280      	uxth	r0, r0
 8023240:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8023244:	fa0f fa80 	sxth.w	sl, r0
 8023248:	f1ba 0f00 	cmp.w	sl, #0
 802324c:	dd70      	ble.n	8023330 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802324e:	4591      	cmp	r9, r2
 8023250:	dd6e      	ble.n	8023330 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8023252:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8023256:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 802325a:	440b      	add	r3, r1
 802325c:	b29b      	uxth	r3, r3
 802325e:	b21e      	sxth	r6, r3
 8023260:	2e00      	cmp	r6, #0
 8023262:	dd65      	ble.n	8023330 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8023264:	458e      	cmp	lr, r1
 8023266:	dd63      	ble.n	8023330 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8023268:	45d1      	cmp	r9, sl
 802326a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802326e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8023272:	bfb8      	it	lt
 8023274:	fa1f f089 	uxthlt.w	r0, r9
 8023278:	45b6      	cmp	lr, r6
 802327a:	f8ad 2008 	strh.w	r2, [sp, #8]
 802327e:	bfb8      	it	lt
 8023280:	fa1f f38e 	uxthlt.w	r3, lr
 8023284:	1a80      	subs	r0, r0, r2
 8023286:	f8ad 100a 	strh.w	r1, [sp, #10]
 802328a:	1a5b      	subs	r3, r3, r1
 802328c:	f8ad 000c 	strh.w	r0, [sp, #12]
 8023290:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023294:	f10d 0808 	add.w	r8, sp, #8
 8023298:	ae04      	add	r6, sp, #16
 802329a:	e898 0003 	ldmia.w	r8, {r0, r1}
 802329e:	e886 0003 	stmia.w	r6, {r0, r1}
 80232a2:	f8dc 3000 	ldr.w	r3, [ip]
 80232a6:	4660      	mov	r0, ip
 80232a8:	4631      	mov	r1, r6
 80232aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80232ac:	4798      	blx	r3
 80232ae:	6861      	ldr	r1, [r4, #4]
 80232b0:	4640      	mov	r0, r8
 80232b2:	3104      	adds	r1, #4
 80232b4:	f7f0 fb48 	bl	8013948 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80232b8:	4630      	mov	r0, r6
 80232ba:	f7f0 fb01 	bl	80138c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80232be:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 80232c2:	f7ee ff7d 	bl	80121c0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 80232c6:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 80232ca:	4638      	mov	r0, r7
 80232cc:	f000 facf 	bl	802386e <_ZN8touchgfx7Outline5resetEv>
 80232d0:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80232d4:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80232d8:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 80232dc:	015b      	lsls	r3, r3, #5
 80232de:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 80232e2:	0152      	lsls	r2, r2, #5
 80232e4:	60e3      	str	r3, [r4, #12]
 80232e6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80232ea:	60a2      	str	r2, [r4, #8]
 80232ec:	015b      	lsls	r3, r3, #5
 80232ee:	6123      	str	r3, [r4, #16]
 80232f0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80232f4:	015b      	lsls	r3, r3, #5
 80232f6:	6163      	str	r3, [r4, #20]
 80232f8:	4b47      	ldr	r3, [pc, #284]	; (8023418 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 80232fa:	6818      	ldr	r0, [r3, #0]
 80232fc:	6803      	ldr	r3, [r0, #0]
 80232fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023300:	4798      	blx	r3
 8023302:	4606      	mov	r6, r0
 8023304:	f7ea fdd4 	bl	800deb0 <_ZN8touchgfx3HAL3lcdEv>
 8023308:	6803      	ldr	r3, [r0, #0]
 802330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802330c:	4798      	blx	r3
 802330e:	4607      	mov	r7, r0
 8023310:	f7ea fdce 	bl	800deb0 <_ZN8touchgfx3HAL3lcdEv>
 8023314:	6803      	ldr	r3, [r0, #0]
 8023316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023318:	4798      	blx	r3
 802331a:	280d      	cmp	r0, #13
 802331c:	d854      	bhi.n	80233c8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 802331e:	e8df f000 	tbb	[pc, r0]
 8023322:	554b      	.short	0x554b
 8023324:	2b6e0a66 	.word	0x2b6e0a66
 8023328:	5f5f5f3b 	.word	0x5f5f5f3b
 802332c:	6e6e5f5f 	.word	0x6e6e5f5f
 8023330:	2300      	movs	r3, #0
 8023332:	9303      	str	r3, [sp, #12]
 8023334:	e7ae      	b.n	8023294 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd4>
 8023336:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802333a:	2108      	movs	r1, #8
 802333c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023340:	fb92 f1f1 	sdiv	r1, r2, r1
 8023344:	fb07 1303 	mla	r3, r7, r3, r1
 8023348:	441e      	add	r6, r3
 802334a:	4253      	negs	r3, r2
 802334c:	f002 0207 	and.w	r2, r2, #7
 8023350:	f003 0307 	and.w	r3, r3, #7
 8023354:	bf58      	it	pl
 8023356:	425a      	negpl	r2, r3
 8023358:	b2d2      	uxtb	r2, r2
 802335a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802335e:	4628      	mov	r0, r5
 8023360:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8023364:	6721      	str	r1, [r4, #112]	; 0x70
 8023366:	e9cd 1700 	strd	r1, r7, [sp]
 802336a:	4631      	mov	r1, r6
 802336c:	f001 fb08 	bl	8024980 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8023370:	4620      	mov	r0, r4
 8023372:	b006      	add	sp, #24
 8023374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023378:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802337c:	2104      	movs	r1, #4
 802337e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023382:	fb92 f1f1 	sdiv	r1, r2, r1
 8023386:	fb07 1303 	mla	r3, r7, r3, r1
 802338a:	441e      	add	r6, r3
 802338c:	4253      	negs	r3, r2
 802338e:	f002 0203 	and.w	r2, r2, #3
 8023392:	f003 0303 	and.w	r3, r3, #3
 8023396:	e7dd      	b.n	8023354 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8023398:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802339c:	2102      	movs	r1, #2
 802339e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80233a2:	2a00      	cmp	r2, #0
 80233a4:	fb92 f1f1 	sdiv	r1, r2, r1
 80233a8:	f002 0201 	and.w	r2, r2, #1
 80233ac:	fb07 1303 	mla	r3, r7, r3, r1
 80233b0:	bfb8      	it	lt
 80233b2:	4252      	neglt	r2, r2
 80233b4:	441e      	add	r6, r3
 80233b6:	e7cf      	b.n	8023358 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x198>
 80233b8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80233bc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80233c0:	437b      	muls	r3, r7
 80233c2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80233c6:	441e      	add	r6, r3
 80233c8:	2200      	movs	r2, #0
 80233ca:	e7c6      	b.n	802335a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x19a>
 80233cc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80233d0:	2103      	movs	r1, #3
 80233d2:	fb07 f203 	mul.w	r2, r7, r3
 80233d6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80233da:	fb13 2301 	smlabb	r3, r3, r1, r2
 80233de:	e7f2      	b.n	80233c6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 80233e0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80233e4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80233e8:	fb07 2303 	mla	r3, r7, r3, r2
 80233ec:	e7eb      	b.n	80233c6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 80233ee:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80233f2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80233f6:	437b      	muls	r3, r7
 80233f8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80233fc:	e7e3      	b.n	80233c6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 80233fe:	4b07      	ldr	r3, [pc, #28]	; (802341c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x25c>)
 8023400:	2169      	movs	r1, #105	; 0x69
 8023402:	4a03      	ldr	r2, [pc, #12]	; (8023410 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8023404:	e70e      	b.n	8023224 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x64>
 8023406:	bf00      	nop
 8023408:	0802a970 	.word	0x0802a970
 802340c:	0802a8b8 	.word	0x0802a8b8
 8023410:	0802a978 	.word	0x0802a978
 8023414:	0802a914 	.word	0x0802a914
 8023418:	20020fd8 	.word	0x20020fd8
 802341c:	0802a948 	.word	0x0802a948

08023420 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 8023420:	6812      	ldr	r2, [r2, #0]
 8023422:	2a00      	cmp	r2, #0
 8023424:	db0b      	blt.n	802343e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8023426:	9800      	ldr	r0, [sp, #0]
 8023428:	6800      	ldr	r0, [r0, #0]
 802342a:	4290      	cmp	r0, r2
 802342c:	bfd4      	ite	le
 802342e:	2002      	movle	r0, #2
 8023430:	2000      	movgt	r0, #0
 8023432:	680a      	ldr	r2, [r1, #0]
 8023434:	2a00      	cmp	r2, #0
 8023436:	da04      	bge.n	8023442 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8023438:	f040 0004 	orr.w	r0, r0, #4
 802343c:	4770      	bx	lr
 802343e:	2001      	movs	r0, #1
 8023440:	e7f7      	b.n	8023432 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 8023442:	681b      	ldr	r3, [r3, #0]
 8023444:	4293      	cmp	r3, r2
 8023446:	bfd8      	it	le
 8023448:	f040 0008 	orrle.w	r0, r0, #8
 802344c:	4770      	bx	lr
	...

08023450 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8023450:	4b07      	ldr	r3, [pc, #28]	; (8023470 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8023452:	b510      	push	{r4, lr}
 8023454:	781b      	ldrb	r3, [r3, #0]
 8023456:	2b01      	cmp	r3, #1
 8023458:	d108      	bne.n	802346c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 802345a:	6843      	ldr	r3, [r0, #4]
 802345c:	6814      	ldr	r4, [r2, #0]
 802345e:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8023462:	680b      	ldr	r3, [r1, #0]
 8023464:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8023468:	6013      	str	r3, [r2, #0]
 802346a:	600c      	str	r4, [r1, #0]
 802346c:	bd10      	pop	{r4, pc}
 802346e:	bf00      	nop
 8023470:	20020fd0 	.word	0x20020fd0

08023474 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8023474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023476:	b085      	sub	sp, #20
 8023478:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802347c:	4604      	mov	r4, r0
 802347e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8023482:	b33b      	cbz	r3, 80234d4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8023484:	aa02      	add	r2, sp, #8
 8023486:	a903      	add	r1, sp, #12
 8023488:	f7ff ffe2 	bl	8023450 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802348c:	68a3      	ldr	r3, [r4, #8]
 802348e:	9e03      	ldr	r6, [sp, #12]
 8023490:	aa02      	add	r2, sp, #8
 8023492:	9f02      	ldr	r7, [sp, #8]
 8023494:	a903      	add	r1, sp, #12
 8023496:	1af6      	subs	r6, r6, r3
 8023498:	68e3      	ldr	r3, [r4, #12]
 802349a:	4620      	mov	r0, r4
 802349c:	1aff      	subs	r7, r7, r3
 802349e:	f104 0314 	add.w	r3, r4, #20
 80234a2:	9603      	str	r6, [sp, #12]
 80234a4:	9300      	str	r3, [sp, #0]
 80234a6:	f104 0310 	add.w	r3, r4, #16
 80234aa:	9702      	str	r7, [sp, #8]
 80234ac:	f7ff ffb8 	bl	8023420 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80234b0:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 80234b4:	4605      	mov	r5, r0
 80234b6:	b97b      	cbnz	r3, 80234d8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 80234b8:	463a      	mov	r2, r7
 80234ba:	4631      	mov	r1, r6
 80234bc:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80234c0:	f7ff fe78 	bl	80231b4 <_ZN8touchgfx10Rasterizer6lineToEii>
 80234c4:	9b03      	ldr	r3, [sp, #12]
 80234c6:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 80234ca:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 80234ce:	9b02      	ldr	r3, [sp, #8]
 80234d0:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 80234d4:	b005      	add	sp, #20
 80234d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80234d8:	b110      	cbz	r0, 80234e0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 80234da:	ea13 0200 	ands.w	r2, r3, r0
 80234de:	d11c      	bne.n	802351a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 80234e0:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 80234e4:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80234e8:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 80234ec:	b188      	cbz	r0, 8023512 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 80234ee:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 80234f2:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80234f6:	b913      	cbnz	r3, 80234fe <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 80234f8:	4630      	mov	r0, r6
 80234fa:	f001 f841 	bl	8024580 <_ZN8touchgfx7Outline6moveToEii>
 80234fe:	2300      	movs	r3, #0
 8023500:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8023504:	2301      	movs	r3, #1
 8023506:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 802350a:	4630      	mov	r0, r6
 802350c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8023510:	e7d6      	b.n	80234c0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 8023512:	4630      	mov	r0, r6
 8023514:	f7ff fe4e 	bl	80231b4 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023518:	e7f7      	b.n	802350a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 802351a:	4615      	mov	r5, r2
 802351c:	e7d2      	b.n	80234c4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

0802351e <_ZN8touchgfx6Canvas5closeEv>:
 802351e:	b538      	push	{r3, r4, r5, lr}
 8023520:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 8023524:	4604      	mov	r4, r0
 8023526:	b993      	cbnz	r3, 802354e <_ZN8touchgfx6Canvas5closeEv+0x30>
 8023528:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 802352c:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 8023530:	4213      	tst	r3, r2
 8023532:	d10c      	bne.n	802354e <_ZN8touchgfx6Canvas5closeEv+0x30>
 8023534:	f100 0530 	add.w	r5, r0, #48	; 0x30
 8023538:	b123      	cbz	r3, 8023544 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802353a:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 802353e:	4628      	mov	r0, r5
 8023540:	f7ff fe38 	bl	80231b4 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023544:	4628      	mov	r0, r5
 8023546:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 802354a:	f7ff fe33 	bl	80231b4 <_ZN8touchgfx10Rasterizer6lineToEii>
 802354e:	2300      	movs	r3, #0
 8023550:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8023554:	bd38      	pop	{r3, r4, r5, pc}

08023556 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8023556:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023558:	b085      	sub	sp, #20
 802355a:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802355e:	4604      	mov	r4, r0
 8023560:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8023564:	b353      	cbz	r3, 80235bc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8023566:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 802356a:	b90b      	cbnz	r3, 8023570 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 802356c:	f7ff ffd7 	bl	802351e <_ZN8touchgfx6Canvas5closeEv>
 8023570:	aa02      	add	r2, sp, #8
 8023572:	a903      	add	r1, sp, #12
 8023574:	4620      	mov	r0, r4
 8023576:	f7ff ff6b 	bl	8023450 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802357a:	68a3      	ldr	r3, [r4, #8]
 802357c:	9d03      	ldr	r5, [sp, #12]
 802357e:	aa02      	add	r2, sp, #8
 8023580:	9e02      	ldr	r6, [sp, #8]
 8023582:	a903      	add	r1, sp, #12
 8023584:	1aed      	subs	r5, r5, r3
 8023586:	68e3      	ldr	r3, [r4, #12]
 8023588:	4620      	mov	r0, r4
 802358a:	1af6      	subs	r6, r6, r3
 802358c:	f104 0314 	add.w	r3, r4, #20
 8023590:	9503      	str	r5, [sp, #12]
 8023592:	9300      	str	r3, [sp, #0]
 8023594:	f104 0310 	add.w	r3, r4, #16
 8023598:	9602      	str	r6, [sp, #8]
 802359a:	f7ff ff41 	bl	8023420 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802359e:	4607      	mov	r7, r0
 80235a0:	b170      	cbz	r0, 80235c0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 80235a2:	2301      	movs	r3, #1
 80235a4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80235a8:	9a03      	ldr	r2, [sp, #12]
 80235aa:	9b02      	ldr	r3, [sp, #8]
 80235ac:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 80235b0:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 80235b4:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 80235b8:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 80235bc:	b005      	add	sp, #20
 80235be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80235c0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80235c4:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 80235c8:	b92b      	cbnz	r3, 80235d6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 80235ca:	4632      	mov	r2, r6
 80235cc:	4629      	mov	r1, r5
 80235ce:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80235d2:	f000 ffd5 	bl	8024580 <_ZN8touchgfx7Outline6moveToEii>
 80235d6:	2300      	movs	r3, #0
 80235d8:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80235dc:	2301      	movs	r3, #1
 80235de:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 80235e2:	e7e1      	b.n	80235a8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

080235e4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 80235e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235e8:	4604      	mov	r4, r0
 80235ea:	b087      	sub	sp, #28
 80235ec:	9105      	str	r1, [sp, #20]
 80235ee:	f001 f90c 	bl	802480a <_ZN8touchgfx7Outline8getCellsEv>
 80235f2:	f8d4 9008 	ldr.w	r9, [r4, #8]
 80235f6:	4605      	mov	r5, r0
 80235f8:	f1b9 0f00 	cmp.w	r9, #0
 80235fc:	d103      	bne.n	8023606 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 80235fe:	2001      	movs	r0, #1
 8023600:	b007      	add	sp, #28
 8023602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023606:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 802360a:	2e00      	cmp	r6, #0
 802360c:	d139      	bne.n	8023682 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 802360e:	f104 0848 	add.w	r8, r4, #72	; 0x48
 8023612:	f105 0708 	add.w	r7, r5, #8
 8023616:	4640      	mov	r0, r8
 8023618:	f001 f939 	bl	802488e <_ZN8touchgfx8Scanline5resetEv>
 802361c:	f109 33ff 	add.w	r3, r9, #4294967295
 8023620:	9303      	str	r3, [sp, #12]
 8023622:	f9b5 b000 	ldrsh.w	fp, [r5]
 8023626:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 802362a:	46da      	mov	sl, fp
 802362c:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8023630:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8023634:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8023638:	9b03      	ldr	r3, [sp, #12]
 802363a:	4416      	add	r6, r2
 802363c:	9504      	str	r5, [sp, #16]
 802363e:	463d      	mov	r5, r7
 8023640:	3b01      	subs	r3, #1
 8023642:	9303      	str	r3, [sp, #12]
 8023644:	3301      	adds	r3, #1
 8023646:	d01e      	beq.n	8023686 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8023648:	3708      	adds	r7, #8
 802364a:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 802364e:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 8023652:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8023656:	4290      	cmp	r0, r2
 8023658:	d11e      	bne.n	8023698 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 802365a:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 802365e:	4411      	add	r1, r2
 8023660:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8023664:	e7e8      	b.n	8023638 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8023666:	1c91      	adds	r1, r2, #2
 8023668:	f04f 0301 	mov.w	r3, #1
 802366c:	65e1      	str	r1, [r4, #92]	; 0x5c
 802366e:	8053      	strh	r3, [r2, #2]
 8023670:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8023672:	1c91      	adds	r1, r2, #2
 8023674:	65a1      	str	r1, [r4, #88]	; 0x58
 8023676:	f8a2 b002 	strh.w	fp, [r2, #2]
 802367a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802367c:	3201      	adds	r2, #1
 802367e:	6562      	str	r2, [r4, #84]	; 0x54
 8023680:	e03a      	b.n	80236f8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8023682:	2000      	movs	r0, #0
 8023684:	e7bc      	b.n	8023600 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8023686:	b951      	cbnz	r1, 802369e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8023688:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802368a:	2b00      	cmp	r3, #0
 802368c:	d0b7      	beq.n	80235fe <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802368e:	4641      	mov	r1, r8
 8023690:	9805      	ldr	r0, [sp, #20]
 8023692:	f7ff fd59 	bl	8023148 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8023696:	e7b2      	b.n	80235fe <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8023698:	2900      	cmp	r1, #0
 802369a:	d035      	beq.n	8023708 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 802369c:	9504      	str	r5, [sp, #16]
 802369e:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 80236a2:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80236a6:	f7ff fd3b 	bl	8023120 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 80236aa:	4605      	mov	r5, r0
 80236ac:	b330      	cbz	r0, 80236fc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80236ae:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80236b0:	b182      	cbz	r2, 80236d4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 80236b2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80236b4:	4591      	cmp	r9, r2
 80236b6:	d00d      	beq.n	80236d4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 80236b8:	4641      	mov	r1, r8
 80236ba:	9805      	ldr	r0, [sp, #20]
 80236bc:	f7ff fd44 	bl	8023148 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80236c0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80236c4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80236c6:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 80236ca:	65e2      	str	r2, [r4, #92]	; 0x5c
 80236cc:	2300      	movs	r3, #0
 80236ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80236d0:	6563      	str	r3, [r4, #84]	; 0x54
 80236d2:	65a2      	str	r2, [r4, #88]	; 0x58
 80236d4:	f1bb 0f00 	cmp.w	fp, #0
 80236d8:	db10      	blt.n	80236fc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80236da:	f7ee fdef 	bl	80122bc <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80236de:	4583      	cmp	fp, r0
 80236e0:	da0c      	bge.n	80236fc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80236e2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80236e4:	f802 500b 	strb.w	r5, [r2, fp]
 80236e8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80236ea:	3201      	adds	r2, #1
 80236ec:	4593      	cmp	fp, r2
 80236ee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80236f0:	d1b9      	bne.n	8023666 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 80236f2:	8811      	ldrh	r1, [r2, #0]
 80236f4:	3101      	adds	r1, #1
 80236f6:	8011      	strh	r1, [r2, #0]
 80236f8:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 80236fc:	9b03      	ldr	r3, [sp, #12]
 80236fe:	3301      	adds	r3, #1
 8023700:	d0c2      	beq.n	8023688 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 8023702:	f10b 0a01 	add.w	sl, fp, #1
 8023706:	9d04      	ldr	r5, [sp, #16]
 8023708:	f9b5 3000 	ldrsh.w	r3, [r5]
 802370c:	4553      	cmp	r3, sl
 802370e:	dd88      	ble.n	8023622 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8023710:	01b1      	lsls	r1, r6, #6
 8023712:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8023716:	f7ff fd03 	bl	8023120 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 802371a:	4683      	mov	fp, r0
 802371c:	2800      	cmp	r0, #0
 802371e:	d080      	beq.n	8023622 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8023720:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8023722:	b183      	cbz	r3, 8023746 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8023724:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8023726:	4599      	cmp	r9, r3
 8023728:	d00d      	beq.n	8023746 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802372a:	4641      	mov	r1, r8
 802372c:	9805      	ldr	r0, [sp, #20]
 802372e:	f7ff fd0b 	bl	8023148 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8023732:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023736:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802373a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 802373c:	65e3      	str	r3, [r4, #92]	; 0x5c
 802373e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023740:	65a3      	str	r3, [r4, #88]	; 0x58
 8023742:	2300      	movs	r3, #0
 8023744:	6563      	str	r3, [r4, #84]	; 0x54
 8023746:	f9b5 3000 	ldrsh.w	r3, [r5]
 802374a:	464a      	mov	r2, r9
 802374c:	f8cd b000 	str.w	fp, [sp]
 8023750:	4651      	mov	r1, sl
 8023752:	eba3 030a 	sub.w	r3, r3, sl
 8023756:	4640      	mov	r0, r8
 8023758:	f001 f8c4 	bl	80248e4 <_ZN8touchgfx8Scanline7addSpanEiijj>
 802375c:	e761      	b.n	8023622 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

0802375e <_ZN8touchgfx6Canvas6renderEh>:
 802375e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023760:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8023764:	4604      	mov	r4, r0
 8023766:	460d      	mov	r5, r1
 8023768:	b913      	cbnz	r3, 8023770 <_ZN8touchgfx6Canvas6renderEh+0x12>
 802376a:	2001      	movs	r0, #1
 802376c:	b003      	add	sp, #12
 802376e:	bd30      	pop	{r4, r5, pc}
 8023770:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8023774:	2b00      	cmp	r3, #0
 8023776:	d12f      	bne.n	80237d8 <_ZN8touchgfx6Canvas6renderEh+0x7a>
 8023778:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 802377c:	2b00      	cmp	r3, #0
 802377e:	d0f4      	beq.n	802376a <_ZN8touchgfx6Canvas6renderEh+0xc>
 8023780:	6840      	ldr	r0, [r0, #4]
 8023782:	6803      	ldr	r3, [r0, #0]
 8023784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023786:	4798      	blx	r3
 8023788:	fb10 f105 	smulbb	r1, r0, r5
 802378c:	b288      	uxth	r0, r1
 802378e:	1c41      	adds	r1, r0, #1
 8023790:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8023794:	120d      	asrs	r5, r1, #8
 8023796:	d0e8      	beq.n	802376a <_ZN8touchgfx6Canvas6renderEh+0xc>
 8023798:	4620      	mov	r0, r4
 802379a:	f7ff fec0 	bl	802351e <_ZN8touchgfx6Canvas5closeEv>
 802379e:	6860      	ldr	r0, [r4, #4]
 80237a0:	6803      	ldr	r3, [r0, #0]
 80237a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80237a4:	4798      	blx	r3
 80237a6:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 80237aa:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 80237ae:	8082      	strh	r2, [r0, #4]
 80237b0:	80c3      	strh	r3, [r0, #6]
 80237b2:	6860      	ldr	r0, [r4, #4]
 80237b4:	6803      	ldr	r3, [r0, #0]
 80237b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80237b8:	4798      	blx	r3
 80237ba:	7205      	strb	r5, [r0, #8]
 80237bc:	6860      	ldr	r0, [r4, #4]
 80237be:	6803      	ldr	r3, [r0, #0]
 80237c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80237c2:	4798      	blx	r3
 80237c4:	f104 0318 	add.w	r3, r4, #24
 80237c8:	4669      	mov	r1, sp
 80237ca:	e9cd 3000 	strd	r3, r0, [sp]
 80237ce:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80237d2:	f7ff ff07 	bl	80235e4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 80237d6:	e7c9      	b.n	802376c <_ZN8touchgfx6Canvas6renderEh+0xe>
 80237d8:	2000      	movs	r0, #0
 80237da:	e7c7      	b.n	802376c <_ZN8touchgfx6Canvas6renderEh+0xe>

080237dc <_ZN8touchgfx6CanvasD1Ev>:
 80237dc:	b538      	push	{r3, r4, r5, lr}
 80237de:	4605      	mov	r5, r0
 80237e0:	4b08      	ldr	r3, [pc, #32]	; (8023804 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 80237e2:	4604      	mov	r4, r0
 80237e4:	f845 3b30 	str.w	r3, [r5], #48
 80237e8:	4b07      	ldr	r3, [pc, #28]	; (8023808 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 80237ea:	6818      	ldr	r0, [r3, #0]
 80237ec:	6803      	ldr	r3, [r0, #0]
 80237ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80237f0:	4798      	blx	r3
 80237f2:	4628      	mov	r0, r5
 80237f4:	f000 f833 	bl	802385e <_ZN8touchgfx7OutlineD1Ev>
 80237f8:	f104 0018 	add.w	r0, r4, #24
 80237fc:	f001 f8ab 	bl	8024956 <_ZN8touchgfx15RenderingBufferD1Ev>
 8023800:	4620      	mov	r0, r4
 8023802:	bd38      	pop	{r3, r4, r5, pc}
 8023804:	0802a970 	.word	0x0802a970
 8023808:	20020fd8 	.word	0x20020fd8

0802380c <_ZN8touchgfx6CanvasD0Ev>:
 802380c:	b510      	push	{r4, lr}
 802380e:	4604      	mov	r4, r0
 8023810:	f7ff ffe4 	bl	80237dc <_ZN8touchgfx6CanvasD1Ev>
 8023814:	21bc      	movs	r1, #188	; 0xbc
 8023816:	4620      	mov	r0, r4
 8023818:	f001 f8bf 	bl	802499a <_ZdlPvj>
 802381c:	4620      	mov	r0, r4
 802381e:	bd10      	pop	{r4, pc}

08023820 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8023820:	790b      	ldrb	r3, [r1, #4]
 8023822:	2b00      	cmp	r3, #0
 8023824:	bf0c      	ite	eq
 8023826:	2301      	moveq	r3, #1
 8023828:	2300      	movne	r3, #0
 802382a:	b570      	push	{r4, r5, r6, lr}
 802382c:	4604      	mov	r4, r0
 802382e:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8023832:	460e      	mov	r6, r1
 8023834:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8023838:	d109      	bne.n	802384e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 802383a:	b14d      	cbz	r5, 8023850 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 802383c:	7933      	ldrb	r3, [r6, #4]
 802383e:	2b01      	cmp	r3, #1
 8023840:	d10c      	bne.n	802385c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8023842:	6823      	ldr	r3, [r4, #0]
 8023844:	4620      	mov	r0, r4
 8023846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8023848:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802384c:	4718      	bx	r3
 802384e:	b12d      	cbz	r5, 802385c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8023850:	6823      	ldr	r3, [r4, #0]
 8023852:	4620      	mov	r0, r4
 8023854:	695b      	ldr	r3, [r3, #20]
 8023856:	4798      	blx	r3
 8023858:	2d00      	cmp	r5, #0
 802385a:	d1ef      	bne.n	802383c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 802385c:	bd70      	pop	{r4, r5, r6, pc}

0802385e <_ZN8touchgfx7OutlineD1Ev>:
 802385e:	4770      	bx	lr

08023860 <_ZN8touchgfx7OutlineD0Ev>:
 8023860:	b510      	push	{r4, lr}
 8023862:	4604      	mov	r4, r0
 8023864:	2148      	movs	r1, #72	; 0x48
 8023866:	f001 f898 	bl	802499a <_ZdlPvj>
 802386a:	4620      	mov	r0, r4
 802386c:	bd10      	pop	{r4, pc}

0802386e <_ZN8touchgfx7Outline5resetEv>:
 802386e:	b510      	push	{r4, lr}
 8023870:	4604      	mov	r4, r0
 8023872:	f7ee fd3b 	bl	80122ec <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8023876:	60e0      	str	r0, [r4, #12]
 8023878:	f7ee fd3e 	bl	80122f8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 802387c:	68e3      	ldr	r3, [r4, #12]
 802387e:	2200      	movs	r2, #0
 8023880:	08c0      	lsrs	r0, r0, #3
 8023882:	6123      	str	r3, [r4, #16]
 8023884:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023888:	6060      	str	r0, [r4, #4]
 802388a:	82a3      	strh	r3, [r4, #20]
 802388c:	82e3      	strh	r3, [r4, #22]
 802388e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023890:	60a2      	str	r2, [r4, #8]
 8023892:	f023 0301 	bic.w	r3, r3, #1
 8023896:	8322      	strh	r2, [r4, #24]
 8023898:	8362      	strh	r2, [r4, #26]
 802389a:	f043 0302 	orr.w	r3, r3, #2
 802389e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80238a2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80238a4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80238a8:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 80238ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80238b0:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80238b4:	bd10      	pop	{r4, pc}
	...

080238b8 <_ZN8touchgfx7OutlineC1Ev>:
 80238b8:	4b0f      	ldr	r3, [pc, #60]	; (80238f8 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 80238ba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80238be:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80238c2:	b510      	push	{r4, lr}
 80238c4:	6003      	str	r3, [r0, #0]
 80238c6:	2300      	movs	r3, #0
 80238c8:	4604      	mov	r4, r0
 80238ca:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80238ce:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80238d2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80238d6:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80238da:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80238de:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 80238e2:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 80238e6:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 80238ea:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 80238ee:	f7ff ffbe 	bl	802386e <_ZN8touchgfx7Outline5resetEv>
 80238f2:	4620      	mov	r0, r4
 80238f4:	bd10      	pop	{r4, pc}
 80238f6:	bf00      	nop
 80238f8:	0802aa40 	.word	0x0802aa40

080238fc <_ZN8touchgfx7Outline10renderLineEiiii>:
 80238fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023900:	b095      	sub	sp, #84	; 0x54
 8023902:	4604      	mov	r4, r0
 8023904:	1155      	asrs	r5, r2, #5
 8023906:	f002 061f 	and.w	r6, r2, #31
 802390a:	981e      	ldr	r0, [sp, #120]	; 0x78
 802390c:	1157      	asrs	r7, r2, #5
 802390e:	9304      	str	r3, [sp, #16]
 8023910:	1153      	asrs	r3, r2, #5
 8023912:	9300      	str	r3, [sp, #0]
 8023914:	1143      	asrs	r3, r0, #5
 8023916:	930c      	str	r3, [sp, #48]	; 0x30
 8023918:	f000 031f 	and.w	r3, r0, #31
 802391c:	9303      	str	r3, [sp, #12]
 802391e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023920:	42ab      	cmp	r3, r5
 8023922:	bfc8      	it	gt
 8023924:	462b      	movgt	r3, r5
 8023926:	ea4f 1562 	mov.w	r5, r2, asr #5
 802392a:	bfc8      	it	gt
 802392c:	6323      	strgt	r3, [r4, #48]	; 0x30
 802392e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023930:	42ab      	cmp	r3, r5
 8023932:	bfd8      	it	le
 8023934:	462b      	movle	r3, r5
 8023936:	ea4f 1560 	mov.w	r5, r0, asr #5
 802393a:	bfdc      	itt	le
 802393c:	3301      	addle	r3, #1
 802393e:	63a3      	strle	r3, [r4, #56]	; 0x38
 8023940:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023942:	42ab      	cmp	r3, r5
 8023944:	bfc8      	it	gt
 8023946:	462b      	movgt	r3, r5
 8023948:	ea4f 1560 	mov.w	r5, r0, asr #5
 802394c:	bfc8      	it	gt
 802394e:	6323      	strgt	r3, [r4, #48]	; 0x30
 8023950:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023952:	42ab      	cmp	r3, r5
 8023954:	bfd8      	it	le
 8023956:	462b      	movle	r3, r5
 8023958:	ea4f 1561 	mov.w	r5, r1, asr #5
 802395c:	bfdc      	itt	le
 802395e:	3301      	addle	r3, #1
 8023960:	63a3      	strle	r3, [r4, #56]	; 0x38
 8023962:	9b04      	ldr	r3, [sp, #16]
 8023964:	eba3 0a01 	sub.w	sl, r3, r1
 8023968:	1143      	asrs	r3, r0, #5
 802396a:	429f      	cmp	r7, r3
 802396c:	f040 811d 	bne.w	8023baa <_ZN8touchgfx7Outline10renderLineEiiii+0x2ae>
 8023970:	9b04      	ldr	r3, [sp, #16]
 8023972:	ea4f 1b63 	mov.w	fp, r3, asr #5
 8023976:	9b03      	ldr	r3, [sp, #12]
 8023978:	429e      	cmp	r6, r3
 802397a:	d131      	bne.n	80239e0 <_ZN8touchgfx7Outline10renderLineEiiii+0xe4>
 802397c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023980:	fa0f fb8b 	sxth.w	fp, fp
 8023984:	f9bd 2000 	ldrsh.w	r2, [sp]
 8023988:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802398c:	eb0b 4002 	add.w	r0, fp, r2, lsl #16
 8023990:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8023994:	4281      	cmp	r1, r0
 8023996:	f000 80e6 	beq.w	8023b66 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 802399a:	8b60      	ldrh	r0, [r4, #26]
 802399c:	8b21      	ldrh	r1, [r4, #24]
 802399e:	4301      	orrs	r1, r0
 80239a0:	d00b      	beq.n	80239ba <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 80239a2:	2b00      	cmp	r3, #0
 80239a4:	db09      	blt.n	80239ba <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 80239a6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80239a8:	428b      	cmp	r3, r1
 80239aa:	da06      	bge.n	80239ba <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 80239ac:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80239b0:	4299      	cmp	r1, r3
 80239b2:	d308      	bcc.n	80239c6 <_ZN8touchgfx7Outline10renderLineEiiii+0xca>
 80239b4:	2301      	movs	r3, #1
 80239b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80239ba:	f8a4 b014 	strh.w	fp, [r4, #20]
 80239be:	2300      	movs	r3, #0
 80239c0:	82e2      	strh	r2, [r4, #22]
 80239c2:	8323      	strh	r3, [r4, #24]
 80239c4:	e01f      	b.n	8023a06 <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 80239c6:	f104 0314 	add.w	r3, r4, #20
 80239ca:	6925      	ldr	r5, [r4, #16]
 80239cc:	cb03      	ldmia	r3!, {r0, r1}
 80239ce:	6028      	str	r0, [r5, #0]
 80239d0:	6069      	str	r1, [r5, #4]
 80239d2:	6923      	ldr	r3, [r4, #16]
 80239d4:	3308      	adds	r3, #8
 80239d6:	6123      	str	r3, [r4, #16]
 80239d8:	68a3      	ldr	r3, [r4, #8]
 80239da:	3301      	adds	r3, #1
 80239dc:	60a3      	str	r3, [r4, #8]
 80239de:	e7ec      	b.n	80239ba <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 80239e0:	9b04      	ldr	r3, [sp, #16]
 80239e2:	45ab      	cmp	fp, r5
 80239e4:	f001 011f 	and.w	r1, r1, #31
 80239e8:	8b20      	ldrh	r0, [r4, #24]
 80239ea:	f003 031f 	and.w	r3, r3, #31
 80239ee:	8b62      	ldrh	r2, [r4, #26]
 80239f0:	9305      	str	r3, [sp, #20]
 80239f2:	9b03      	ldr	r3, [sp, #12]
 80239f4:	eba3 0306 	sub.w	r3, r3, r6
 80239f8:	d107      	bne.n	8023a0a <_ZN8touchgfx7Outline10renderLineEiiii+0x10e>
 80239fa:	4418      	add	r0, r3
 80239fc:	8320      	strh	r0, [r4, #24]
 80239fe:	9805      	ldr	r0, [sp, #20]
 8023a00:	4401      	add	r1, r0
 8023a02:	fb03 2301 	mla	r3, r3, r1, r2
 8023a06:	8363      	strh	r3, [r4, #26]
 8023a08:	e0ad      	b.n	8023b66 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8023a0a:	f1ba 0f00 	cmp.w	sl, #0
 8023a0e:	db33      	blt.n	8023a78 <_ZN8touchgfx7Outline10renderLineEiiii+0x17c>
 8023a10:	2701      	movs	r7, #1
 8023a12:	f1c1 0c20 	rsb	ip, r1, #32
 8023a16:	9702      	str	r7, [sp, #8]
 8023a18:	2720      	movs	r7, #32
 8023a1a:	fb03 f30c 	mul.w	r3, r3, ip
 8023a1e:	9701      	str	r7, [sp, #4]
 8023a20:	9f01      	ldr	r7, [sp, #4]
 8023a22:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8023a26:	4439      	add	r1, r7
 8023a28:	fb93 fcfa 	sdiv	ip, r3, sl
 8023a2c:	fb0a 331c 	mls	r3, sl, ip, r3
 8023a30:	2b00      	cmp	r3, #0
 8023a32:	bfbc      	itt	lt
 8023a34:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8023a38:	4453      	addlt	r3, sl
 8023a3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8023a3e:	9a02      	ldr	r2, [sp, #8]
 8023a40:	4460      	add	r0, ip
 8023a42:	4415      	add	r5, r2
 8023a44:	f9bd 2000 	ldrsh.w	r2, [sp]
 8023a48:	b200      	sxth	r0, r0
 8023a4a:	0417      	lsls	r7, r2, #16
 8023a4c:	9200      	str	r2, [sp, #0]
 8023a4e:	fa0f fe85 	sxth.w	lr, r5
 8023a52:	8320      	strh	r0, [r4, #24]
 8023a54:	9704      	str	r7, [sp, #16]
 8023a56:	b209      	sxth	r1, r1
 8023a58:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
 8023a5c:	9a04      	ldr	r2, [sp, #16]
 8023a5e:	eb07 4708 	add.w	r7, r7, r8, lsl #16
 8023a62:	8361      	strh	r1, [r4, #26]
 8023a64:	eb0e 0902 	add.w	r9, lr, r2
 8023a68:	454f      	cmp	r7, r9
 8023a6a:	d10d      	bne.n	8023a88 <_ZN8touchgfx7Outline10renderLineEiiii+0x18c>
 8023a6c:	4ba0      	ldr	r3, [pc, #640]	; (8023cf0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f4>)
 8023a6e:	2176      	movs	r1, #118	; 0x76
 8023a70:	4aa0      	ldr	r2, [pc, #640]	; (8023cf4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f8>)
 8023a72:	48a1      	ldr	r0, [pc, #644]	; (8023cf8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3fc>)
 8023a74:	f000 ffc0 	bl	80249f8 <__assert_func>
 8023a78:	f04f 37ff 	mov.w	r7, #4294967295
 8023a7c:	434b      	muls	r3, r1
 8023a7e:	f1ca 0a00 	rsb	sl, sl, #0
 8023a82:	9702      	str	r7, [sp, #8]
 8023a84:	2700      	movs	r7, #0
 8023a86:	e7ca      	b.n	8023a1e <_ZN8touchgfx7Outline10renderLineEiiii+0x122>
 8023a88:	ea50 0201 	orrs.w	r2, r0, r1
 8023a8c:	d00c      	beq.n	8023aa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8023a8e:	f1b8 0f00 	cmp.w	r8, #0
 8023a92:	db09      	blt.n	8023aa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8023a94:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023a96:	4588      	cmp	r8, r1
 8023a98:	da06      	bge.n	8023aa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8023a9a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023a9e:	4288      	cmp	r0, r1
 8023aa0:	d364      	bcc.n	8023b6c <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8023aa2:	2101      	movs	r1, #1
 8023aa4:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8023aa8:	2100      	movs	r1, #0
 8023aaa:	9a00      	ldr	r2, [sp, #0]
 8023aac:	45ab      	cmp	fp, r5
 8023aae:	f8a4 e014 	strh.w	lr, [r4, #20]
 8023ab2:	82e2      	strh	r2, [r4, #22]
 8023ab4:	4466      	add	r6, ip
 8023ab6:	8321      	strh	r1, [r4, #24]
 8023ab8:	8361      	strh	r1, [r4, #26]
 8023aba:	d04b      	beq.n	8023b54 <_ZN8touchgfx7Outline10renderLineEiiii+0x258>
 8023abc:	9a03      	ldr	r2, [sp, #12]
 8023abe:	eba3 030a 	sub.w	r3, r3, sl
 8023ac2:	f04f 0800 	mov.w	r8, #0
 8023ac6:	1b91      	subs	r1, r2, r6
 8023ac8:	448c      	add	ip, r1
 8023aca:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8023ace:	fb9c f7fa 	sdiv	r7, ip, sl
 8023ad2:	fb0a cc17 	mls	ip, sl, r7, ip
 8023ad6:	f1bc 0f00 	cmp.w	ip, #0
 8023ada:	bfbc      	itt	lt
 8023adc:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8023ae0:	44d4      	addlt	ip, sl
 8023ae2:	1c7a      	adds	r2, r7, #1
 8023ae4:	9207      	str	r2, [sp, #28]
 8023ae6:	eb13 030c 	adds.w	r3, r3, ip
 8023aea:	9a02      	ldr	r2, [sp, #8]
 8023aec:	bf54      	ite	pl
 8023aee:	9807      	ldrpl	r0, [sp, #28]
 8023af0:	4638      	movmi	r0, r7
 8023af2:	4415      	add	r5, r2
 8023af4:	9a04      	ldr	r2, [sp, #16]
 8023af6:	fa0f fe80 	sxth.w	lr, r0
 8023afa:	4406      	add	r6, r0
 8023afc:	ea4f 1140 	mov.w	r1, r0, lsl #5
 8023b00:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8023b04:	fa0f f985 	sxth.w	r9, r5
 8023b08:	bf58      	it	pl
 8023b0a:	eba3 030a 	subpl.w	r3, r3, sl
 8023b0e:	4410      	add	r0, r2
 8023b10:	b209      	sxth	r1, r1
 8023b12:	444a      	add	r2, r9
 8023b14:	f8a4 e018 	strh.w	lr, [r4, #24]
 8023b18:	8361      	strh	r1, [r4, #26]
 8023b1a:	4290      	cmp	r0, r2
 8023b1c:	d0a6      	beq.n	8023a6c <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8023b1e:	ea5e 0201 	orrs.w	r2, lr, r1
 8023b22:	d00d      	beq.n	8023b40 <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8023b24:	9a00      	ldr	r2, [sp, #0]
 8023b26:	2a00      	cmp	r2, #0
 8023b28:	db0a      	blt.n	8023b40 <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8023b2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023b2c:	428a      	cmp	r2, r1
 8023b2e:	da07      	bge.n	8023b40 <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8023b30:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023b34:	4288      	cmp	r0, r1
 8023b36:	d329      	bcc.n	8023b8c <_ZN8touchgfx7Outline10renderLineEiiii+0x290>
 8023b38:	f04f 0201 	mov.w	r2, #1
 8023b3c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8023b40:	9a00      	ldr	r2, [sp, #0]
 8023b42:	45ab      	cmp	fp, r5
 8023b44:	f8a4 9014 	strh.w	r9, [r4, #20]
 8023b48:	82e2      	strh	r2, [r4, #22]
 8023b4a:	f8a4 8018 	strh.w	r8, [r4, #24]
 8023b4e:	f8a4 801a 	strh.w	r8, [r4, #26]
 8023b52:	d1c8      	bne.n	8023ae6 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ea>
 8023b54:	9b03      	ldr	r3, [sp, #12]
 8023b56:	9a01      	ldr	r2, [sp, #4]
 8023b58:	1b9e      	subs	r6, r3, r6
 8023b5a:	9b05      	ldr	r3, [sp, #20]
 8023b5c:	3320      	adds	r3, #32
 8023b5e:	8326      	strh	r6, [r4, #24]
 8023b60:	1a9b      	subs	r3, r3, r2
 8023b62:	435e      	muls	r6, r3
 8023b64:	8366      	strh	r6, [r4, #26]
 8023b66:	b015      	add	sp, #84	; 0x54
 8023b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b6c:	f104 0714 	add.w	r7, r4, #20
 8023b70:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8023b74:	cf03      	ldmia	r7!, {r0, r1}
 8023b76:	f8c8 0000 	str.w	r0, [r8]
 8023b7a:	f8c8 1004 	str.w	r1, [r8, #4]
 8023b7e:	6921      	ldr	r1, [r4, #16]
 8023b80:	3108      	adds	r1, #8
 8023b82:	6121      	str	r1, [r4, #16]
 8023b84:	68a1      	ldr	r1, [r4, #8]
 8023b86:	3101      	adds	r1, #1
 8023b88:	60a1      	str	r1, [r4, #8]
 8023b8a:	e78d      	b.n	8023aa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8023b8c:	f104 0e14 	add.w	lr, r4, #20
 8023b90:	6922      	ldr	r2, [r4, #16]
 8023b92:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8023b96:	9206      	str	r2, [sp, #24]
 8023b98:	6010      	str	r0, [r2, #0]
 8023b9a:	6051      	str	r1, [r2, #4]
 8023b9c:	6921      	ldr	r1, [r4, #16]
 8023b9e:	3108      	adds	r1, #8
 8023ba0:	6121      	str	r1, [r4, #16]
 8023ba2:	68a1      	ldr	r1, [r4, #8]
 8023ba4:	3101      	adds	r1, #1
 8023ba6:	60a1      	str	r1, [r4, #8]
 8023ba8:	e7ca      	b.n	8023b40 <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8023baa:	eba0 0b02 	sub.w	fp, r0, r2
 8023bae:	f1ba 0f00 	cmp.w	sl, #0
 8023bb2:	f040 80a3 	bne.w	8023cfc <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8023bb6:	f1bb 0f00 	cmp.w	fp, #0
 8023bba:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8023bbe:	8b62      	ldrh	r2, [r4, #26]
 8023bc0:	b22d      	sxth	r5, r5
 8023bc2:	bfa8      	it	ge
 8023bc4:	f04f 0a20 	movge.w	sl, #32
 8023bc8:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8023bcc:	8b21      	ldrh	r1, [r4, #24]
 8023bce:	bfb8      	it	lt
 8023bd0:	f04f 39ff 	movlt.w	r9, #4294967295
 8023bd4:	ebaa 0606 	sub.w	r6, sl, r6
 8023bd8:	bfa8      	it	ge
 8023bda:	f04f 0901 	movge.w	r9, #1
 8023bde:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8023be2:	4431      	add	r1, r6
 8023be4:	fb06 2603 	mla	r6, r6, r3, r2
 8023be8:	9a00      	ldr	r2, [sp, #0]
 8023bea:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 8023bee:	b209      	sxth	r1, r1
 8023bf0:	444a      	add	r2, r9
 8023bf2:	b236      	sxth	r6, r6
 8023bf4:	eb0c 4c00 	add.w	ip, ip, r0, lsl #16
 8023bf8:	8321      	strh	r1, [r4, #24]
 8023bfa:	b217      	sxth	r7, r2
 8023bfc:	8366      	strh	r6, [r4, #26]
 8023bfe:	eb05 4e07 	add.w	lr, r5, r7, lsl #16
 8023c02:	45f4      	cmp	ip, lr
 8023c04:	f43f af32 	beq.w	8023a6c <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8023c08:	4331      	orrs	r1, r6
 8023c0a:	d00b      	beq.n	8023c24 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8023c0c:	2800      	cmp	r0, #0
 8023c0e:	db09      	blt.n	8023c24 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8023c10:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023c12:	4288      	cmp	r0, r1
 8023c14:	da06      	bge.n	8023c24 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8023c16:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023c1a:	4288      	cmp	r0, r1
 8023c1c:	d33b      	bcc.n	8023c96 <_ZN8touchgfx7Outline10renderLineEiiii+0x39a>
 8023c1e:	2101      	movs	r1, #1
 8023c20:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8023c24:	f1aa 0610 	sub.w	r6, sl, #16
 8023c28:	82e7      	strh	r7, [r4, #22]
 8023c2a:	2700      	movs	r7, #0
 8023c2c:	82a5      	strh	r5, [r4, #20]
 8023c2e:	0076      	lsls	r6, r6, #1
 8023c30:	8327      	strh	r7, [r4, #24]
 8023c32:	fb06 fc03 	mul.w	ip, r6, r3
 8023c36:	b236      	sxth	r6, r6
 8023c38:	8367      	strh	r7, [r4, #26]
 8023c3a:	fa0f fc8c 	sxth.w	ip, ip
 8023c3e:	ea46 010c 	orr.w	r1, r6, ip
 8023c42:	9100      	str	r1, [sp, #0]
 8023c44:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023c46:	428a      	cmp	r2, r1
 8023c48:	d046      	beq.n	8023cd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3dc>
 8023c4a:	444a      	add	r2, r9
 8023c4c:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8023c50:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8023c54:	fa0f f882 	sxth.w	r8, r2
 8023c58:	8326      	strh	r6, [r4, #24]
 8023c5a:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8023c5e:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8023c62:	eb05 4e08 	add.w	lr, r5, r8, lsl #16
 8023c66:	4570      	cmp	r0, lr
 8023c68:	f43f af00 	beq.w	8023a6c <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8023c6c:	9800      	ldr	r0, [sp, #0]
 8023c6e:	b160      	cbz	r0, 8023c8a <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8023c70:	2900      	cmp	r1, #0
 8023c72:	db0a      	blt.n	8023c8a <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8023c74:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8023c76:	4281      	cmp	r1, r0
 8023c78:	da07      	bge.n	8023c8a <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8023c7a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023c7e:	4288      	cmp	r0, r1
 8023c80:	d319      	bcc.n	8023cb6 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ba>
 8023c82:	f04f 0101 	mov.w	r1, #1
 8023c86:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8023c8a:	82a5      	strh	r5, [r4, #20]
 8023c8c:	f8a4 8016 	strh.w	r8, [r4, #22]
 8023c90:	8327      	strh	r7, [r4, #24]
 8023c92:	8367      	strh	r7, [r4, #26]
 8023c94:	e7d6      	b.n	8023c44 <_ZN8touchgfx7Outline10renderLineEiiii+0x348>
 8023c96:	f104 0614 	add.w	r6, r4, #20
 8023c9a:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8023c9e:	ce03      	ldmia	r6!, {r0, r1}
 8023ca0:	f8cc 0000 	str.w	r0, [ip]
 8023ca4:	f8cc 1004 	str.w	r1, [ip, #4]
 8023ca8:	6921      	ldr	r1, [r4, #16]
 8023caa:	3108      	adds	r1, #8
 8023cac:	6121      	str	r1, [r4, #16]
 8023cae:	68a1      	ldr	r1, [r4, #8]
 8023cb0:	3101      	adds	r1, #1
 8023cb2:	60a1      	str	r1, [r4, #8]
 8023cb4:	e7b6      	b.n	8023c24 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8023cb6:	f104 0e14 	add.w	lr, r4, #20
 8023cba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8023cbe:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8023cc2:	f8cb 0000 	str.w	r0, [fp]
 8023cc6:	f8cb 1004 	str.w	r1, [fp, #4]
 8023cca:	6921      	ldr	r1, [r4, #16]
 8023ccc:	3108      	adds	r1, #8
 8023cce:	6121      	str	r1, [r4, #16]
 8023cd0:	68a1      	ldr	r1, [r4, #8]
 8023cd2:	3101      	adds	r1, #1
 8023cd4:	60a1      	str	r1, [r4, #8]
 8023cd6:	e7d8      	b.n	8023c8a <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8023cd8:	9a03      	ldr	r2, [sp, #12]
 8023cda:	8b61      	ldrh	r1, [r4, #26]
 8023cdc:	f1a2 0e20 	sub.w	lr, r2, #32
 8023ce0:	8b22      	ldrh	r2, [r4, #24]
 8023ce2:	44d6      	add	lr, sl
 8023ce4:	4472      	add	r2, lr
 8023ce6:	fb0e 1303 	mla	r3, lr, r3, r1
 8023cea:	8322      	strh	r2, [r4, #24]
 8023cec:	e68b      	b.n	8023a06 <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 8023cee:	bf00      	nop
 8023cf0:	0802a9c7 	.word	0x0802a9c7
 8023cf4:	0802aa48 	.word	0x0802aa48
 8023cf8:	0802a9f8 	.word	0x0802a9f8
 8023cfc:	f1bb 0f00 	cmp.w	fp, #0
 8023d00:	f2c0 8124 	blt.w	8023f4c <_ZN8touchgfx7Outline10renderLineEiiii+0x650>
 8023d04:	2201      	movs	r2, #1
 8023d06:	f1c6 0320 	rsb	r3, r6, #32
 8023d0a:	920b      	str	r2, [sp, #44]	; 0x2c
 8023d0c:	2220      	movs	r2, #32
 8023d0e:	fb0a f303 	mul.w	r3, sl, r3
 8023d12:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8023d16:	9202      	str	r2, [sp, #8]
 8023d18:	fb93 fcfb 	sdiv	ip, r3, fp
 8023d1c:	fb0b 331c 	mls	r3, fp, ip, r3
 8023d20:	2b00      	cmp	r3, #0
 8023d22:	9308      	str	r3, [sp, #32]
 8023d24:	bfbe      	ittt	lt
 8023d26:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8023d2a:	445b      	addlt	r3, fp
 8023d2c:	9308      	strlt	r3, [sp, #32]
 8023d2e:	eb0c 0301 	add.w	r3, ip, r1
 8023d32:	9301      	str	r3, [sp, #4]
 8023d34:	115b      	asrs	r3, r3, #5
 8023d36:	9305      	str	r3, [sp, #20]
 8023d38:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8023d3c:	eb03 4308 	add.w	r3, r3, r8, lsl #16
 8023d40:	461f      	mov	r7, r3
 8023d42:	9b02      	ldr	r3, [sp, #8]
 8023d44:	42b3      	cmp	r3, r6
 8023d46:	f040 8117 	bne.w	8023f78 <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 8023d4a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8023d4e:	f9bd 3000 	ldrsh.w	r3, [sp]
 8023d52:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 8023d56:	42b9      	cmp	r1, r7
 8023d58:	d016      	beq.n	8023d88 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 8023d5a:	8b60      	ldrh	r0, [r4, #26]
 8023d5c:	8b21      	ldrh	r1, [r4, #24]
 8023d5e:	4301      	orrs	r1, r0
 8023d60:	d00d      	beq.n	8023d7e <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 8023d62:	f1b8 0f00 	cmp.w	r8, #0
 8023d66:	db0a      	blt.n	8023d7e <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 8023d68:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023d6a:	4541      	cmp	r1, r8
 8023d6c:	dd07      	ble.n	8023d7e <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 8023d6e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023d72:	4288      	cmp	r0, r1
 8023d74:	f0c0 80f3 	bcc.w	8023f5e <_ZN8touchgfx7Outline10renderLineEiiii+0x662>
 8023d78:	2101      	movs	r1, #1
 8023d7a:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8023d7e:	82e3      	strh	r3, [r4, #22]
 8023d80:	2300      	movs	r3, #0
 8023d82:	82a2      	strh	r2, [r4, #20]
 8023d84:	8323      	strh	r3, [r4, #24]
 8023d86:	8363      	strh	r3, [r4, #26]
 8023d88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023d8a:	9a00      	ldr	r2, [sp, #0]
 8023d8c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8023d90:	441a      	add	r2, r3
 8023d92:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8023d96:	4691      	mov	r9, r2
 8023d98:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8023d9c:	fa0f f589 	sxth.w	r5, r9
 8023da0:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 8023da4:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 8023da8:	4281      	cmp	r1, r0
 8023daa:	d015      	beq.n	8023dd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4dc>
 8023dac:	8b60      	ldrh	r0, [r4, #26]
 8023dae:	8b21      	ldrh	r1, [r4, #24]
 8023db0:	4301      	orrs	r1, r0
 8023db2:	d00c      	beq.n	8023dce <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8023db4:	2a00      	cmp	r2, #0
 8023db6:	db0a      	blt.n	8023dce <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8023db8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023dba:	428a      	cmp	r2, r1
 8023dbc:	da07      	bge.n	8023dce <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8023dbe:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8023dc2:	4291      	cmp	r1, r2
 8023dc4:	f0c0 81ae 	bcc.w	8024124 <_ZN8touchgfx7Outline10renderLineEiiii+0x828>
 8023dc8:	2201      	movs	r2, #1
 8023dca:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8023dce:	82a3      	strh	r3, [r4, #20]
 8023dd0:	2300      	movs	r3, #0
 8023dd2:	82e5      	strh	r5, [r4, #22]
 8023dd4:	8323      	strh	r3, [r4, #24]
 8023dd6:	8363      	strh	r3, [r4, #26]
 8023dd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023dda:	454b      	cmp	r3, r9
 8023ddc:	f000 808a 	beq.w	8023ef4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f8>
 8023de0:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8023de4:	fb93 f2fb 	sdiv	r2, r3, fp
 8023de8:	fb0b 3312 	mls	r3, fp, r2, r3
 8023dec:	9205      	str	r2, [sp, #20]
 8023dee:	2b00      	cmp	r3, #0
 8023df0:	9307      	str	r3, [sp, #28]
 8023df2:	da04      	bge.n	8023dfe <_ZN8touchgfx7Outline10renderLineEiiii+0x502>
 8023df4:	1e53      	subs	r3, r2, #1
 8023df6:	9305      	str	r3, [sp, #20]
 8023df8:	9b07      	ldr	r3, [sp, #28]
 8023dfa:	445b      	add	r3, fp
 8023dfc:	9307      	str	r3, [sp, #28]
 8023dfe:	9b08      	ldr	r3, [sp, #32]
 8023e00:	f04f 0a00 	mov.w	sl, #0
 8023e04:	eba3 030b 	sub.w	r3, r3, fp
 8023e08:	9308      	str	r3, [sp, #32]
 8023e0a:	e9dd c301 	ldrd	ip, r3, [sp, #4]
 8023e0e:	f1c3 0320 	rsb	r3, r3, #32
 8023e12:	930a      	str	r3, [sp, #40]	; 0x28
 8023e14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023e16:	9b02      	ldr	r3, [sp, #8]
 8023e18:	1a9b      	subs	r3, r3, r2
 8023e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8023e1c:	9902      	ldr	r1, [sp, #8]
 8023e1e:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 8023e22:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8023e26:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8023e2a:	eb08 4806 	add.w	r8, r8, r6, lsl #16
 8023e2e:	189b      	adds	r3, r3, r2
 8023e30:	9308      	str	r3, [sp, #32]
 8023e32:	bf57      	itett	pl
 8023e34:	eba3 030b 	subpl.w	r3, r3, fp
 8023e38:	9b05      	ldrmi	r3, [sp, #20]
 8023e3a:	9308      	strpl	r3, [sp, #32]
 8023e3c:	9b05      	ldrpl	r3, [sp, #20]
 8023e3e:	bf58      	it	pl
 8023e40:	3301      	addpl	r3, #1
 8023e42:	9300      	str	r3, [sp, #0]
 8023e44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023e48:	4413      	add	r3, r2
 8023e4a:	9301      	str	r3, [sp, #4]
 8023e4c:	115b      	asrs	r3, r3, #5
 8023e4e:	9306      	str	r3, [sp, #24]
 8023e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023e52:	428b      	cmp	r3, r1
 8023e54:	f040 8180 	bne.w	8024158 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8023e58:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8023e5c:	fa0f f389 	sxth.w	r3, r9
 8023e60:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 8023e64:	4541      	cmp	r1, r8
 8023e66:	d017      	beq.n	8023e98 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 8023e68:	8b60      	ldrh	r0, [r4, #26]
 8023e6a:	8b21      	ldrh	r1, [r4, #24]
 8023e6c:	4301      	orrs	r1, r0
 8023e6e:	d00d      	beq.n	8023e8c <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8023e70:	2e00      	cmp	r6, #0
 8023e72:	db0b      	blt.n	8023e8c <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8023e74:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023e76:	42b1      	cmp	r1, r6
 8023e78:	dd08      	ble.n	8023e8c <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8023e7a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023e7e:	4288      	cmp	r0, r1
 8023e80:	f0c0 815d 	bcc.w	802413e <_ZN8touchgfx7Outline10renderLineEiiii+0x842>
 8023e84:	f04f 0101 	mov.w	r1, #1
 8023e88:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8023e8c:	82a2      	strh	r2, [r4, #20]
 8023e8e:	82e3      	strh	r3, [r4, #22]
 8023e90:	f8a4 a018 	strh.w	sl, [r4, #24]
 8023e94:	f8a4 a01a 	strh.w	sl, [r4, #26]
 8023e98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023e9a:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8023e9e:	4499      	add	r9, r3
 8023ea0:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8023ea4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8023ea8:	fa0f f589 	sxth.w	r5, r9
 8023eac:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 8023eb0:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 8023eb4:	4281      	cmp	r1, r0
 8023eb6:	f43f add9 	beq.w	8023a6c <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8023eba:	8b60      	ldrh	r0, [r4, #26]
 8023ebc:	8b21      	ldrh	r1, [r4, #24]
 8023ebe:	4301      	orrs	r1, r0
 8023ec0:	d00d      	beq.n	8023ede <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 8023ec2:	2a00      	cmp	r2, #0
 8023ec4:	db0b      	blt.n	8023ede <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 8023ec6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023ec8:	428a      	cmp	r2, r1
 8023eca:	da08      	bge.n	8023ede <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 8023ecc:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8023ed0:	4291      	cmp	r1, r2
 8023ed2:	f0c0 8228 	bcc.w	8024326 <_ZN8touchgfx7Outline10renderLineEiiii+0xa2a>
 8023ed6:	f04f 0201 	mov.w	r2, #1
 8023eda:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8023ede:	82a3      	strh	r3, [r4, #20]
 8023ee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023ee2:	82e5      	strh	r5, [r4, #22]
 8023ee4:	454b      	cmp	r3, r9
 8023ee6:	f8a4 a018 	strh.w	sl, [r4, #24]
 8023eea:	f8a4 a01a 	strh.w	sl, [r4, #26]
 8023eee:	f8dd c004 	ldr.w	ip, [sp, #4]
 8023ef2:	d193      	bne.n	8023e1c <_ZN8touchgfx7Outline10renderLineEiiii+0x520>
 8023ef4:	9b02      	ldr	r3, [sp, #8]
 8023ef6:	f1c3 0e20 	rsb	lr, r3, #32
 8023efa:	9b04      	ldr	r3, [sp, #16]
 8023efc:	ea4f 1b63 	mov.w	fp, r3, asr #5
 8023f00:	9b03      	ldr	r3, [sp, #12]
 8023f02:	459e      	cmp	lr, r3
 8023f04:	f040 8229 	bne.w	802435a <_ZN8touchgfx7Outline10renderLineEiiii+0xa5e>
 8023f08:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023f0c:	fa0f f58b 	sxth.w	r5, fp
 8023f10:	fa0f f289 	sxth.w	r2, r9
 8023f14:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8023f18:	eb05 4002 	add.w	r0, r5, r2, lsl #16
 8023f1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8023f20:	4281      	cmp	r1, r0
 8023f22:	f43f ae20 	beq.w	8023b66 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8023f26:	8b60      	ldrh	r0, [r4, #26]
 8023f28:	8b21      	ldrh	r1, [r4, #24]
 8023f2a:	4301      	orrs	r1, r0
 8023f2c:	d00c      	beq.n	8023f48 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 8023f2e:	2b00      	cmp	r3, #0
 8023f30:	db0a      	blt.n	8023f48 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 8023f32:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023f34:	428b      	cmp	r3, r1
 8023f36:	da07      	bge.n	8023f48 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 8023f38:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8023f3c:	4299      	cmp	r1, r3
 8023f3e:	f0c0 81ff 	bcc.w	8024340 <_ZN8touchgfx7Outline10renderLineEiiii+0xa44>
 8023f42:	2301      	movs	r3, #1
 8023f44:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023f48:	82a5      	strh	r5, [r4, #20]
 8023f4a:	e538      	b.n	80239be <_ZN8touchgfx7Outline10renderLineEiiii+0xc2>
 8023f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8023f50:	fb0a f306 	mul.w	r3, sl, r6
 8023f54:	f1cb 0b00 	rsb	fp, fp, #0
 8023f58:	920b      	str	r2, [sp, #44]	; 0x2c
 8023f5a:	2200      	movs	r2, #0
 8023f5c:	e6d9      	b.n	8023d12 <_ZN8touchgfx7Outline10renderLineEiiii+0x416>
 8023f5e:	f104 0514 	add.w	r5, r4, #20
 8023f62:	6926      	ldr	r6, [r4, #16]
 8023f64:	cd03      	ldmia	r5!, {r0, r1}
 8023f66:	6030      	str	r0, [r6, #0]
 8023f68:	6071      	str	r1, [r6, #4]
 8023f6a:	6921      	ldr	r1, [r4, #16]
 8023f6c:	3108      	adds	r1, #8
 8023f6e:	6121      	str	r1, [r4, #16]
 8023f70:	68a1      	ldr	r1, [r4, #8]
 8023f72:	3101      	adds	r1, #1
 8023f74:	60a1      	str	r1, [r4, #8]
 8023f76:	e702      	b.n	8023d7e <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 8023f78:	9b01      	ldr	r3, [sp, #4]
 8023f7a:	f001 011f 	and.w	r1, r1, #31
 8023f7e:	8b20      	ldrh	r0, [r4, #24]
 8023f80:	f003 031f 	and.w	r3, r3, #31
 8023f84:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8023f88:	930d      	str	r3, [sp, #52]	; 0x34
 8023f8a:	9b02      	ldr	r3, [sp, #8]
 8023f8c:	1b9a      	subs	r2, r3, r6
 8023f8e:	9b05      	ldr	r3, [sp, #20]
 8023f90:	42ab      	cmp	r3, r5
 8023f92:	d107      	bne.n	8023fa4 <_ZN8touchgfx7Outline10renderLineEiiii+0x6a8>
 8023f94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023f96:	4410      	add	r0, r2
 8023f98:	4419      	add	r1, r3
 8023f9a:	8320      	strh	r0, [r4, #24]
 8023f9c:	fb02 9201 	mla	r2, r2, r1, r9
 8023fa0:	8362      	strh	r2, [r4, #26]
 8023fa2:	e6f1      	b.n	8023d88 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 8023fa4:	f1bc 0f00 	cmp.w	ip, #0
 8023fa8:	f2c0 8093 	blt.w	80240d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d6>
 8023fac:	f1c1 0320 	rsb	r3, r1, #32
 8023fb0:	435a      	muls	r2, r3
 8023fb2:	2301      	movs	r3, #1
 8023fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8023fb6:	2320      	movs	r3, #32
 8023fb8:	9307      	str	r3, [sp, #28]
 8023fba:	9b07      	ldr	r3, [sp, #28]
 8023fbc:	fb92 fefc 	sdiv	lr, r2, ip
 8023fc0:	fb0c 221e 	mls	r2, ip, lr, r2
 8023fc4:	4419      	add	r1, r3
 8023fc6:	2a00      	cmp	r2, #0
 8023fc8:	bfbc      	itt	lt
 8023fca:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8023fce:	4462      	addlt	r2, ip
 8023fd0:	fb0e 9101 	mla	r1, lr, r1, r9
 8023fd4:	4470      	add	r0, lr
 8023fd6:	b20b      	sxth	r3, r1
 8023fd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023fda:	b200      	sxth	r0, r0
 8023fdc:	440d      	add	r5, r1
 8023fde:	f9bd 1000 	ldrsh.w	r1, [sp]
 8023fe2:	8320      	strh	r0, [r4, #24]
 8023fe4:	fa0f f985 	sxth.w	r9, r5
 8023fe8:	9106      	str	r1, [sp, #24]
 8023fea:	0409      	lsls	r1, r1, #16
 8023fec:	8363      	strh	r3, [r4, #26]
 8023fee:	910a      	str	r1, [sp, #40]	; 0x28
 8023ff0:	4449      	add	r1, r9
 8023ff2:	42b9      	cmp	r1, r7
 8023ff4:	f43f ad3a 	beq.w	8023a6c <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8023ff8:	4303      	orrs	r3, r0
 8023ffa:	d00c      	beq.n	8024016 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 8023ffc:	f1b8 0f00 	cmp.w	r8, #0
 8024000:	db09      	blt.n	8024016 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 8024002:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024004:	4543      	cmp	r3, r8
 8024006:	dd06      	ble.n	8024016 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 8024008:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802400c:	4299      	cmp	r1, r3
 802400e:	d368      	bcc.n	80240e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x7e6>
 8024010:	2301      	movs	r3, #1
 8024012:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024016:	9b06      	ldr	r3, [sp, #24]
 8024018:	4476      	add	r6, lr
 802401a:	f8a4 9014 	strh.w	r9, [r4, #20]
 802401e:	82e3      	strh	r3, [r4, #22]
 8024020:	2300      	movs	r3, #0
 8024022:	8323      	strh	r3, [r4, #24]
 8024024:	8363      	strh	r3, [r4, #26]
 8024026:	9b05      	ldr	r3, [sp, #20]
 8024028:	42ab      	cmp	r3, r5
 802402a:	d048      	beq.n	80240be <_ZN8touchgfx7Outline10renderLineEiiii+0x7c2>
 802402c:	9b02      	ldr	r3, [sp, #8]
 802402e:	eba2 020c 	sub.w	r2, r2, ip
 8024032:	1b9b      	subs	r3, r3, r6
 8024034:	4473      	add	r3, lr
 8024036:	015b      	lsls	r3, r3, #5
 8024038:	fb93 f8fc 	sdiv	r8, r3, ip
 802403c:	fb0c 3318 	mls	r3, ip, r8, r3
 8024040:	2b00      	cmp	r3, #0
 8024042:	bfbc      	itt	lt
 8024044:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8024048:	4463      	addlt	r3, ip
 802404a:	f108 0101 	add.w	r1, r8, #1
 802404e:	910f      	str	r1, [sp, #60]	; 0x3c
 8024050:	18d2      	adds	r2, r2, r3
 8024052:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8024054:	bf56      	itet	pl
 8024056:	980f      	ldrpl	r0, [sp, #60]	; 0x3c
 8024058:	4640      	movmi	r0, r8
 802405a:	eba2 020c 	subpl.w	r2, r2, ip
 802405e:	fa0f fe80 	sxth.w	lr, r0
 8024062:	4406      	add	r6, r0
 8024064:	0141      	lsls	r1, r0, #5
 8024066:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024068:	f8a4 e018 	strh.w	lr, [r4, #24]
 802406c:	4405      	add	r5, r0
 802406e:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8024072:	b209      	sxth	r1, r1
 8024074:	fa0f f985 	sxth.w	r9, r5
 8024078:	4438      	add	r0, r7
 802407a:	8361      	strh	r1, [r4, #26]
 802407c:	444f      	add	r7, r9
 802407e:	42b8      	cmp	r0, r7
 8024080:	f43f acf4 	beq.w	8023a6c <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8024084:	ea5e 0101 	orrs.w	r1, lr, r1
 8024088:	d00e      	beq.n	80240a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 802408a:	9906      	ldr	r1, [sp, #24]
 802408c:	2900      	cmp	r1, #0
 802408e:	db0b      	blt.n	80240a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 8024090:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024092:	9806      	ldr	r0, [sp, #24]
 8024094:	4288      	cmp	r0, r1
 8024096:	da07      	bge.n	80240a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 8024098:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802409c:	4288      	cmp	r0, r1
 802409e:	d330      	bcc.n	8024102 <_ZN8touchgfx7Outline10renderLineEiiii+0x806>
 80240a0:	f04f 0101 	mov.w	r1, #1
 80240a4:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80240a8:	9906      	ldr	r1, [sp, #24]
 80240aa:	f8a4 9014 	strh.w	r9, [r4, #20]
 80240ae:	82e1      	strh	r1, [r4, #22]
 80240b0:	f04f 0100 	mov.w	r1, #0
 80240b4:	8321      	strh	r1, [r4, #24]
 80240b6:	8361      	strh	r1, [r4, #26]
 80240b8:	9905      	ldr	r1, [sp, #20]
 80240ba:	42a9      	cmp	r1, r5
 80240bc:	d1c8      	bne.n	8024050 <_ZN8touchgfx7Outline10renderLineEiiii+0x754>
 80240be:	9b02      	ldr	r3, [sp, #8]
 80240c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80240c2:	1b9e      	subs	r6, r3, r6
 80240c4:	9b07      	ldr	r3, [sp, #28]
 80240c6:	3120      	adds	r1, #32
 80240c8:	8326      	strh	r6, [r4, #24]
 80240ca:	1ac9      	subs	r1, r1, r3
 80240cc:	434e      	muls	r6, r1
 80240ce:	8366      	strh	r6, [r4, #26]
 80240d0:	e65a      	b.n	8023d88 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 80240d2:	f04f 33ff 	mov.w	r3, #4294967295
 80240d6:	434a      	muls	r2, r1
 80240d8:	f1cc 0c00 	rsb	ip, ip, #0
 80240dc:	9309      	str	r3, [sp, #36]	; 0x24
 80240de:	2300      	movs	r3, #0
 80240e0:	e76a      	b.n	8023fb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6bc>
 80240e2:	f104 0314 	add.w	r3, r4, #20
 80240e6:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80240ea:	cb03      	ldmia	r3!, {r0, r1}
 80240ec:	f8c8 0000 	str.w	r0, [r8]
 80240f0:	f8c8 1004 	str.w	r1, [r8, #4]
 80240f4:	6923      	ldr	r3, [r4, #16]
 80240f6:	3308      	adds	r3, #8
 80240f8:	6123      	str	r3, [r4, #16]
 80240fa:	68a3      	ldr	r3, [r4, #8]
 80240fc:	3301      	adds	r3, #1
 80240fe:	60a3      	str	r3, [r4, #8]
 8024100:	e789      	b.n	8024016 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 8024102:	6921      	ldr	r1, [r4, #16]
 8024104:	f104 0e14 	add.w	lr, r4, #20
 8024108:	910e      	str	r1, [sp, #56]	; 0x38
 802410a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802410c:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8024110:	6038      	str	r0, [r7, #0]
 8024112:	4638      	mov	r0, r7
 8024114:	6079      	str	r1, [r7, #4]
 8024116:	6921      	ldr	r1, [r4, #16]
 8024118:	3108      	adds	r1, #8
 802411a:	6121      	str	r1, [r4, #16]
 802411c:	68a1      	ldr	r1, [r4, #8]
 802411e:	3101      	adds	r1, #1
 8024120:	60a1      	str	r1, [r4, #8]
 8024122:	e7c1      	b.n	80240a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 8024124:	f104 0214 	add.w	r2, r4, #20
 8024128:	6926      	ldr	r6, [r4, #16]
 802412a:	ca03      	ldmia	r2!, {r0, r1}
 802412c:	6030      	str	r0, [r6, #0]
 802412e:	6071      	str	r1, [r6, #4]
 8024130:	6922      	ldr	r2, [r4, #16]
 8024132:	3208      	adds	r2, #8
 8024134:	6122      	str	r2, [r4, #16]
 8024136:	68a2      	ldr	r2, [r4, #8]
 8024138:	3201      	adds	r2, #1
 802413a:	60a2      	str	r2, [r4, #8]
 802413c:	e647      	b.n	8023dce <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 802413e:	f104 0514 	add.w	r5, r4, #20
 8024142:	6926      	ldr	r6, [r4, #16]
 8024144:	cd03      	ldmia	r5!, {r0, r1}
 8024146:	6030      	str	r0, [r6, #0]
 8024148:	6071      	str	r1, [r6, #4]
 802414a:	6921      	ldr	r1, [r4, #16]
 802414c:	3108      	adds	r1, #8
 802414e:	6121      	str	r1, [r4, #16]
 8024150:	68a1      	ldr	r1, [r4, #8]
 8024152:	3101      	adds	r1, #1
 8024154:	60a1      	str	r1, [r4, #8]
 8024156:	e699      	b.n	8023e8c <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8024158:	9b01      	ldr	r3, [sp, #4]
 802415a:	ea4f 176c 	mov.w	r7, ip, asr #5
 802415e:	8b20      	ldrh	r0, [r4, #24]
 8024160:	f00c 0c1f 	and.w	ip, ip, #31
 8024164:	f003 031f 	and.w	r3, r3, #31
 8024168:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
 802416c:	9310      	str	r3, [sp, #64]	; 0x40
 802416e:	9b06      	ldr	r3, [sp, #24]
 8024170:	429f      	cmp	r7, r3
 8024172:	d10a      	bne.n	802418a <_ZN8touchgfx7Outline10renderLineEiiii+0x88e>
 8024174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024176:	4418      	add	r0, r3
 8024178:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802417a:	449c      	add	ip, r3
 802417c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802417e:	8320      	strh	r0, [r4, #24]
 8024180:	fb03 ee0c 	mla	lr, r3, ip, lr
 8024184:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8024188:	e686      	b.n	8023e98 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 802418a:	9b00      	ldr	r3, [sp, #0]
 802418c:	2b00      	cmp	r3, #0
 802418e:	f2c0 80a0 	blt.w	80242d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x9d6>
 8024192:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024194:	f1cc 0320 	rsb	r3, ip, #32
 8024198:	434b      	muls	r3, r1
 802419a:	2101      	movs	r1, #1
 802419c:	910e      	str	r1, [sp, #56]	; 0x38
 802419e:	2120      	movs	r1, #32
 80241a0:	9a00      	ldr	r2, [sp, #0]
 80241a2:	910d      	str	r1, [sp, #52]	; 0x34
 80241a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80241a6:	fb93 f5f2 	sdiv	r5, r3, r2
 80241aa:	fb02 3315 	mls	r3, r2, r5, r3
 80241ae:	448c      	add	ip, r1
 80241b0:	2b00      	cmp	r3, #0
 80241b2:	bfbc      	itt	lt
 80241b4:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80241b8:	189b      	addlt	r3, r3, r2
 80241ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80241bc:	fb05 ec0c 	mla	ip, r5, ip, lr
 80241c0:	4428      	add	r0, r5
 80241c2:	4417      	add	r7, r2
 80241c4:	fa0f f18c 	sxth.w	r1, ip
 80241c8:	fa0f fc89 	sxth.w	ip, r9
 80241cc:	fa0f fe87 	sxth.w	lr, r7
 80241d0:	8361      	strh	r1, [r4, #26]
 80241d2:	ea4f 420c 	mov.w	r2, ip, lsl #16
 80241d6:	b200      	sxth	r0, r0
 80241d8:	920f      	str	r2, [sp, #60]	; 0x3c
 80241da:	4472      	add	r2, lr
 80241dc:	8320      	strh	r0, [r4, #24]
 80241de:	4542      	cmp	r2, r8
 80241e0:	f43f ac44 	beq.w	8023a6c <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 80241e4:	ea50 0201 	orrs.w	r2, r0, r1
 80241e8:	d00c      	beq.n	8024204 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 80241ea:	2e00      	cmp	r6, #0
 80241ec:	db0a      	blt.n	8024204 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 80241ee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80241f0:	42b1      	cmp	r1, r6
 80241f2:	dd07      	ble.n	8024204 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 80241f4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80241f8:	4288      	cmp	r0, r1
 80241fa:	d375      	bcc.n	80242e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 80241fc:	f04f 0201 	mov.w	r2, #1
 8024200:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024204:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024206:	f8a4 e014 	strh.w	lr, [r4, #20]
 802420a:	1956      	adds	r6, r2, r5
 802420c:	9a06      	ldr	r2, [sp, #24]
 802420e:	f8a4 c016 	strh.w	ip, [r4, #22]
 8024212:	42ba      	cmp	r2, r7
 8024214:	f8a4 a018 	strh.w	sl, [r4, #24]
 8024218:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802421c:	d04c      	beq.n	80242b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x9bc>
 802421e:	9a02      	ldr	r2, [sp, #8]
 8024220:	1b91      	subs	r1, r2, r6
 8024222:	9a00      	ldr	r2, [sp, #0]
 8024224:	440d      	add	r5, r1
 8024226:	016d      	lsls	r5, r5, #5
 8024228:	fb95 fef2 	sdiv	lr, r5, r2
 802422c:	fb02 551e 	mls	r5, r2, lr, r5
 8024230:	2d00      	cmp	r5, #0
 8024232:	bfbc      	itt	lt
 8024234:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8024238:	18ad      	addlt	r5, r5, r2
 802423a:	9a00      	ldr	r2, [sp, #0]
 802423c:	1a9b      	subs	r3, r3, r2
 802423e:	f10e 0201 	add.w	r2, lr, #1
 8024242:	9213      	str	r2, [sp, #76]	; 0x4c
 8024244:	195b      	adds	r3, r3, r5
 8024246:	bf57      	itett	pl
 8024248:	9a00      	ldrpl	r2, [sp, #0]
 802424a:	4670      	movmi	r0, lr
 802424c:	9813      	ldrpl	r0, [sp, #76]	; 0x4c
 802424e:	1a9b      	subpl	r3, r3, r2
 8024250:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024252:	fa0f f880 	sxth.w	r8, r0
 8024256:	4406      	add	r6, r0
 8024258:	4417      	add	r7, r2
 802425a:	0141      	lsls	r1, r0, #5
 802425c:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8024260:	b23a      	sxth	r2, r7
 8024262:	f8a4 8018 	strh.w	r8, [r4, #24]
 8024266:	b209      	sxth	r1, r1
 8024268:	9211      	str	r2, [sp, #68]	; 0x44
 802426a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802426c:	8361      	strh	r1, [r4, #26]
 802426e:	1882      	adds	r2, r0, r2
 8024270:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8024272:	9212      	str	r2, [sp, #72]	; 0x48
 8024274:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024276:	4402      	add	r2, r0
 8024278:	9812      	ldr	r0, [sp, #72]	; 0x48
 802427a:	4290      	cmp	r0, r2
 802427c:	f43f abf6 	beq.w	8023a6c <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8024280:	ea58 0201 	orrs.w	r2, r8, r1
 8024284:	d00d      	beq.n	80242a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 8024286:	f1bc 0f00 	cmp.w	ip, #0
 802428a:	db0a      	blt.n	80242a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 802428c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802428e:	458c      	cmp	ip, r1
 8024290:	da07      	bge.n	80242a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 8024292:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024296:	4288      	cmp	r0, r1
 8024298:	d336      	bcc.n	8024308 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0c>
 802429a:	f04f 0201 	mov.w	r2, #1
 802429e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80242a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80242a4:	f8a4 c016 	strh.w	ip, [r4, #22]
 80242a8:	82a2      	strh	r2, [r4, #20]
 80242aa:	9a06      	ldr	r2, [sp, #24]
 80242ac:	f8a4 a018 	strh.w	sl, [r4, #24]
 80242b0:	42ba      	cmp	r2, r7
 80242b2:	f8a4 a01a 	strh.w	sl, [r4, #26]
 80242b6:	d1c5      	bne.n	8024244 <_ZN8touchgfx7Outline10renderLineEiiii+0x948>
 80242b8:	9b02      	ldr	r3, [sp, #8]
 80242ba:	1b9e      	subs	r6, r3, r6
 80242bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80242be:	f103 0c20 	add.w	ip, r3, #32
 80242c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80242c4:	8326      	strh	r6, [r4, #24]
 80242c6:	ebac 0c03 	sub.w	ip, ip, r3
 80242ca:	fb06 f60c 	mul.w	r6, r6, ip
 80242ce:	8366      	strh	r6, [r4, #26]
 80242d0:	e5e2      	b.n	8023e98 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 80242d2:	9a00      	ldr	r2, [sp, #0]
 80242d4:	f04f 31ff 	mov.w	r1, #4294967295
 80242d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80242da:	4252      	negs	r2, r2
 80242dc:	910e      	str	r1, [sp, #56]	; 0x38
 80242de:	fb03 f30c 	mul.w	r3, r3, ip
 80242e2:	2100      	movs	r1, #0
 80242e4:	9200      	str	r2, [sp, #0]
 80242e6:	e75b      	b.n	80241a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x8a4>
 80242e8:	f104 0614 	add.w	r6, r4, #20
 80242ec:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80242f0:	ce03      	ldmia	r6!, {r0, r1}
 80242f2:	f8c8 0000 	str.w	r0, [r8]
 80242f6:	f8c8 1004 	str.w	r1, [r8, #4]
 80242fa:	6921      	ldr	r1, [r4, #16]
 80242fc:	3108      	adds	r1, #8
 80242fe:	6121      	str	r1, [r4, #16]
 8024300:	68a1      	ldr	r1, [r4, #8]
 8024302:	3101      	adds	r1, #1
 8024304:	60a1      	str	r1, [r4, #8]
 8024306:	e77d      	b.n	8024204 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8024308:	f104 0814 	add.w	r8, r4, #20
 802430c:	6922      	ldr	r2, [r4, #16]
 802430e:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8024312:	9212      	str	r2, [sp, #72]	; 0x48
 8024314:	6010      	str	r0, [r2, #0]
 8024316:	6051      	str	r1, [r2, #4]
 8024318:	6921      	ldr	r1, [r4, #16]
 802431a:	3108      	adds	r1, #8
 802431c:	6121      	str	r1, [r4, #16]
 802431e:	68a1      	ldr	r1, [r4, #8]
 8024320:	3101      	adds	r1, #1
 8024322:	60a1      	str	r1, [r4, #8]
 8024324:	e7bd      	b.n	80242a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 8024326:	f104 0214 	add.w	r2, r4, #20
 802432a:	6926      	ldr	r6, [r4, #16]
 802432c:	ca03      	ldmia	r2!, {r0, r1}
 802432e:	6030      	str	r0, [r6, #0]
 8024330:	6071      	str	r1, [r6, #4]
 8024332:	6922      	ldr	r2, [r4, #16]
 8024334:	3208      	adds	r2, #8
 8024336:	6122      	str	r2, [r4, #16]
 8024338:	68a2      	ldr	r2, [r4, #8]
 802433a:	3201      	adds	r2, #1
 802433c:	60a2      	str	r2, [r4, #8]
 802433e:	e5ce      	b.n	8023ede <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 8024340:	f104 0314 	add.w	r3, r4, #20
 8024344:	6926      	ldr	r6, [r4, #16]
 8024346:	cb03      	ldmia	r3!, {r0, r1}
 8024348:	6030      	str	r0, [r6, #0]
 802434a:	6071      	str	r1, [r6, #4]
 802434c:	6923      	ldr	r3, [r4, #16]
 802434e:	3308      	adds	r3, #8
 8024350:	6123      	str	r3, [r4, #16]
 8024352:	68a3      	ldr	r3, [r4, #8]
 8024354:	3301      	adds	r3, #1
 8024356:	60a3      	str	r3, [r4, #8]
 8024358:	e5f6      	b.n	8023f48 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 802435a:	9b01      	ldr	r3, [sp, #4]
 802435c:	8b20      	ldrh	r0, [r4, #24]
 802435e:	ea4f 1c63 	mov.w	ip, r3, asr #5
 8024362:	f003 021f 	and.w	r2, r3, #31
 8024366:	9b04      	ldr	r3, [sp, #16]
 8024368:	45dc      	cmp	ip, fp
 802436a:	8b66      	ldrh	r6, [r4, #26]
 802436c:	f003 031f 	and.w	r3, r3, #31
 8024370:	9305      	str	r3, [sp, #20]
 8024372:	9b03      	ldr	r3, [sp, #12]
 8024374:	eba3 050e 	sub.w	r5, r3, lr
 8024378:	d108      	bne.n	802438c <_ZN8touchgfx7Outline10renderLineEiiii+0xa90>
 802437a:	9b05      	ldr	r3, [sp, #20]
 802437c:	4428      	add	r0, r5
 802437e:	441a      	add	r2, r3
 8024380:	8320      	strh	r0, [r4, #24]
 8024382:	fb05 6502 	mla	r5, r5, r2, r6
 8024386:	8365      	strh	r5, [r4, #26]
 8024388:	f7ff bbed 	b.w	8023b66 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 802438c:	9b04      	ldr	r3, [sp, #16]
 802438e:	9901      	ldr	r1, [sp, #4]
 8024390:	1a5b      	subs	r3, r3, r1
 8024392:	9300      	str	r3, [sp, #0]
 8024394:	f100 809c 	bmi.w	80244d0 <_ZN8touchgfx7Outline10renderLineEiiii+0xbd4>
 8024398:	f1c2 0120 	rsb	r1, r2, #32
 802439c:	434d      	muls	r5, r1
 802439e:	2101      	movs	r1, #1
 80243a0:	9102      	str	r1, [sp, #8]
 80243a2:	2120      	movs	r1, #32
 80243a4:	9b00      	ldr	r3, [sp, #0]
 80243a6:	9101      	str	r1, [sp, #4]
 80243a8:	9901      	ldr	r1, [sp, #4]
 80243aa:	fb95 f7f3 	sdiv	r7, r5, r3
 80243ae:	fb03 5517 	mls	r5, r3, r7, r5
 80243b2:	440a      	add	r2, r1
 80243b4:	2d00      	cmp	r5, #0
 80243b6:	bfbc      	itt	lt
 80243b8:	f107 37ff 	addlt.w	r7, r7, #4294967295
 80243bc:	18ed      	addlt	r5, r5, r3
 80243be:	fb07 6202 	mla	r2, r7, r2, r6
 80243c2:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 80243c6:	4438      	add	r0, r7
 80243c8:	b211      	sxth	r1, r2
 80243ca:	9a02      	ldr	r2, [sp, #8]
 80243cc:	b200      	sxth	r0, r0
 80243ce:	4494      	add	ip, r2
 80243d0:	fa0f f289 	sxth.w	r2, r9
 80243d4:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80243d8:	0413      	lsls	r3, r2, #16
 80243da:	8320      	strh	r0, [r4, #24]
 80243dc:	fa0f f88c 	sxth.w	r8, ip
 80243e0:	8361      	strh	r1, [r4, #26]
 80243e2:	eb09 4906 	add.w	r9, r9, r6, lsl #16
 80243e6:	9304      	str	r3, [sp, #16]
 80243e8:	eb08 0a03 	add.w	sl, r8, r3
 80243ec:	45d1      	cmp	r9, sl
 80243ee:	f43f ab3d 	beq.w	8023a6c <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 80243f2:	ea50 0301 	orrs.w	r3, r0, r1
 80243f6:	d00b      	beq.n	8024410 <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 80243f8:	2e00      	cmp	r6, #0
 80243fa:	db09      	blt.n	8024410 <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 80243fc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80243fe:	428e      	cmp	r6, r1
 8024400:	da06      	bge.n	8024410 <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 8024402:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024406:	4288      	cmp	r0, r1
 8024408:	d36b      	bcc.n	80244e2 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe6>
 802440a:	2101      	movs	r1, #1
 802440c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024410:	2100      	movs	r1, #0
 8024412:	45e3      	cmp	fp, ip
 8024414:	f8a4 8014 	strh.w	r8, [r4, #20]
 8024418:	44be      	add	lr, r7
 802441a:	82e2      	strh	r2, [r4, #22]
 802441c:	8321      	strh	r1, [r4, #24]
 802441e:	8361      	strh	r1, [r4, #26]
 8024420:	d047      	beq.n	80244b2 <_ZN8touchgfx7Outline10renderLineEiiii+0xbb6>
 8024422:	9b03      	ldr	r3, [sp, #12]
 8024424:	f04f 0900 	mov.w	r9, #0
 8024428:	eba3 060e 	sub.w	r6, r3, lr
 802442c:	9b00      	ldr	r3, [sp, #0]
 802442e:	443e      	add	r6, r7
 8024430:	0176      	lsls	r6, r6, #5
 8024432:	fb96 f7f3 	sdiv	r7, r6, r3
 8024436:	fb03 6617 	mls	r6, r3, r7, r6
 802443a:	428e      	cmp	r6, r1
 802443c:	bfbc      	itt	lt
 802443e:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8024442:	18f6      	addlt	r6, r6, r3
 8024444:	9b00      	ldr	r3, [sp, #0]
 8024446:	1aed      	subs	r5, r5, r3
 8024448:	1c7b      	adds	r3, r7, #1
 802444a:	9307      	str	r3, [sp, #28]
 802444c:	19ad      	adds	r5, r5, r6
 802444e:	bf57      	itett	pl
 8024450:	9b00      	ldrpl	r3, [sp, #0]
 8024452:	4638      	movmi	r0, r7
 8024454:	9807      	ldrpl	r0, [sp, #28]
 8024456:	1aed      	subpl	r5, r5, r3
 8024458:	9b02      	ldr	r3, [sp, #8]
 802445a:	fa0f f880 	sxth.w	r8, r0
 802445e:	4486      	add	lr, r0
 8024460:	449c      	add	ip, r3
 8024462:	0141      	lsls	r1, r0, #5
 8024464:	9b04      	ldr	r3, [sp, #16]
 8024466:	fa0f fa8c 	sxth.w	sl, ip
 802446a:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802446e:	b209      	sxth	r1, r1
 8024470:	f8a4 8018 	strh.w	r8, [r4, #24]
 8024474:	4418      	add	r0, r3
 8024476:	4453      	add	r3, sl
 8024478:	8361      	strh	r1, [r4, #26]
 802447a:	4298      	cmp	r0, r3
 802447c:	f43f aaf6 	beq.w	8023a6c <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8024480:	ea58 0301 	orrs.w	r3, r8, r1
 8024484:	d00c      	beq.n	80244a0 <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 8024486:	2a00      	cmp	r2, #0
 8024488:	db0a      	blt.n	80244a0 <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 802448a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802448c:	428a      	cmp	r2, r1
 802448e:	da07      	bge.n	80244a0 <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 8024490:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024494:	4288      	cmp	r0, r1
 8024496:	d334      	bcc.n	8024502 <_ZN8touchgfx7Outline10renderLineEiiii+0xc06>
 8024498:	f04f 0301 	mov.w	r3, #1
 802449c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80244a0:	45e3      	cmp	fp, ip
 80244a2:	f8a4 a014 	strh.w	sl, [r4, #20]
 80244a6:	82e2      	strh	r2, [r4, #22]
 80244a8:	f8a4 9018 	strh.w	r9, [r4, #24]
 80244ac:	f8a4 901a 	strh.w	r9, [r4, #26]
 80244b0:	d1cc      	bne.n	802444c <_ZN8touchgfx7Outline10renderLineEiiii+0xb50>
 80244b2:	9b03      	ldr	r3, [sp, #12]
 80244b4:	9e05      	ldr	r6, [sp, #20]
 80244b6:	eba3 0e0e 	sub.w	lr, r3, lr
 80244ba:	9b01      	ldr	r3, [sp, #4]
 80244bc:	3620      	adds	r6, #32
 80244be:	f8a4 e018 	strh.w	lr, [r4, #24]
 80244c2:	1af6      	subs	r6, r6, r3
 80244c4:	fb0e fe06 	mul.w	lr, lr, r6
 80244c8:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80244cc:	f7ff bb4b 	b.w	8023b66 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 80244d0:	9b00      	ldr	r3, [sp, #0]
 80244d2:	f04f 31ff 	mov.w	r1, #4294967295
 80244d6:	4355      	muls	r5, r2
 80244d8:	425b      	negs	r3, r3
 80244da:	9102      	str	r1, [sp, #8]
 80244dc:	2100      	movs	r1, #0
 80244de:	9300      	str	r3, [sp, #0]
 80244e0:	e760      	b.n	80243a4 <_ZN8touchgfx7Outline10renderLineEiiii+0xaa8>
 80244e2:	f104 0614 	add.w	r6, r4, #20
 80244e6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80244ea:	ce03      	ldmia	r6!, {r0, r1}
 80244ec:	f8c9 0000 	str.w	r0, [r9]
 80244f0:	f8c9 1004 	str.w	r1, [r9, #4]
 80244f4:	6921      	ldr	r1, [r4, #16]
 80244f6:	3108      	adds	r1, #8
 80244f8:	6121      	str	r1, [r4, #16]
 80244fa:	68a1      	ldr	r1, [r4, #8]
 80244fc:	3101      	adds	r1, #1
 80244fe:	60a1      	str	r1, [r4, #8]
 8024500:	e786      	b.n	8024410 <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 8024502:	f104 0814 	add.w	r8, r4, #20
 8024506:	6923      	ldr	r3, [r4, #16]
 8024508:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802450c:	9306      	str	r3, [sp, #24]
 802450e:	6018      	str	r0, [r3, #0]
 8024510:	6059      	str	r1, [r3, #4]
 8024512:	6921      	ldr	r1, [r4, #16]
 8024514:	3108      	adds	r1, #8
 8024516:	6121      	str	r1, [r4, #16]
 8024518:	68a1      	ldr	r1, [r4, #8]
 802451a:	3101      	adds	r1, #1
 802451c:	60a1      	str	r1, [r4, #8]
 802451e:	e7bf      	b.n	80244a0 <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>

08024520 <_ZN8touchgfx7Outline6lineToEii>:
 8024520:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024522:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8024524:	4604      	mov	r4, r0
 8024526:	460d      	mov	r5, r1
 8024528:	4616      	mov	r6, r2
 802452a:	079b      	lsls	r3, r3, #30
 802452c:	d526      	bpl.n	802457c <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802452e:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8024532:	ea85 0001 	eor.w	r0, r5, r1
 8024536:	ea86 0302 	eor.w	r3, r6, r2
 802453a:	4303      	orrs	r3, r0
 802453c:	d01e      	beq.n	802457c <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802453e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8024540:	114b      	asrs	r3, r1, #5
 8024542:	9600      	str	r6, [sp, #0]
 8024544:	4283      	cmp	r3, r0
 8024546:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8024548:	bfb8      	it	lt
 802454a:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802454c:	3301      	adds	r3, #1
 802454e:	4283      	cmp	r3, r0
 8024550:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8024552:	bfc8      	it	gt
 8024554:	6363      	strgt	r3, [r4, #52]	; 0x34
 8024556:	116b      	asrs	r3, r5, #5
 8024558:	4283      	cmp	r3, r0
 802455a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802455c:	bfb8      	it	lt
 802455e:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8024560:	3301      	adds	r3, #1
 8024562:	4283      	cmp	r3, r0
 8024564:	4620      	mov	r0, r4
 8024566:	bfc8      	it	gt
 8024568:	6363      	strgt	r3, [r4, #52]	; 0x34
 802456a:	462b      	mov	r3, r5
 802456c:	f7ff f9c6 	bl	80238fc <_ZN8touchgfx7Outline10renderLineEiiii>
 8024570:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024572:	f043 0301 	orr.w	r3, r3, #1
 8024576:	e9c4 5607 	strd	r5, r6, [r4, #28]
 802457a:	63e3      	str	r3, [r4, #60]	; 0x3c
 802457c:	b002      	add	sp, #8
 802457e:	bd70      	pop	{r4, r5, r6, pc}

08024580 <_ZN8touchgfx7Outline6moveToEii>:
 8024580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024582:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8024584:	4615      	mov	r5, r2
 8024586:	4604      	mov	r4, r0
 8024588:	460e      	mov	r6, r1
 802458a:	079a      	lsls	r2, r3, #30
 802458c:	d401      	bmi.n	8024592 <_ZN8touchgfx7Outline6moveToEii+0x12>
 802458e:	f7ff f96e 	bl	802386e <_ZN8touchgfx7Outline5resetEv>
 8024592:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024594:	07db      	lsls	r3, r3, #31
 8024596:	d504      	bpl.n	80245a2 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8024598:	4620      	mov	r0, r4
 802459a:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 802459e:	f7ff ffbf 	bl	8024520 <_ZN8touchgfx7Outline6lineToEii>
 80245a2:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80245a6:	f346 1c4f 	sbfx	ip, r6, #5, #16
 80245aa:	f345 174f 	sbfx	r7, r5, #5, #16
 80245ae:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80245b2:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 80245b6:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80245ba:	428a      	cmp	r2, r1
 80245bc:	d015      	beq.n	80245ea <_ZN8touchgfx7Outline6moveToEii+0x6a>
 80245be:	8b61      	ldrh	r1, [r4, #26]
 80245c0:	8b22      	ldrh	r2, [r4, #24]
 80245c2:	430a      	orrs	r2, r1
 80245c4:	d00b      	beq.n	80245de <_ZN8touchgfx7Outline6moveToEii+0x5e>
 80245c6:	2b00      	cmp	r3, #0
 80245c8:	db09      	blt.n	80245de <_ZN8touchgfx7Outline6moveToEii+0x5e>
 80245ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80245cc:	4293      	cmp	r3, r2
 80245ce:	da06      	bge.n	80245de <_ZN8touchgfx7Outline6moveToEii+0x5e>
 80245d0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80245d4:	429a      	cmp	r2, r3
 80245d6:	d30d      	bcc.n	80245f4 <_ZN8touchgfx7Outline6moveToEii+0x74>
 80245d8:	2301      	movs	r3, #1
 80245da:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80245de:	2300      	movs	r3, #0
 80245e0:	f8a4 c014 	strh.w	ip, [r4, #20]
 80245e4:	82e7      	strh	r7, [r4, #22]
 80245e6:	8323      	strh	r3, [r4, #24]
 80245e8:	8363      	strh	r3, [r4, #26]
 80245ea:	61e6      	str	r6, [r4, #28]
 80245ec:	62a5      	str	r5, [r4, #40]	; 0x28
 80245ee:	e9c4 5608 	strd	r5, r6, [r4, #32]
 80245f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80245f4:	f104 0314 	add.w	r3, r4, #20
 80245f8:	6922      	ldr	r2, [r4, #16]
 80245fa:	cb03      	ldmia	r3!, {r0, r1}
 80245fc:	6010      	str	r0, [r2, #0]
 80245fe:	6051      	str	r1, [r2, #4]
 8024600:	6923      	ldr	r3, [r4, #16]
 8024602:	3308      	adds	r3, #8
 8024604:	6123      	str	r3, [r4, #16]
 8024606:	68a3      	ldr	r3, [r4, #8]
 8024608:	3301      	adds	r3, #1
 802460a:	60a3      	str	r3, [r4, #8]
 802460c:	e7e7      	b.n	80245de <_ZN8touchgfx7Outline6moveToEii+0x5e>

0802460e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 802460e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024612:	b0d1      	sub	sp, #324	; 0x144
 8024614:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8024618:	466c      	mov	r4, sp
 802461a:	1a0d      	subs	r5, r1, r0
 802461c:	f100 0208 	add.w	r2, r0, #8
 8024620:	2d48      	cmp	r5, #72	; 0x48
 8024622:	f340 80ba 	ble.w	802479a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8024626:	112d      	asrs	r5, r5, #4
 8024628:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 802462c:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8024630:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8024634:	f9b0 8000 	ldrsh.w	r8, [r0]
 8024638:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 802463c:	681e      	ldr	r6, [r3, #0]
 802463e:	6006      	str	r6, [r0, #0]
 8024640:	685e      	ldr	r6, [r3, #4]
 8024642:	6046      	str	r6, [r0, #4]
 8024644:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8024648:	f8a3 e002 	strh.w	lr, [r3, #2]
 802464c:	f8a3 c004 	strh.w	ip, [r3, #4]
 8024650:	80df      	strh	r7, [r3, #6]
 8024652:	f1a1 0308 	sub.w	r3, r1, #8
 8024656:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 802465a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 802465e:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 8024662:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8024666:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802466a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802466e:	4565      	cmp	r5, ip
 8024670:	da0f      	bge.n	8024692 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 8024672:	681d      	ldr	r5, [r3, #0]
 8024674:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8024678:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 802467c:	6015      	str	r5, [r2, #0]
 802467e:	685d      	ldr	r5, [r3, #4]
 8024680:	6055      	str	r5, [r2, #4]
 8024682:	f821 7c08 	strh.w	r7, [r1, #-8]
 8024686:	f821 6c06 	strh.w	r6, [r1, #-6]
 802468a:	f821 ec04 	strh.w	lr, [r1, #-4]
 802468e:	f821 cc02 	strh.w	ip, [r1, #-2]
 8024692:	f9b0 7000 	ldrsh.w	r7, [r0]
 8024696:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802469a:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 802469e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80246a2:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80246a6:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 80246aa:	45ac      	cmp	ip, r5
 80246ac:	da0d      	bge.n	80246ca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 80246ae:	6815      	ldr	r5, [r2, #0]
 80246b0:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80246b4:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80246b8:	6005      	str	r5, [r0, #0]
 80246ba:	6855      	ldr	r5, [r2, #4]
 80246bc:	8107      	strh	r7, [r0, #8]
 80246be:	6045      	str	r5, [r0, #4]
 80246c0:	8146      	strh	r6, [r0, #10]
 80246c2:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80246c6:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80246ca:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 80246ce:	f9b0 7000 	ldrsh.w	r7, [r0]
 80246d2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80246d6:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80246da:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 80246de:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80246e2:	4565      	cmp	r5, ip
 80246e4:	da0f      	bge.n	8024706 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 80246e6:	681d      	ldr	r5, [r3, #0]
 80246e8:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80246ec:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80246f0:	6005      	str	r5, [r0, #0]
 80246f2:	685d      	ldr	r5, [r3, #4]
 80246f4:	6045      	str	r5, [r0, #4]
 80246f6:	f821 7c08 	strh.w	r7, [r1, #-8]
 80246fa:	f821 6c06 	strh.w	r6, [r1, #-6]
 80246fe:	f821 ec04 	strh.w	lr, [r1, #-4]
 8024702:	f821 cc02 	strh.w	ip, [r1, #-2]
 8024706:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 802470a:	f102 0508 	add.w	r5, r2, #8
 802470e:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 8024712:	f9b0 e000 	ldrsh.w	lr, [r0]
 8024716:	462f      	mov	r7, r5
 8024718:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 802471c:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8024720:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8024724:	4556      	cmp	r6, sl
 8024726:	db18      	blt.n	802475a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8024728:	3b08      	subs	r3, #8
 802472a:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 802472e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8024732:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 8024736:	45b2      	cmp	sl, r6
 8024738:	dbf6      	blt.n	8024728 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 802473a:	42ab      	cmp	r3, r5
 802473c:	681e      	ldr	r6, [r3, #0]
 802473e:	d30e      	bcc.n	802475e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8024740:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8024744:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8024748:	602e      	str	r6, [r5, #0]
 802474a:	685e      	ldr	r6, [r3, #4]
 802474c:	606e      	str	r6, [r5, #4]
 802474e:	f8a3 9000 	strh.w	r9, [r3]
 8024752:	f8a3 8002 	strh.w	r8, [r3, #2]
 8024756:	809f      	strh	r7, [r3, #4]
 8024758:	80da      	strh	r2, [r3, #6]
 802475a:	462a      	mov	r2, r5
 802475c:	e7d3      	b.n	8024706 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802475e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8024762:	6006      	str	r6, [r0, #0]
 8024764:	685e      	ldr	r6, [r3, #4]
 8024766:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 802476a:	6046      	str	r6, [r0, #4]
 802476c:	1a1e      	subs	r6, r3, r0
 802476e:	80da      	strh	r2, [r3, #6]
 8024770:	1b4a      	subs	r2, r1, r5
 8024772:	f8a3 e000 	strh.w	lr, [r3]
 8024776:	10d2      	asrs	r2, r2, #3
 8024778:	f8a3 c002 	strh.w	ip, [r3, #2]
 802477c:	f8a3 8004 	strh.w	r8, [r3, #4]
 8024780:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8024784:	bfb5      	itete	lt
 8024786:	e9c4 0300 	strdlt	r0, r3, [r4]
 802478a:	4607      	movge	r7, r0
 802478c:	460b      	movlt	r3, r1
 802478e:	e9c4 5100 	strdge	r5, r1, [r4]
 8024792:	4638      	mov	r0, r7
 8024794:	3408      	adds	r4, #8
 8024796:	4619      	mov	r1, r3
 8024798:	e73f      	b.n	802461a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802479a:	4291      	cmp	r1, r2
 802479c:	d925      	bls.n	80247ea <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 802479e:	f1a2 0310 	sub.w	r3, r2, #16
 80247a2:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 80247a6:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 80247aa:	f9b3 e00a 	ldrsh.w	lr, [r3, #10]
 80247ae:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 80247b2:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 80247b6:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 80247ba:	42ae      	cmp	r6, r5
 80247bc:	da13      	bge.n	80247e6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 80247be:	461d      	mov	r5, r3
 80247c0:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 80247c4:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 80247c8:	3b08      	subs	r3, #8
 80247ca:	f855 6f08 	ldr.w	r6, [r5, #8]!
 80247ce:	619e      	str	r6, [r3, #24]
 80247d0:	42a8      	cmp	r0, r5
 80247d2:	686e      	ldr	r6, [r5, #4]
 80247d4:	f8a3 c010 	strh.w	ip, [r3, #16]
 80247d8:	61de      	str	r6, [r3, #28]
 80247da:	825f      	strh	r7, [r3, #18]
 80247dc:	f8a3 8014 	strh.w	r8, [r3, #20]
 80247e0:	f8a3 e016 	strh.w	lr, [r3, #22]
 80247e4:	d1dd      	bne.n	80247a2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 80247e6:	3208      	adds	r2, #8
 80247e8:	e7d7      	b.n	802479a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 80247ea:	466b      	mov	r3, sp
 80247ec:	429c      	cmp	r4, r3
 80247ee:	d903      	bls.n	80247f8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 80247f0:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80247f4:	3c08      	subs	r4, #8
 80247f6:	e710      	b.n	802461a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 80247f8:	b051      	add	sp, #324	; 0x144
 80247fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080247fe <_ZN8touchgfx7Outline9sortCellsEv>:
 80247fe:	6881      	ldr	r1, [r0, #8]
 8024800:	b111      	cbz	r1, 8024808 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 8024802:	68c0      	ldr	r0, [r0, #12]
 8024804:	f7ff bf03 	b.w	802460e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8024808:	4770      	bx	lr

0802480a <_ZN8touchgfx7Outline8getCellsEv>:
 802480a:	b510      	push	{r4, lr}
 802480c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802480e:	4604      	mov	r4, r0
 8024810:	07da      	lsls	r2, r3, #31
 8024812:	d507      	bpl.n	8024824 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8024814:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8024818:	f7ff fe82 	bl	8024520 <_ZN8touchgfx7Outline6lineToEii>
 802481c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802481e:	f023 0301 	bic.w	r3, r3, #1
 8024822:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024824:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024826:	079b      	lsls	r3, r3, #30
 8024828:	d51a      	bpl.n	8024860 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 802482a:	8b62      	ldrh	r2, [r4, #26]
 802482c:	8b23      	ldrh	r3, [r4, #24]
 802482e:	4313      	orrs	r3, r2
 8024830:	d00d      	beq.n	802484e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024832:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024836:	2b00      	cmp	r3, #0
 8024838:	db09      	blt.n	802484e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802483a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802483c:	4293      	cmp	r3, r2
 802483e:	da06      	bge.n	802484e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024840:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8024844:	429a      	cmp	r2, r3
 8024846:	d80d      	bhi.n	8024864 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8024848:	2301      	movs	r3, #1
 802484a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802484e:	68a0      	ldr	r0, [r4, #8]
 8024850:	b138      	cbz	r0, 8024862 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 8024852:	4620      	mov	r0, r4
 8024854:	f7ff ffd3 	bl	80247fe <_ZN8touchgfx7Outline9sortCellsEv>
 8024858:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802485a:	f023 0302 	bic.w	r3, r3, #2
 802485e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024860:	68e0      	ldr	r0, [r4, #12]
 8024862:	bd10      	pop	{r4, pc}
 8024864:	f104 0314 	add.w	r3, r4, #20
 8024868:	6922      	ldr	r2, [r4, #16]
 802486a:	cb03      	ldmia	r3!, {r0, r1}
 802486c:	6010      	str	r0, [r2, #0]
 802486e:	6051      	str	r1, [r2, #4]
 8024870:	6923      	ldr	r3, [r4, #16]
 8024872:	3308      	adds	r3, #8
 8024874:	6123      	str	r3, [r4, #16]
 8024876:	68a3      	ldr	r3, [r4, #8]
 8024878:	3301      	adds	r3, #1
 802487a:	60a3      	str	r3, [r4, #8]
 802487c:	e7e7      	b.n	802484e <_ZN8touchgfx7Outline8getCellsEv+0x44>

0802487e <_ZN8touchgfx8ScanlineD1Ev>:
 802487e:	4770      	bx	lr

08024880 <_ZN8touchgfx8ScanlineD0Ev>:
 8024880:	b510      	push	{r4, lr}
 8024882:	4604      	mov	r4, r0
 8024884:	2124      	movs	r1, #36	; 0x24
 8024886:	f000 f888 	bl	802499a <_ZdlPvj>
 802488a:	4620      	mov	r0, r4
 802488c:	bd10      	pop	{r4, pc}

0802488e <_ZN8touchgfx8Scanline5resetEv>:
 802488e:	b510      	push	{r4, lr}
 8024890:	4604      	mov	r4, r0
 8024892:	f7ed fd19 	bl	80122c8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8024896:	61a0      	str	r0, [r4, #24]
 8024898:	f7ed fd1c 	bl	80122d4 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 802489c:	61e0      	str	r0, [r4, #28]
 802489e:	f7ed fd1f 	bl	80122e0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 80248a2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80248a6:	6220      	str	r0, [r4, #32]
 80248a8:	6160      	str	r0, [r4, #20]
 80248aa:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80248ae:	69e3      	ldr	r3, [r4, #28]
 80248b0:	6123      	str	r3, [r4, #16]
 80248b2:	2300      	movs	r3, #0
 80248b4:	60e3      	str	r3, [r4, #12]
 80248b6:	bd10      	pop	{r4, pc}

080248b8 <_ZN8touchgfx8ScanlineC1Ev>:
 80248b8:	4b09      	ldr	r3, [pc, #36]	; (80248e0 <_ZN8touchgfx8ScanlineC1Ev+0x28>)
 80248ba:	b510      	push	{r4, lr}
 80248bc:	6003      	str	r3, [r0, #0]
 80248be:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80248c2:	4604      	mov	r4, r0
 80248c4:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80248c8:	2300      	movs	r3, #0
 80248ca:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80248ce:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80248d2:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80248d6:	f7ff ffda 	bl	802488e <_ZN8touchgfx8Scanline5resetEv>
 80248da:	4620      	mov	r0, r4
 80248dc:	bd10      	pop	{r4, pc}
 80248de:	bf00      	nop
 80248e0:	0802aa80 	.word	0x0802aa80

080248e4 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 80248e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80248e8:	1e0c      	subs	r4, r1, #0
 80248ea:	4605      	mov	r5, r0
 80248ec:	4617      	mov	r7, r2
 80248ee:	461e      	mov	r6, r3
 80248f0:	da03      	bge.n	80248fa <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 80248f2:	4426      	add	r6, r4
 80248f4:	2e01      	cmp	r6, #1
 80248f6:	d421      	bmi.n	802493c <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 80248f8:	2400      	movs	r4, #0
 80248fa:	f7ed fcdf 	bl	80122bc <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80248fe:	42a0      	cmp	r0, r4
 8024900:	dd1c      	ble.n	802493c <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8024902:	eb04 0806 	add.w	r8, r4, r6
 8024906:	f7ed fcd9 	bl	80122bc <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802490a:	4580      	cmp	r8, r0
 802490c:	d902      	bls.n	8024914 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 802490e:	f7ed fcd5 	bl	80122bc <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024912:	1b06      	subs	r6, r0, r4
 8024914:	69a8      	ldr	r0, [r5, #24]
 8024916:	4632      	mov	r2, r6
 8024918:	f89d 1018 	ldrb.w	r1, [sp, #24]
 802491c:	4420      	add	r0, r4
 802491e:	f7f0 fa6d 	bl	8014dfc <_ZN8touchgfx6memsetEPvhm>
 8024922:	686b      	ldr	r3, [r5, #4]
 8024924:	b2b2      	uxth	r2, r6
 8024926:	3301      	adds	r3, #1
 8024928:	42a3      	cmp	r3, r4
 802492a:	696b      	ldr	r3, [r5, #20]
 802492c:	d108      	bne.n	8024940 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 802492e:	8819      	ldrh	r1, [r3, #0]
 8024930:	440a      	add	r2, r1
 8024932:	801a      	strh	r2, [r3, #0]
 8024934:	3c01      	subs	r4, #1
 8024936:	4434      	add	r4, r6
 8024938:	e9c5 4701 	strd	r4, r7, [r5, #4]
 802493c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024940:	1c99      	adds	r1, r3, #2
 8024942:	6169      	str	r1, [r5, #20]
 8024944:	805a      	strh	r2, [r3, #2]
 8024946:	692b      	ldr	r3, [r5, #16]
 8024948:	1c9a      	adds	r2, r3, #2
 802494a:	612a      	str	r2, [r5, #16]
 802494c:	805c      	strh	r4, [r3, #2]
 802494e:	68eb      	ldr	r3, [r5, #12]
 8024950:	3301      	adds	r3, #1
 8024952:	60eb      	str	r3, [r5, #12]
 8024954:	e7ee      	b.n	8024934 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08024956 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8024956:	4770      	bx	lr

08024958 <_ZN8touchgfx15RenderingBufferD0Ev>:
 8024958:	b510      	push	{r4, lr}
 802495a:	4604      	mov	r4, r0
 802495c:	2118      	movs	r1, #24
 802495e:	f000 f81c 	bl	802499a <_ZdlPvj>
 8024962:	4620      	mov	r0, r4
 8024964:	bd10      	pop	{r4, pc}
	...

08024968 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8024968:	4a04      	ldr	r2, [pc, #16]	; (802497c <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 802496a:	6002      	str	r2, [r0, #0]
 802496c:	2200      	movs	r2, #0
 802496e:	6042      	str	r2, [r0, #4]
 8024970:	7202      	strb	r2, [r0, #8]
 8024972:	6142      	str	r2, [r0, #20]
 8024974:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8024978:	4770      	bx	lr
 802497a:	bf00      	nop
 802497c:	0802aa90 	.word	0x0802aa90

08024980 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8024980:	60c3      	str	r3, [r0, #12]
 8024982:	9b00      	ldr	r3, [sp, #0]
 8024984:	6041      	str	r1, [r0, #4]
 8024986:	6103      	str	r3, [r0, #16]
 8024988:	9b01      	ldr	r3, [sp, #4]
 802498a:	7202      	strb	r2, [r0, #8]
 802498c:	6143      	str	r3, [r0, #20]
 802498e:	4770      	bx	lr

08024990 <__aeabi_atexit>:
 8024990:	460b      	mov	r3, r1
 8024992:	4601      	mov	r1, r0
 8024994:	4618      	mov	r0, r3
 8024996:	f000 b857 	b.w	8024a48 <__cxa_atexit>

0802499a <_ZdlPvj>:
 802499a:	f000 b812 	b.w	80249c2 <_ZdlPv>

0802499e <__cxa_guard_acquire>:
 802499e:	6803      	ldr	r3, [r0, #0]
 80249a0:	07db      	lsls	r3, r3, #31
 80249a2:	d406      	bmi.n	80249b2 <__cxa_guard_acquire+0x14>
 80249a4:	7843      	ldrb	r3, [r0, #1]
 80249a6:	b103      	cbz	r3, 80249aa <__cxa_guard_acquire+0xc>
 80249a8:	deff      	udf	#255	; 0xff
 80249aa:	2301      	movs	r3, #1
 80249ac:	7043      	strb	r3, [r0, #1]
 80249ae:	4618      	mov	r0, r3
 80249b0:	4770      	bx	lr
 80249b2:	2000      	movs	r0, #0
 80249b4:	4770      	bx	lr

080249b6 <__cxa_guard_release>:
 80249b6:	2301      	movs	r3, #1
 80249b8:	6003      	str	r3, [r0, #0]
 80249ba:	4770      	bx	lr

080249bc <__cxa_pure_virtual>:
 80249bc:	b508      	push	{r3, lr}
 80249be:	f000 f80f 	bl	80249e0 <_ZSt9terminatev>

080249c2 <_ZdlPv>:
 80249c2:	f000 b98d 	b.w	8024ce0 <free>

080249c6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80249c6:	b508      	push	{r3, lr}
 80249c8:	4780      	blx	r0
 80249ca:	f000 f80e 	bl	80249ea <abort>
	...

080249d0 <_ZSt13get_terminatev>:
 80249d0:	4b02      	ldr	r3, [pc, #8]	; (80249dc <_ZSt13get_terminatev+0xc>)
 80249d2:	6818      	ldr	r0, [r3, #0]
 80249d4:	f3bf 8f5b 	dmb	ish
 80249d8:	4770      	bx	lr
 80249da:	bf00      	nop
 80249dc:	200000cc 	.word	0x200000cc

080249e0 <_ZSt9terminatev>:
 80249e0:	b508      	push	{r3, lr}
 80249e2:	f7ff fff5 	bl	80249d0 <_ZSt13get_terminatev>
 80249e6:	f7ff ffee 	bl	80249c6 <_ZN10__cxxabiv111__terminateEPFvvE>

080249ea <abort>:
 80249ea:	b508      	push	{r3, lr}
 80249ec:	2006      	movs	r0, #6
 80249ee:	f000 fe05 	bl	80255fc <raise>
 80249f2:	2001      	movs	r0, #1
 80249f4:	f7de faa2 	bl	8002f3c <_exit>

080249f8 <__assert_func>:
 80249f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80249fa:	4614      	mov	r4, r2
 80249fc:	461a      	mov	r2, r3
 80249fe:	4b09      	ldr	r3, [pc, #36]	; (8024a24 <__assert_func+0x2c>)
 8024a00:	681b      	ldr	r3, [r3, #0]
 8024a02:	4605      	mov	r5, r0
 8024a04:	68d8      	ldr	r0, [r3, #12]
 8024a06:	b14c      	cbz	r4, 8024a1c <__assert_func+0x24>
 8024a08:	4b07      	ldr	r3, [pc, #28]	; (8024a28 <__assert_func+0x30>)
 8024a0a:	9100      	str	r1, [sp, #0]
 8024a0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024a10:	4906      	ldr	r1, [pc, #24]	; (8024a2c <__assert_func+0x34>)
 8024a12:	462b      	mov	r3, r5
 8024a14:	f000 f902 	bl	8024c1c <fiprintf>
 8024a18:	f7ff ffe7 	bl	80249ea <abort>
 8024a1c:	4b04      	ldr	r3, [pc, #16]	; (8024a30 <__assert_func+0x38>)
 8024a1e:	461c      	mov	r4, r3
 8024a20:	e7f3      	b.n	8024a0a <__assert_func+0x12>
 8024a22:	bf00      	nop
 8024a24:	200000d0 	.word	0x200000d0
 8024a28:	0802aa98 	.word	0x0802aa98
 8024a2c:	0802aaa5 	.word	0x0802aaa5
 8024a30:	0802aad3 	.word	0x0802aad3

08024a34 <atexit>:
 8024a34:	2300      	movs	r3, #0
 8024a36:	4601      	mov	r1, r0
 8024a38:	461a      	mov	r2, r3
 8024a3a:	4618      	mov	r0, r3
 8024a3c:	f000 bf9c 	b.w	8025978 <__register_exitproc>

08024a40 <atoi>:
 8024a40:	220a      	movs	r2, #10
 8024a42:	2100      	movs	r1, #0
 8024a44:	f000 bebc 	b.w	80257c0 <strtol>

08024a48 <__cxa_atexit>:
 8024a48:	b510      	push	{r4, lr}
 8024a4a:	4c05      	ldr	r4, [pc, #20]	; (8024a60 <__cxa_atexit+0x18>)
 8024a4c:	4613      	mov	r3, r2
 8024a4e:	b12c      	cbz	r4, 8024a5c <__cxa_atexit+0x14>
 8024a50:	460a      	mov	r2, r1
 8024a52:	4601      	mov	r1, r0
 8024a54:	2002      	movs	r0, #2
 8024a56:	f000 ff8f 	bl	8025978 <__register_exitproc>
 8024a5a:	bd10      	pop	{r4, pc}
 8024a5c:	4620      	mov	r0, r4
 8024a5e:	e7fc      	b.n	8024a5a <__cxa_atexit+0x12>
 8024a60:	08025979 	.word	0x08025979

08024a64 <__errno>:
 8024a64:	4b01      	ldr	r3, [pc, #4]	; (8024a6c <__errno+0x8>)
 8024a66:	6818      	ldr	r0, [r3, #0]
 8024a68:	4770      	bx	lr
 8024a6a:	bf00      	nop
 8024a6c:	200000d0 	.word	0x200000d0

08024a70 <std>:
 8024a70:	2300      	movs	r3, #0
 8024a72:	b510      	push	{r4, lr}
 8024a74:	4604      	mov	r4, r0
 8024a76:	e9c0 3300 	strd	r3, r3, [r0]
 8024a7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8024a7e:	6083      	str	r3, [r0, #8]
 8024a80:	8181      	strh	r1, [r0, #12]
 8024a82:	6643      	str	r3, [r0, #100]	; 0x64
 8024a84:	81c2      	strh	r2, [r0, #14]
 8024a86:	6183      	str	r3, [r0, #24]
 8024a88:	4619      	mov	r1, r3
 8024a8a:	2208      	movs	r2, #8
 8024a8c:	305c      	adds	r0, #92	; 0x5c
 8024a8e:	f000 f93d 	bl	8024d0c <memset>
 8024a92:	4b05      	ldr	r3, [pc, #20]	; (8024aa8 <std+0x38>)
 8024a94:	6263      	str	r3, [r4, #36]	; 0x24
 8024a96:	4b05      	ldr	r3, [pc, #20]	; (8024aac <std+0x3c>)
 8024a98:	62a3      	str	r3, [r4, #40]	; 0x28
 8024a9a:	4b05      	ldr	r3, [pc, #20]	; (8024ab0 <std+0x40>)
 8024a9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8024a9e:	4b05      	ldr	r3, [pc, #20]	; (8024ab4 <std+0x44>)
 8024aa0:	6224      	str	r4, [r4, #32]
 8024aa2:	6323      	str	r3, [r4, #48]	; 0x30
 8024aa4:	bd10      	pop	{r4, pc}
 8024aa6:	bf00      	nop
 8024aa8:	08025635 	.word	0x08025635
 8024aac:	08025657 	.word	0x08025657
 8024ab0:	0802568f 	.word	0x0802568f
 8024ab4:	080256b3 	.word	0x080256b3

08024ab8 <_cleanup_r>:
 8024ab8:	4901      	ldr	r1, [pc, #4]	; (8024ac0 <_cleanup_r+0x8>)
 8024aba:	f000 b8c1 	b.w	8024c40 <_fwalk_reent>
 8024abe:	bf00      	nop
 8024ac0:	08025b69 	.word	0x08025b69

08024ac4 <__sfmoreglue>:
 8024ac4:	b570      	push	{r4, r5, r6, lr}
 8024ac6:	2268      	movs	r2, #104	; 0x68
 8024ac8:	1e4d      	subs	r5, r1, #1
 8024aca:	4355      	muls	r5, r2
 8024acc:	460e      	mov	r6, r1
 8024ace:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8024ad2:	f000 f98f 	bl	8024df4 <_malloc_r>
 8024ad6:	4604      	mov	r4, r0
 8024ad8:	b140      	cbz	r0, 8024aec <__sfmoreglue+0x28>
 8024ada:	2100      	movs	r1, #0
 8024adc:	e9c0 1600 	strd	r1, r6, [r0]
 8024ae0:	300c      	adds	r0, #12
 8024ae2:	60a0      	str	r0, [r4, #8]
 8024ae4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8024ae8:	f000 f910 	bl	8024d0c <memset>
 8024aec:	4620      	mov	r0, r4
 8024aee:	bd70      	pop	{r4, r5, r6, pc}

08024af0 <__sfp_lock_acquire>:
 8024af0:	4801      	ldr	r0, [pc, #4]	; (8024af8 <__sfp_lock_acquire+0x8>)
 8024af2:	f000 b8ea 	b.w	8024cca <__retarget_lock_acquire_recursive>
 8024af6:	bf00      	nop
 8024af8:	200210f6 	.word	0x200210f6

08024afc <__sfp_lock_release>:
 8024afc:	4801      	ldr	r0, [pc, #4]	; (8024b04 <__sfp_lock_release+0x8>)
 8024afe:	f000 b8e6 	b.w	8024cce <__retarget_lock_release_recursive>
 8024b02:	bf00      	nop
 8024b04:	200210f6 	.word	0x200210f6

08024b08 <__sinit_lock_acquire>:
 8024b08:	4801      	ldr	r0, [pc, #4]	; (8024b10 <__sinit_lock_acquire+0x8>)
 8024b0a:	f000 b8de 	b.w	8024cca <__retarget_lock_acquire_recursive>
 8024b0e:	bf00      	nop
 8024b10:	200210f7 	.word	0x200210f7

08024b14 <__sinit_lock_release>:
 8024b14:	4801      	ldr	r0, [pc, #4]	; (8024b1c <__sinit_lock_release+0x8>)
 8024b16:	f000 b8da 	b.w	8024cce <__retarget_lock_release_recursive>
 8024b1a:	bf00      	nop
 8024b1c:	200210f7 	.word	0x200210f7

08024b20 <__sinit>:
 8024b20:	b510      	push	{r4, lr}
 8024b22:	4604      	mov	r4, r0
 8024b24:	f7ff fff0 	bl	8024b08 <__sinit_lock_acquire>
 8024b28:	69a3      	ldr	r3, [r4, #24]
 8024b2a:	b11b      	cbz	r3, 8024b34 <__sinit+0x14>
 8024b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024b30:	f7ff bff0 	b.w	8024b14 <__sinit_lock_release>
 8024b34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8024b38:	6523      	str	r3, [r4, #80]	; 0x50
 8024b3a:	4b13      	ldr	r3, [pc, #76]	; (8024b88 <__sinit+0x68>)
 8024b3c:	4a13      	ldr	r2, [pc, #76]	; (8024b8c <__sinit+0x6c>)
 8024b3e:	681b      	ldr	r3, [r3, #0]
 8024b40:	62a2      	str	r2, [r4, #40]	; 0x28
 8024b42:	42a3      	cmp	r3, r4
 8024b44:	bf04      	itt	eq
 8024b46:	2301      	moveq	r3, #1
 8024b48:	61a3      	streq	r3, [r4, #24]
 8024b4a:	4620      	mov	r0, r4
 8024b4c:	f000 f820 	bl	8024b90 <__sfp>
 8024b50:	6060      	str	r0, [r4, #4]
 8024b52:	4620      	mov	r0, r4
 8024b54:	f000 f81c 	bl	8024b90 <__sfp>
 8024b58:	60a0      	str	r0, [r4, #8]
 8024b5a:	4620      	mov	r0, r4
 8024b5c:	f000 f818 	bl	8024b90 <__sfp>
 8024b60:	2200      	movs	r2, #0
 8024b62:	60e0      	str	r0, [r4, #12]
 8024b64:	2104      	movs	r1, #4
 8024b66:	6860      	ldr	r0, [r4, #4]
 8024b68:	f7ff ff82 	bl	8024a70 <std>
 8024b6c:	68a0      	ldr	r0, [r4, #8]
 8024b6e:	2201      	movs	r2, #1
 8024b70:	2109      	movs	r1, #9
 8024b72:	f7ff ff7d 	bl	8024a70 <std>
 8024b76:	68e0      	ldr	r0, [r4, #12]
 8024b78:	2202      	movs	r2, #2
 8024b7a:	2112      	movs	r1, #18
 8024b7c:	f7ff ff78 	bl	8024a70 <std>
 8024b80:	2301      	movs	r3, #1
 8024b82:	61a3      	str	r3, [r4, #24]
 8024b84:	e7d2      	b.n	8024b2c <__sinit+0xc>
 8024b86:	bf00      	nop
 8024b88:	0802ab34 	.word	0x0802ab34
 8024b8c:	08024ab9 	.word	0x08024ab9

08024b90 <__sfp>:
 8024b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024b92:	4607      	mov	r7, r0
 8024b94:	f7ff ffac 	bl	8024af0 <__sfp_lock_acquire>
 8024b98:	4b1e      	ldr	r3, [pc, #120]	; (8024c14 <__sfp+0x84>)
 8024b9a:	681e      	ldr	r6, [r3, #0]
 8024b9c:	69b3      	ldr	r3, [r6, #24]
 8024b9e:	b913      	cbnz	r3, 8024ba6 <__sfp+0x16>
 8024ba0:	4630      	mov	r0, r6
 8024ba2:	f7ff ffbd 	bl	8024b20 <__sinit>
 8024ba6:	3648      	adds	r6, #72	; 0x48
 8024ba8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8024bac:	3b01      	subs	r3, #1
 8024bae:	d503      	bpl.n	8024bb8 <__sfp+0x28>
 8024bb0:	6833      	ldr	r3, [r6, #0]
 8024bb2:	b30b      	cbz	r3, 8024bf8 <__sfp+0x68>
 8024bb4:	6836      	ldr	r6, [r6, #0]
 8024bb6:	e7f7      	b.n	8024ba8 <__sfp+0x18>
 8024bb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8024bbc:	b9d5      	cbnz	r5, 8024bf4 <__sfp+0x64>
 8024bbe:	4b16      	ldr	r3, [pc, #88]	; (8024c18 <__sfp+0x88>)
 8024bc0:	60e3      	str	r3, [r4, #12]
 8024bc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8024bc6:	6665      	str	r5, [r4, #100]	; 0x64
 8024bc8:	f000 f87e 	bl	8024cc8 <__retarget_lock_init_recursive>
 8024bcc:	f7ff ff96 	bl	8024afc <__sfp_lock_release>
 8024bd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8024bd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8024bd8:	6025      	str	r5, [r4, #0]
 8024bda:	61a5      	str	r5, [r4, #24]
 8024bdc:	2208      	movs	r2, #8
 8024bde:	4629      	mov	r1, r5
 8024be0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8024be4:	f000 f892 	bl	8024d0c <memset>
 8024be8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8024bec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8024bf0:	4620      	mov	r0, r4
 8024bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024bf4:	3468      	adds	r4, #104	; 0x68
 8024bf6:	e7d9      	b.n	8024bac <__sfp+0x1c>
 8024bf8:	2104      	movs	r1, #4
 8024bfa:	4638      	mov	r0, r7
 8024bfc:	f7ff ff62 	bl	8024ac4 <__sfmoreglue>
 8024c00:	4604      	mov	r4, r0
 8024c02:	6030      	str	r0, [r6, #0]
 8024c04:	2800      	cmp	r0, #0
 8024c06:	d1d5      	bne.n	8024bb4 <__sfp+0x24>
 8024c08:	f7ff ff78 	bl	8024afc <__sfp_lock_release>
 8024c0c:	230c      	movs	r3, #12
 8024c0e:	603b      	str	r3, [r7, #0]
 8024c10:	e7ee      	b.n	8024bf0 <__sfp+0x60>
 8024c12:	bf00      	nop
 8024c14:	0802ab34 	.word	0x0802ab34
 8024c18:	ffff0001 	.word	0xffff0001

08024c1c <fiprintf>:
 8024c1c:	b40e      	push	{r1, r2, r3}
 8024c1e:	b503      	push	{r0, r1, lr}
 8024c20:	4601      	mov	r1, r0
 8024c22:	ab03      	add	r3, sp, #12
 8024c24:	4805      	ldr	r0, [pc, #20]	; (8024c3c <fiprintf+0x20>)
 8024c26:	f853 2b04 	ldr.w	r2, [r3], #4
 8024c2a:	6800      	ldr	r0, [r0, #0]
 8024c2c:	9301      	str	r3, [sp, #4]
 8024c2e:	f000 f97f 	bl	8024f30 <_vfiprintf_r>
 8024c32:	b002      	add	sp, #8
 8024c34:	f85d eb04 	ldr.w	lr, [sp], #4
 8024c38:	b003      	add	sp, #12
 8024c3a:	4770      	bx	lr
 8024c3c:	200000d0 	.word	0x200000d0

08024c40 <_fwalk_reent>:
 8024c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024c44:	4606      	mov	r6, r0
 8024c46:	4688      	mov	r8, r1
 8024c48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8024c4c:	2700      	movs	r7, #0
 8024c4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8024c52:	f1b9 0901 	subs.w	r9, r9, #1
 8024c56:	d505      	bpl.n	8024c64 <_fwalk_reent+0x24>
 8024c58:	6824      	ldr	r4, [r4, #0]
 8024c5a:	2c00      	cmp	r4, #0
 8024c5c:	d1f7      	bne.n	8024c4e <_fwalk_reent+0xe>
 8024c5e:	4638      	mov	r0, r7
 8024c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024c64:	89ab      	ldrh	r3, [r5, #12]
 8024c66:	2b01      	cmp	r3, #1
 8024c68:	d907      	bls.n	8024c7a <_fwalk_reent+0x3a>
 8024c6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8024c6e:	3301      	adds	r3, #1
 8024c70:	d003      	beq.n	8024c7a <_fwalk_reent+0x3a>
 8024c72:	4629      	mov	r1, r5
 8024c74:	4630      	mov	r0, r6
 8024c76:	47c0      	blx	r8
 8024c78:	4307      	orrs	r7, r0
 8024c7a:	3568      	adds	r5, #104	; 0x68
 8024c7c:	e7e9      	b.n	8024c52 <_fwalk_reent+0x12>
	...

08024c80 <__libc_init_array>:
 8024c80:	b570      	push	{r4, r5, r6, lr}
 8024c82:	4d0d      	ldr	r5, [pc, #52]	; (8024cb8 <__libc_init_array+0x38>)
 8024c84:	4c0d      	ldr	r4, [pc, #52]	; (8024cbc <__libc_init_array+0x3c>)
 8024c86:	1b64      	subs	r4, r4, r5
 8024c88:	10a4      	asrs	r4, r4, #2
 8024c8a:	2600      	movs	r6, #0
 8024c8c:	42a6      	cmp	r6, r4
 8024c8e:	d109      	bne.n	8024ca4 <__libc_init_array+0x24>
 8024c90:	4d0b      	ldr	r5, [pc, #44]	; (8024cc0 <__libc_init_array+0x40>)
 8024c92:	4c0c      	ldr	r4, [pc, #48]	; (8024cc4 <__libc_init_array+0x44>)
 8024c94:	f001 f85c 	bl	8025d50 <_init>
 8024c98:	1b64      	subs	r4, r4, r5
 8024c9a:	10a4      	asrs	r4, r4, #2
 8024c9c:	2600      	movs	r6, #0
 8024c9e:	42a6      	cmp	r6, r4
 8024ca0:	d105      	bne.n	8024cae <__libc_init_array+0x2e>
 8024ca2:	bd70      	pop	{r4, r5, r6, pc}
 8024ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8024ca8:	4798      	blx	r3
 8024caa:	3601      	adds	r6, #1
 8024cac:	e7ee      	b.n	8024c8c <__libc_init_array+0xc>
 8024cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8024cb2:	4798      	blx	r3
 8024cb4:	3601      	adds	r6, #1
 8024cb6:	e7f2      	b.n	8024c9e <__libc_init_array+0x1e>
 8024cb8:	0802ac94 	.word	0x0802ac94
 8024cbc:	0802ac94 	.word	0x0802ac94
 8024cc0:	0802ac94 	.word	0x0802ac94
 8024cc4:	0802acac 	.word	0x0802acac

08024cc8 <__retarget_lock_init_recursive>:
 8024cc8:	4770      	bx	lr

08024cca <__retarget_lock_acquire_recursive>:
 8024cca:	4770      	bx	lr

08024ccc <__retarget_lock_release>:
 8024ccc:	4770      	bx	lr

08024cce <__retarget_lock_release_recursive>:
 8024cce:	4770      	bx	lr

08024cd0 <malloc>:
 8024cd0:	4b02      	ldr	r3, [pc, #8]	; (8024cdc <malloc+0xc>)
 8024cd2:	4601      	mov	r1, r0
 8024cd4:	6818      	ldr	r0, [r3, #0]
 8024cd6:	f000 b88d 	b.w	8024df4 <_malloc_r>
 8024cda:	bf00      	nop
 8024cdc:	200000d0 	.word	0x200000d0

08024ce0 <free>:
 8024ce0:	4b02      	ldr	r3, [pc, #8]	; (8024cec <free+0xc>)
 8024ce2:	4601      	mov	r1, r0
 8024ce4:	6818      	ldr	r0, [r3, #0]
 8024ce6:	f000 b819 	b.w	8024d1c <_free_r>
 8024cea:	bf00      	nop
 8024cec:	200000d0 	.word	0x200000d0

08024cf0 <memcpy>:
 8024cf0:	440a      	add	r2, r1
 8024cf2:	4291      	cmp	r1, r2
 8024cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8024cf8:	d100      	bne.n	8024cfc <memcpy+0xc>
 8024cfa:	4770      	bx	lr
 8024cfc:	b510      	push	{r4, lr}
 8024cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024d02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024d06:	4291      	cmp	r1, r2
 8024d08:	d1f9      	bne.n	8024cfe <memcpy+0xe>
 8024d0a:	bd10      	pop	{r4, pc}

08024d0c <memset>:
 8024d0c:	4402      	add	r2, r0
 8024d0e:	4603      	mov	r3, r0
 8024d10:	4293      	cmp	r3, r2
 8024d12:	d100      	bne.n	8024d16 <memset+0xa>
 8024d14:	4770      	bx	lr
 8024d16:	f803 1b01 	strb.w	r1, [r3], #1
 8024d1a:	e7f9      	b.n	8024d10 <memset+0x4>

08024d1c <_free_r>:
 8024d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024d1e:	2900      	cmp	r1, #0
 8024d20:	d044      	beq.n	8024dac <_free_r+0x90>
 8024d22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024d26:	9001      	str	r0, [sp, #4]
 8024d28:	2b00      	cmp	r3, #0
 8024d2a:	f1a1 0404 	sub.w	r4, r1, #4
 8024d2e:	bfb8      	it	lt
 8024d30:	18e4      	addlt	r4, r4, r3
 8024d32:	f000 ffcd 	bl	8025cd0 <__malloc_lock>
 8024d36:	4a1e      	ldr	r2, [pc, #120]	; (8024db0 <_free_r+0x94>)
 8024d38:	9801      	ldr	r0, [sp, #4]
 8024d3a:	6813      	ldr	r3, [r2, #0]
 8024d3c:	b933      	cbnz	r3, 8024d4c <_free_r+0x30>
 8024d3e:	6063      	str	r3, [r4, #4]
 8024d40:	6014      	str	r4, [r2, #0]
 8024d42:	b003      	add	sp, #12
 8024d44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024d48:	f000 bfc8 	b.w	8025cdc <__malloc_unlock>
 8024d4c:	42a3      	cmp	r3, r4
 8024d4e:	d908      	bls.n	8024d62 <_free_r+0x46>
 8024d50:	6825      	ldr	r5, [r4, #0]
 8024d52:	1961      	adds	r1, r4, r5
 8024d54:	428b      	cmp	r3, r1
 8024d56:	bf01      	itttt	eq
 8024d58:	6819      	ldreq	r1, [r3, #0]
 8024d5a:	685b      	ldreq	r3, [r3, #4]
 8024d5c:	1949      	addeq	r1, r1, r5
 8024d5e:	6021      	streq	r1, [r4, #0]
 8024d60:	e7ed      	b.n	8024d3e <_free_r+0x22>
 8024d62:	461a      	mov	r2, r3
 8024d64:	685b      	ldr	r3, [r3, #4]
 8024d66:	b10b      	cbz	r3, 8024d6c <_free_r+0x50>
 8024d68:	42a3      	cmp	r3, r4
 8024d6a:	d9fa      	bls.n	8024d62 <_free_r+0x46>
 8024d6c:	6811      	ldr	r1, [r2, #0]
 8024d6e:	1855      	adds	r5, r2, r1
 8024d70:	42a5      	cmp	r5, r4
 8024d72:	d10b      	bne.n	8024d8c <_free_r+0x70>
 8024d74:	6824      	ldr	r4, [r4, #0]
 8024d76:	4421      	add	r1, r4
 8024d78:	1854      	adds	r4, r2, r1
 8024d7a:	42a3      	cmp	r3, r4
 8024d7c:	6011      	str	r1, [r2, #0]
 8024d7e:	d1e0      	bne.n	8024d42 <_free_r+0x26>
 8024d80:	681c      	ldr	r4, [r3, #0]
 8024d82:	685b      	ldr	r3, [r3, #4]
 8024d84:	6053      	str	r3, [r2, #4]
 8024d86:	4421      	add	r1, r4
 8024d88:	6011      	str	r1, [r2, #0]
 8024d8a:	e7da      	b.n	8024d42 <_free_r+0x26>
 8024d8c:	d902      	bls.n	8024d94 <_free_r+0x78>
 8024d8e:	230c      	movs	r3, #12
 8024d90:	6003      	str	r3, [r0, #0]
 8024d92:	e7d6      	b.n	8024d42 <_free_r+0x26>
 8024d94:	6825      	ldr	r5, [r4, #0]
 8024d96:	1961      	adds	r1, r4, r5
 8024d98:	428b      	cmp	r3, r1
 8024d9a:	bf04      	itt	eq
 8024d9c:	6819      	ldreq	r1, [r3, #0]
 8024d9e:	685b      	ldreq	r3, [r3, #4]
 8024da0:	6063      	str	r3, [r4, #4]
 8024da2:	bf04      	itt	eq
 8024da4:	1949      	addeq	r1, r1, r5
 8024da6:	6021      	streq	r1, [r4, #0]
 8024da8:	6054      	str	r4, [r2, #4]
 8024daa:	e7ca      	b.n	8024d42 <_free_r+0x26>
 8024dac:	b003      	add	sp, #12
 8024dae:	bd30      	pop	{r4, r5, pc}
 8024db0:	200210f8 	.word	0x200210f8

08024db4 <sbrk_aligned>:
 8024db4:	b570      	push	{r4, r5, r6, lr}
 8024db6:	4e0e      	ldr	r6, [pc, #56]	; (8024df0 <sbrk_aligned+0x3c>)
 8024db8:	460c      	mov	r4, r1
 8024dba:	6831      	ldr	r1, [r6, #0]
 8024dbc:	4605      	mov	r5, r0
 8024dbe:	b911      	cbnz	r1, 8024dc6 <sbrk_aligned+0x12>
 8024dc0:	f000 fbe4 	bl	802558c <_sbrk_r>
 8024dc4:	6030      	str	r0, [r6, #0]
 8024dc6:	4621      	mov	r1, r4
 8024dc8:	4628      	mov	r0, r5
 8024dca:	f000 fbdf 	bl	802558c <_sbrk_r>
 8024dce:	1c43      	adds	r3, r0, #1
 8024dd0:	d00a      	beq.n	8024de8 <sbrk_aligned+0x34>
 8024dd2:	1cc4      	adds	r4, r0, #3
 8024dd4:	f024 0403 	bic.w	r4, r4, #3
 8024dd8:	42a0      	cmp	r0, r4
 8024dda:	d007      	beq.n	8024dec <sbrk_aligned+0x38>
 8024ddc:	1a21      	subs	r1, r4, r0
 8024dde:	4628      	mov	r0, r5
 8024de0:	f000 fbd4 	bl	802558c <_sbrk_r>
 8024de4:	3001      	adds	r0, #1
 8024de6:	d101      	bne.n	8024dec <sbrk_aligned+0x38>
 8024de8:	f04f 34ff 	mov.w	r4, #4294967295
 8024dec:	4620      	mov	r0, r4
 8024dee:	bd70      	pop	{r4, r5, r6, pc}
 8024df0:	200210fc 	.word	0x200210fc

08024df4 <_malloc_r>:
 8024df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024df8:	1ccd      	adds	r5, r1, #3
 8024dfa:	f025 0503 	bic.w	r5, r5, #3
 8024dfe:	3508      	adds	r5, #8
 8024e00:	2d0c      	cmp	r5, #12
 8024e02:	bf38      	it	cc
 8024e04:	250c      	movcc	r5, #12
 8024e06:	2d00      	cmp	r5, #0
 8024e08:	4607      	mov	r7, r0
 8024e0a:	db01      	blt.n	8024e10 <_malloc_r+0x1c>
 8024e0c:	42a9      	cmp	r1, r5
 8024e0e:	d905      	bls.n	8024e1c <_malloc_r+0x28>
 8024e10:	230c      	movs	r3, #12
 8024e12:	603b      	str	r3, [r7, #0]
 8024e14:	2600      	movs	r6, #0
 8024e16:	4630      	mov	r0, r6
 8024e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024e1c:	4e2e      	ldr	r6, [pc, #184]	; (8024ed8 <_malloc_r+0xe4>)
 8024e1e:	f000 ff57 	bl	8025cd0 <__malloc_lock>
 8024e22:	6833      	ldr	r3, [r6, #0]
 8024e24:	461c      	mov	r4, r3
 8024e26:	bb34      	cbnz	r4, 8024e76 <_malloc_r+0x82>
 8024e28:	4629      	mov	r1, r5
 8024e2a:	4638      	mov	r0, r7
 8024e2c:	f7ff ffc2 	bl	8024db4 <sbrk_aligned>
 8024e30:	1c43      	adds	r3, r0, #1
 8024e32:	4604      	mov	r4, r0
 8024e34:	d14d      	bne.n	8024ed2 <_malloc_r+0xde>
 8024e36:	6834      	ldr	r4, [r6, #0]
 8024e38:	4626      	mov	r6, r4
 8024e3a:	2e00      	cmp	r6, #0
 8024e3c:	d140      	bne.n	8024ec0 <_malloc_r+0xcc>
 8024e3e:	6823      	ldr	r3, [r4, #0]
 8024e40:	4631      	mov	r1, r6
 8024e42:	4638      	mov	r0, r7
 8024e44:	eb04 0803 	add.w	r8, r4, r3
 8024e48:	f000 fba0 	bl	802558c <_sbrk_r>
 8024e4c:	4580      	cmp	r8, r0
 8024e4e:	d13a      	bne.n	8024ec6 <_malloc_r+0xd2>
 8024e50:	6821      	ldr	r1, [r4, #0]
 8024e52:	3503      	adds	r5, #3
 8024e54:	1a6d      	subs	r5, r5, r1
 8024e56:	f025 0503 	bic.w	r5, r5, #3
 8024e5a:	3508      	adds	r5, #8
 8024e5c:	2d0c      	cmp	r5, #12
 8024e5e:	bf38      	it	cc
 8024e60:	250c      	movcc	r5, #12
 8024e62:	4629      	mov	r1, r5
 8024e64:	4638      	mov	r0, r7
 8024e66:	f7ff ffa5 	bl	8024db4 <sbrk_aligned>
 8024e6a:	3001      	adds	r0, #1
 8024e6c:	d02b      	beq.n	8024ec6 <_malloc_r+0xd2>
 8024e6e:	6823      	ldr	r3, [r4, #0]
 8024e70:	442b      	add	r3, r5
 8024e72:	6023      	str	r3, [r4, #0]
 8024e74:	e00e      	b.n	8024e94 <_malloc_r+0xa0>
 8024e76:	6822      	ldr	r2, [r4, #0]
 8024e78:	1b52      	subs	r2, r2, r5
 8024e7a:	d41e      	bmi.n	8024eba <_malloc_r+0xc6>
 8024e7c:	2a0b      	cmp	r2, #11
 8024e7e:	d916      	bls.n	8024eae <_malloc_r+0xba>
 8024e80:	1961      	adds	r1, r4, r5
 8024e82:	42a3      	cmp	r3, r4
 8024e84:	6025      	str	r5, [r4, #0]
 8024e86:	bf18      	it	ne
 8024e88:	6059      	strne	r1, [r3, #4]
 8024e8a:	6863      	ldr	r3, [r4, #4]
 8024e8c:	bf08      	it	eq
 8024e8e:	6031      	streq	r1, [r6, #0]
 8024e90:	5162      	str	r2, [r4, r5]
 8024e92:	604b      	str	r3, [r1, #4]
 8024e94:	4638      	mov	r0, r7
 8024e96:	f104 060b 	add.w	r6, r4, #11
 8024e9a:	f000 ff1f 	bl	8025cdc <__malloc_unlock>
 8024e9e:	f026 0607 	bic.w	r6, r6, #7
 8024ea2:	1d23      	adds	r3, r4, #4
 8024ea4:	1af2      	subs	r2, r6, r3
 8024ea6:	d0b6      	beq.n	8024e16 <_malloc_r+0x22>
 8024ea8:	1b9b      	subs	r3, r3, r6
 8024eaa:	50a3      	str	r3, [r4, r2]
 8024eac:	e7b3      	b.n	8024e16 <_malloc_r+0x22>
 8024eae:	6862      	ldr	r2, [r4, #4]
 8024eb0:	42a3      	cmp	r3, r4
 8024eb2:	bf0c      	ite	eq
 8024eb4:	6032      	streq	r2, [r6, #0]
 8024eb6:	605a      	strne	r2, [r3, #4]
 8024eb8:	e7ec      	b.n	8024e94 <_malloc_r+0xa0>
 8024eba:	4623      	mov	r3, r4
 8024ebc:	6864      	ldr	r4, [r4, #4]
 8024ebe:	e7b2      	b.n	8024e26 <_malloc_r+0x32>
 8024ec0:	4634      	mov	r4, r6
 8024ec2:	6876      	ldr	r6, [r6, #4]
 8024ec4:	e7b9      	b.n	8024e3a <_malloc_r+0x46>
 8024ec6:	230c      	movs	r3, #12
 8024ec8:	603b      	str	r3, [r7, #0]
 8024eca:	4638      	mov	r0, r7
 8024ecc:	f000 ff06 	bl	8025cdc <__malloc_unlock>
 8024ed0:	e7a1      	b.n	8024e16 <_malloc_r+0x22>
 8024ed2:	6025      	str	r5, [r4, #0]
 8024ed4:	e7de      	b.n	8024e94 <_malloc_r+0xa0>
 8024ed6:	bf00      	nop
 8024ed8:	200210f8 	.word	0x200210f8

08024edc <__sfputc_r>:
 8024edc:	6893      	ldr	r3, [r2, #8]
 8024ede:	3b01      	subs	r3, #1
 8024ee0:	2b00      	cmp	r3, #0
 8024ee2:	b410      	push	{r4}
 8024ee4:	6093      	str	r3, [r2, #8]
 8024ee6:	da08      	bge.n	8024efa <__sfputc_r+0x1e>
 8024ee8:	6994      	ldr	r4, [r2, #24]
 8024eea:	42a3      	cmp	r3, r4
 8024eec:	db01      	blt.n	8024ef2 <__sfputc_r+0x16>
 8024eee:	290a      	cmp	r1, #10
 8024ef0:	d103      	bne.n	8024efa <__sfputc_r+0x1e>
 8024ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024ef6:	f000 bc6d 	b.w	80257d4 <__swbuf_r>
 8024efa:	6813      	ldr	r3, [r2, #0]
 8024efc:	1c58      	adds	r0, r3, #1
 8024efe:	6010      	str	r0, [r2, #0]
 8024f00:	7019      	strb	r1, [r3, #0]
 8024f02:	4608      	mov	r0, r1
 8024f04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024f08:	4770      	bx	lr

08024f0a <__sfputs_r>:
 8024f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024f0c:	4606      	mov	r6, r0
 8024f0e:	460f      	mov	r7, r1
 8024f10:	4614      	mov	r4, r2
 8024f12:	18d5      	adds	r5, r2, r3
 8024f14:	42ac      	cmp	r4, r5
 8024f16:	d101      	bne.n	8024f1c <__sfputs_r+0x12>
 8024f18:	2000      	movs	r0, #0
 8024f1a:	e007      	b.n	8024f2c <__sfputs_r+0x22>
 8024f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024f20:	463a      	mov	r2, r7
 8024f22:	4630      	mov	r0, r6
 8024f24:	f7ff ffda 	bl	8024edc <__sfputc_r>
 8024f28:	1c43      	adds	r3, r0, #1
 8024f2a:	d1f3      	bne.n	8024f14 <__sfputs_r+0xa>
 8024f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024f30 <_vfiprintf_r>:
 8024f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f34:	460d      	mov	r5, r1
 8024f36:	b09d      	sub	sp, #116	; 0x74
 8024f38:	4614      	mov	r4, r2
 8024f3a:	4698      	mov	r8, r3
 8024f3c:	4606      	mov	r6, r0
 8024f3e:	b118      	cbz	r0, 8024f48 <_vfiprintf_r+0x18>
 8024f40:	6983      	ldr	r3, [r0, #24]
 8024f42:	b90b      	cbnz	r3, 8024f48 <_vfiprintf_r+0x18>
 8024f44:	f7ff fdec 	bl	8024b20 <__sinit>
 8024f48:	4b89      	ldr	r3, [pc, #548]	; (8025170 <_vfiprintf_r+0x240>)
 8024f4a:	429d      	cmp	r5, r3
 8024f4c:	d11b      	bne.n	8024f86 <_vfiprintf_r+0x56>
 8024f4e:	6875      	ldr	r5, [r6, #4]
 8024f50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024f52:	07d9      	lsls	r1, r3, #31
 8024f54:	d405      	bmi.n	8024f62 <_vfiprintf_r+0x32>
 8024f56:	89ab      	ldrh	r3, [r5, #12]
 8024f58:	059a      	lsls	r2, r3, #22
 8024f5a:	d402      	bmi.n	8024f62 <_vfiprintf_r+0x32>
 8024f5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024f5e:	f7ff feb4 	bl	8024cca <__retarget_lock_acquire_recursive>
 8024f62:	89ab      	ldrh	r3, [r5, #12]
 8024f64:	071b      	lsls	r3, r3, #28
 8024f66:	d501      	bpl.n	8024f6c <_vfiprintf_r+0x3c>
 8024f68:	692b      	ldr	r3, [r5, #16]
 8024f6a:	b9eb      	cbnz	r3, 8024fa8 <_vfiprintf_r+0x78>
 8024f6c:	4629      	mov	r1, r5
 8024f6e:	4630      	mov	r0, r6
 8024f70:	f000 fc94 	bl	802589c <__swsetup_r>
 8024f74:	b1c0      	cbz	r0, 8024fa8 <_vfiprintf_r+0x78>
 8024f76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024f78:	07dc      	lsls	r4, r3, #31
 8024f7a:	d50e      	bpl.n	8024f9a <_vfiprintf_r+0x6a>
 8024f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8024f80:	b01d      	add	sp, #116	; 0x74
 8024f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024f86:	4b7b      	ldr	r3, [pc, #492]	; (8025174 <_vfiprintf_r+0x244>)
 8024f88:	429d      	cmp	r5, r3
 8024f8a:	d101      	bne.n	8024f90 <_vfiprintf_r+0x60>
 8024f8c:	68b5      	ldr	r5, [r6, #8]
 8024f8e:	e7df      	b.n	8024f50 <_vfiprintf_r+0x20>
 8024f90:	4b79      	ldr	r3, [pc, #484]	; (8025178 <_vfiprintf_r+0x248>)
 8024f92:	429d      	cmp	r5, r3
 8024f94:	bf08      	it	eq
 8024f96:	68f5      	ldreq	r5, [r6, #12]
 8024f98:	e7da      	b.n	8024f50 <_vfiprintf_r+0x20>
 8024f9a:	89ab      	ldrh	r3, [r5, #12]
 8024f9c:	0598      	lsls	r0, r3, #22
 8024f9e:	d4ed      	bmi.n	8024f7c <_vfiprintf_r+0x4c>
 8024fa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024fa2:	f7ff fe94 	bl	8024cce <__retarget_lock_release_recursive>
 8024fa6:	e7e9      	b.n	8024f7c <_vfiprintf_r+0x4c>
 8024fa8:	2300      	movs	r3, #0
 8024faa:	9309      	str	r3, [sp, #36]	; 0x24
 8024fac:	2320      	movs	r3, #32
 8024fae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024fb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8024fb6:	2330      	movs	r3, #48	; 0x30
 8024fb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802517c <_vfiprintf_r+0x24c>
 8024fbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024fc0:	f04f 0901 	mov.w	r9, #1
 8024fc4:	4623      	mov	r3, r4
 8024fc6:	469a      	mov	sl, r3
 8024fc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024fcc:	b10a      	cbz	r2, 8024fd2 <_vfiprintf_r+0xa2>
 8024fce:	2a25      	cmp	r2, #37	; 0x25
 8024fd0:	d1f9      	bne.n	8024fc6 <_vfiprintf_r+0x96>
 8024fd2:	ebba 0b04 	subs.w	fp, sl, r4
 8024fd6:	d00b      	beq.n	8024ff0 <_vfiprintf_r+0xc0>
 8024fd8:	465b      	mov	r3, fp
 8024fda:	4622      	mov	r2, r4
 8024fdc:	4629      	mov	r1, r5
 8024fde:	4630      	mov	r0, r6
 8024fe0:	f7ff ff93 	bl	8024f0a <__sfputs_r>
 8024fe4:	3001      	adds	r0, #1
 8024fe6:	f000 80aa 	beq.w	802513e <_vfiprintf_r+0x20e>
 8024fea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024fec:	445a      	add	r2, fp
 8024fee:	9209      	str	r2, [sp, #36]	; 0x24
 8024ff0:	f89a 3000 	ldrb.w	r3, [sl]
 8024ff4:	2b00      	cmp	r3, #0
 8024ff6:	f000 80a2 	beq.w	802513e <_vfiprintf_r+0x20e>
 8024ffa:	2300      	movs	r3, #0
 8024ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8025000:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025004:	f10a 0a01 	add.w	sl, sl, #1
 8025008:	9304      	str	r3, [sp, #16]
 802500a:	9307      	str	r3, [sp, #28]
 802500c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025010:	931a      	str	r3, [sp, #104]	; 0x68
 8025012:	4654      	mov	r4, sl
 8025014:	2205      	movs	r2, #5
 8025016:	f814 1b01 	ldrb.w	r1, [r4], #1
 802501a:	4858      	ldr	r0, [pc, #352]	; (802517c <_vfiprintf_r+0x24c>)
 802501c:	f7db f910 	bl	8000240 <memchr>
 8025020:	9a04      	ldr	r2, [sp, #16]
 8025022:	b9d8      	cbnz	r0, 802505c <_vfiprintf_r+0x12c>
 8025024:	06d1      	lsls	r1, r2, #27
 8025026:	bf44      	itt	mi
 8025028:	2320      	movmi	r3, #32
 802502a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802502e:	0713      	lsls	r3, r2, #28
 8025030:	bf44      	itt	mi
 8025032:	232b      	movmi	r3, #43	; 0x2b
 8025034:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025038:	f89a 3000 	ldrb.w	r3, [sl]
 802503c:	2b2a      	cmp	r3, #42	; 0x2a
 802503e:	d015      	beq.n	802506c <_vfiprintf_r+0x13c>
 8025040:	9a07      	ldr	r2, [sp, #28]
 8025042:	4654      	mov	r4, sl
 8025044:	2000      	movs	r0, #0
 8025046:	f04f 0c0a 	mov.w	ip, #10
 802504a:	4621      	mov	r1, r4
 802504c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025050:	3b30      	subs	r3, #48	; 0x30
 8025052:	2b09      	cmp	r3, #9
 8025054:	d94e      	bls.n	80250f4 <_vfiprintf_r+0x1c4>
 8025056:	b1b0      	cbz	r0, 8025086 <_vfiprintf_r+0x156>
 8025058:	9207      	str	r2, [sp, #28]
 802505a:	e014      	b.n	8025086 <_vfiprintf_r+0x156>
 802505c:	eba0 0308 	sub.w	r3, r0, r8
 8025060:	fa09 f303 	lsl.w	r3, r9, r3
 8025064:	4313      	orrs	r3, r2
 8025066:	9304      	str	r3, [sp, #16]
 8025068:	46a2      	mov	sl, r4
 802506a:	e7d2      	b.n	8025012 <_vfiprintf_r+0xe2>
 802506c:	9b03      	ldr	r3, [sp, #12]
 802506e:	1d19      	adds	r1, r3, #4
 8025070:	681b      	ldr	r3, [r3, #0]
 8025072:	9103      	str	r1, [sp, #12]
 8025074:	2b00      	cmp	r3, #0
 8025076:	bfbb      	ittet	lt
 8025078:	425b      	neglt	r3, r3
 802507a:	f042 0202 	orrlt.w	r2, r2, #2
 802507e:	9307      	strge	r3, [sp, #28]
 8025080:	9307      	strlt	r3, [sp, #28]
 8025082:	bfb8      	it	lt
 8025084:	9204      	strlt	r2, [sp, #16]
 8025086:	7823      	ldrb	r3, [r4, #0]
 8025088:	2b2e      	cmp	r3, #46	; 0x2e
 802508a:	d10c      	bne.n	80250a6 <_vfiprintf_r+0x176>
 802508c:	7863      	ldrb	r3, [r4, #1]
 802508e:	2b2a      	cmp	r3, #42	; 0x2a
 8025090:	d135      	bne.n	80250fe <_vfiprintf_r+0x1ce>
 8025092:	9b03      	ldr	r3, [sp, #12]
 8025094:	1d1a      	adds	r2, r3, #4
 8025096:	681b      	ldr	r3, [r3, #0]
 8025098:	9203      	str	r2, [sp, #12]
 802509a:	2b00      	cmp	r3, #0
 802509c:	bfb8      	it	lt
 802509e:	f04f 33ff 	movlt.w	r3, #4294967295
 80250a2:	3402      	adds	r4, #2
 80250a4:	9305      	str	r3, [sp, #20]
 80250a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802518c <_vfiprintf_r+0x25c>
 80250aa:	7821      	ldrb	r1, [r4, #0]
 80250ac:	2203      	movs	r2, #3
 80250ae:	4650      	mov	r0, sl
 80250b0:	f7db f8c6 	bl	8000240 <memchr>
 80250b4:	b140      	cbz	r0, 80250c8 <_vfiprintf_r+0x198>
 80250b6:	2340      	movs	r3, #64	; 0x40
 80250b8:	eba0 000a 	sub.w	r0, r0, sl
 80250bc:	fa03 f000 	lsl.w	r0, r3, r0
 80250c0:	9b04      	ldr	r3, [sp, #16]
 80250c2:	4303      	orrs	r3, r0
 80250c4:	3401      	adds	r4, #1
 80250c6:	9304      	str	r3, [sp, #16]
 80250c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80250cc:	482c      	ldr	r0, [pc, #176]	; (8025180 <_vfiprintf_r+0x250>)
 80250ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80250d2:	2206      	movs	r2, #6
 80250d4:	f7db f8b4 	bl	8000240 <memchr>
 80250d8:	2800      	cmp	r0, #0
 80250da:	d03f      	beq.n	802515c <_vfiprintf_r+0x22c>
 80250dc:	4b29      	ldr	r3, [pc, #164]	; (8025184 <_vfiprintf_r+0x254>)
 80250de:	bb1b      	cbnz	r3, 8025128 <_vfiprintf_r+0x1f8>
 80250e0:	9b03      	ldr	r3, [sp, #12]
 80250e2:	3307      	adds	r3, #7
 80250e4:	f023 0307 	bic.w	r3, r3, #7
 80250e8:	3308      	adds	r3, #8
 80250ea:	9303      	str	r3, [sp, #12]
 80250ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80250ee:	443b      	add	r3, r7
 80250f0:	9309      	str	r3, [sp, #36]	; 0x24
 80250f2:	e767      	b.n	8024fc4 <_vfiprintf_r+0x94>
 80250f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80250f8:	460c      	mov	r4, r1
 80250fa:	2001      	movs	r0, #1
 80250fc:	e7a5      	b.n	802504a <_vfiprintf_r+0x11a>
 80250fe:	2300      	movs	r3, #0
 8025100:	3401      	adds	r4, #1
 8025102:	9305      	str	r3, [sp, #20]
 8025104:	4619      	mov	r1, r3
 8025106:	f04f 0c0a 	mov.w	ip, #10
 802510a:	4620      	mov	r0, r4
 802510c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025110:	3a30      	subs	r2, #48	; 0x30
 8025112:	2a09      	cmp	r2, #9
 8025114:	d903      	bls.n	802511e <_vfiprintf_r+0x1ee>
 8025116:	2b00      	cmp	r3, #0
 8025118:	d0c5      	beq.n	80250a6 <_vfiprintf_r+0x176>
 802511a:	9105      	str	r1, [sp, #20]
 802511c:	e7c3      	b.n	80250a6 <_vfiprintf_r+0x176>
 802511e:	fb0c 2101 	mla	r1, ip, r1, r2
 8025122:	4604      	mov	r4, r0
 8025124:	2301      	movs	r3, #1
 8025126:	e7f0      	b.n	802510a <_vfiprintf_r+0x1da>
 8025128:	ab03      	add	r3, sp, #12
 802512a:	9300      	str	r3, [sp, #0]
 802512c:	462a      	mov	r2, r5
 802512e:	4b16      	ldr	r3, [pc, #88]	; (8025188 <_vfiprintf_r+0x258>)
 8025130:	a904      	add	r1, sp, #16
 8025132:	4630      	mov	r0, r6
 8025134:	f3af 8000 	nop.w
 8025138:	4607      	mov	r7, r0
 802513a:	1c78      	adds	r0, r7, #1
 802513c:	d1d6      	bne.n	80250ec <_vfiprintf_r+0x1bc>
 802513e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025140:	07d9      	lsls	r1, r3, #31
 8025142:	d405      	bmi.n	8025150 <_vfiprintf_r+0x220>
 8025144:	89ab      	ldrh	r3, [r5, #12]
 8025146:	059a      	lsls	r2, r3, #22
 8025148:	d402      	bmi.n	8025150 <_vfiprintf_r+0x220>
 802514a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802514c:	f7ff fdbf 	bl	8024cce <__retarget_lock_release_recursive>
 8025150:	89ab      	ldrh	r3, [r5, #12]
 8025152:	065b      	lsls	r3, r3, #25
 8025154:	f53f af12 	bmi.w	8024f7c <_vfiprintf_r+0x4c>
 8025158:	9809      	ldr	r0, [sp, #36]	; 0x24
 802515a:	e711      	b.n	8024f80 <_vfiprintf_r+0x50>
 802515c:	ab03      	add	r3, sp, #12
 802515e:	9300      	str	r3, [sp, #0]
 8025160:	462a      	mov	r2, r5
 8025162:	4b09      	ldr	r3, [pc, #36]	; (8025188 <_vfiprintf_r+0x258>)
 8025164:	a904      	add	r1, sp, #16
 8025166:	4630      	mov	r0, r6
 8025168:	f000 f880 	bl	802526c <_printf_i>
 802516c:	e7e4      	b.n	8025138 <_vfiprintf_r+0x208>
 802516e:	bf00      	nop
 8025170:	0802aaf4 	.word	0x0802aaf4
 8025174:	0802ab14 	.word	0x0802ab14
 8025178:	0802aad4 	.word	0x0802aad4
 802517c:	0802ab38 	.word	0x0802ab38
 8025180:	0802ab42 	.word	0x0802ab42
 8025184:	00000000 	.word	0x00000000
 8025188:	08024f0b 	.word	0x08024f0b
 802518c:	0802ab3e 	.word	0x0802ab3e

08025190 <_printf_common>:
 8025190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025194:	4616      	mov	r6, r2
 8025196:	4699      	mov	r9, r3
 8025198:	688a      	ldr	r2, [r1, #8]
 802519a:	690b      	ldr	r3, [r1, #16]
 802519c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80251a0:	4293      	cmp	r3, r2
 80251a2:	bfb8      	it	lt
 80251a4:	4613      	movlt	r3, r2
 80251a6:	6033      	str	r3, [r6, #0]
 80251a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80251ac:	4607      	mov	r7, r0
 80251ae:	460c      	mov	r4, r1
 80251b0:	b10a      	cbz	r2, 80251b6 <_printf_common+0x26>
 80251b2:	3301      	adds	r3, #1
 80251b4:	6033      	str	r3, [r6, #0]
 80251b6:	6823      	ldr	r3, [r4, #0]
 80251b8:	0699      	lsls	r1, r3, #26
 80251ba:	bf42      	ittt	mi
 80251bc:	6833      	ldrmi	r3, [r6, #0]
 80251be:	3302      	addmi	r3, #2
 80251c0:	6033      	strmi	r3, [r6, #0]
 80251c2:	6825      	ldr	r5, [r4, #0]
 80251c4:	f015 0506 	ands.w	r5, r5, #6
 80251c8:	d106      	bne.n	80251d8 <_printf_common+0x48>
 80251ca:	f104 0a19 	add.w	sl, r4, #25
 80251ce:	68e3      	ldr	r3, [r4, #12]
 80251d0:	6832      	ldr	r2, [r6, #0]
 80251d2:	1a9b      	subs	r3, r3, r2
 80251d4:	42ab      	cmp	r3, r5
 80251d6:	dc26      	bgt.n	8025226 <_printf_common+0x96>
 80251d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80251dc:	1e13      	subs	r3, r2, #0
 80251de:	6822      	ldr	r2, [r4, #0]
 80251e0:	bf18      	it	ne
 80251e2:	2301      	movne	r3, #1
 80251e4:	0692      	lsls	r2, r2, #26
 80251e6:	d42b      	bmi.n	8025240 <_printf_common+0xb0>
 80251e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80251ec:	4649      	mov	r1, r9
 80251ee:	4638      	mov	r0, r7
 80251f0:	47c0      	blx	r8
 80251f2:	3001      	adds	r0, #1
 80251f4:	d01e      	beq.n	8025234 <_printf_common+0xa4>
 80251f6:	6823      	ldr	r3, [r4, #0]
 80251f8:	68e5      	ldr	r5, [r4, #12]
 80251fa:	6832      	ldr	r2, [r6, #0]
 80251fc:	f003 0306 	and.w	r3, r3, #6
 8025200:	2b04      	cmp	r3, #4
 8025202:	bf08      	it	eq
 8025204:	1aad      	subeq	r5, r5, r2
 8025206:	68a3      	ldr	r3, [r4, #8]
 8025208:	6922      	ldr	r2, [r4, #16]
 802520a:	bf0c      	ite	eq
 802520c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025210:	2500      	movne	r5, #0
 8025212:	4293      	cmp	r3, r2
 8025214:	bfc4      	itt	gt
 8025216:	1a9b      	subgt	r3, r3, r2
 8025218:	18ed      	addgt	r5, r5, r3
 802521a:	2600      	movs	r6, #0
 802521c:	341a      	adds	r4, #26
 802521e:	42b5      	cmp	r5, r6
 8025220:	d11a      	bne.n	8025258 <_printf_common+0xc8>
 8025222:	2000      	movs	r0, #0
 8025224:	e008      	b.n	8025238 <_printf_common+0xa8>
 8025226:	2301      	movs	r3, #1
 8025228:	4652      	mov	r2, sl
 802522a:	4649      	mov	r1, r9
 802522c:	4638      	mov	r0, r7
 802522e:	47c0      	blx	r8
 8025230:	3001      	adds	r0, #1
 8025232:	d103      	bne.n	802523c <_printf_common+0xac>
 8025234:	f04f 30ff 	mov.w	r0, #4294967295
 8025238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802523c:	3501      	adds	r5, #1
 802523e:	e7c6      	b.n	80251ce <_printf_common+0x3e>
 8025240:	18e1      	adds	r1, r4, r3
 8025242:	1c5a      	adds	r2, r3, #1
 8025244:	2030      	movs	r0, #48	; 0x30
 8025246:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802524a:	4422      	add	r2, r4
 802524c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025250:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025254:	3302      	adds	r3, #2
 8025256:	e7c7      	b.n	80251e8 <_printf_common+0x58>
 8025258:	2301      	movs	r3, #1
 802525a:	4622      	mov	r2, r4
 802525c:	4649      	mov	r1, r9
 802525e:	4638      	mov	r0, r7
 8025260:	47c0      	blx	r8
 8025262:	3001      	adds	r0, #1
 8025264:	d0e6      	beq.n	8025234 <_printf_common+0xa4>
 8025266:	3601      	adds	r6, #1
 8025268:	e7d9      	b.n	802521e <_printf_common+0x8e>
	...

0802526c <_printf_i>:
 802526c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025270:	7e0f      	ldrb	r7, [r1, #24]
 8025272:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025274:	2f78      	cmp	r7, #120	; 0x78
 8025276:	4691      	mov	r9, r2
 8025278:	4680      	mov	r8, r0
 802527a:	460c      	mov	r4, r1
 802527c:	469a      	mov	sl, r3
 802527e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8025282:	d807      	bhi.n	8025294 <_printf_i+0x28>
 8025284:	2f62      	cmp	r7, #98	; 0x62
 8025286:	d80a      	bhi.n	802529e <_printf_i+0x32>
 8025288:	2f00      	cmp	r7, #0
 802528a:	f000 80d8 	beq.w	802543e <_printf_i+0x1d2>
 802528e:	2f58      	cmp	r7, #88	; 0x58
 8025290:	f000 80a3 	beq.w	80253da <_printf_i+0x16e>
 8025294:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025298:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802529c:	e03a      	b.n	8025314 <_printf_i+0xa8>
 802529e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80252a2:	2b15      	cmp	r3, #21
 80252a4:	d8f6      	bhi.n	8025294 <_printf_i+0x28>
 80252a6:	a101      	add	r1, pc, #4	; (adr r1, 80252ac <_printf_i+0x40>)
 80252a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80252ac:	08025305 	.word	0x08025305
 80252b0:	08025319 	.word	0x08025319
 80252b4:	08025295 	.word	0x08025295
 80252b8:	08025295 	.word	0x08025295
 80252bc:	08025295 	.word	0x08025295
 80252c0:	08025295 	.word	0x08025295
 80252c4:	08025319 	.word	0x08025319
 80252c8:	08025295 	.word	0x08025295
 80252cc:	08025295 	.word	0x08025295
 80252d0:	08025295 	.word	0x08025295
 80252d4:	08025295 	.word	0x08025295
 80252d8:	08025425 	.word	0x08025425
 80252dc:	08025349 	.word	0x08025349
 80252e0:	08025407 	.word	0x08025407
 80252e4:	08025295 	.word	0x08025295
 80252e8:	08025295 	.word	0x08025295
 80252ec:	08025447 	.word	0x08025447
 80252f0:	08025295 	.word	0x08025295
 80252f4:	08025349 	.word	0x08025349
 80252f8:	08025295 	.word	0x08025295
 80252fc:	08025295 	.word	0x08025295
 8025300:	0802540f 	.word	0x0802540f
 8025304:	682b      	ldr	r3, [r5, #0]
 8025306:	1d1a      	adds	r2, r3, #4
 8025308:	681b      	ldr	r3, [r3, #0]
 802530a:	602a      	str	r2, [r5, #0]
 802530c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025310:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025314:	2301      	movs	r3, #1
 8025316:	e0a3      	b.n	8025460 <_printf_i+0x1f4>
 8025318:	6820      	ldr	r0, [r4, #0]
 802531a:	6829      	ldr	r1, [r5, #0]
 802531c:	0606      	lsls	r6, r0, #24
 802531e:	f101 0304 	add.w	r3, r1, #4
 8025322:	d50a      	bpl.n	802533a <_printf_i+0xce>
 8025324:	680e      	ldr	r6, [r1, #0]
 8025326:	602b      	str	r3, [r5, #0]
 8025328:	2e00      	cmp	r6, #0
 802532a:	da03      	bge.n	8025334 <_printf_i+0xc8>
 802532c:	232d      	movs	r3, #45	; 0x2d
 802532e:	4276      	negs	r6, r6
 8025330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025334:	485e      	ldr	r0, [pc, #376]	; (80254b0 <_printf_i+0x244>)
 8025336:	230a      	movs	r3, #10
 8025338:	e019      	b.n	802536e <_printf_i+0x102>
 802533a:	680e      	ldr	r6, [r1, #0]
 802533c:	602b      	str	r3, [r5, #0]
 802533e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8025342:	bf18      	it	ne
 8025344:	b236      	sxthne	r6, r6
 8025346:	e7ef      	b.n	8025328 <_printf_i+0xbc>
 8025348:	682b      	ldr	r3, [r5, #0]
 802534a:	6820      	ldr	r0, [r4, #0]
 802534c:	1d19      	adds	r1, r3, #4
 802534e:	6029      	str	r1, [r5, #0]
 8025350:	0601      	lsls	r1, r0, #24
 8025352:	d501      	bpl.n	8025358 <_printf_i+0xec>
 8025354:	681e      	ldr	r6, [r3, #0]
 8025356:	e002      	b.n	802535e <_printf_i+0xf2>
 8025358:	0646      	lsls	r6, r0, #25
 802535a:	d5fb      	bpl.n	8025354 <_printf_i+0xe8>
 802535c:	881e      	ldrh	r6, [r3, #0]
 802535e:	4854      	ldr	r0, [pc, #336]	; (80254b0 <_printf_i+0x244>)
 8025360:	2f6f      	cmp	r7, #111	; 0x6f
 8025362:	bf0c      	ite	eq
 8025364:	2308      	moveq	r3, #8
 8025366:	230a      	movne	r3, #10
 8025368:	2100      	movs	r1, #0
 802536a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802536e:	6865      	ldr	r5, [r4, #4]
 8025370:	60a5      	str	r5, [r4, #8]
 8025372:	2d00      	cmp	r5, #0
 8025374:	bfa2      	ittt	ge
 8025376:	6821      	ldrge	r1, [r4, #0]
 8025378:	f021 0104 	bicge.w	r1, r1, #4
 802537c:	6021      	strge	r1, [r4, #0]
 802537e:	b90e      	cbnz	r6, 8025384 <_printf_i+0x118>
 8025380:	2d00      	cmp	r5, #0
 8025382:	d04d      	beq.n	8025420 <_printf_i+0x1b4>
 8025384:	4615      	mov	r5, r2
 8025386:	fbb6 f1f3 	udiv	r1, r6, r3
 802538a:	fb03 6711 	mls	r7, r3, r1, r6
 802538e:	5dc7      	ldrb	r7, [r0, r7]
 8025390:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8025394:	4637      	mov	r7, r6
 8025396:	42bb      	cmp	r3, r7
 8025398:	460e      	mov	r6, r1
 802539a:	d9f4      	bls.n	8025386 <_printf_i+0x11a>
 802539c:	2b08      	cmp	r3, #8
 802539e:	d10b      	bne.n	80253b8 <_printf_i+0x14c>
 80253a0:	6823      	ldr	r3, [r4, #0]
 80253a2:	07de      	lsls	r6, r3, #31
 80253a4:	d508      	bpl.n	80253b8 <_printf_i+0x14c>
 80253a6:	6923      	ldr	r3, [r4, #16]
 80253a8:	6861      	ldr	r1, [r4, #4]
 80253aa:	4299      	cmp	r1, r3
 80253ac:	bfde      	ittt	le
 80253ae:	2330      	movle	r3, #48	; 0x30
 80253b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80253b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80253b8:	1b52      	subs	r2, r2, r5
 80253ba:	6122      	str	r2, [r4, #16]
 80253bc:	f8cd a000 	str.w	sl, [sp]
 80253c0:	464b      	mov	r3, r9
 80253c2:	aa03      	add	r2, sp, #12
 80253c4:	4621      	mov	r1, r4
 80253c6:	4640      	mov	r0, r8
 80253c8:	f7ff fee2 	bl	8025190 <_printf_common>
 80253cc:	3001      	adds	r0, #1
 80253ce:	d14c      	bne.n	802546a <_printf_i+0x1fe>
 80253d0:	f04f 30ff 	mov.w	r0, #4294967295
 80253d4:	b004      	add	sp, #16
 80253d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80253da:	4835      	ldr	r0, [pc, #212]	; (80254b0 <_printf_i+0x244>)
 80253dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80253e0:	6829      	ldr	r1, [r5, #0]
 80253e2:	6823      	ldr	r3, [r4, #0]
 80253e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80253e8:	6029      	str	r1, [r5, #0]
 80253ea:	061d      	lsls	r5, r3, #24
 80253ec:	d514      	bpl.n	8025418 <_printf_i+0x1ac>
 80253ee:	07df      	lsls	r7, r3, #31
 80253f0:	bf44      	itt	mi
 80253f2:	f043 0320 	orrmi.w	r3, r3, #32
 80253f6:	6023      	strmi	r3, [r4, #0]
 80253f8:	b91e      	cbnz	r6, 8025402 <_printf_i+0x196>
 80253fa:	6823      	ldr	r3, [r4, #0]
 80253fc:	f023 0320 	bic.w	r3, r3, #32
 8025400:	6023      	str	r3, [r4, #0]
 8025402:	2310      	movs	r3, #16
 8025404:	e7b0      	b.n	8025368 <_printf_i+0xfc>
 8025406:	6823      	ldr	r3, [r4, #0]
 8025408:	f043 0320 	orr.w	r3, r3, #32
 802540c:	6023      	str	r3, [r4, #0]
 802540e:	2378      	movs	r3, #120	; 0x78
 8025410:	4828      	ldr	r0, [pc, #160]	; (80254b4 <_printf_i+0x248>)
 8025412:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8025416:	e7e3      	b.n	80253e0 <_printf_i+0x174>
 8025418:	0659      	lsls	r1, r3, #25
 802541a:	bf48      	it	mi
 802541c:	b2b6      	uxthmi	r6, r6
 802541e:	e7e6      	b.n	80253ee <_printf_i+0x182>
 8025420:	4615      	mov	r5, r2
 8025422:	e7bb      	b.n	802539c <_printf_i+0x130>
 8025424:	682b      	ldr	r3, [r5, #0]
 8025426:	6826      	ldr	r6, [r4, #0]
 8025428:	6961      	ldr	r1, [r4, #20]
 802542a:	1d18      	adds	r0, r3, #4
 802542c:	6028      	str	r0, [r5, #0]
 802542e:	0635      	lsls	r5, r6, #24
 8025430:	681b      	ldr	r3, [r3, #0]
 8025432:	d501      	bpl.n	8025438 <_printf_i+0x1cc>
 8025434:	6019      	str	r1, [r3, #0]
 8025436:	e002      	b.n	802543e <_printf_i+0x1d2>
 8025438:	0670      	lsls	r0, r6, #25
 802543a:	d5fb      	bpl.n	8025434 <_printf_i+0x1c8>
 802543c:	8019      	strh	r1, [r3, #0]
 802543e:	2300      	movs	r3, #0
 8025440:	6123      	str	r3, [r4, #16]
 8025442:	4615      	mov	r5, r2
 8025444:	e7ba      	b.n	80253bc <_printf_i+0x150>
 8025446:	682b      	ldr	r3, [r5, #0]
 8025448:	1d1a      	adds	r2, r3, #4
 802544a:	602a      	str	r2, [r5, #0]
 802544c:	681d      	ldr	r5, [r3, #0]
 802544e:	6862      	ldr	r2, [r4, #4]
 8025450:	2100      	movs	r1, #0
 8025452:	4628      	mov	r0, r5
 8025454:	f7da fef4 	bl	8000240 <memchr>
 8025458:	b108      	cbz	r0, 802545e <_printf_i+0x1f2>
 802545a:	1b40      	subs	r0, r0, r5
 802545c:	6060      	str	r0, [r4, #4]
 802545e:	6863      	ldr	r3, [r4, #4]
 8025460:	6123      	str	r3, [r4, #16]
 8025462:	2300      	movs	r3, #0
 8025464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025468:	e7a8      	b.n	80253bc <_printf_i+0x150>
 802546a:	6923      	ldr	r3, [r4, #16]
 802546c:	462a      	mov	r2, r5
 802546e:	4649      	mov	r1, r9
 8025470:	4640      	mov	r0, r8
 8025472:	47d0      	blx	sl
 8025474:	3001      	adds	r0, #1
 8025476:	d0ab      	beq.n	80253d0 <_printf_i+0x164>
 8025478:	6823      	ldr	r3, [r4, #0]
 802547a:	079b      	lsls	r3, r3, #30
 802547c:	d413      	bmi.n	80254a6 <_printf_i+0x23a>
 802547e:	68e0      	ldr	r0, [r4, #12]
 8025480:	9b03      	ldr	r3, [sp, #12]
 8025482:	4298      	cmp	r0, r3
 8025484:	bfb8      	it	lt
 8025486:	4618      	movlt	r0, r3
 8025488:	e7a4      	b.n	80253d4 <_printf_i+0x168>
 802548a:	2301      	movs	r3, #1
 802548c:	4632      	mov	r2, r6
 802548e:	4649      	mov	r1, r9
 8025490:	4640      	mov	r0, r8
 8025492:	47d0      	blx	sl
 8025494:	3001      	adds	r0, #1
 8025496:	d09b      	beq.n	80253d0 <_printf_i+0x164>
 8025498:	3501      	adds	r5, #1
 802549a:	68e3      	ldr	r3, [r4, #12]
 802549c:	9903      	ldr	r1, [sp, #12]
 802549e:	1a5b      	subs	r3, r3, r1
 80254a0:	42ab      	cmp	r3, r5
 80254a2:	dcf2      	bgt.n	802548a <_printf_i+0x21e>
 80254a4:	e7eb      	b.n	802547e <_printf_i+0x212>
 80254a6:	2500      	movs	r5, #0
 80254a8:	f104 0619 	add.w	r6, r4, #25
 80254ac:	e7f5      	b.n	802549a <_printf_i+0x22e>
 80254ae:	bf00      	nop
 80254b0:	0802ab49 	.word	0x0802ab49
 80254b4:	0802ab5a 	.word	0x0802ab5a

080254b8 <cleanup_glue>:
 80254b8:	b538      	push	{r3, r4, r5, lr}
 80254ba:	460c      	mov	r4, r1
 80254bc:	6809      	ldr	r1, [r1, #0]
 80254be:	4605      	mov	r5, r0
 80254c0:	b109      	cbz	r1, 80254c6 <cleanup_glue+0xe>
 80254c2:	f7ff fff9 	bl	80254b8 <cleanup_glue>
 80254c6:	4621      	mov	r1, r4
 80254c8:	4628      	mov	r0, r5
 80254ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80254ce:	f7ff bc25 	b.w	8024d1c <_free_r>
	...

080254d4 <_reclaim_reent>:
 80254d4:	4b2c      	ldr	r3, [pc, #176]	; (8025588 <_reclaim_reent+0xb4>)
 80254d6:	681b      	ldr	r3, [r3, #0]
 80254d8:	4283      	cmp	r3, r0
 80254da:	b570      	push	{r4, r5, r6, lr}
 80254dc:	4604      	mov	r4, r0
 80254de:	d051      	beq.n	8025584 <_reclaim_reent+0xb0>
 80254e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80254e2:	b143      	cbz	r3, 80254f6 <_reclaim_reent+0x22>
 80254e4:	68db      	ldr	r3, [r3, #12]
 80254e6:	2b00      	cmp	r3, #0
 80254e8:	d14a      	bne.n	8025580 <_reclaim_reent+0xac>
 80254ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80254ec:	6819      	ldr	r1, [r3, #0]
 80254ee:	b111      	cbz	r1, 80254f6 <_reclaim_reent+0x22>
 80254f0:	4620      	mov	r0, r4
 80254f2:	f7ff fc13 	bl	8024d1c <_free_r>
 80254f6:	6961      	ldr	r1, [r4, #20]
 80254f8:	b111      	cbz	r1, 8025500 <_reclaim_reent+0x2c>
 80254fa:	4620      	mov	r0, r4
 80254fc:	f7ff fc0e 	bl	8024d1c <_free_r>
 8025500:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8025502:	b111      	cbz	r1, 802550a <_reclaim_reent+0x36>
 8025504:	4620      	mov	r0, r4
 8025506:	f7ff fc09 	bl	8024d1c <_free_r>
 802550a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802550c:	b111      	cbz	r1, 8025514 <_reclaim_reent+0x40>
 802550e:	4620      	mov	r0, r4
 8025510:	f7ff fc04 	bl	8024d1c <_free_r>
 8025514:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8025516:	b111      	cbz	r1, 802551e <_reclaim_reent+0x4a>
 8025518:	4620      	mov	r0, r4
 802551a:	f7ff fbff 	bl	8024d1c <_free_r>
 802551e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025520:	b111      	cbz	r1, 8025528 <_reclaim_reent+0x54>
 8025522:	4620      	mov	r0, r4
 8025524:	f7ff fbfa 	bl	8024d1c <_free_r>
 8025528:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802552a:	b111      	cbz	r1, 8025532 <_reclaim_reent+0x5e>
 802552c:	4620      	mov	r0, r4
 802552e:	f7ff fbf5 	bl	8024d1c <_free_r>
 8025532:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8025534:	b111      	cbz	r1, 802553c <_reclaim_reent+0x68>
 8025536:	4620      	mov	r0, r4
 8025538:	f7ff fbf0 	bl	8024d1c <_free_r>
 802553c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802553e:	b111      	cbz	r1, 8025546 <_reclaim_reent+0x72>
 8025540:	4620      	mov	r0, r4
 8025542:	f7ff fbeb 	bl	8024d1c <_free_r>
 8025546:	69a3      	ldr	r3, [r4, #24]
 8025548:	b1e3      	cbz	r3, 8025584 <_reclaim_reent+0xb0>
 802554a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802554c:	4620      	mov	r0, r4
 802554e:	4798      	blx	r3
 8025550:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8025552:	b1b9      	cbz	r1, 8025584 <_reclaim_reent+0xb0>
 8025554:	4620      	mov	r0, r4
 8025556:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802555a:	f7ff bfad 	b.w	80254b8 <cleanup_glue>
 802555e:	5949      	ldr	r1, [r1, r5]
 8025560:	b941      	cbnz	r1, 8025574 <_reclaim_reent+0xa0>
 8025562:	3504      	adds	r5, #4
 8025564:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8025566:	2d80      	cmp	r5, #128	; 0x80
 8025568:	68d9      	ldr	r1, [r3, #12]
 802556a:	d1f8      	bne.n	802555e <_reclaim_reent+0x8a>
 802556c:	4620      	mov	r0, r4
 802556e:	f7ff fbd5 	bl	8024d1c <_free_r>
 8025572:	e7ba      	b.n	80254ea <_reclaim_reent+0x16>
 8025574:	680e      	ldr	r6, [r1, #0]
 8025576:	4620      	mov	r0, r4
 8025578:	f7ff fbd0 	bl	8024d1c <_free_r>
 802557c:	4631      	mov	r1, r6
 802557e:	e7ef      	b.n	8025560 <_reclaim_reent+0x8c>
 8025580:	2500      	movs	r5, #0
 8025582:	e7ef      	b.n	8025564 <_reclaim_reent+0x90>
 8025584:	bd70      	pop	{r4, r5, r6, pc}
 8025586:	bf00      	nop
 8025588:	200000d0 	.word	0x200000d0

0802558c <_sbrk_r>:
 802558c:	b538      	push	{r3, r4, r5, lr}
 802558e:	4d06      	ldr	r5, [pc, #24]	; (80255a8 <_sbrk_r+0x1c>)
 8025590:	2300      	movs	r3, #0
 8025592:	4604      	mov	r4, r0
 8025594:	4608      	mov	r0, r1
 8025596:	602b      	str	r3, [r5, #0]
 8025598:	f7dd fcfe 	bl	8002f98 <_sbrk>
 802559c:	1c43      	adds	r3, r0, #1
 802559e:	d102      	bne.n	80255a6 <_sbrk_r+0x1a>
 80255a0:	682b      	ldr	r3, [r5, #0]
 80255a2:	b103      	cbz	r3, 80255a6 <_sbrk_r+0x1a>
 80255a4:	6023      	str	r3, [r4, #0]
 80255a6:	bd38      	pop	{r3, r4, r5, pc}
 80255a8:	20021208 	.word	0x20021208

080255ac <_raise_r>:
 80255ac:	291f      	cmp	r1, #31
 80255ae:	b538      	push	{r3, r4, r5, lr}
 80255b0:	4604      	mov	r4, r0
 80255b2:	460d      	mov	r5, r1
 80255b4:	d904      	bls.n	80255c0 <_raise_r+0x14>
 80255b6:	2316      	movs	r3, #22
 80255b8:	6003      	str	r3, [r0, #0]
 80255ba:	f04f 30ff 	mov.w	r0, #4294967295
 80255be:	bd38      	pop	{r3, r4, r5, pc}
 80255c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80255c2:	b112      	cbz	r2, 80255ca <_raise_r+0x1e>
 80255c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80255c8:	b94b      	cbnz	r3, 80255de <_raise_r+0x32>
 80255ca:	4620      	mov	r0, r4
 80255cc:	f000 f830 	bl	8025630 <_getpid_r>
 80255d0:	462a      	mov	r2, r5
 80255d2:	4601      	mov	r1, r0
 80255d4:	4620      	mov	r0, r4
 80255d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80255da:	f000 b817 	b.w	802560c <_kill_r>
 80255de:	2b01      	cmp	r3, #1
 80255e0:	d00a      	beq.n	80255f8 <_raise_r+0x4c>
 80255e2:	1c59      	adds	r1, r3, #1
 80255e4:	d103      	bne.n	80255ee <_raise_r+0x42>
 80255e6:	2316      	movs	r3, #22
 80255e8:	6003      	str	r3, [r0, #0]
 80255ea:	2001      	movs	r0, #1
 80255ec:	e7e7      	b.n	80255be <_raise_r+0x12>
 80255ee:	2400      	movs	r4, #0
 80255f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80255f4:	4628      	mov	r0, r5
 80255f6:	4798      	blx	r3
 80255f8:	2000      	movs	r0, #0
 80255fa:	e7e0      	b.n	80255be <_raise_r+0x12>

080255fc <raise>:
 80255fc:	4b02      	ldr	r3, [pc, #8]	; (8025608 <raise+0xc>)
 80255fe:	4601      	mov	r1, r0
 8025600:	6818      	ldr	r0, [r3, #0]
 8025602:	f7ff bfd3 	b.w	80255ac <_raise_r>
 8025606:	bf00      	nop
 8025608:	200000d0 	.word	0x200000d0

0802560c <_kill_r>:
 802560c:	b538      	push	{r3, r4, r5, lr}
 802560e:	4d07      	ldr	r5, [pc, #28]	; (802562c <_kill_r+0x20>)
 8025610:	2300      	movs	r3, #0
 8025612:	4604      	mov	r4, r0
 8025614:	4608      	mov	r0, r1
 8025616:	4611      	mov	r1, r2
 8025618:	602b      	str	r3, [r5, #0]
 802561a:	f7dd fc87 	bl	8002f2c <_kill>
 802561e:	1c43      	adds	r3, r0, #1
 8025620:	d102      	bne.n	8025628 <_kill_r+0x1c>
 8025622:	682b      	ldr	r3, [r5, #0]
 8025624:	b103      	cbz	r3, 8025628 <_kill_r+0x1c>
 8025626:	6023      	str	r3, [r4, #0]
 8025628:	bd38      	pop	{r3, r4, r5, pc}
 802562a:	bf00      	nop
 802562c:	20021208 	.word	0x20021208

08025630 <_getpid_r>:
 8025630:	f7dd bc7a 	b.w	8002f28 <_getpid>

08025634 <__sread>:
 8025634:	b510      	push	{r4, lr}
 8025636:	460c      	mov	r4, r1
 8025638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802563c:	f000 fb54 	bl	8025ce8 <_read_r>
 8025640:	2800      	cmp	r0, #0
 8025642:	bfab      	itete	ge
 8025644:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8025646:	89a3      	ldrhlt	r3, [r4, #12]
 8025648:	181b      	addge	r3, r3, r0
 802564a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802564e:	bfac      	ite	ge
 8025650:	6563      	strge	r3, [r4, #84]	; 0x54
 8025652:	81a3      	strhlt	r3, [r4, #12]
 8025654:	bd10      	pop	{r4, pc}

08025656 <__swrite>:
 8025656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802565a:	461f      	mov	r7, r3
 802565c:	898b      	ldrh	r3, [r1, #12]
 802565e:	05db      	lsls	r3, r3, #23
 8025660:	4605      	mov	r5, r0
 8025662:	460c      	mov	r4, r1
 8025664:	4616      	mov	r6, r2
 8025666:	d505      	bpl.n	8025674 <__swrite+0x1e>
 8025668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802566c:	2302      	movs	r3, #2
 802566e:	2200      	movs	r2, #0
 8025670:	f000 fab6 	bl	8025be0 <_lseek_r>
 8025674:	89a3      	ldrh	r3, [r4, #12]
 8025676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802567a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802567e:	81a3      	strh	r3, [r4, #12]
 8025680:	4632      	mov	r2, r6
 8025682:	463b      	mov	r3, r7
 8025684:	4628      	mov	r0, r5
 8025686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802568a:	f000 b8f5 	b.w	8025878 <_write_r>

0802568e <__sseek>:
 802568e:	b510      	push	{r4, lr}
 8025690:	460c      	mov	r4, r1
 8025692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025696:	f000 faa3 	bl	8025be0 <_lseek_r>
 802569a:	1c43      	adds	r3, r0, #1
 802569c:	89a3      	ldrh	r3, [r4, #12]
 802569e:	bf15      	itete	ne
 80256a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80256a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80256a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80256aa:	81a3      	strheq	r3, [r4, #12]
 80256ac:	bf18      	it	ne
 80256ae:	81a3      	strhne	r3, [r4, #12]
 80256b0:	bd10      	pop	{r4, pc}

080256b2 <__sclose>:
 80256b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80256b6:	f000 b9c1 	b.w	8025a3c <_close_r>
	...

080256bc <_strtol_l.constprop.0>:
 80256bc:	2b01      	cmp	r3, #1
 80256be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80256c2:	d001      	beq.n	80256c8 <_strtol_l.constprop.0+0xc>
 80256c4:	2b24      	cmp	r3, #36	; 0x24
 80256c6:	d906      	bls.n	80256d6 <_strtol_l.constprop.0+0x1a>
 80256c8:	f7ff f9cc 	bl	8024a64 <__errno>
 80256cc:	2316      	movs	r3, #22
 80256ce:	6003      	str	r3, [r0, #0]
 80256d0:	2000      	movs	r0, #0
 80256d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80256d6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80257bc <_strtol_l.constprop.0+0x100>
 80256da:	460d      	mov	r5, r1
 80256dc:	462e      	mov	r6, r5
 80256de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80256e2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80256e6:	f017 0708 	ands.w	r7, r7, #8
 80256ea:	d1f7      	bne.n	80256dc <_strtol_l.constprop.0+0x20>
 80256ec:	2c2d      	cmp	r4, #45	; 0x2d
 80256ee:	d132      	bne.n	8025756 <_strtol_l.constprop.0+0x9a>
 80256f0:	782c      	ldrb	r4, [r5, #0]
 80256f2:	2701      	movs	r7, #1
 80256f4:	1cb5      	adds	r5, r6, #2
 80256f6:	2b00      	cmp	r3, #0
 80256f8:	d05b      	beq.n	80257b2 <_strtol_l.constprop.0+0xf6>
 80256fa:	2b10      	cmp	r3, #16
 80256fc:	d109      	bne.n	8025712 <_strtol_l.constprop.0+0x56>
 80256fe:	2c30      	cmp	r4, #48	; 0x30
 8025700:	d107      	bne.n	8025712 <_strtol_l.constprop.0+0x56>
 8025702:	782c      	ldrb	r4, [r5, #0]
 8025704:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8025708:	2c58      	cmp	r4, #88	; 0x58
 802570a:	d14d      	bne.n	80257a8 <_strtol_l.constprop.0+0xec>
 802570c:	786c      	ldrb	r4, [r5, #1]
 802570e:	2310      	movs	r3, #16
 8025710:	3502      	adds	r5, #2
 8025712:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8025716:	f108 38ff 	add.w	r8, r8, #4294967295
 802571a:	f04f 0c00 	mov.w	ip, #0
 802571e:	fbb8 f9f3 	udiv	r9, r8, r3
 8025722:	4666      	mov	r6, ip
 8025724:	fb03 8a19 	mls	sl, r3, r9, r8
 8025728:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 802572c:	f1be 0f09 	cmp.w	lr, #9
 8025730:	d816      	bhi.n	8025760 <_strtol_l.constprop.0+0xa4>
 8025732:	4674      	mov	r4, lr
 8025734:	42a3      	cmp	r3, r4
 8025736:	dd24      	ble.n	8025782 <_strtol_l.constprop.0+0xc6>
 8025738:	f1bc 0f00 	cmp.w	ip, #0
 802573c:	db1e      	blt.n	802577c <_strtol_l.constprop.0+0xc0>
 802573e:	45b1      	cmp	r9, r6
 8025740:	d31c      	bcc.n	802577c <_strtol_l.constprop.0+0xc0>
 8025742:	d101      	bne.n	8025748 <_strtol_l.constprop.0+0x8c>
 8025744:	45a2      	cmp	sl, r4
 8025746:	db19      	blt.n	802577c <_strtol_l.constprop.0+0xc0>
 8025748:	fb06 4603 	mla	r6, r6, r3, r4
 802574c:	f04f 0c01 	mov.w	ip, #1
 8025750:	f815 4b01 	ldrb.w	r4, [r5], #1
 8025754:	e7e8      	b.n	8025728 <_strtol_l.constprop.0+0x6c>
 8025756:	2c2b      	cmp	r4, #43	; 0x2b
 8025758:	bf04      	itt	eq
 802575a:	782c      	ldrbeq	r4, [r5, #0]
 802575c:	1cb5      	addeq	r5, r6, #2
 802575e:	e7ca      	b.n	80256f6 <_strtol_l.constprop.0+0x3a>
 8025760:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8025764:	f1be 0f19 	cmp.w	lr, #25
 8025768:	d801      	bhi.n	802576e <_strtol_l.constprop.0+0xb2>
 802576a:	3c37      	subs	r4, #55	; 0x37
 802576c:	e7e2      	b.n	8025734 <_strtol_l.constprop.0+0x78>
 802576e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8025772:	f1be 0f19 	cmp.w	lr, #25
 8025776:	d804      	bhi.n	8025782 <_strtol_l.constprop.0+0xc6>
 8025778:	3c57      	subs	r4, #87	; 0x57
 802577a:	e7db      	b.n	8025734 <_strtol_l.constprop.0+0x78>
 802577c:	f04f 3cff 	mov.w	ip, #4294967295
 8025780:	e7e6      	b.n	8025750 <_strtol_l.constprop.0+0x94>
 8025782:	f1bc 0f00 	cmp.w	ip, #0
 8025786:	da05      	bge.n	8025794 <_strtol_l.constprop.0+0xd8>
 8025788:	2322      	movs	r3, #34	; 0x22
 802578a:	6003      	str	r3, [r0, #0]
 802578c:	4646      	mov	r6, r8
 802578e:	b942      	cbnz	r2, 80257a2 <_strtol_l.constprop.0+0xe6>
 8025790:	4630      	mov	r0, r6
 8025792:	e79e      	b.n	80256d2 <_strtol_l.constprop.0+0x16>
 8025794:	b107      	cbz	r7, 8025798 <_strtol_l.constprop.0+0xdc>
 8025796:	4276      	negs	r6, r6
 8025798:	2a00      	cmp	r2, #0
 802579a:	d0f9      	beq.n	8025790 <_strtol_l.constprop.0+0xd4>
 802579c:	f1bc 0f00 	cmp.w	ip, #0
 80257a0:	d000      	beq.n	80257a4 <_strtol_l.constprop.0+0xe8>
 80257a2:	1e69      	subs	r1, r5, #1
 80257a4:	6011      	str	r1, [r2, #0]
 80257a6:	e7f3      	b.n	8025790 <_strtol_l.constprop.0+0xd4>
 80257a8:	2430      	movs	r4, #48	; 0x30
 80257aa:	2b00      	cmp	r3, #0
 80257ac:	d1b1      	bne.n	8025712 <_strtol_l.constprop.0+0x56>
 80257ae:	2308      	movs	r3, #8
 80257b0:	e7af      	b.n	8025712 <_strtol_l.constprop.0+0x56>
 80257b2:	2c30      	cmp	r4, #48	; 0x30
 80257b4:	d0a5      	beq.n	8025702 <_strtol_l.constprop.0+0x46>
 80257b6:	230a      	movs	r3, #10
 80257b8:	e7ab      	b.n	8025712 <_strtol_l.constprop.0+0x56>
 80257ba:	bf00      	nop
 80257bc:	0802ab71 	.word	0x0802ab71

080257c0 <strtol>:
 80257c0:	4613      	mov	r3, r2
 80257c2:	460a      	mov	r2, r1
 80257c4:	4601      	mov	r1, r0
 80257c6:	4802      	ldr	r0, [pc, #8]	; (80257d0 <strtol+0x10>)
 80257c8:	6800      	ldr	r0, [r0, #0]
 80257ca:	f7ff bf77 	b.w	80256bc <_strtol_l.constprop.0>
 80257ce:	bf00      	nop
 80257d0:	200000d0 	.word	0x200000d0

080257d4 <__swbuf_r>:
 80257d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80257d6:	460e      	mov	r6, r1
 80257d8:	4614      	mov	r4, r2
 80257da:	4605      	mov	r5, r0
 80257dc:	b118      	cbz	r0, 80257e6 <__swbuf_r+0x12>
 80257de:	6983      	ldr	r3, [r0, #24]
 80257e0:	b90b      	cbnz	r3, 80257e6 <__swbuf_r+0x12>
 80257e2:	f7ff f99d 	bl	8024b20 <__sinit>
 80257e6:	4b21      	ldr	r3, [pc, #132]	; (802586c <__swbuf_r+0x98>)
 80257e8:	429c      	cmp	r4, r3
 80257ea:	d12b      	bne.n	8025844 <__swbuf_r+0x70>
 80257ec:	686c      	ldr	r4, [r5, #4]
 80257ee:	69a3      	ldr	r3, [r4, #24]
 80257f0:	60a3      	str	r3, [r4, #8]
 80257f2:	89a3      	ldrh	r3, [r4, #12]
 80257f4:	071a      	lsls	r2, r3, #28
 80257f6:	d52f      	bpl.n	8025858 <__swbuf_r+0x84>
 80257f8:	6923      	ldr	r3, [r4, #16]
 80257fa:	b36b      	cbz	r3, 8025858 <__swbuf_r+0x84>
 80257fc:	6923      	ldr	r3, [r4, #16]
 80257fe:	6820      	ldr	r0, [r4, #0]
 8025800:	1ac0      	subs	r0, r0, r3
 8025802:	6963      	ldr	r3, [r4, #20]
 8025804:	b2f6      	uxtb	r6, r6
 8025806:	4283      	cmp	r3, r0
 8025808:	4637      	mov	r7, r6
 802580a:	dc04      	bgt.n	8025816 <__swbuf_r+0x42>
 802580c:	4621      	mov	r1, r4
 802580e:	4628      	mov	r0, r5
 8025810:	f000 f9aa 	bl	8025b68 <_fflush_r>
 8025814:	bb30      	cbnz	r0, 8025864 <__swbuf_r+0x90>
 8025816:	68a3      	ldr	r3, [r4, #8]
 8025818:	3b01      	subs	r3, #1
 802581a:	60a3      	str	r3, [r4, #8]
 802581c:	6823      	ldr	r3, [r4, #0]
 802581e:	1c5a      	adds	r2, r3, #1
 8025820:	6022      	str	r2, [r4, #0]
 8025822:	701e      	strb	r6, [r3, #0]
 8025824:	6963      	ldr	r3, [r4, #20]
 8025826:	3001      	adds	r0, #1
 8025828:	4283      	cmp	r3, r0
 802582a:	d004      	beq.n	8025836 <__swbuf_r+0x62>
 802582c:	89a3      	ldrh	r3, [r4, #12]
 802582e:	07db      	lsls	r3, r3, #31
 8025830:	d506      	bpl.n	8025840 <__swbuf_r+0x6c>
 8025832:	2e0a      	cmp	r6, #10
 8025834:	d104      	bne.n	8025840 <__swbuf_r+0x6c>
 8025836:	4621      	mov	r1, r4
 8025838:	4628      	mov	r0, r5
 802583a:	f000 f995 	bl	8025b68 <_fflush_r>
 802583e:	b988      	cbnz	r0, 8025864 <__swbuf_r+0x90>
 8025840:	4638      	mov	r0, r7
 8025842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025844:	4b0a      	ldr	r3, [pc, #40]	; (8025870 <__swbuf_r+0x9c>)
 8025846:	429c      	cmp	r4, r3
 8025848:	d101      	bne.n	802584e <__swbuf_r+0x7a>
 802584a:	68ac      	ldr	r4, [r5, #8]
 802584c:	e7cf      	b.n	80257ee <__swbuf_r+0x1a>
 802584e:	4b09      	ldr	r3, [pc, #36]	; (8025874 <__swbuf_r+0xa0>)
 8025850:	429c      	cmp	r4, r3
 8025852:	bf08      	it	eq
 8025854:	68ec      	ldreq	r4, [r5, #12]
 8025856:	e7ca      	b.n	80257ee <__swbuf_r+0x1a>
 8025858:	4621      	mov	r1, r4
 802585a:	4628      	mov	r0, r5
 802585c:	f000 f81e 	bl	802589c <__swsetup_r>
 8025860:	2800      	cmp	r0, #0
 8025862:	d0cb      	beq.n	80257fc <__swbuf_r+0x28>
 8025864:	f04f 37ff 	mov.w	r7, #4294967295
 8025868:	e7ea      	b.n	8025840 <__swbuf_r+0x6c>
 802586a:	bf00      	nop
 802586c:	0802aaf4 	.word	0x0802aaf4
 8025870:	0802ab14 	.word	0x0802ab14
 8025874:	0802aad4 	.word	0x0802aad4

08025878 <_write_r>:
 8025878:	b538      	push	{r3, r4, r5, lr}
 802587a:	4d07      	ldr	r5, [pc, #28]	; (8025898 <_write_r+0x20>)
 802587c:	4604      	mov	r4, r0
 802587e:	4608      	mov	r0, r1
 8025880:	4611      	mov	r1, r2
 8025882:	2200      	movs	r2, #0
 8025884:	602a      	str	r2, [r5, #0]
 8025886:	461a      	mov	r2, r3
 8025888:	f7dd fb6c 	bl	8002f64 <_write>
 802588c:	1c43      	adds	r3, r0, #1
 802588e:	d102      	bne.n	8025896 <_write_r+0x1e>
 8025890:	682b      	ldr	r3, [r5, #0]
 8025892:	b103      	cbz	r3, 8025896 <_write_r+0x1e>
 8025894:	6023      	str	r3, [r4, #0]
 8025896:	bd38      	pop	{r3, r4, r5, pc}
 8025898:	20021208 	.word	0x20021208

0802589c <__swsetup_r>:
 802589c:	4b32      	ldr	r3, [pc, #200]	; (8025968 <__swsetup_r+0xcc>)
 802589e:	b570      	push	{r4, r5, r6, lr}
 80258a0:	681d      	ldr	r5, [r3, #0]
 80258a2:	4606      	mov	r6, r0
 80258a4:	460c      	mov	r4, r1
 80258a6:	b125      	cbz	r5, 80258b2 <__swsetup_r+0x16>
 80258a8:	69ab      	ldr	r3, [r5, #24]
 80258aa:	b913      	cbnz	r3, 80258b2 <__swsetup_r+0x16>
 80258ac:	4628      	mov	r0, r5
 80258ae:	f7ff f937 	bl	8024b20 <__sinit>
 80258b2:	4b2e      	ldr	r3, [pc, #184]	; (802596c <__swsetup_r+0xd0>)
 80258b4:	429c      	cmp	r4, r3
 80258b6:	d10f      	bne.n	80258d8 <__swsetup_r+0x3c>
 80258b8:	686c      	ldr	r4, [r5, #4]
 80258ba:	89a3      	ldrh	r3, [r4, #12]
 80258bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80258c0:	0719      	lsls	r1, r3, #28
 80258c2:	d42c      	bmi.n	802591e <__swsetup_r+0x82>
 80258c4:	06dd      	lsls	r5, r3, #27
 80258c6:	d411      	bmi.n	80258ec <__swsetup_r+0x50>
 80258c8:	2309      	movs	r3, #9
 80258ca:	6033      	str	r3, [r6, #0]
 80258cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80258d0:	81a3      	strh	r3, [r4, #12]
 80258d2:	f04f 30ff 	mov.w	r0, #4294967295
 80258d6:	e03e      	b.n	8025956 <__swsetup_r+0xba>
 80258d8:	4b25      	ldr	r3, [pc, #148]	; (8025970 <__swsetup_r+0xd4>)
 80258da:	429c      	cmp	r4, r3
 80258dc:	d101      	bne.n	80258e2 <__swsetup_r+0x46>
 80258de:	68ac      	ldr	r4, [r5, #8]
 80258e0:	e7eb      	b.n	80258ba <__swsetup_r+0x1e>
 80258e2:	4b24      	ldr	r3, [pc, #144]	; (8025974 <__swsetup_r+0xd8>)
 80258e4:	429c      	cmp	r4, r3
 80258e6:	bf08      	it	eq
 80258e8:	68ec      	ldreq	r4, [r5, #12]
 80258ea:	e7e6      	b.n	80258ba <__swsetup_r+0x1e>
 80258ec:	0758      	lsls	r0, r3, #29
 80258ee:	d512      	bpl.n	8025916 <__swsetup_r+0x7a>
 80258f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80258f2:	b141      	cbz	r1, 8025906 <__swsetup_r+0x6a>
 80258f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80258f8:	4299      	cmp	r1, r3
 80258fa:	d002      	beq.n	8025902 <__swsetup_r+0x66>
 80258fc:	4630      	mov	r0, r6
 80258fe:	f7ff fa0d 	bl	8024d1c <_free_r>
 8025902:	2300      	movs	r3, #0
 8025904:	6363      	str	r3, [r4, #52]	; 0x34
 8025906:	89a3      	ldrh	r3, [r4, #12]
 8025908:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802590c:	81a3      	strh	r3, [r4, #12]
 802590e:	2300      	movs	r3, #0
 8025910:	6063      	str	r3, [r4, #4]
 8025912:	6923      	ldr	r3, [r4, #16]
 8025914:	6023      	str	r3, [r4, #0]
 8025916:	89a3      	ldrh	r3, [r4, #12]
 8025918:	f043 0308 	orr.w	r3, r3, #8
 802591c:	81a3      	strh	r3, [r4, #12]
 802591e:	6923      	ldr	r3, [r4, #16]
 8025920:	b94b      	cbnz	r3, 8025936 <__swsetup_r+0x9a>
 8025922:	89a3      	ldrh	r3, [r4, #12]
 8025924:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8025928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802592c:	d003      	beq.n	8025936 <__swsetup_r+0x9a>
 802592e:	4621      	mov	r1, r4
 8025930:	4630      	mov	r0, r6
 8025932:	f000 f98d 	bl	8025c50 <__smakebuf_r>
 8025936:	89a0      	ldrh	r0, [r4, #12]
 8025938:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802593c:	f010 0301 	ands.w	r3, r0, #1
 8025940:	d00a      	beq.n	8025958 <__swsetup_r+0xbc>
 8025942:	2300      	movs	r3, #0
 8025944:	60a3      	str	r3, [r4, #8]
 8025946:	6963      	ldr	r3, [r4, #20]
 8025948:	425b      	negs	r3, r3
 802594a:	61a3      	str	r3, [r4, #24]
 802594c:	6923      	ldr	r3, [r4, #16]
 802594e:	b943      	cbnz	r3, 8025962 <__swsetup_r+0xc6>
 8025950:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8025954:	d1ba      	bne.n	80258cc <__swsetup_r+0x30>
 8025956:	bd70      	pop	{r4, r5, r6, pc}
 8025958:	0781      	lsls	r1, r0, #30
 802595a:	bf58      	it	pl
 802595c:	6963      	ldrpl	r3, [r4, #20]
 802595e:	60a3      	str	r3, [r4, #8]
 8025960:	e7f4      	b.n	802594c <__swsetup_r+0xb0>
 8025962:	2000      	movs	r0, #0
 8025964:	e7f7      	b.n	8025956 <__swsetup_r+0xba>
 8025966:	bf00      	nop
 8025968:	200000d0 	.word	0x200000d0
 802596c:	0802aaf4 	.word	0x0802aaf4
 8025970:	0802ab14 	.word	0x0802ab14
 8025974:	0802aad4 	.word	0x0802aad4

08025978 <__register_exitproc>:
 8025978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802597c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8025a38 <__register_exitproc+0xc0>
 8025980:	4606      	mov	r6, r0
 8025982:	f8d8 0000 	ldr.w	r0, [r8]
 8025986:	461f      	mov	r7, r3
 8025988:	460d      	mov	r5, r1
 802598a:	4691      	mov	r9, r2
 802598c:	f7ff f99d 	bl	8024cca <__retarget_lock_acquire_recursive>
 8025990:	4b25      	ldr	r3, [pc, #148]	; (8025a28 <__register_exitproc+0xb0>)
 8025992:	681c      	ldr	r4, [r3, #0]
 8025994:	b934      	cbnz	r4, 80259a4 <__register_exitproc+0x2c>
 8025996:	4c25      	ldr	r4, [pc, #148]	; (8025a2c <__register_exitproc+0xb4>)
 8025998:	601c      	str	r4, [r3, #0]
 802599a:	4b25      	ldr	r3, [pc, #148]	; (8025a30 <__register_exitproc+0xb8>)
 802599c:	b113      	cbz	r3, 80259a4 <__register_exitproc+0x2c>
 802599e:	681b      	ldr	r3, [r3, #0]
 80259a0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80259a4:	6863      	ldr	r3, [r4, #4]
 80259a6:	2b1f      	cmp	r3, #31
 80259a8:	dd07      	ble.n	80259ba <__register_exitproc+0x42>
 80259aa:	f8d8 0000 	ldr.w	r0, [r8]
 80259ae:	f7ff f98e 	bl	8024cce <__retarget_lock_release_recursive>
 80259b2:	f04f 30ff 	mov.w	r0, #4294967295
 80259b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80259ba:	b34e      	cbz	r6, 8025a10 <__register_exitproc+0x98>
 80259bc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80259c0:	b988      	cbnz	r0, 80259e6 <__register_exitproc+0x6e>
 80259c2:	4b1c      	ldr	r3, [pc, #112]	; (8025a34 <__register_exitproc+0xbc>)
 80259c4:	b923      	cbnz	r3, 80259d0 <__register_exitproc+0x58>
 80259c6:	f8d8 0000 	ldr.w	r0, [r8]
 80259ca:	f7ff f97f 	bl	8024ccc <__retarget_lock_release>
 80259ce:	e7f0      	b.n	80259b2 <__register_exitproc+0x3a>
 80259d0:	f44f 7084 	mov.w	r0, #264	; 0x108
 80259d4:	f7ff f97c 	bl	8024cd0 <malloc>
 80259d8:	2800      	cmp	r0, #0
 80259da:	d0f4      	beq.n	80259c6 <__register_exitproc+0x4e>
 80259dc:	2300      	movs	r3, #0
 80259de:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80259e2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80259e6:	6863      	ldr	r3, [r4, #4]
 80259e8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80259ec:	2201      	movs	r2, #1
 80259ee:	409a      	lsls	r2, r3
 80259f0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80259f4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80259f8:	4313      	orrs	r3, r2
 80259fa:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80259fe:	2e02      	cmp	r6, #2
 8025a00:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8025a04:	bf02      	ittt	eq
 8025a06:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8025a0a:	4313      	orreq	r3, r2
 8025a0c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8025a10:	6863      	ldr	r3, [r4, #4]
 8025a12:	f8d8 0000 	ldr.w	r0, [r8]
 8025a16:	1c5a      	adds	r2, r3, #1
 8025a18:	3302      	adds	r3, #2
 8025a1a:	6062      	str	r2, [r4, #4]
 8025a1c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8025a20:	f7ff f955 	bl	8024cce <__retarget_lock_release_recursive>
 8025a24:	2000      	movs	r0, #0
 8025a26:	e7c6      	b.n	80259b6 <__register_exitproc+0x3e>
 8025a28:	20021298 	.word	0x20021298
 8025a2c:	2002120c 	.word	0x2002120c
 8025a30:	0802ab6c 	.word	0x0802ab6c
 8025a34:	08024cd1 	.word	0x08024cd1
 8025a38:	20000134 	.word	0x20000134

08025a3c <_close_r>:
 8025a3c:	b538      	push	{r3, r4, r5, lr}
 8025a3e:	4d06      	ldr	r5, [pc, #24]	; (8025a58 <_close_r+0x1c>)
 8025a40:	2300      	movs	r3, #0
 8025a42:	4604      	mov	r4, r0
 8025a44:	4608      	mov	r0, r1
 8025a46:	602b      	str	r3, [r5, #0]
 8025a48:	f7dd fa9a 	bl	8002f80 <_close>
 8025a4c:	1c43      	adds	r3, r0, #1
 8025a4e:	d102      	bne.n	8025a56 <_close_r+0x1a>
 8025a50:	682b      	ldr	r3, [r5, #0]
 8025a52:	b103      	cbz	r3, 8025a56 <_close_r+0x1a>
 8025a54:	6023      	str	r3, [r4, #0]
 8025a56:	bd38      	pop	{r3, r4, r5, pc}
 8025a58:	20021208 	.word	0x20021208

08025a5c <__sflush_r>:
 8025a5c:	898a      	ldrh	r2, [r1, #12]
 8025a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025a62:	4605      	mov	r5, r0
 8025a64:	0710      	lsls	r0, r2, #28
 8025a66:	460c      	mov	r4, r1
 8025a68:	d458      	bmi.n	8025b1c <__sflush_r+0xc0>
 8025a6a:	684b      	ldr	r3, [r1, #4]
 8025a6c:	2b00      	cmp	r3, #0
 8025a6e:	dc05      	bgt.n	8025a7c <__sflush_r+0x20>
 8025a70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8025a72:	2b00      	cmp	r3, #0
 8025a74:	dc02      	bgt.n	8025a7c <__sflush_r+0x20>
 8025a76:	2000      	movs	r0, #0
 8025a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025a7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025a7e:	2e00      	cmp	r6, #0
 8025a80:	d0f9      	beq.n	8025a76 <__sflush_r+0x1a>
 8025a82:	2300      	movs	r3, #0
 8025a84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025a88:	682f      	ldr	r7, [r5, #0]
 8025a8a:	602b      	str	r3, [r5, #0]
 8025a8c:	d032      	beq.n	8025af4 <__sflush_r+0x98>
 8025a8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025a90:	89a3      	ldrh	r3, [r4, #12]
 8025a92:	075a      	lsls	r2, r3, #29
 8025a94:	d505      	bpl.n	8025aa2 <__sflush_r+0x46>
 8025a96:	6863      	ldr	r3, [r4, #4]
 8025a98:	1ac0      	subs	r0, r0, r3
 8025a9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025a9c:	b10b      	cbz	r3, 8025aa2 <__sflush_r+0x46>
 8025a9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025aa0:	1ac0      	subs	r0, r0, r3
 8025aa2:	2300      	movs	r3, #0
 8025aa4:	4602      	mov	r2, r0
 8025aa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025aa8:	6a21      	ldr	r1, [r4, #32]
 8025aaa:	4628      	mov	r0, r5
 8025aac:	47b0      	blx	r6
 8025aae:	1c43      	adds	r3, r0, #1
 8025ab0:	89a3      	ldrh	r3, [r4, #12]
 8025ab2:	d106      	bne.n	8025ac2 <__sflush_r+0x66>
 8025ab4:	6829      	ldr	r1, [r5, #0]
 8025ab6:	291d      	cmp	r1, #29
 8025ab8:	d82c      	bhi.n	8025b14 <__sflush_r+0xb8>
 8025aba:	4a2a      	ldr	r2, [pc, #168]	; (8025b64 <__sflush_r+0x108>)
 8025abc:	40ca      	lsrs	r2, r1
 8025abe:	07d6      	lsls	r6, r2, #31
 8025ac0:	d528      	bpl.n	8025b14 <__sflush_r+0xb8>
 8025ac2:	2200      	movs	r2, #0
 8025ac4:	6062      	str	r2, [r4, #4]
 8025ac6:	04d9      	lsls	r1, r3, #19
 8025ac8:	6922      	ldr	r2, [r4, #16]
 8025aca:	6022      	str	r2, [r4, #0]
 8025acc:	d504      	bpl.n	8025ad8 <__sflush_r+0x7c>
 8025ace:	1c42      	adds	r2, r0, #1
 8025ad0:	d101      	bne.n	8025ad6 <__sflush_r+0x7a>
 8025ad2:	682b      	ldr	r3, [r5, #0]
 8025ad4:	b903      	cbnz	r3, 8025ad8 <__sflush_r+0x7c>
 8025ad6:	6560      	str	r0, [r4, #84]	; 0x54
 8025ad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025ada:	602f      	str	r7, [r5, #0]
 8025adc:	2900      	cmp	r1, #0
 8025ade:	d0ca      	beq.n	8025a76 <__sflush_r+0x1a>
 8025ae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025ae4:	4299      	cmp	r1, r3
 8025ae6:	d002      	beq.n	8025aee <__sflush_r+0x92>
 8025ae8:	4628      	mov	r0, r5
 8025aea:	f7ff f917 	bl	8024d1c <_free_r>
 8025aee:	2000      	movs	r0, #0
 8025af0:	6360      	str	r0, [r4, #52]	; 0x34
 8025af2:	e7c1      	b.n	8025a78 <__sflush_r+0x1c>
 8025af4:	6a21      	ldr	r1, [r4, #32]
 8025af6:	2301      	movs	r3, #1
 8025af8:	4628      	mov	r0, r5
 8025afa:	47b0      	blx	r6
 8025afc:	1c41      	adds	r1, r0, #1
 8025afe:	d1c7      	bne.n	8025a90 <__sflush_r+0x34>
 8025b00:	682b      	ldr	r3, [r5, #0]
 8025b02:	2b00      	cmp	r3, #0
 8025b04:	d0c4      	beq.n	8025a90 <__sflush_r+0x34>
 8025b06:	2b1d      	cmp	r3, #29
 8025b08:	d001      	beq.n	8025b0e <__sflush_r+0xb2>
 8025b0a:	2b16      	cmp	r3, #22
 8025b0c:	d101      	bne.n	8025b12 <__sflush_r+0xb6>
 8025b0e:	602f      	str	r7, [r5, #0]
 8025b10:	e7b1      	b.n	8025a76 <__sflush_r+0x1a>
 8025b12:	89a3      	ldrh	r3, [r4, #12]
 8025b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025b18:	81a3      	strh	r3, [r4, #12]
 8025b1a:	e7ad      	b.n	8025a78 <__sflush_r+0x1c>
 8025b1c:	690f      	ldr	r7, [r1, #16]
 8025b1e:	2f00      	cmp	r7, #0
 8025b20:	d0a9      	beq.n	8025a76 <__sflush_r+0x1a>
 8025b22:	0793      	lsls	r3, r2, #30
 8025b24:	680e      	ldr	r6, [r1, #0]
 8025b26:	bf08      	it	eq
 8025b28:	694b      	ldreq	r3, [r1, #20]
 8025b2a:	600f      	str	r7, [r1, #0]
 8025b2c:	bf18      	it	ne
 8025b2e:	2300      	movne	r3, #0
 8025b30:	eba6 0807 	sub.w	r8, r6, r7
 8025b34:	608b      	str	r3, [r1, #8]
 8025b36:	f1b8 0f00 	cmp.w	r8, #0
 8025b3a:	dd9c      	ble.n	8025a76 <__sflush_r+0x1a>
 8025b3c:	6a21      	ldr	r1, [r4, #32]
 8025b3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025b40:	4643      	mov	r3, r8
 8025b42:	463a      	mov	r2, r7
 8025b44:	4628      	mov	r0, r5
 8025b46:	47b0      	blx	r6
 8025b48:	2800      	cmp	r0, #0
 8025b4a:	dc06      	bgt.n	8025b5a <__sflush_r+0xfe>
 8025b4c:	89a3      	ldrh	r3, [r4, #12]
 8025b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025b52:	81a3      	strh	r3, [r4, #12]
 8025b54:	f04f 30ff 	mov.w	r0, #4294967295
 8025b58:	e78e      	b.n	8025a78 <__sflush_r+0x1c>
 8025b5a:	4407      	add	r7, r0
 8025b5c:	eba8 0800 	sub.w	r8, r8, r0
 8025b60:	e7e9      	b.n	8025b36 <__sflush_r+0xda>
 8025b62:	bf00      	nop
 8025b64:	20400001 	.word	0x20400001

08025b68 <_fflush_r>:
 8025b68:	b538      	push	{r3, r4, r5, lr}
 8025b6a:	690b      	ldr	r3, [r1, #16]
 8025b6c:	4605      	mov	r5, r0
 8025b6e:	460c      	mov	r4, r1
 8025b70:	b913      	cbnz	r3, 8025b78 <_fflush_r+0x10>
 8025b72:	2500      	movs	r5, #0
 8025b74:	4628      	mov	r0, r5
 8025b76:	bd38      	pop	{r3, r4, r5, pc}
 8025b78:	b118      	cbz	r0, 8025b82 <_fflush_r+0x1a>
 8025b7a:	6983      	ldr	r3, [r0, #24]
 8025b7c:	b90b      	cbnz	r3, 8025b82 <_fflush_r+0x1a>
 8025b7e:	f7fe ffcf 	bl	8024b20 <__sinit>
 8025b82:	4b14      	ldr	r3, [pc, #80]	; (8025bd4 <_fflush_r+0x6c>)
 8025b84:	429c      	cmp	r4, r3
 8025b86:	d11b      	bne.n	8025bc0 <_fflush_r+0x58>
 8025b88:	686c      	ldr	r4, [r5, #4]
 8025b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025b8e:	2b00      	cmp	r3, #0
 8025b90:	d0ef      	beq.n	8025b72 <_fflush_r+0xa>
 8025b92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8025b94:	07d0      	lsls	r0, r2, #31
 8025b96:	d404      	bmi.n	8025ba2 <_fflush_r+0x3a>
 8025b98:	0599      	lsls	r1, r3, #22
 8025b9a:	d402      	bmi.n	8025ba2 <_fflush_r+0x3a>
 8025b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025b9e:	f7ff f894 	bl	8024cca <__retarget_lock_acquire_recursive>
 8025ba2:	4628      	mov	r0, r5
 8025ba4:	4621      	mov	r1, r4
 8025ba6:	f7ff ff59 	bl	8025a5c <__sflush_r>
 8025baa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025bac:	07da      	lsls	r2, r3, #31
 8025bae:	4605      	mov	r5, r0
 8025bb0:	d4e0      	bmi.n	8025b74 <_fflush_r+0xc>
 8025bb2:	89a3      	ldrh	r3, [r4, #12]
 8025bb4:	059b      	lsls	r3, r3, #22
 8025bb6:	d4dd      	bmi.n	8025b74 <_fflush_r+0xc>
 8025bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025bba:	f7ff f888 	bl	8024cce <__retarget_lock_release_recursive>
 8025bbe:	e7d9      	b.n	8025b74 <_fflush_r+0xc>
 8025bc0:	4b05      	ldr	r3, [pc, #20]	; (8025bd8 <_fflush_r+0x70>)
 8025bc2:	429c      	cmp	r4, r3
 8025bc4:	d101      	bne.n	8025bca <_fflush_r+0x62>
 8025bc6:	68ac      	ldr	r4, [r5, #8]
 8025bc8:	e7df      	b.n	8025b8a <_fflush_r+0x22>
 8025bca:	4b04      	ldr	r3, [pc, #16]	; (8025bdc <_fflush_r+0x74>)
 8025bcc:	429c      	cmp	r4, r3
 8025bce:	bf08      	it	eq
 8025bd0:	68ec      	ldreq	r4, [r5, #12]
 8025bd2:	e7da      	b.n	8025b8a <_fflush_r+0x22>
 8025bd4:	0802aaf4 	.word	0x0802aaf4
 8025bd8:	0802ab14 	.word	0x0802ab14
 8025bdc:	0802aad4 	.word	0x0802aad4

08025be0 <_lseek_r>:
 8025be0:	b538      	push	{r3, r4, r5, lr}
 8025be2:	4d07      	ldr	r5, [pc, #28]	; (8025c00 <_lseek_r+0x20>)
 8025be4:	4604      	mov	r4, r0
 8025be6:	4608      	mov	r0, r1
 8025be8:	4611      	mov	r1, r2
 8025bea:	2200      	movs	r2, #0
 8025bec:	602a      	str	r2, [r5, #0]
 8025bee:	461a      	mov	r2, r3
 8025bf0:	f7dd f9d0 	bl	8002f94 <_lseek>
 8025bf4:	1c43      	adds	r3, r0, #1
 8025bf6:	d102      	bne.n	8025bfe <_lseek_r+0x1e>
 8025bf8:	682b      	ldr	r3, [r5, #0]
 8025bfa:	b103      	cbz	r3, 8025bfe <_lseek_r+0x1e>
 8025bfc:	6023      	str	r3, [r4, #0]
 8025bfe:	bd38      	pop	{r3, r4, r5, pc}
 8025c00:	20021208 	.word	0x20021208

08025c04 <__swhatbuf_r>:
 8025c04:	b570      	push	{r4, r5, r6, lr}
 8025c06:	460e      	mov	r6, r1
 8025c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025c0c:	2900      	cmp	r1, #0
 8025c0e:	b096      	sub	sp, #88	; 0x58
 8025c10:	4614      	mov	r4, r2
 8025c12:	461d      	mov	r5, r3
 8025c14:	da08      	bge.n	8025c28 <__swhatbuf_r+0x24>
 8025c16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8025c1a:	2200      	movs	r2, #0
 8025c1c:	602a      	str	r2, [r5, #0]
 8025c1e:	061a      	lsls	r2, r3, #24
 8025c20:	d410      	bmi.n	8025c44 <__swhatbuf_r+0x40>
 8025c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025c26:	e00e      	b.n	8025c46 <__swhatbuf_r+0x42>
 8025c28:	466a      	mov	r2, sp
 8025c2a:	f000 f86f 	bl	8025d0c <_fstat_r>
 8025c2e:	2800      	cmp	r0, #0
 8025c30:	dbf1      	blt.n	8025c16 <__swhatbuf_r+0x12>
 8025c32:	9a01      	ldr	r2, [sp, #4]
 8025c34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8025c38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8025c3c:	425a      	negs	r2, r3
 8025c3e:	415a      	adcs	r2, r3
 8025c40:	602a      	str	r2, [r5, #0]
 8025c42:	e7ee      	b.n	8025c22 <__swhatbuf_r+0x1e>
 8025c44:	2340      	movs	r3, #64	; 0x40
 8025c46:	2000      	movs	r0, #0
 8025c48:	6023      	str	r3, [r4, #0]
 8025c4a:	b016      	add	sp, #88	; 0x58
 8025c4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08025c50 <__smakebuf_r>:
 8025c50:	898b      	ldrh	r3, [r1, #12]
 8025c52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025c54:	079d      	lsls	r5, r3, #30
 8025c56:	4606      	mov	r6, r0
 8025c58:	460c      	mov	r4, r1
 8025c5a:	d507      	bpl.n	8025c6c <__smakebuf_r+0x1c>
 8025c5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8025c60:	6023      	str	r3, [r4, #0]
 8025c62:	6123      	str	r3, [r4, #16]
 8025c64:	2301      	movs	r3, #1
 8025c66:	6163      	str	r3, [r4, #20]
 8025c68:	b002      	add	sp, #8
 8025c6a:	bd70      	pop	{r4, r5, r6, pc}
 8025c6c:	ab01      	add	r3, sp, #4
 8025c6e:	466a      	mov	r2, sp
 8025c70:	f7ff ffc8 	bl	8025c04 <__swhatbuf_r>
 8025c74:	9900      	ldr	r1, [sp, #0]
 8025c76:	4605      	mov	r5, r0
 8025c78:	4630      	mov	r0, r6
 8025c7a:	f7ff f8bb 	bl	8024df4 <_malloc_r>
 8025c7e:	b948      	cbnz	r0, 8025c94 <__smakebuf_r+0x44>
 8025c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025c84:	059a      	lsls	r2, r3, #22
 8025c86:	d4ef      	bmi.n	8025c68 <__smakebuf_r+0x18>
 8025c88:	f023 0303 	bic.w	r3, r3, #3
 8025c8c:	f043 0302 	orr.w	r3, r3, #2
 8025c90:	81a3      	strh	r3, [r4, #12]
 8025c92:	e7e3      	b.n	8025c5c <__smakebuf_r+0xc>
 8025c94:	4b0d      	ldr	r3, [pc, #52]	; (8025ccc <__smakebuf_r+0x7c>)
 8025c96:	62b3      	str	r3, [r6, #40]	; 0x28
 8025c98:	89a3      	ldrh	r3, [r4, #12]
 8025c9a:	6020      	str	r0, [r4, #0]
 8025c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025ca0:	81a3      	strh	r3, [r4, #12]
 8025ca2:	9b00      	ldr	r3, [sp, #0]
 8025ca4:	6163      	str	r3, [r4, #20]
 8025ca6:	9b01      	ldr	r3, [sp, #4]
 8025ca8:	6120      	str	r0, [r4, #16]
 8025caa:	b15b      	cbz	r3, 8025cc4 <__smakebuf_r+0x74>
 8025cac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025cb0:	4630      	mov	r0, r6
 8025cb2:	f000 f83d 	bl	8025d30 <_isatty_r>
 8025cb6:	b128      	cbz	r0, 8025cc4 <__smakebuf_r+0x74>
 8025cb8:	89a3      	ldrh	r3, [r4, #12]
 8025cba:	f023 0303 	bic.w	r3, r3, #3
 8025cbe:	f043 0301 	orr.w	r3, r3, #1
 8025cc2:	81a3      	strh	r3, [r4, #12]
 8025cc4:	89a0      	ldrh	r0, [r4, #12]
 8025cc6:	4305      	orrs	r5, r0
 8025cc8:	81a5      	strh	r5, [r4, #12]
 8025cca:	e7cd      	b.n	8025c68 <__smakebuf_r+0x18>
 8025ccc:	08024ab9 	.word	0x08024ab9

08025cd0 <__malloc_lock>:
 8025cd0:	4801      	ldr	r0, [pc, #4]	; (8025cd8 <__malloc_lock+0x8>)
 8025cd2:	f7fe bffa 	b.w	8024cca <__retarget_lock_acquire_recursive>
 8025cd6:	bf00      	nop
 8025cd8:	200210f5 	.word	0x200210f5

08025cdc <__malloc_unlock>:
 8025cdc:	4801      	ldr	r0, [pc, #4]	; (8025ce4 <__malloc_unlock+0x8>)
 8025cde:	f7fe bff6 	b.w	8024cce <__retarget_lock_release_recursive>
 8025ce2:	bf00      	nop
 8025ce4:	200210f5 	.word	0x200210f5

08025ce8 <_read_r>:
 8025ce8:	b538      	push	{r3, r4, r5, lr}
 8025cea:	4d07      	ldr	r5, [pc, #28]	; (8025d08 <_read_r+0x20>)
 8025cec:	4604      	mov	r4, r0
 8025cee:	4608      	mov	r0, r1
 8025cf0:	4611      	mov	r1, r2
 8025cf2:	2200      	movs	r2, #0
 8025cf4:	602a      	str	r2, [r5, #0]
 8025cf6:	461a      	mov	r2, r3
 8025cf8:	f7dd f926 	bl	8002f48 <_read>
 8025cfc:	1c43      	adds	r3, r0, #1
 8025cfe:	d102      	bne.n	8025d06 <_read_r+0x1e>
 8025d00:	682b      	ldr	r3, [r5, #0]
 8025d02:	b103      	cbz	r3, 8025d06 <_read_r+0x1e>
 8025d04:	6023      	str	r3, [r4, #0]
 8025d06:	bd38      	pop	{r3, r4, r5, pc}
 8025d08:	20021208 	.word	0x20021208

08025d0c <_fstat_r>:
 8025d0c:	b538      	push	{r3, r4, r5, lr}
 8025d0e:	4d07      	ldr	r5, [pc, #28]	; (8025d2c <_fstat_r+0x20>)
 8025d10:	2300      	movs	r3, #0
 8025d12:	4604      	mov	r4, r0
 8025d14:	4608      	mov	r0, r1
 8025d16:	4611      	mov	r1, r2
 8025d18:	602b      	str	r3, [r5, #0]
 8025d1a:	f7dd f934 	bl	8002f86 <_fstat>
 8025d1e:	1c43      	adds	r3, r0, #1
 8025d20:	d102      	bne.n	8025d28 <_fstat_r+0x1c>
 8025d22:	682b      	ldr	r3, [r5, #0]
 8025d24:	b103      	cbz	r3, 8025d28 <_fstat_r+0x1c>
 8025d26:	6023      	str	r3, [r4, #0]
 8025d28:	bd38      	pop	{r3, r4, r5, pc}
 8025d2a:	bf00      	nop
 8025d2c:	20021208 	.word	0x20021208

08025d30 <_isatty_r>:
 8025d30:	b538      	push	{r3, r4, r5, lr}
 8025d32:	4d06      	ldr	r5, [pc, #24]	; (8025d4c <_isatty_r+0x1c>)
 8025d34:	2300      	movs	r3, #0
 8025d36:	4604      	mov	r4, r0
 8025d38:	4608      	mov	r0, r1
 8025d3a:	602b      	str	r3, [r5, #0]
 8025d3c:	f7dd f928 	bl	8002f90 <_isatty>
 8025d40:	1c43      	adds	r3, r0, #1
 8025d42:	d102      	bne.n	8025d4a <_isatty_r+0x1a>
 8025d44:	682b      	ldr	r3, [r5, #0]
 8025d46:	b103      	cbz	r3, 8025d4a <_isatty_r+0x1a>
 8025d48:	6023      	str	r3, [r4, #0]
 8025d4a:	bd38      	pop	{r3, r4, r5, pc}
 8025d4c:	20021208 	.word	0x20021208

08025d50 <_init>:
 8025d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025d52:	bf00      	nop
 8025d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025d56:	bc08      	pop	{r3}
 8025d58:	469e      	mov	lr, r3
 8025d5a:	4770      	bx	lr

08025d5c <_fini>:
 8025d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025d5e:	bf00      	nop
 8025d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025d62:	bc08      	pop	{r3}
 8025d64:	469e      	mov	lr, r3
 8025d66:	4770      	bx	lr
